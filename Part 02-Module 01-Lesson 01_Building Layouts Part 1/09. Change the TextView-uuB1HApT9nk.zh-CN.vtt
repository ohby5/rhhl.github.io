WEBVTT
Kind: captions
Language: zh-CN

00:00:00.666 --> 00:00:03.933
我们第一次已经见过 TextView 代码

00:00:03.933 --> 00:00:05.899
但还是有点迷惑

00:00:05.899 --> 00:00:09.233
是的 我们需要一个地方来安置它

00:00:09.266 --> 00:00:10.533
这个地方是 IDE

00:00:10.533 --> 00:00:12.566
又是缩写

00:00:12.566 --> 00:00:13.733
回答一下它代表什么 Catherine？

00:00:13.733 --> 00:00:16.633
— 集成开发环境 — 对

00:00:16.633 --> 00:00:19.666
我们在课堂上会使用 Android Studio

00:00:19.666 --> 00:00:21.666
这是它的界面

00:00:21.666 --> 00:00:23.300
还是有点吓人

00:00:23.300 --> 00:00:24.866
我想我们应该需要些东西

00:00:24.866 --> 00:00:27.566
来帮助初学者快速上手

00:00:27.566 --> 00:00:30.800
我们正开发一些

00:00:30.800 --> 00:00:34.666
Android Studio 的培训软件

00:00:34.666 --> 00:00:37.566
按照计算机科学中传统缩写方案 我们称它为 XMLV

00:00:37.566 --> 00:00:39.333
是一款 XML 可视化工具

00:00:39.333 --> 00:00:41.266
你写了一些 XML ？

00:00:41.266 --> 00:00:41.966
看看输出

00:00:41.966 --> 00:00:44.566
写的越多 输出越多

00:00:44.566 --> 00:00:45.200
对

00:00:45.200 --> 00:00:46.166
我们开始使用它

00:00:46.166 --> 00:00:47.433
好

00:00:47.433 --> 00:00:51.600
由于 XML 可视化工具 是专为本课程设置的

00:00:51.600 --> 00:00:55.266
它不会提供 Android Studio 所有支持的功能

00:00:55.266 --> 00:00:57.533
但在本课最后的问题中

00:00:57.533 --> 00:01:01.233
我们会让你用 Android Studio 你不再需要这个网站

00:01:02.466 --> 00:01:05.666
如果你要跟着做 可以在讲师注释上找到链接

00:01:05.666 --> 00:01:08.100
对于这个代码 文字显示 Happy Birthday

00:01:08.100 --> 00:01:12.200
我们可以看到设备上显示 Happy Birthday

00:01:12.200 --> 00:01:15.333
现在我们将文本改成 Happy Birthday, Kunal

00:01:16.366 --> 00:01:19.566
然后在设备上放大预览

00:01:19.566 --> 00:01:21.266
现在显示的是 Happy Birthday, Kunal.

00:01:21.266 --> 00:01:24.266
如果改变宽和高会发生什么

00:01:24.266 --> 00:01:27.566
我取个随意值

00:01:27.566 --> 00:01:30.133
宽300 高500

00:01:30.133 --> 00:01:34.133
现在 在预览窗口 TextView 区域变大了

00:01:35.166 --> 00:01:39.233
然而 左上角的文本还是相同大小

00:01:40.766 --> 00:01:43.899
注意宽300和

00:01:43.899 --> 00:01:48.400
高500后面跟着的 dp

00:01:48.400 --> 00:01:51.000
这是一个测量单位 像厘米

00:01:51.000 --> 00:01:55.133
或毫米一样 我们用它来描述Android视图的大小

00:01:55.133 --> 00:01:57.433
以及视图间的距离

00:01:58.566 --> 00:02:01.466
单位 dp 表示独立密度像素

00:02:02.533 --> 00:02:04.833
我来解释一下为什么我们需要这个

00:02:04.833 --> 00:02:09.300
假设这些矩形代表不同的设备

00:02:09.300 --> 00:02:14.233
它们大小一样 但是分辨率不同

00:02:14.233 --> 00:02:18.966
这个是中等分辨率的设备 在屏幕上像素的数目中等

00:02:18.966 --> 00:02:22.566
高分辨率和极高分辨率的设备

00:02:22.566 --> 00:02:26.533
这里说的像素 意思是手机屏幕是由很多称之为像素的小方格构成

00:02:26.533 --> 00:02:30.300
它们根据你看的东西被点亮

00:02:30.300 --> 00:02:34.733
如果我定义一个视图的大小 例如 一个按键 高2像素

00:02:34.733 --> 00:02:38.633
宽2像素 它在中等分辨率的设备上看起来是这样的

00:02:39.666 --> 00:02:43.366
在高分辨率设备上 它也是2像素乘2像素

00:02:43.366 --> 00:02:44.866
但是看起来会小一些

00:02:44.866 --> 00:02:49.600
因为在手机上有更多的像素堆砌在一起

00:02:49.600 --> 00:02:52.666
在极高分辨率设备上 会有更多像素堆砌在一个空间

00:02:52.666 --> 00:02:56.733
按钮看起来更小

00:02:56.733 --> 00:02:58.466
我都无法用手指去点击它

00:02:58.466 --> 00:03:02.533
我必须用手指边缘或指甲去点击它

00:03:02.533 --> 00:03:05.000
因为我有极高分辨率设备

00:03:05.000 --> 00:03:06.800
不代表我有更小的手指

00:03:06.800 --> 00:03:10.600
我还是想点击屏幕上的按键

00:03:10.600 --> 00:03:12.733
这就是为什么我们需要 dp

00:03:12.733 --> 00:03:15.733
我可以定义按钮高 2dp 宽 2dp

00:03:15.733 --> 00:03:19.400
这就是在不同设备上它的样子

00:03:19.400 --> 00:03:21.800
它们有相同的大小

00:03:21.800 --> 00:03:26.899
但在Android内部它用不同数目的像素绘制

00:03:26.899 --> 00:03:29.366
你不用担心这些逻辑

00:03:29.366 --> 00:03:33.533
你只要记住你需要 dp 值来定义视图的大小

00:03:33.533 --> 00:03:38.400
设计应用时 我们建议所有可触摸的目标 如按键

00:03:38.400 --> 00:03:41.166
宽和高至少为 48dp

00:03:41.166 --> 00:03:44.100
注意是 48dp 不是 48像素

00:03:44.100 --> 00:03:47.933
否则在超高分辨率设备上 它看起来会特别的小

00:03:47.933 --> 00:03:50.733
对使用者来说 你的应用会好用好多

00:03:50.733 --> 00:03:53.500
有了这些知识 我想让你现在尝试一下

00:03:53.500 --> 00:03:55.200
现在修改 TextView 代码

00:03:55.200 --> 00:03:59.899
你会激动地写你的第一行 XML代码

00:03:59.899 --> 00:04:02.699
第一个尝试是改写 TextView 的文本

00:04:02.699 --> 00:04:04.699
然后尝试改写 TextView 的位置

00:04:05.966 --> 00:04:09.699
接着我想让你尝试制造一个错误 (哭脸)

00:04:09.699 --> 00:04:11.766
然后撤销 (笑脸)

