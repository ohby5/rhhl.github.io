WEBVTT
Kind: captions
Language: zh-CN

00:00:00.460 --> 00:00:03.030
你将注意到的一点是 要利用我们添加的

00:00:03.030 --> 00:00:07.880
这个新图片资源 ID 变量 我们需要修改该构造函数

00:00:07.880 --> 00:00:10.820
使这个新字段能初始化为特定的值

00:00:12.570 --> 00:00:17.310
初始化是指首先为变量设置一个值

00:00:17.310 --> 00:00:22.208
和这里初始化 mDefaultTranslation 及 mMiwokTranslation 变量

00:00:22.208 --> 00:00:24.435
类似

00:00:24.435 --> 00:00:27.225
同时注意 构造函数用于根据类变量定义

00:00:27.225 --> 00:00:30.535
创建对象实例

00:00:30.535 --> 00:00:32.674
那么该如何操作呢？

00:00:32.674 --> 00:00:36.270
我们应该修改现有的构造函数？还是直接添加一个构造函数

00:00:36.270 --> 00:00:40.220
这样有两个具有不同输入值的构造函数？

00:00:40.220 --> 00:00:43.900
要做出决策 正确的方法是看看应用中其他 Java 代码

00:00:43.900 --> 00:00:46.940
是如何利用该 Word 类的

00:00:46.940 --> 00:00:50.800
我们知道在这四个类别中 有三个类别都为每个单词

00:00:50.800 --> 00:00:52.240
提供了图片

00:00:52.240 --> 00:00:55.920
唯一例外是 Phrases 屏幕 该屏幕没有为每个短语

00:00:55.920 --> 00:00:57.300
提供图片

00:00:57.300 --> 00:01:00.750
因为 Phrases 屏幕没有使用任何图片

00:01:00.750 --> 00:01:04.885
我们可以让它使用我们当前具有两个输入值（英语和米沃克语翻译）的

00:01:04.885 --> 00:01:07.480
构造函数

00:01:07.480 --> 00:01:12.370
然后再创建另一个构造函数 具有三个输入值

00:01:12.370 --> 00:01:16.010
即两个字符串和一个图片资源 ID

00:01:16.010 --> 00:01:20.050
然后将该构造函数用于剩下的三个 Activity

00:01:20.050 --> 00:01:23.860
可以将具有不同的构造函数想象成以不同的方式

00:01:23.860 --> 00:01:25.750
来实现对象实例

00:01:25.750 --> 00:01:28.560
唯一的条件是每个构造函数

00:01:28.560 --> 00:01:31.660
必须具有不同的输入参数集

00:01:31.660 --> 00:01:35.510
例如 一个构造函数可以要求有两个输入值

00:01:35.510 --> 00:01:39.000
另一个构造函数可以要求有三个输入值

00:01:39.000 --> 00:01:42.090
即两个字符串和一个图片

00:01:42.090 --> 00:01:44.490
并注意数据类型

00:01:44.490 --> 00:01:48.755
如果有第三个构造函数也有三个输入

00:01:48.755 --> 00:01:52.315
但是有两个整数和一个图片

00:01:52.315 --> 00:01:56.545
那么这个构造函数就不同于这个具有三个输入值的构造函数

00:01:57.625 --> 00:02:00.588
还记得我们查看过关于 ArrayAdapter 的文档吗？

00:02:00.588 --> 00:02:04.115
在公共构造函数部分 我们发现可以调用多个

00:02:04.115 --> 00:02:07.324
公共构造函数来创建新的 ArrayAdapter 对象

00:02:08.370 --> 00:02:12.118
例如 我们可以使用这个构造函数

00:02:12.118 --> 00:02:17.068
传入一个 Context 一个资源布局 ID 和一系列的对象

00:02:17.068 --> 00:02:21.509
或者我们可以使用这个 ArrayAdapter 构造函数

00:02:21.509 --> 00:02:26.040
传入一个 Context 一个资源布局 ID 和一系列的对象

00:02:26.040 --> 00:02:28.230
所有这些构造函数都是可行的

00:02:28.230 --> 00:02:30.157
只是取决于我们具有哪些输入值

00:02:30.157 --> 00:02:33.370
它们依然可以让我们获得 ArrayAdapter 对象

00:02:34.650 --> 00:02:37.770
为了帮助我们更好地理解多个构造函数

00:02:37.770 --> 00:02:40.240
我们来看看如何声明它们

00:02:40.240 --> 00:02:42.250
我上网搜索下

00:02:42.250 --> 00:02:44.430
在搜索了 Java 中的多个构造函数后

00:02:44.430 --> 00:02:48.870
我打算看看这里的第三项教程链接

00:02:48.870 --> 00:02:53.840
这个教程有一个部分叫做“Constructor Overloading”

00:02:53.840 --> 00:02:57.960
和单个 Java 类具有多个构造函数是一回事

00:02:57.960 --> 00:02:59.396
点击该链接

00:02:59.396 --> 00:03:03.703
看看这里 有个很简单的示例

00:03:03.703 --> 00:03:07.500
这个类叫做 MyClass 有两个构造函数

00:03:08.750 --> 00:03:12.120
这两个构造函数的两行声明内容之间的

00:03:12.120 --> 00:03:14.050
唯一区别是它们的输入变量

00:03:15.268 --> 00:03:17.390
第一个没有任何输入值

00:03:17.390 --> 00:03:20.675
第二个有一个整数输入值 叫做 theNumber

00:03:21.710 --> 00:03:26.350
这个示例对我们来说很重要 因为类似地 我们希望一个构造函数

00:03:26.350 --> 00:03:30.460
具有一个图片资源 ID 变量 另一个构造函数没有

00:03:30.460 --> 00:03:33.780
在这个示例中 看起来第二个构造函数的行为

00:03:33.780 --> 00:03:36.510
与第一个的不同

00:03:36.510 --> 00:03:40.470
在这里它将 this.number 初始化为

00:03:40.470 --> 00:03:42.820
传入构造函数的 theNumber

00:03:42.820 --> 00:03:45.940
实际上这一流程和我们希望

00:03:45.940 --> 00:03:48.670
向我们的 Word 类中添加构造函数的流程非常相似

00:03:48.670 --> 00:03:51.240
我们需要写第二个构造函数声明

00:03:51.240 --> 00:03:53.680
它会传入另一个输入值

00:03:53.680 --> 00:03:57.293
在第二个构造函数里 它将和原始构造函数完成一样的工作

00:03:57.293 --> 00:04:01.490
并且会将我们的资源 ID 变量初始化为

00:04:01.490 --> 00:04:04.478
传入新构造函数的整数

00:04:04.478 --> 00:04:06.620
回到练习题

00:04:06.620 --> 00:04:07.755
对于第一项任务

00:04:07.755 --> 00:04:11.200
请你向 Word 类添加第二个构造函数

00:04:11.200 --> 00:04:12.520
注意

00:04:12.520 --> 00:04:16.589
我们使用 Word 构造函数来创建一个单词列表

00:04:16.589 --> 00:04:20.800
因此 我们需要更新每个类别 Activity 中的每行内容

00:04:20.800 --> 00:04:22.920
来调用正确的 Word 构造函数

00:04:23.960 --> 00:04:26.670
我回到 Android Studio 中展示下

00:04:27.830 --> 00:04:30.040
现在我位于应用的 NumbersActivity 中

00:04:30.040 --> 00:04:33.900
我们可以将列表中的第一个单词更改为包含图片

00:04:33.900 --> 00:04:37.780
方法是直接调用新的构造函数并传入三个输入值

00:04:37.780 --> 00:04:40.850
你可能注意到了 Android Studio 有个非常棒的自动填充功能

00:04:40.850 --> 00:04:44.270
系统会建议出你可能会输入的资源

00:04:44.270 --> 00:04:47.930
如果你想使用某个图片资源 但是记不起来文件的确切名称

00:04:47.930 --> 00:04:49.988
这时候就非常有帮助

00:04:49.988 --> 00:04:52.620
如果找到所需的资源 直接按 Enter

00:04:53.658 --> 00:04:56.620
现在你将在这里注意到 Android Studio 报错了

00:04:56.620 --> 00:04:59.420
这是因为我们还没有创建我们的新构造函数

00:04:59.420 --> 00:05:02.020
但是一旦创建完毕 这里就不会再报这个错误了

00:05:03.590 --> 00:05:06.660
注意应用外观不会有任何更改

00:05:06.660 --> 00:05:07.940
下一步才会出现更改

