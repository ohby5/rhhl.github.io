WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.701
O 1º passo é descobrir um jeito
do WordAdapter dizer

00:00:03.734 --> 00:00:05.901
se o objeto Word
tem imagem ou não.

00:00:05.934 --> 00:00:09.234
Vamos ver o arquivo WordAdapter
no Android Studio.

00:00:09.267 --> 00:00:11.133
Aqui está
a classe WordAdapter.

00:00:11.167 --> 00:00:17.133
Só executaremos estas linhas da ImageView
se houver uma imagem para o objeto Word.

00:00:17.167 --> 00:00:21.601
Para isso, devemos criar
e expor outro método na classe Word

00:00:21.634 --> 00:00:25.234
que nos dirá se a Word
na posição current tem uma imagem.

00:00:25.267 --> 00:00:27.868
Então vou até a classe Word
para definir o método.

00:00:27.901 --> 00:00:32.634
No final da classe Word,
vou criar um método public chamado hasImage

00:00:32.667 --> 00:00:35.267
e fazê-lo retornar
um valor booleano.

00:00:35.300 --> 00:00:38.567
Quero que ele retorne "true"
se o Word tiver uma imagem,

00:00:38.601 --> 00:00:40.701
e "false" se não tiver.

00:00:40.734 --> 00:00:45.734
É importante adicionar uns comentários
para ajudar os leitores a entenderem.

00:00:45.767 --> 00:00:47.000
Vou adicionar aqui.

00:00:47.033 --> 00:00:50.334
Como devemos determinar
se um Word tem imagem?

00:00:50.367 --> 00:00:52.634
Vamos rolar para o topo
da classe Word.

00:00:52.667 --> 00:00:57.767
Lembre-se de que temos esta variável,
a mImageResourceId, e podemos checá-la.

00:00:57.801 --> 00:01:01.167
Veremos que ela não nos ajuda
a prever que imagem está referenciada.

00:01:01.200 --> 00:01:05.934
Mas aqui só temos que usá-la
para checar se há ou não uma imagem válida.

00:01:05.968 --> 00:01:09.200
Este é um bom caso de uso
para valores constantes.

00:01:09.234 --> 00:01:14.234
Podemos criar uma constante que represente
o estado sem imagem. Vou escrevê-la aqui.

00:01:14.267 --> 00:01:17.300
Criei uma variável
chamada NO_IMAGE_PROVIDED.

00:01:17.334 --> 00:01:21.834
Está em maiúsculas porque é constante,
e cada palavra é separada por um sublinhado.

00:01:21.868 --> 00:01:25.033
Vou defini-la
como o valor constante -1.

00:01:25.067 --> 00:01:29.801
Escolhi -1 porque está fora do leque
de IDs de recurso válidas possíveis.

00:01:29.834 --> 00:01:33.400
Veja também que esta constante
é uma variável private,

00:01:33.434 --> 00:01:36.167
pois só precisamos usá-la
na classe Word.

00:01:36.200 --> 00:01:38.100
Com esta constante criada,

00:01:38.133 --> 00:01:42.501
vou fazer a variável começar
no estado sem imagem por padrão.

00:01:42.534 --> 00:01:45.701
Vou colocá-la igual
à constante NO_IMAGE aqui.

00:01:46.200 --> 00:01:51.434
Assim que esta variável mudar de estado,
saberemos que a palavra tem uma imagem.

00:01:51.467 --> 00:01:56.968
Se houver uma imagem neste construtor,
a variável mudará de estado,

00:01:57.000 --> 00:01:59.667
e saberemos
que o Word tem uma imagem.

00:01:59.701 --> 00:02:04.367
Se não houver imagem,
a ID de recurso de imagem ficará igual.

00:02:04.400 --> 00:02:07.501
Ou seja,
manterá o valor constante -1.

00:02:08.033 --> 00:02:12.000
Vamos voltar ao método hasImage,
que precisar completar.

00:02:12.033 --> 00:02:16.834
Neste método, só temos que checar
se a variável de imagem é igual ou não

00:02:16.868 --> 00:02:20.100
à constante NO_IMAGE_PROVIDED,
e ficará assim.

00:02:20.133 --> 00:02:24.901
A exclamação seguida pelo sinal de igual
significa "não é igual a".

00:02:24.934 --> 00:02:29.100
O resultado desta expressão
será true ou false,

00:02:29.133 --> 00:02:33.567
e aquele valor é retornado
como o valor de retorno deste método.

00:02:33.601 --> 00:02:37.701
Sei que a lógica pode ser confusa,
mas tente acompanhar.

00:02:37.734 --> 00:02:41.434
Se a variável de recurso de imagem
não for igual a -1,

00:02:41.467 --> 00:02:44.701
haverá uma imagem válida,
e o método deverá retornar true.

00:02:44.734 --> 00:02:50.434
Mas, se a variável de imagem for igual a -1,
não haverá imagem,

00:02:50.467 --> 00:02:52.267
e o método retornará false.

00:02:52.300 --> 00:02:55.267
Não queremos forçar a classe WordAdapter
a fazer a análise da qualidade,

00:02:55.300 --> 00:02:58.567
pois ela só liga
para o fato de ter ou não imagem.

00:02:58.601 --> 00:03:02.300
Ela não precisa saber dos mínimos detalhes
de como usamos uma constante,

00:03:02.334 --> 00:03:04.100
isso é com a classe Word.

00:03:04.133 --> 00:03:06.901
Por isso toda a lógica está
dentro da classe Word.

00:03:06.934 --> 00:03:09.000
Certo.
Bom trabalho até agora!

00:03:09.033 --> 00:03:13.067
Na classe Word,
expusemos o método public hasImage.

00:03:13.100 --> 00:03:15.567
Vamos voltar
para a classe WordAdapter

00:03:15.601 --> 00:03:18.767
e ver como podemos usar este método
no objeto Word.

00:03:18.801 --> 00:03:20.534
Veja esta linha de código.

00:03:20.567 --> 00:03:23.834
Podemos usar a lógica condicional,
como as instruções if/else,

00:03:23.868 --> 00:03:28.467
para que o código mude de comportamento
se o Word tiver ou não imagem.

00:03:28.501 --> 00:03:31.901
Esta instrução confere,
se a currentWord tem uma imagem,

00:03:31.934 --> 00:03:33.834
aí podemos repetir
o que fizemos

00:03:33.868 --> 00:03:37.734
e definir a imagem correta do objeto Word
para a ImageView.

00:03:37.767 --> 00:03:39.467
E, se não for isso,

00:03:39.501 --> 00:03:42.567
temos que esconder a ImageView,
o que estará na instrução else.

00:03:42.601 --> 00:03:46.267
Mais cedo, mostrei códigos
para mudar a visibilidade de uma View

00:03:46.300 --> 00:03:47.834
com o aplicativo
em execução.

00:03:47.868 --> 00:03:52.133
Usando o método setVisibility,
podemos esconder a imagem,

00:03:52.167 --> 00:03:55.267
e, para isso,
o definirei como "gone".

00:03:55.300 --> 00:03:58.934
Seja por experimentação
ou pela leitura da documentação,

00:03:58.968 --> 00:04:04.300
saiba que gone significa que a View
está escondida e não ocupa espaço.

00:04:04.334 --> 00:04:08.200
Compare isto com o estado "invisible",
quando a View está escondida

00:04:08.234 --> 00:04:10.667
mas ainda ocupa espaço
no layout.

00:04:10.701 --> 00:04:14.734
No aplicativo, se definirmos a ImageView
como "invisible", teria um espaço em branco

00:04:14.767 --> 00:04:18.200
no lado esquerdo do item de lista,
e não queremos isso.

00:04:18.234 --> 00:04:22.467
No lugar, a definimos como "gone",
que a esconde completamente.

00:04:22.501 --> 00:04:26.734
Vou adicionar comentários
dizendo o que a linha de código faz.

00:04:26.767 --> 00:04:28.534
De volta à instrução if.

00:04:28.567 --> 00:04:33.200
Temos que ser muito claros
e definir a visibilidade como "visible"

00:04:33.234 --> 00:04:34.734
se tivermos uma imagem.

00:04:34.767 --> 00:04:37.267
Faremos isso
porque as Views são reutilizadas.

00:04:37.300 --> 00:04:41.567
Se a View foi escondida,
temos que garantir que fique visível

00:04:41.601 --> 00:04:44.200
quando definirmos uma nova imagem
na ImageView.

00:04:44.234 --> 00:04:48.767
Certo, ufa! Foram muitas mudanças,
mas vamos testar o dispositivo.

00:04:48.801 --> 00:04:53.167
Primeiro, vou testar as expressões.
Ótimo, sem imagens.

00:04:54.167 --> 00:04:57.334
Agora os números.
Legal. Tem imagens.

00:04:58.200 --> 00:04:59.601
Membros da família.

00:04:59.634 --> 00:05:02.133
Legal,
as carinhas fofas estão aí.

00:05:02.167 --> 00:05:03.501
Agora as cores.

00:05:04.100 --> 00:05:05.968
Têm um espectro legal.

00:05:06.000 --> 00:05:09.701
Perfeito, todas as categorias
estão funcionando como esperávamos.

00:05:09.734 --> 00:05:13.033
Agora, voltando ao quiz.
Vamos responder às duas perguntas.

00:05:13.067 --> 00:05:16.634
Para as expressões,
a ImageView precisa estar gone,

00:05:16.667 --> 00:05:20.300
pois queremos escondê-la
e não ocupar espaço no layout.

00:05:20.334 --> 00:05:23.601
Assim, as duas textViews andam
para a esquerda.

00:05:23.634 --> 00:05:27.601
Para os outros itens de lista,
a ImageView tem que estar visible,

00:05:27.634 --> 00:05:29.267
para que o usuário a veja.

00:05:29.300 --> 00:05:32.734
Isso reflete o que fizemos no código,
e o aplicativo está como queremos.

00:05:32.767 --> 00:05:35.200
Bom trabalho
neste quiz desafiador!

