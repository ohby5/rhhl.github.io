WEBVTT
Kind: captions
Language: zh-CN

00:00:00.480 --> 00:00:03.340
现在我们知道我们需要对代码做出哪些更改了

00:00:03.340 --> 00:00:07.090
似乎需要四大步骤

00:00:07.090 --> 00:00:09.240
某些步骤可能比其他步骤更复杂

00:00:09.240 --> 00:00:11.970
因为它们会同时影响到多个代码文件

00:00:11.970 --> 00:00:13.800
该如何操作呢？

00:00:13.800 --> 00:00:15.790
我们要从哪开始

00:00:15.790 --> 00:00:18.100
正确执行所有这些更改

00:00:18.100 --> 00:00:21.000
然后在设备上运行下该应用？

00:00:21.000 --> 00:00:25.740
如果我们尝试这一方法 同时执行所有步骤

00:00:25.740 --> 00:00:27.190
然后尝试在设备上运行该应用

00:00:28.280 --> 00:00:32.400
很有可能第一次应用无法运行

00:00:32.400 --> 00:00:35.010
可能会遇到各种错误

00:00:35.010 --> 00:00:38.510
这时候很难找到问题的根源

00:00:38.510 --> 00:00:41.810
因为我们已经对文件做了太多的更改

00:00:41.810 --> 00:00:46.260
另一方面 如果我们做出更小的代码改动

00:00:46.260 --> 00:00:50.910
通过在设备上运行应用定期检查是否存在错误

00:00:50.910 --> 00:00:55.070
则更容易发现导致错误的代码行 因为更改的代码行变少了

00:00:56.490 --> 00:01:00.740
采用这种步进式方法意味着我们需要规划好代码更改步骤

00:01:00.740 --> 00:01:05.290
使我们能够运行应用 即使整个功能尚未完成

00:01:05.290 --> 00:01:08.600
现在我们已经知道要一步步地来完成这些操作

00:01:08.600 --> 00:01:10.920
那么第一步该处理什么呢？

00:01:10.920 --> 00:01:15.060
作为开发者 我们可以按照多种方式来排定优先级

00:01:15.060 --> 00:01:17.180
通常我们会首先做出风险最大 难度最高的更改

00:01:17.180 --> 00:01:21.640
因为如果初始策略不可行

00:01:21.640 --> 00:01:25.770
我们需要尽早知道 从而重新规划策略

00:01:25.770 --> 00:01:30.200
可以想象成对概念的论证 确保我们的前进方向是正确的

00:01:30.200 --> 00:01:34.280
对我们来说 所有这些步骤都是风险很低的更改

00:01:34.280 --> 00:01:38.900
因为我们在 Android Flavor 应用中看到 我们能够在列表中

00:01:38.900 --> 00:01:40.760
显示文字和图片

00:01:40.760 --> 00:01:44.090
另一种安排优先级的方式是根据我们所拥有的数据来安排优先级

00:01:45.480 --> 00:01:48.830
目前设计师还没有给我们提供图片

00:01:48.830 --> 00:01:53.510
经常设计师在画出初步草图后 可能需要一段时间

00:01:53.510 --> 00:01:55.970
才能提供最终图片

00:01:55.970 --> 00:02:00.150
在此期间 作为开发者 我们可以开始编写代码

00:02:01.280 --> 00:02:02.530
为此

00:02:02.530 --> 00:02:06.760
我们将用到叫做占位符的数据 也称为虚拟数据

00:02:07.940 --> 00:02:10.669
占位符数据是指临时或虚拟数据

00:02:10.669 --> 00:02:14.270
我们可以将占位符数据放入应用中 让我们大致了解下

00:02:14.270 --> 00:02:17.100
在获得实际数据后应用的外观会如何

00:02:17.100 --> 00:02:21.350
可以将其视为即将填充进来的实际数据的占位符

00:02:21.350 --> 00:02:25.757
总结下 我们知道我们需要一步步地做出这些更改

00:02:27.893 --> 00:02:30.473
并且确保我们可以重构该应用并在每次更改期间

00:02:30.473 --> 00:02:34.910
尽可能使应用在设备上能够运行

00:02:34.910 --> 00:02:40.230
如果缺少实际数据 我们可以使用虚拟数据作为占位符

00:02:40.230 --> 00:02:42.480
直到实际数据可以使用了

00:02:42.480 --> 00:02:45.860
在我们的应用中 如果设计师还没有提供最终图片

00:02:46.860 --> 00:02:51.430
我们需要尽可能往前操作 直到完全受阻

00:02:51.430 --> 00:02:55.390
并需要等待实际数据来完成该功能

00:02:55.390 --> 00:02:58.560
在看完这一系列更改后

00:02:58.560 --> 00:03:03.880
请你思考下如何优先执行哪些步骤

00:03:03.880 --> 00:03:07.300
请按照 1 2 3 4 的先后顺序

00:03:07.300 --> 00:03:11.280
为每个步骤编个号

