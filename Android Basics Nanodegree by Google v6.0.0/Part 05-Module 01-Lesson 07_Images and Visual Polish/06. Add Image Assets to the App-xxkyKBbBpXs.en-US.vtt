WEBVTT
Kind: captions
Language: en-US

00:00:00.380 --> 00:00:01.810
By now you're probably wondering,

00:00:01.810 --> 00:00:04.040
why can't we just have one
version of all the assets?

00:00:05.110 --> 00:00:07.000
Well, let's take a look
at this page here.

00:00:07.000 --> 00:00:10.169
So I'm at design.google.com/devices.

00:00:10.169 --> 00:00:14.100
And this page lists all
the popular Android devices.

00:00:14.100 --> 00:00:18.220
There are some phones,
some tablets and even some watches.

00:00:18.220 --> 00:00:21.260
But as it note,
it doesn't list all the devices.

00:00:21.260 --> 00:00:25.560
Now what's useful about this chart is
that you can find both the dimensions

00:00:25.560 --> 00:00:28.770
of the screen in dips as well
as the density of the device.

00:00:28.770 --> 00:00:36.870
So here we see some hdpis
some xhdpis and some xxhdpis.

00:00:36.870 --> 00:00:40.450
As you can tell, there's a huge
range of Android devices and

00:00:40.450 --> 00:00:42.160
they have different densities.

00:00:42.160 --> 00:00:45.859
Now to refresh us about densities,
let's take a look over at the Android

00:00:45.859 --> 00:00:50.690
developer documentation at the topic
Supporting Multiple Screens.

00:00:50.690 --> 00:00:54.970
So down here for the definition of
screen density, it says that density

00:00:54.970 --> 00:00:58.930
means the number of pixels within
the physical area of the screen and

00:00:58.930 --> 00:01:01.960
it's usually referred to as DPIs or
dots per inch.

00:01:03.110 --> 00:01:06.832
We have five common density buckets
that you should be familiar with.

00:01:06.832 --> 00:01:13.370
An mdpi device or medium density device
has about 160 dots per inch an hdpi,

00:01:13.370 --> 00:01:18.210
device or high density device
has about 240 dots per inch.

00:01:18.210 --> 00:01:24.220
An xhdpi device or extra high density
device has about 320 dots per inch.

00:01:24.220 --> 00:01:26.470
And the number of dots
just increase from there.

00:01:26.470 --> 00:01:29.720
So with the extra extra extra
high density device, and

00:01:29.720 --> 00:01:34.160
that's three xs,
it has about 640 dots per inch.

00:01:34.160 --> 00:01:36.910
So as the name and numbers indicate,

00:01:36.910 --> 00:01:40.700
the number of pixels on screens
increase as we increase density.

00:01:40.700 --> 00:01:44.190
So as time has passed, the device
hardware has gotten even better.

00:01:44.190 --> 00:01:48.220
We have even higher resolution devices
meaning more pixels that can fit on

00:01:48.220 --> 00:01:53.160
the screen than what's shown here, but
for now let's just focus on these five.

00:01:53.160 --> 00:01:56.700
So in the last course we learned about
how we can specify the width and

00:01:56.700 --> 00:01:59.400
height values in density
independent pixels.

00:01:59.400 --> 00:02:03.900
So that means we can say that a button
should be 48 by 48 dips in size, and

00:02:03.900 --> 00:02:08.210
in reality Android would translate that
number into different numbers of pixels

00:02:08.210 --> 00:02:09.910
depending on the screen
density of the device.

00:02:09.910 --> 00:02:13.050
So how would that work for
something like an image.

00:02:13.050 --> 00:02:16.815
Well as a developer you
would declare the width and

00:02:16.815 --> 00:02:22.665
height of an image to be in do values,
such as 48 dp by 48dp, for example.

00:02:22.665 --> 00:02:25.575
Then Android would make
sure that all these images

00:02:25.575 --> 00:02:28.691
appear roughly the same
physical size across devices.

00:02:28.691 --> 00:02:31.815
No matter if it has a small
number of pixels per inch or

00:02:31.815 --> 00:02:34.195
a very large number of pixels per inch.

00:02:34.195 --> 00:02:37.014
However, if we only have
a single version of the image,

00:02:37.014 --> 00:02:40.050
Android may need to blow up or
stretch out the image for

00:02:40.050 --> 00:02:44.120
higher density devices which
have more pixels on the screen.

00:02:44.120 --> 00:02:47.040
Or on the other hand, if we have
a version of the image with a lot of

00:02:47.040 --> 00:02:51.180
pixels, Android might need to do
the extra step of shrinking it down for

00:02:51.180 --> 00:02:53.140
lower density devices.

00:02:53.140 --> 00:02:56.430
And either way, the image might end
up looking distorted or blurry and

00:02:56.430 --> 00:02:58.370
that is not what we want.

00:02:58.370 --> 00:03:01.850
So we can solve this problem by
providing different-sized versions of

00:03:01.850 --> 00:03:04.890
the same image for
each of the density buckets.

00:03:04.890 --> 00:03:08.225
And this will also have crisp
images on all devices without

00:03:08.225 --> 00:03:11.357
causing the Android device
to do too much stretching or

00:03:11.357 --> 00:03:14.162
shrinking of the image
while the app is running.

00:03:14.162 --> 00:03:18.714
So to know what size assets the designer
should provide there are dp to pixel

00:03:18.714 --> 00:03:20.025
conversion ratios.

00:03:20.025 --> 00:03:24.190
For a medium density device,
1 dp = 1 pixel.

00:03:24.190 --> 00:03:28.820
So if we want the image to be
48 dps by 48 dp in size, then

00:03:28.820 --> 00:03:34.110
the mdpi version of the image should
be 48 pixels by 48 pixels in size.

00:03:34.110 --> 00:03:38.820
Now for
high density devices 1 dp = 1.5 pixels.

00:03:38.820 --> 00:03:43.380
So if we want the image to be
48 dps by 48 dps in size, then

00:03:43.380 --> 00:03:48.440
the hdpi version of the image should
be 72 pixels by 72 pixels in size.

00:03:48.440 --> 00:03:50.290
We can repeat similar calculations for

00:03:50.290 --> 00:03:53.550
high resolutions using
the provided ratios.

00:03:53.550 --> 00:03:57.680
And as you can see here
the xxxhdpi version of the image

00:03:57.680 --> 00:04:00.940
will be a lot larger
than the ndpi version.

00:04:00.940 --> 00:04:06.440
But that's because the xxxhdpi device
has a lot more pixels on its screen.

00:04:06.440 --> 00:04:10.380
So in the end all these images will
appear the same physical size to

00:04:10.380 --> 00:04:12.370
the user on their respective devices.

00:04:13.450 --> 00:04:16.390
Now let's take a closer look at
the pixel size of the images we

00:04:16.390 --> 00:04:17.010
provided you.

00:04:18.440 --> 00:04:21.079
So let's jump into
the drawable-ndpi folder.

00:04:22.410 --> 00:04:25.310
I'm going to take a look
at the son image.

00:04:25.310 --> 00:04:29.940
So I'm going to selected it,
right click and get info.

00:04:32.010 --> 00:04:34.950
Now here for
the ndpi version of this image,

00:04:34.950 --> 00:04:39.450
we see that the dimension
is 88 by 88 pixels.

00:04:39.450 --> 00:04:44.540
So we'll be showing this image as
88 dp by 88 dp in the final app.

00:04:44.540 --> 00:04:50.000
So the size of this version has to
be 88 pixels by 88 pixels since,

00:04:50.000 --> 00:04:53.720
one dp equals one pixel
on an mdpi device.

00:04:53.720 --> 00:04:58.930
So what does the pixel size look like
for a xxxhdpi version of the same image?

00:04:58.930 --> 00:05:04.540
So I'm going to navigate
to drawable-xxxhdpi.

00:05:04.540 --> 00:05:09.790
Find the sun image,
select it, and also Get Info.

00:05:12.790 --> 00:05:16.180
So we find the image
here is much larger, and

00:05:16.180 --> 00:05:21.850
it's verified by the dimensions
listed here as 352 by 352 pixels.

00:05:21.850 --> 00:05:25.060
So what we're doing here is making
a tradeoff between the amount of storage

00:05:25.060 --> 00:05:29.200
space that our app will need and the
amount of processing power it will need.

00:05:29.200 --> 00:05:31.660
So when we provide multiple
versions of an asset,

00:05:31.660 --> 00:05:36.360
the app does take up more storage space
but it uses less processing power.

00:05:36.360 --> 00:05:40.300
And remember, for mobile devices,
that's a really useful trade to make.

00:05:40.300 --> 00:05:43.180
Because it means our app will
run on less powerful devices

00:05:43.180 --> 00:05:45.450
without running into performance issues.

00:05:45.450 --> 00:05:48.910
All right, now we understand why there
are different assets at different sizes

00:05:48.910 --> 00:05:50.620
in different folders.

00:05:50.620 --> 00:05:53.260
So, go ahead and
add all these images to your app.

00:05:53.260 --> 00:05:54.980
Copy over each drawable folder and

00:05:54.980 --> 00:05:58.840
then add it to the res directory
of our app in Android Studio.

00:05:58.840 --> 00:06:00.250
So here in Android Studio,

00:06:00.250 --> 00:06:06.060
we see that all the mdpi version of the
images are in the drawable-mdpi folder.

00:06:07.070 --> 00:06:09.110
Same for the hdpi folder.

00:06:09.110 --> 00:06:10.770
So, all the hdpi images are here.

00:06:12.050 --> 00:06:15.170
And for all the other resolutions,
as well.

00:06:15.170 --> 00:06:17.918
Once you're done making these
additions to the res directory,

00:06:17.918 --> 00:06:20.469
your app should have
these five new folders.

00:06:21.630 --> 00:06:24.330
All right so now that you
understand why there are assets

00:06:24.330 --> 00:06:27.560
at different sizes in different folders,
I'd like you to go ahead and

00:06:27.560 --> 00:06:29.560
add all these assets to your app.

00:06:29.560 --> 00:06:31.864
So copy over each of
the drawable folders and

00:06:31.864 --> 00:06:34.800
add it to the res directory
of our app in Android Studio.

