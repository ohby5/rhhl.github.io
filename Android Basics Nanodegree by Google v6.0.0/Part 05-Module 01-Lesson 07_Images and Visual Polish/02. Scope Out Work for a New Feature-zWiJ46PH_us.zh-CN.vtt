WEBVTT
Kind: captions
Language: zh-CN

00:00:00.480 --> 00:00:01.050
— Jessica — 嗯？

00:00:01.050 --> 00:00:02.200
我们需要谈谈

00:00:02.200 --> 00:00:02.900
说什么？发生了什么？

00:00:02.900 --> 00:00:06.510
我们一直都是在手把手地教大家 现在必须要停止这么做了

00:00:06.510 --> 00:00:07.300
— 什么？— 嗯

00:00:07.300 --> 00:00:09.760
我们待在儿童泳池里太长时间了

00:00:09.760 --> 00:00:11.420
我们一直都为学员提供各种说明

00:00:11.420 --> 00:00:12.470
告诉他们下一步该怎么操作

00:00:12.470 --> 00:00:16.030
但是当他们在现实生活中完成自己的项目时

00:00:16.030 --> 00:00:17.020
他们就会遇到挫折

00:00:17.020 --> 00:00:19.110
他们不知道下一步该怎么办

00:00:19.110 --> 00:00:21.140
当他们进入深水区的时候 他们可能会淹死

00:00:21.140 --> 00:00:22.850
你不希望他们淹死吧？

00:00:22.850 --> 00:00:24.590
等等 说的太极端了

00:00:24.590 --> 00:00:25.930
好吧 折中一下

00:00:25.930 --> 00:00:30.192
对于下一个向应用中添加图片的任务 要不我们

00:00:30.192 --> 00:00:34.748
帮助学员思考要执行的策略 以及按照什么顺序来执行这些策略

00:00:34.748 --> 00:00:35.510
— 好的

00:00:35.510 --> 00:00:36.720
这么做可行

00:00:36.720 --> 00:00:39.510
但是不要再手把手地教了

00:00:39.510 --> 00:00:42.650
— 好的 我们进入了每个开发者工作流程的关键阶段

00:00:42.650 --> 00:00:46.890
应用可以正常运转 并告诉用户英语单词

00:00:46.890 --> 00:00:48.210
对应的米沃克语翻译

00:00:48.210 --> 00:00:52.590
现在出现了一个功能请求 即向应用中添加图片

00:00:52.590 --> 00:00:55.890
与设计师讨论过后 我们希望应用的外观是这样的

00:00:55.890 --> 00:00:57.720
如果你是团队成员

00:00:57.720 --> 00:01:02.620
作为开发者 经常你需要负责一项功能 例如向应用中添加图片

00:01:02.620 --> 00:01:06.860
而且项目经理或技术主管经常还会要求你

00:01:06.860 --> 00:01:10.160
估算下构建某个功能需要花费的时间

00:01:10.160 --> 00:01:12.460
我不会请你估算时间

00:01:12.460 --> 00:01:14.650
但是却需要你估算下工作范围

00:01:15.800 --> 00:01:20.010
从更高层面来说 需要对应用做出什么更改？

00:01:20.010 --> 00:01:23.950
你可能会想 我知道我们需要实现什么目标

00:01:23.950 --> 00:01:28.110
以及理由是什么 但是不确定后续步骤

00:01:28.110 --> 00:01:31.240
甚至不知道如何判断工作范围

00:01:31.240 --> 00:01:33.990
所有这些想法都是正常现象

00:01:33.990 --> 00:01:36.110
这也就是为何我们会提供帮助

00:01:36.110 --> 00:01:39.090
我们可以计划的第一项内容是确保

00:01:39.090 --> 00:01:41.080
有一个仓库蓝图

00:01:41.080 --> 00:01:43.130
看看所有内容是如何相吻合的

00:01:44.250 --> 00:01:48.060
你可能注意到了 我们的代码已经非常复杂

00:01:48.060 --> 00:01:51.780
有多个布局文件 几个 Java 文件

00:01:51.780 --> 00:01:53.940
还有几个资源

00:01:53.940 --> 00:01:58.300
借助蓝图 我们可以观察下代码

00:01:58.300 --> 00:02:01.600
预测并画出需要对仓库的不同部分

00:02:01.600 --> 00:02:03.550
进行的修改

00:02:03.550 --> 00:02:07.690
根据具体的功能 可能会影响到很多不同的文件

00:02:07.690 --> 00:02:10.660
所以绘制蓝图可以帮助我们预测

00:02:10.660 --> 00:02:11.839
需要在什么地方做出更改

00:02:13.200 --> 00:02:15.800
再来看看第一节课中的蓝图

00:02:17.458 --> 00:02:21.200
从第一节课开始 我们添加了越来越多的功能

00:02:21.200 --> 00:02:23.140
并且稍微做出了一些修改

00:02:24.410 --> 00:02:28.410
并没有特定的规则限定如何创建恰当的蓝图

00:02:28.410 --> 00:02:31.050
只要能追踪应用的各大主要部分即可

00:02:33.030 --> 00:02:36.600
应用已经很复杂 我们可以稍微放大下

00:02:36.600 --> 00:02:39.830
意味着不用包含之前包含的所有详细信息

00:02:40.940 --> 00:02:44.230
我们知道这些详细信息依然存在 只是在我们的脑海中已经不是首要信息了

00:02:45.910 --> 00:02:48.834
目前这是我们的应用流程模型

00:02:48.834 --> 00:02:53.116
点按每个类别可以使我们转到相应的 Activity

00:02:56.207 --> 00:02:59.070
同时 我们研究了每个 Activity 如何获取

00:02:59.070 --> 00:03:00.820
并显示相应的数据

00:03:01.890 --> 00:03:03.930
我们来看看 NumbersActivity

00:03:05.270 --> 00:03:08.310
我们将 Word 对象中的数据存储在数组列表中

00:03:09.310 --> 00:03:11.880
我们使用 ListView 和数组适配器

00:03:11.880 --> 00:03:15.710
来检索并显示每个列表项中的信息

00:03:17.210 --> 00:03:20.280
在下一个节点 你将看到当前应用蓝图的

00:03:20.280 --> 00:03:20.859
两个图表

00:03:22.460 --> 00:03:27.000
为了帮助我们确定为每个单词添加图片这一新功能的范围

00:03:27.000 --> 00:03:30.890
我们需要对这两个图表做出哪些更改？

00:03:30.890 --> 00:03:34.210
假设 PhrasesActivity 不会显示图片

00:03:34.210 --> 00:03:36.969
并且稍后会处理这一特殊情形

00:03:38.300 --> 00:03:39.600
暂时先忽略了

00:03:40.890 --> 00:03:44.810
注意 这是一道思考练习题 可以帮助你

00:03:44.810 --> 00:03:46.770
规划如何构建下一个功能

00:03:46.770 --> 00:03:48.590
所以没有正确或错误答案

00:03:50.150 --> 00:03:51.620
完成后

00:03:51.620 --> 00:03:55.110
当你绘制出可能的解决方案后 请选中该方框

