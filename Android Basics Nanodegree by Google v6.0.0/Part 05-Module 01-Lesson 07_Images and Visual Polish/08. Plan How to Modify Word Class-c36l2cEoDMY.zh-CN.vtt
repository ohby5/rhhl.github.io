WEBVTT
Kind: captions
Language: zh-CN

00:00:00.340 --> 00:00:04.660
当前 Word 类包含两个字符串变量

00:00:04.660 --> 00:00:07.910
一个用于默认的译文 一个用于米沃克语译文

00:00:07.910 --> 00:00:12.140
这两个变量都是私有变量 但是具有公共方法

00:00:12.140 --> 00:00:16.720
其他类可以调用这些方法来访问对象的状态

00:00:16.720 --> 00:00:19.340
要添加图片支持 我们需要

00:00:19.340 --> 00:00:24.430
添加新的变量来跟踪与每个 Word 对象相关联的图片

00:00:24.430 --> 00:00:26.716
这个新变量的数据类型应该是什么呢？

00:00:26.716 --> 00:00:30.627
我们可以存储实际的图片 但是这会占用太多的内存

00:00:30.627 --> 00:00:34.640
因为所有的插图都不是很小

00:00:34.640 --> 00:00:35.170
此外

00:00:35.170 --> 00:00:38.570
对于非常长的单词列表 如果我们浏览到列表末端

00:00:38.570 --> 00:00:41.840
那么存储单词列表中的每个图片会浪费内存

00:00:41.840 --> 00:00:43.780
因为有些图片已经不在屏幕上

00:00:43.780 --> 00:00:47.910
而且会增加单词列表用到的内存资源量

00:00:47.910 --> 00:00:53.040
更加高效的方式是存储每个图片的资源 ID

00:00:53.040 --> 00:00:57.859
R.drawable.number_one 等资源 ID

00:00:57.859 --> 00:00:59.697
实际上是个整数

00:00:59.697 --> 00:01:01.974
我们可以存储资源的名称以便以后找到该资源

00:01:01.974 --> 00:01:05.780
而不是存储实际的图片

00:01:06.930 --> 00:01:10.070
我们可以将这种情形想象为通讯簿

00:01:10.070 --> 00:01:13.890
你不需要将某个人的整个房子都存储到地址簿里

00:01:13.890 --> 00:01:17.210
而是存储对方的邮寄地址

00:01:17.210 --> 00:01:18.550
以后需要这些信息的时候

00:01:18.550 --> 00:01:22.050
可以查找该邮寄地址并找到对方的房子

00:01:22.050 --> 00:01:24.670
回到我们的案例 当 ListView 需要

00:01:24.670 --> 00:01:27.070
该单词的列表项布局时

00:01:27.070 --> 00:01:31.287
WordAdapter 需要负责返回该资源 ID

00:01:31.287 --> 00:01:33.994
类似于 R.drawable.number_one

00:01:33.994 --> 00:01:37.721
将其转换为实际的橡子图片

00:01:37.721 --> 00:01:39.310
并在屏幕上展示该图片

00:01:39.310 --> 00:01:43.940
在这里可以看到 每个 Word 类包含两个字符串和

00:01:43.940 --> 00:01:45.830
一个表示图片资源 ID 的整数

00:01:45.830 --> 00:01:47.100
为了遵守该类中其他变量的规则

00:01:47.100 --> 00:01:50.580
我们希望这些状态变量

00:01:50.580 --> 00:01:54.840
声明为私有访问修饰符 而不是公共修饰符

00:01:54.840 --> 00:01:59.558
意味着只有该类里面的方法可以访问

00:01:59.558 --> 00:02:01.114
这些私有变量

00:02:01.114 --> 00:02:04.802
我们可以信任该类里面的方法将正确地

00:02:04.802 --> 00:02:06.710
修改图片资源 ID

00:02:06.710 --> 00:02:10.060
我们不希望该变量是公共的 因为其他类

00:02:10.060 --> 00:02:14.520
可能会将该图片资源 ID 更改为无效的值

00:02:14.520 --> 00:02:19.760
这样当我们尝试将该资源 ID 转换为实际图片时 应用会崩溃

00:02:19.760 --> 00:02:22.120
回到测试题的第一个问题

00:02:22.120 --> 00:02:25.340
Word 对象应该还要包含什么状态？

00:02:25.340 --> 00:02:29.790
我们需要为图片资源 ID 提供一个私有整数变量

00:02:29.790 --> 00:02:33.740
因为该变量是私有的 我们需要一个公共方法

00:02:33.740 --> 00:02:38.130
这样其他类才能够访问与该 Word 对象关联的图片

00:02:38.130 --> 00:02:39.260
此外

00:02:39.260 --> 00:02:44.040
仅在你希望其他类来访问这些方法时

00:02:44.040 --> 00:02:47.950
创建公共访问修饰符来访问私有变量

00:02:47.950 --> 00:02:49.810
如果我们为自己创建额外的变量

00:02:49.810 --> 00:02:53.020
在内部管理 Word 对象

00:02:53.020 --> 00:02:55.320
这些变量则不需要面向外部

00:02:55.320 --> 00:02:58.090
我们不需要创建公共获取方法

00:02:58.090 --> 00:03:01.450
使这些变量暴露于外部调用函数

00:03:01.450 --> 00:03:03.720
回到测试题的第二个问题

00:03:03.720 --> 00:03:05.620
我们应该还要采用哪些方法？

00:03:05.620 --> 00:03:09.330
我们需要一个公共方法 叫做 getImageResourceId

00:03:09.330 --> 00:03:11.450
来返回整型图片资源 ID

