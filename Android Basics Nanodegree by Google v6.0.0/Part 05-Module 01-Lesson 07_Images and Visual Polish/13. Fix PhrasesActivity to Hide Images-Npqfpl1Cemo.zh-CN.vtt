WEBVTT
Kind: captions
Language: zh-CN

00:00:00.490 --> 00:00:02.380
第一步是找到一种方法来让

00:00:02.380 --> 00:00:05.930
WordAdapter 判断 Word 对象是否具有图片

00:00:05.930 --> 00:00:08.500
我们在 Android studio 中看看 WordAdapter 文件

00:00:08.500 --> 00:00:11.947
在这个 WordAdapter 类中 只有当单词具有图片时

00:00:11.947 --> 00:00:16.257
我们才希望执行这几行代码

00:00:16.257 --> 00:00:16.878
即设置 ImageView

00:00:16.878 --> 00:00:20.821
为此 我们应该在 Word 类中创建并研究下另一个方法

00:00:20.821 --> 00:00:24.968
该方法会告诉我们当前位置的单词是否具有图片

00:00:24.968 --> 00:00:27.910
转到 Word 类并定义该方法

00:00:27.910 --> 00:00:31.260
在 Word 类的底部 我将创建一个公共方法

00:00:31.260 --> 00:00:35.310
叫做 hasImage 并使其返回布尔值

00:00:35.310 --> 00:00:38.740
如果单词具有图片 该方法会返回 true

00:00:38.740 --> 00:00:42.310
如果没有图片 则返回 false 记住一定要写上注释

00:00:42.310 --> 00:00:47.020
帮助他人理解你的代码 我在这里写上注释

00:00:47.020 --> 00:00:49.250
那么我们该如何判断某个单词是否有图片呢？

00:00:50.440 --> 00:00:52.670
我们滚动到 Word 类的顶部

00:00:52.670 --> 00:00:54.970
注意这里有个变量

00:00:54.970 --> 00:00:57.810
即 mImageResourceId 我们可以研究下该方法

00:00:57.810 --> 00:01:01.190
发现它实际上并不能帮助我们预测引用的是什么图片

00:01:01.190 --> 00:01:03.790
但是在这里 我们只需利用它来判断单词是否具有

00:01:03.790 --> 00:01:04.980
有效的图片即可

00:01:04.980 --> 00:01:09.240
这里常量就派上用场了

00:01:09.240 --> 00:01:12.600
我们可以创建一个常量 表示无图片状态

00:01:12.600 --> 00:01:14.270
我将在这里创建

00:01:14.270 --> 00:01:18.040
我创建了一个变量 叫做 NO_IMAGE_PROVIDED 全为大写

00:01:18.040 --> 00:01:21.870
因为它是常量 并且每个单词用下划线分隔

00:01:21.870 --> 00:01:25.180
我将其设置为常量值 -1

00:01:25.180 --> 00:01:25.970
使用 -1 是因为

00:01:25.970 --> 00:01:30.090
它超出了有效资源 ID 的所有可能范围

00:01:30.090 --> 00:01:33.430
同时注意 这个常量是私有变量

00:01:33.430 --> 00:01:36.200
因为我们只需要在 Word 类里用到它

00:01:36.200 --> 00:01:38.140
创建完该常量后

00:01:38.140 --> 00:01:42.550
我将这个图片变量设置为默认情况下以无图片状态开始

00:01:42.550 --> 00:01:45.090
所以设为等于这个无图片常量

00:01:46.450 --> 00:01:49.510
一旦这个变量更新为其他内容

00:01:49.510 --> 00:01:51.460
我们就知道该单词具有图片

00:01:51.460 --> 00:01:54.640
意味着如果该构造函数里有图片

00:01:54.640 --> 00:01:57.150
这个变量将更新为其他内容

00:01:57.150 --> 00:02:01.150
你就会知道该单词具有图片 如果没有提供图片的话

00:02:01.150 --> 00:02:04.400
那么图片资源 ID 将保持不变

00:02:04.400 --> 00:02:07.020
也就是保持常量值 -1

00:02:08.050 --> 00:02:12.040
现在回到 hasImage 方法 我们依然需要写完整了

00:02:12.040 --> 00:02:15.850
在这个方法中 我们需要检查图片变量是否等于

00:02:15.850 --> 00:02:20.240
NO_IMAGE_PROVIDED 常量 应该是这样的

00:02:20.240 --> 00:02:24.930
顺便提下 “!=”表示不等于

00:02:24.930 --> 00:02:29.260
该表达式的结果要么是 true 要么是 false

00:02:29.260 --> 00:02:32.590
该值会返回为该方法的返回值

00:02:33.590 --> 00:02:36.770
我知道这里的逻辑有点难懂 但是还是请大家尽量

00:02:36.770 --> 00:02:37.740
跟上课程节奏

00:02:37.740 --> 00:02:41.480
如果图片资源变量不等于 -1

00:02:41.480 --> 00:02:45.380
那么就存在有效的图片 该方法应返回 true

00:02:45.380 --> 00:02:49.620
但是如果该图片变量等于 -1 那么该单词就没有图片

00:02:49.620 --> 00:02:52.300
该方法会返回 false

00:02:52.300 --> 00:02:55.290
我们不希望强迫 WordAdopter 类对图片本身作出检查

00:02:55.290 --> 00:02:58.590
因为它只关心是否存在图片

00:02:58.590 --> 00:03:01.660
所以 WordAdopter 不需要知道我们如何使用 Word 类中的

00:03:01.660 --> 00:03:04.120
常量来判断是否存在图片的细节信息

00:03:04.120 --> 00:03:06.940
因此所有的逻辑内容都位于 Word 类中

00:03:06.940 --> 00:03:09.040
恩 很棒

00:03:09.040 --> 00:03:13.100
在 Word 类中 我们使用了一个公共方法 叫做 hasImage

00:03:13.100 --> 00:03:15.720
我们切换到 WordAdapter 类

00:03:15.720 --> 00:03:18.810
看看如何在 Word 对象上使用该 hasImage 方法

00:03:18.810 --> 00:03:20.580
对于这行我们关心的代码

00:03:20.580 --> 00:03:23.860
我们可以使用条件逻辑 例如 if else 语句

00:03:23.860 --> 00:03:26.600
这样我们的代码会根据单词是否具有图片

00:03:26.600 --> 00:03:28.490
而产生不同的行为

00:03:28.490 --> 00:03:31.950
这个 if 语句检查发现当前单词具有图片的话

00:03:31.950 --> 00:03:35.170
则和之前的操作一样 将 Word 对象上的正确图片

00:03:35.170 --> 00:03:39.500
设置到 ImageView 上 如果不为真的话

00:03:39.500 --> 00:03:42.610
则隐藏 ImageView 并转到 else 语句

00:03:42.610 --> 00:03:46.300
之前我展示了一些代码 告诉大家如何更改

00:03:46.300 --> 00:03:47.860
视图在应用运行时的可见性

00:03:47.860 --> 00:03:50.290
通过 setVisibility 方法

00:03:50.290 --> 00:03:54.110
我们可以完全隐藏图片 为此 我将其设为 GONE

00:03:55.390 --> 00:03:58.980
希望你通过实验研究或阅读文档

00:03:58.980 --> 00:04:01.990
已经发现 GONE 表示视图被隐藏了

00:04:01.990 --> 00:04:04.340
并且不占用布局的任何空间

00:04:04.340 --> 00:04:07.500
现在请将这个状态与 INVISIBLE 状态对比下 后者是指视图被隐藏

00:04:07.500 --> 00:04:09.640
但是仍然占用了布局中的空间

00:04:10.710 --> 00:04:14.760
在我们的应用中 如果我们将 ImageView 设为 INVISIBLE

00:04:14.760 --> 00:04:18.220
那么列表项左侧依然会出现一个空白区域 我们不希望出现这种情况

00:04:18.220 --> 00:04:22.500
所以我们将 ImageView 设为 GONE 将其完全隐藏起来

00:04:22.500 --> 00:04:24.748
我将在这里添加一些注释 解释这行代码的作用

00:04:26.758 --> 00:04:28.560
现在回到 if 语句

00:04:28.560 --> 00:04:33.220
我们的代码需要非常明确 当我们的确具有图片的时候

00:04:33.220 --> 00:04:37.310
我们需要将 Visibility 设为 VISIBLE 这么操作是为了重复利用视图

00:04:37.310 --> 00:04:41.080
如果视图之前被隐藏了 我们则希望在 ImageView 上设置新的图片时

00:04:41.080 --> 00:04:43.260
该视图再次变得可见

00:04:43.260 --> 00:04:46.650
哇 更改了好多代码啊

00:04:46.650 --> 00:04:48.500
我们在设备上测试下 看看效果如何

00:04:48.500 --> 00:04:50.320
首先测试下 Phrases

00:04:50.320 --> 00:04:52.730
看起来正常 没有图片

00:04:54.160 --> 00:04:55.296
再来试试 Numbers

00:04:55.296 --> 00:04:56.055
不错

00:04:56.055 --> 00:04:57.190
有图片

00:04:57.190 --> 00:04:59.650
Family Members

00:04:59.650 --> 00:05:02.160
好酷 这些人脸可爱啊

00:05:02.160 --> 00:05:02.990
然后是 Colors

00:05:04.100 --> 00:05:05.160
具有各种光谱

00:05:06.560 --> 00:05:09.730
很不错 所有类别都能按照预期的正常运行

00:05:09.730 --> 00:05:11.150
回到测试题

00:05:11.150 --> 00:05:13.080
回答下这两个问题

00:05:13.080 --> 00:05:15.000
对于 Phrase 列表项

00:05:15.000 --> 00:05:17.930
ImageView 需要设为 GONE 因为我们想要隐藏它

00:05:17.930 --> 00:05:20.350
并且不想占用布局中的任何空间

00:05:20.350 --> 00:05:23.620
这样两个 TextView 可以移到最左侧

00:05:23.620 --> 00:05:25.330
对于所有其他列表项

00:05:25.330 --> 00:05:27.620
ImageView 需要设为 VISIBLE

00:05:27.620 --> 00:05:29.310
这样用户才能看见该视图

00:05:29.310 --> 00:05:30.730
这些反映了我们在代码中执行的操作

00:05:30.730 --> 00:05:32.760
应用外观也达到预期效果

00:05:32.760 --> 00:05:34.830
恭喜大家完成了这道非常难的测试题

