WEBVTT
Kind: captions
Language: zh-CN

00:00:00.410 --> 00:00:03.480
现在我将逐步指导大家如何做出适当的 XML 布局更改

00:00:03.480 --> 00:00:06.700
使应用符合设计师用红色线条标示的要求

00:00:07.710 --> 00:00:09.900
先从简单的更改开始

00:00:09.900 --> 00:00:12.400
我很快发现当前版本的应用中存在太多的

00:00:12.400 --> 00:00:13.860
内边距

00:00:13.860 --> 00:00:15.970
当我滚动应用的时候

00:00:15.970 --> 00:00:19.360
发现整个列表都存在内边距

00:00:19.360 --> 00:00:22.530
即使我在滚动列表 也存在内边距

00:00:22.530 --> 00:00:25.680
所以可以判断内边距可能存在于 ListView 中

00:00:26.780 --> 00:00:31.790
我们在 Word_list.xml 文件中声明了 ListView xml 元素

00:00:31.790 --> 00:00:35.320
猜的没错 我看见这里设置了内边距值

00:00:35.320 --> 00:00:37.300
我们删除所有这些内边距值

00:00:38.900 --> 00:00:41.400
此外 转到 dimensions.XML 文件

00:00:41.400 --> 00:00:44.600
会发现我的代码没有再转换为这些尺寸值

00:00:44.600 --> 00:00:49.600
即 activity_horizontal 尺寸和 activity_vertical 尺寸值

00:00:49.600 --> 00:00:53.397
所以我可以从 values/dimensions.xml 文件中删了这两行

00:00:53.397 --> 00:00:55.909
在这里 activity_horizontal_margin 和

00:00:55.909 --> 00:00:59.526
activity_vertical_margin 一开始设为了 16dp

00:00:59.526 --> 00:01:02.784
剩下的这个尺寸还留在文件里

00:01:02.784 --> 00:01:06.840
它针对的是 list_item_height 因为我们还需要这个值

00:01:06.840 --> 00:01:11.130
你还会发现 我们还存在一个尺寸文件

00:01:11.130 --> 00:01:13.360
这个针对的是 w820dp

00:01:13.360 --> 00:01:16.070
这个文件用于大屏幕设备

00:01:16.070 --> 00:01:18.840
在这个文件里 我们为 activity_horizontal_margin

00:01:18.840 --> 00:01:21.330
设置了一个更大的值

00:01:21.330 --> 00:01:25.239
但我们不再需要这个尺寸

00:01:25.239 --> 00:01:26.636
可以直接删了整个文件

00:01:26.636 --> 00:01:31.680
转到“项目 (Project)” 然后转到该文件 删了该文件

00:01:32.790 --> 00:01:34.970
现在看看应用在设备上的运行效果

00:01:34.970 --> 00:01:38.190
点按 NumbersActivity 不错

00:01:38.190 --> 00:01:42.550
更改这些代码后 去掉了整个列表四周的 16dp 边界

00:01:42.550 --> 00:01:43.680
不错

00:01:43.680 --> 00:01:45.220
现在转到 list_item 布局

00:01:45.220 --> 00:01:50.990
如果还记得的话 每个列表项应该至少高 88dp

00:01:50.990 --> 00:01:53.940
如果觉得该数字听起来熟悉的话 那是因为

00:01:53.940 --> 00:01:55.850
我们之前将其保存在了 dimensions.xml 文件中

00:01:55.850 --> 00:01:58.230
我们将其保存在了 list_item_height 值中

00:01:59.270 --> 00:02:01.460
复制下 稍后会用到

00:02:01.460 --> 00:02:06.070
返回 list_item 布局 我们是这么引用它的

00:02:06.070 --> 00:02:12.133
我将 minimumHeight 设为等于 @dimen/list_item_height

00:02:12.133 --> 00:02:16.138
注意 我在这里将最低高度值设为 88dp

00:02:16.138 --> 00:02:19.697
而不是将高度值固定为 88dp

00:02:19.697 --> 00:02:24.477
这组值表示 LinearLayout 的高度

00:02:24.477 --> 00:02:25.897
必须至少为 88dp

00:02:25.897 --> 00:02:29.197
但是可以更高 取决于列表项中的内容

00:02:30.437 --> 00:02:33.967
在 NumbersActivity 的设计模型中

00:02:33.967 --> 00:02:38.340
注意每个列表项的背景颜色是棕褐色 用这个十六进制值表示

00:02:38.340 --> 00:02:41.670
我们已经在 MainActivity 屏幕中用到该颜色

00:02:41.670 --> 00:02:44.127
我们将该颜色存储在了 colors.xml 文件中

00:02:45.580 --> 00:02:48.050
并在这里设置了该颜色的十六进制值

00:02:49.230 --> 00:02:52.739
回到 list_item 布局 谁引用了该颜色资源？

00:02:56.041 --> 00:03:00.827
在这里的根 LinearLayout 中 我将整个线性布局的背景颜色

00:03:00.827 --> 00:03:05.617
设为这个 @color/tan_background 颜色资源

00:03:05.617 --> 00:03:10.086
我们可以使用“@color/ 颜色资源的名称”

00:03:10.086 --> 00:03:12.510
来引用所需的颜色资源

00:03:13.540 --> 00:03:15.450
再去看看红色标示

00:03:15.450 --> 00:03:19.320
图片应该是正方形的 宽高都应是 88dp

00:03:20.320 --> 00:03:23.340
所以本质上 它应该和列表项一样高

00:03:23.340 --> 00:03:26.820
在这个 dimensions.xml 文件中

00:03:26.820 --> 00:03:30.210
我们已经在尺寸资源中存储该 88dp 值 所以可以直接引用该值

00:03:30.210 --> 00:03:33.790
如果我们想更改列表项的高度

00:03:33.790 --> 00:03:35.933
例如增加到 96dp

00:03:35.933 --> 00:03:38.119
我们可以直接在一个地方做出更改

00:03:38.119 --> 00:03:42.830
所有引用该尺寸的地方都会自动更新

00:03:42.830 --> 00:03:45.810
回到 list_item 布局 在 ImageView 中

00:03:45.810 --> 00:03:50.700
我将宽度和高度更改为引用该尺寸资源

00:03:50.700 --> 00:03:55.870
称作 list_item_height

00:03:55.870 --> 00:03:56.460
最后

00:03:56.460 --> 00:04:00.510
我们可以删除这个使用篮子占位符图标的资源属性

00:04:00.510 --> 00:04:04.540
现在当应用运行时 我们可以动态地设置正确的图片

00:04:04.540 --> 00:04:06.650
没必要再使用这个属性了

00:04:07.890 --> 00:04:11.030
现在看看更改这些代码后 应用是否能如预期的正常运行

00:04:11.030 --> 00:04:16.260
这是应用在设备上的运行效果 点按 NumbersActivity 不错

00:04:16.260 --> 00:04:20.510
图片现在变成方形 尺寸为 88dp x 88dp

00:04:21.630 --> 00:04:24.570
图片的背景颜色是棕褐色

00:04:24.570 --> 00:04:26.330
到目前为止 一切看起来正常

00:04:26.330 --> 00:04:27.830
再转到文字部分

00:04:27.830 --> 00:04:31.260
首先 我们需要将背景颜色设为和文字部分相同的

00:04:31.260 --> 00:04:32.350
橘色

00:04:32.350 --> 00:04:35.450
这个橘色和我们在 MainActivity 中用于 Numbers 类别的

00:04:35.450 --> 00:04:38.060
背景颜色相同

00:04:38.060 --> 00:04:39.640
它的十六进制颜色 FT 8E09

00:04:39.640 --> 00:04:45.040
应该已经位于 colors.xml 文件中

00:04:45.040 --> 00:04:50.380
并且定义为颜色资源 称为 category_numbers

00:04:50.380 --> 00:04:52.230
回到 list_item 布局 我们添加这项内容

00:04:53.600 --> 00:04:57.300
对于这个包含两个 TextView 的 LinearLayout

00:04:57.300 --> 00:05:02.170
我们将其背景颜色设为 category_numbers

00:05:02.170 --> 00:05:06.615
指代为 @color/category_numbers

00:05:07.670 --> 00:05:10.780
通过在这个 LinearLayout 中设置该颜色

00:05:10.780 --> 00:05:13.720
将只影响到这些 TextView 的背景颜色

00:05:14.940 --> 00:05:17.667
现在再去看看红色标示 看看还剩下哪些需要改动

00:05:17.667 --> 00:05:20.816
我们需要更改这些 TextView 的字体样式

00:05:20.816 --> 00:05:25.130
应该是白色 米沃克单词应该是粗体

00:05:25.130 --> 00:05:28.110
并且二者的字体大小都应该是 18sp

00:05:28.110 --> 00:05:32.490
如果还记得上一门课程的内容的话 对应的是 textAppearanceMedium

00:05:32.490 --> 00:05:35.850
在 Miwok TextView 中 我将 textAppearance 属性设为

00:05:35.850 --> 00:05:38.170
textAppearanceMedium

00:05:38.170 --> 00:05:42.250
这会使字体大小变成 18sp

00:05:42.250 --> 00:05:44.400
然后将文本颜色设为白色

00:05:44.400 --> 00:05:47.840
我知道 Android 框架具有一个预定义的颜色资源

00:05:47.840 --> 00:05:54.059
我可以通过直接调用 @android:color/white 使用该资源

00:05:54.059 --> 00:05:57.070
最后 我将文本样式设为粗体

00:05:57.070 --> 00:05:58.350
我希望默认文字

00:05:58.350 --> 00:06:01.700
即英语翻译保持相似的样式

00:06:01.700 --> 00:06:05.590
textAppearance 设为 Medium 颜色设为白色

00:06:05.590 --> 00:06:06.640
但不希望设为粗体

00:06:06.640 --> 00:06:08.470
所以不复制这行代码

00:06:08.470 --> 00:06:12.570
在设备上看看效果 点按 NumbersActivity

00:06:12.570 --> 00:06:16.390
TextView 的外观和背景颜色看起来正确

00:06:16.390 --> 00:06:19.250
但是两个 TextView 的位置看起来不太正确

00:06:19.250 --> 00:06:21.890
现在 它们被挤在了橘色背景所示的

00:06:21.890 --> 00:06:25.290
垂直线性布局的左上角

00:06:25.290 --> 00:06:28.290
再回去看看红色指示 发现我们需要

00:06:28.290 --> 00:06:32.830
使这两个 TextView 在列表项中保持垂直居中

00:06:32.830 --> 00:06:36.670
要实现这一样式 我们先看看每个 TextView 的边界

00:06:36.670 --> 00:06:39.440
为此 我将在“设置”菜单中的开发者选项里

00:06:39.440 --> 00:06:41.520
打开“显示布局边界”

00:06:41.520 --> 00:06:43.170
还记得怎么找到该选项吗？

00:06:43.170 --> 00:06:46.620
转到“设置”向下滚动到开发者选项

00:06:46.620 --> 00:06:50.710
然后往下多滚动几次 找到“显示布局边界”

00:06:50.710 --> 00:06:52.430
返回我们的 Miwok 应用

00:06:52.430 --> 00:06:55.990
显示布局边界后 可以看出我们的两个 TextView

00:06:55.990 --> 00:06:59.030
被挤到了垂直线性布局的顶部边缘

00:06:59.030 --> 00:07:01.260
我需要将它们往下移移

00:07:01.260 --> 00:07:04.590
使它们在线性布局中占用更多的高度

00:07:04.590 --> 00:07:07.720
我们可以通过多种方式来更改该布局

00:07:07.720 --> 00:07:08.820
下面介绍一种方式

00:07:08.820 --> 00:07:10.470
在上一门课程中

00:07:10.470 --> 00:07:14.100
我们学习了我们可以向子视图分配布局权重

00:07:14.100 --> 00:07:18.340
使它们占用父线性布局的更多可用空间

00:07:18.340 --> 00:07:22.260
现在我可以将每个视图的高度设为 0 然后 weight 设为 1

00:07:22.260 --> 00:07:28.050
这样垂直空间就在这两个子视图之间均匀分布

00:07:28.050 --> 00:07:30.180
此外 我还可以使用 gravity 属性

00:07:30.180 --> 00:07:33.490
对于第一个 TextView 我将其 gravity 设为 bottom

00:07:33.490 --> 00:07:36.930
使文字内容转到该视图的底部

00:07:36.930 --> 00:07:40.810
对于第二个 TextView 我将其 gravity 属性设为 top

00:07:40.810 --> 00:07:44.750
使文字内容位于该 TextView 的顶部

00:07:44.750 --> 00:07:46.658
回到代码部分 代码应该是这样的

00:07:46.658 --> 00:07:51.335
Miwok 的 TextView 宽度为 match_parent

00:07:51.335 --> 00:07:53.564
并且 list_item 布局的其他部分也是这样的

00:07:53.564 --> 00:07:56.896
高度将为 0dp weight 为 1

00:07:56.896 --> 00:08:00.625
默认视图的宽度也是 match_parent

00:08:00.625 --> 00:08:04.620
高度也是 0dp weight 也是 1

00:08:04.620 --> 00:08:07.813
意味着这两个视图将平分父线性布局的

00:08:07.813 --> 00:08:09.222
可用高度

00:08:09.222 --> 00:08:12.909
然后设置 gravity 该属性会改变内容在

00:08:12.909 --> 00:08:13.490
视图中的位置

00:08:13.490 --> 00:08:16.610
但是注意 它不会改变视图的尺寸

00:08:16.610 --> 00:08:20.950
这里 我们将 Miwok TextView 中的文字放在底部

00:08:20.950 --> 00:08:23.320
将默认 TextView 中的文字放在顶部

00:08:24.930 --> 00:08:27.010
看看在设备上的运行效果

00:08:27.010 --> 00:08:28.360
点按 Numbers

00:08:28.360 --> 00:08:32.240
我们看到两个 TextView 都在列表项中居中了

00:08:32.240 --> 00:08:34.830
看看其他 Activity 的效果

00:08:34.830 --> 00:08:36.559
看起来不错

00:08:36.559 --> 00:08:40.470
现在唯一需要修复的就是列表项背景颜色

00:08:40.470 --> 00:08:44.100
使它们不再都使用橘色 而是各自具有对应的

00:08:44.100 --> 00:08:44.750
类别颜色

