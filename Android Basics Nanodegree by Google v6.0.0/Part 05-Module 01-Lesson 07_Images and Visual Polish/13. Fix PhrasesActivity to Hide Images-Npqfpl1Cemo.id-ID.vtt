WEBVTT
Kind: captions
Language: id-ID

00:00:00.490 --> 00:00:02.380
Langkah pertama adalah memikirkan
cara bagi

00:00:02.380 --> 00:00:05.930
WordAdapter untuk menentukan apakah
objek Word memiliki gambar atau tidak.

00:00:05.930 --> 00:00:08.500
Mari kita lihat file WordAdapter
di Android Studio.

00:00:08.500 --> 00:00:11.947
Di kelas WordAdapter ini, ingat
bahwa kita hanya ingin

00:00:11.947 --> 00:00:16.257
mengeksekusi baris-baris kode ini yang
mengatur ImageView, jika ada gambar untuk

00:00:16.257 --> 00:00:16.878
kata.

00:00:16.878 --> 00:00:20.821
Untuk itu, kita harus membuat dan
membuka metode lain di kelas Word,

00:00:20.821 --> 00:00:24.968
yang harus memberi tahu kita apakah kata
di posisi saat ini punya gambar.

00:00:24.968 --> 00:00:27.910
Saya akan melompat ke kelas Word dan
mendefinisikan metode itu.

00:00:27.910 --> 00:00:31.260
Di dasar kelas Word, saya akan membuat
metode public bernama

00:00:31.260 --> 00:00:35.310
hasImage dan memerintahkannya
mengembalikan nilai boolean.

00:00:35.310 --> 00:00:38.740
Saya ingin metode ini mengembalikan benar,
jika kata punya gambar dan

00:00:38.740 --> 00:00:42.310
salah, jika tidak ada gambar, dan ingat
sangat penting untuk selalu menambahkan

00:00:42.310 --> 00:00:47.020
komentar untuk membantu pembaca kode
yang akan saya tambahkan di sini.

00:00:47.020 --> 00:00:49.250
Bagaimana kita menentukan apakah
suatu kata punya gambar?

00:00:50.440 --> 00:00:52.670
Mari kita gulir ke atas,
ke puncak kelas Word.

00:00:52.670 --> 00:00:54.970
Ingat, kita punya variabel
ini di sini,

00:00:54.970 --> 00:00:57.810
mImageResourceId dan kita bisa memeriksanya.

00:00:57.810 --> 00:01:01.190
Kita perhatikan bahwa ini tidak membantu kita
memprediksi gambar apa yang dirujuk.

00:01:01.190 --> 00:01:03.790
Tapi dalam kasus kita, kita hanya perlu
menggunakannya untuk memeriksa apakah

00:01:03.790 --> 00:01:04.980
ada gambar valid atau tidak.

00:01:04.980 --> 00:01:09.240
Baik, ini adalah kasus penggunaan yang
bagus untuk nilai konstanta.

00:01:09.240 --> 00:01:12.600
Kita bisa membuat konstanta yang
merepresentasikan status tanpa gambar, dan

00:01:12.600 --> 00:01:14.270
saya akan melakukannya di sini.

00:01:14.270 --> 00:01:18.040
Saya buat variabel dengan huruf besar semua
NO_IMAGE_PROVIDED

00:01:18.040 --> 00:01:21.870
karena ini adalah konstanta, dan tiap
kata dipisahkan dengan garis bawah.

00:01:21.870 --> 00:01:25.180
Saya akan mengaturnya menjadi nilai
konstanta negatif satu, dan

00:01:25.180 --> 00:01:25.970
saya gunakan negatif satu,

00:01:25.970 --> 00:01:30.090
karena ini di luar kisaran dari semua
resourceID yang valid.

00:01:30.090 --> 00:01:33.430
Perhatikan juga bahwa konstanta ini
adalah variabel privat,

00:01:33.430 --> 00:01:36.200
karena kita hanya perlu menggunakannya
di dalam kelas Word.

00:01:36.200 --> 00:01:38.140
Setelah konstanta ini dibuat,

00:01:38.140 --> 00:01:42.550
saya akan mengatur variabel gambar agar
mulai di status tanpa gambar secara default.

00:01:42.550 --> 00:01:45.090
Saya akan mengaturnya sama dengan
konstanta tanpa gambar di sini.

00:01:46.450 --> 00:01:49.510
Segera setelah variabel diperbarui
menjadi yang lain,

00:01:49.510 --> 00:01:51.460
kita tahu bahwa Word punya gambar.

00:01:51.460 --> 00:01:54.640
Ini berarti bahwa jika ada gambar
di constructor ini,

00:01:54.640 --> 00:01:57.150
variabel ini akan diperbarui
menjadi sesuatu yang lain, dan

00:01:57.150 --> 00:02:01.150
Anda akan tahu bahwa kata itu punya
gambar, dan sebaliknya, jika tidak ada gambar

00:02:01.150 --> 00:02:04.400
yang tersedia, maka imageResourceID
masih akan tetap sama.

00:02:04.400 --> 00:02:07.020
Jadi, masih dengan nilai
konstanta negatif satu.

00:02:08.050 --> 00:02:12.040
Mari kembali turun ke metode
hasImage, yang harus kita lengkapi.

00:02:12.040 --> 00:02:15.850
Dalam metode ini, kita hanya perlu memeriksa
apakah variabel gambar sama dengan atau

00:02:15.850 --> 00:02:20.240
tidak sama dengan konstanta status
tanpa gambar (no image provided), dan tampaknya akan seperti ini, dan

00:02:20.240 --> 00:02:24.930
tanda seru disusul tanda sama dengan
menjadi tanda tidak sama dengan.

00:02:24.930 --> 00:02:29.260
Hasil dari ekspresi ini akan
benar atau salah, dan

00:02:29.260 --> 00:02:32.590
nilai itu dikembalikan sebagai
nilai return metode ini.

00:02:33.590 --> 00:02:36.770
Memang logika ini agak sedikit
membingungkan, tapi saya ingin Anda mencoba

00:02:36.770 --> 00:02:37.740
dan mengikuti.

00:02:37.740 --> 00:02:41.480
Jika variabel image resource tidak sama
dengan negatif satu,

00:02:41.480 --> 00:02:45.380
maka ada gambar valid, dan metode ini
harus mengembalikan benar, tapi jika

00:02:45.380 --> 00:02:49.620
variabel gambar sama dengan negatif
satu, maka tidak ada gambar untuk

00:02:49.620 --> 00:02:52.300
kata ini dan metode
akan mengembalikan salah.

00:02:52.300 --> 00:02:55.290
Kita tidak ingin memaksa kelas WordAdapter
untuk melakukan pemeriksaan kualitas,

00:02:55.290 --> 00:02:58.590
karena yang dipedulikannya hanya apakah
ada gambar atau tidak.

00:02:58.590 --> 00:03:01.660
WordAdapter tidak perlu tahu semua
perincian tentang bagaimana kita

00:03:01.660 --> 00:03:04.120
menggunakannya, kelas dalam kelas
Word yang memutuskannya.

00:03:04.120 --> 00:03:06.940
Inilah sebabnya semua logika ini
berada di dalam kelas Word.

00:03:06.940 --> 00:03:09.040
Baik.
Kerja bagus sejauh ini.

00:03:09.040 --> 00:03:13.100
Di kelas Word, kita telah membuka
metode public bernama hasImage.

00:03:13.100 --> 00:03:15.720
Mari kembali ke kelas
WordAdapter dan

00:03:15.720 --> 00:03:18.810
lihat bagaimana kita bisa menggunakan
metode hasImage ini di objek Word.

00:03:18.810 --> 00:03:20.580
Baris kode inilah yang
berhubungan dengan hal tersebut.

00:03:20.580 --> 00:03:23.860
Ingat, kita bisa menggunakan logika
kondisional, misalnya statemen if else.

00:03:23.860 --> 00:03:26.600
Sehingga kode kita berperilaku berbeda
bergantung pada apakah

00:03:26.600 --> 00:03:28.490
kata punya gambar atau tidak.

00:03:28.490 --> 00:03:31.950
Jika statemen if ini memeriksa bahwa
kata saat ini memiliki gambar

00:03:31.950 --> 00:03:35.170
maka kita berlanjut seperti sebelumnya, dan
mengatur gambar yang benar

00:03:35.170 --> 00:03:39.500
dari objek Word ke ImageView,
dan sebaliknya jika tidak demikian,

00:03:39.500 --> 00:03:42.610
kita harus menyembunyikan ImageView dan
ini akan masuk ke statemen else.

00:03:42.610 --> 00:03:46.300
Saya tadi telah menunjukkan beberapa kode
dan cara mengubah visibility suatu view,

00:03:46.300 --> 00:03:47.860
saat aplikasi berjalan.

00:03:47.860 --> 00:03:50.290
Ingat, dengan menggunakan metode
setVisibility,

00:03:50.290 --> 00:03:54.110
kita bisa benar-benar menyembunyikan gambar,
sehingga untuk itu saya akan mengaturnya ke gone.

00:03:55.390 --> 00:03:58.980
Baik melalui eksperimen maupun
membaca dokumentasi sendiri,

00:03:58.980 --> 00:04:01.990
saya harap Anda tahu bahwa gone berarti
bahwa view disembunyikan dan

00:04:01.990 --> 00:04:04.340
tak mengambil ruang apa pun dalam tata letak.

00:04:04.340 --> 00:04:07.500
Bandingkan ini dengan status invisible
yang berarti bahwa view

00:04:07.500 --> 00:04:09.640
tersembunyi tapi masih memakan
ruang dalam tata letak.

00:04:10.710 --> 00:04:14.760
Di aplikasi kita, jika kita atur ImageView
menjadi invisible, akan ada ruang kosong

00:04:14.760 --> 00:04:18.220
di sisi kiri item list
dan kita tidak mau begitu.

00:04:18.220 --> 00:04:22.500
Justru, kita atur ImageView ke gone,
sehingga benar-benar menyembunyikannya.

00:04:22.500 --> 00:04:24.748
Di sini saya ingin tambahkan komentar yang
menjelaskan apa yang dilakukan baris kode ini.

00:04:24.748 --> 00:04:26.758
[BLANK_AUDIO]

00:04:26.758 --> 00:04:28.560
Kembali ke statemen if,

00:04:28.560 --> 00:04:33.220
kita perlu kode yang sangat eksplisit dan
mengatur visibility ke visible

00:04:33.220 --> 00:04:37.310
jika memang ada gambar, sebelum kita
melakukannya karena view digunakan ulang.

00:04:37.310 --> 00:04:41.080
Jika view itu sebelumnya tersembunyi, kita
ingin memastikan bahwa view ini dibuat visible

00:04:41.080 --> 00:04:43.260
saat kita mengatur gambar
baru di ImageView.

00:04:43.260 --> 00:04:46.650
Baik, ada banyak
perubahan, tapi

00:04:46.650 --> 00:04:48.500
mari kita uji di
perangkat untuk melihat apa yang terjadi.

00:04:48.500 --> 00:04:50.320
Baik, ujian pertama adalah frasa.

00:04:50.320 --> 00:04:52.730
Tampak bagus, tanpa gambar.

00:04:54.160 --> 00:04:55.296
Mari kita coba angka.

00:04:55.296 --> 00:04:56.055
Bagus.

00:04:56.055 --> 00:04:57.190
Gambar.

00:04:57.190 --> 00:04:59.650
Anggota keluarga.

00:04:59.650 --> 00:05:02.160
Keren, muncul wajah-wajah lucu.

00:05:02.160 --> 00:05:02.990
Lalu warna.

00:05:04.100 --> 00:05:05.160
Spektrum yang bagus.

00:05:06.560 --> 00:05:09.730
Sempurna, semua kategori kita
berfungsi sesuai harapan.

00:05:09.730 --> 00:05:11.150
Kembali ke kuis.

00:05:11.150 --> 00:05:13.080
Mari kita jawab kedua pertanyaan ini.

00:05:13.080 --> 00:05:15.000
Untuk item list frasa,

00:05:15.000 --> 00:05:17.930
ImageView perlu diatur ke gone,
karena kita ingin menyembunyikannya.

00:05:17.930 --> 00:05:20.350
Dan kita tidak ingin memakan
ruang di dalam tata letak.

00:05:20.350 --> 00:05:23.620
Dengan demikian, kedua TextView dapat
bergeser ke kiri sepenuhnya.

00:05:23.620 --> 00:05:25.330
Sekarang untuk item list yang lainnya.

00:05:25.330 --> 00:05:27.620
ImageView harus
diatur ke visible

00:05:27.620 --> 00:05:29.310
sehingga pengguna bisa melihatnya.

00:05:29.310 --> 00:05:30.730
Ini mencerminkan apa yang
kita lakukan dalam kode.

00:05:30.730 --> 00:05:32.760
Dan aplikasi tampak seperti yang kita inginkan.

00:05:32.760 --> 00:05:34.830
Benar-benar kerja bagus
dalam kuis yang sangat menantang ini.

