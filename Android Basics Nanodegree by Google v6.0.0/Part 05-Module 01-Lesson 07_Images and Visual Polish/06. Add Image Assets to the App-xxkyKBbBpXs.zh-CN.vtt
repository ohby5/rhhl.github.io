WEBVTT
Kind: captions
Language: zh-CN

00:00:00.380 --> 00:00:01.810
现在你可能会疑问

00:00:01.810 --> 00:00:04.040
为何所有资源不只提供一个版本？

00:00:05.110 --> 00:00:07.000
我们来看看这个页面

00:00:07.000 --> 00:00:10.169
网址是 design.google.com/devices

00:00:10.169 --> 00:00:14.100
该页面列出了所有热门的 Android 设备

00:00:14.100 --> 00:00:18.220
某些是手机 某些是平板电脑 甚至还有一些是手表

00:00:18.220 --> 00:00:21.260
但是请注意 这里并没列出所有的设备

00:00:21.260 --> 00:00:25.560
这个图表的作用是你可以查找屏幕的尺寸（用 dip 表示）

00:00:25.560 --> 00:00:28.770
以及设备的密度

00:00:28.770 --> 00:00:36.870
这里有 hdpi  xhdpi 和 xxhdpi

00:00:36.870 --> 00:00:40.450
可以看出 这里有各种各样的 Android 设备

00:00:40.450 --> 00:00:42.160
并且具有不同的密度

00:00:42.160 --> 00:00:45.859
现在复习下密度的定义 我们打开 Android Developers 文档

00:00:45.859 --> 00:00:50.690
并找到主题“支持多种屏幕 (Supporting Multiple Screens)”

00:00:50.690 --> 00:00:54.970
这里是屏幕密度的定义

00:00:54.970 --> 00:00:58.930
密度是指屏幕单位面积内的像素数量

00:00:58.930 --> 00:01:01.960
通常用 dpi(每英寸点数)来表示

00:01:03.110 --> 00:01:06.832
屏幕密度划通常分为五大类 你需要熟悉这五大类

00:01:06.832 --> 00:01:13.370
mdpi 设备（中等密度设备）每英寸具有大约 160 个点

00:01:13.370 --> 00:01:18.210
hdpi 设备（高密度设备）每英寸具有大约 240 个点

00:01:18.210 --> 00:01:24.220
xhdpi 设备（超高密度设备）每英寸具有大约 320 个点 

00:01:24.220 --> 00:01:26.470
像素点的数量逐步增加

00:01:26.470 --> 00:01:29.720
对于超超超高密度设备（即 xxx）来说

00:01:29.720 --> 00:01:34.160
每英寸具有大约 640 个点

00:01:34.160 --> 00:01:36.910
根据名称和数量可以判断

00:01:36.910 --> 00:01:40.700
随着密度的增大 屏幕上的像素数量会随之增多

00:01:40.700 --> 00:01:44.190
随着时间的推移 设备硬件越来越完善

00:01:44.190 --> 00:01:48.220
设备分辨率越来越高 屏幕上具有的像素数量

00:01:48.220 --> 00:01:53.160
比这里显示的还要多 但是我们暂时先讨论这五大类

00:01:53.160 --> 00:01:56.700
在上一门课程中 我们学习了我们可以用

00:01:56.700 --> 00:01:59.400
密度独立像素来表示宽度和高度值

00:01:59.400 --> 00:02:03.900
也就是说我们可以规定按钮的尺寸为 48 x 48 dip

00:02:03.900 --> 00:02:08.210
实际上 Android 会根据设备的屏幕密度

00:02:08.210 --> 00:02:09.910
将这一值转换为不同的像素数量

00:02:09.910 --> 00:02:13.050
那么对图片来说是如何操作的呢

00:02:13.050 --> 00:02:16.815
作为开发者 你应该用 dp 值来声明

00:02:16.815 --> 00:02:22.665
图片的宽度和高度 例如 48dp x 48dp

00:02:22.665 --> 00:02:25.575
然后 Android 会确保所有这些图片

00:02:25.575 --> 00:02:28.691
在各种不同的设备上大概保持相同的尺寸

00:02:28.691 --> 00:02:31.815
无论是每英寸的像素数量很少

00:02:31.815 --> 00:02:34.195
还是每英寸的像素数量很多

00:02:34.195 --> 00:02:37.014
但是 如果我们只有一个版本的图片

00:02:37.014 --> 00:02:40.050
则对于屏幕上具有更多像素的高密度设备来说

00:02:40.050 --> 00:02:44.120
Android 可能需要拉伸图片

00:02:44.120 --> 00:02:47.040
或者另一方面 如果图片上的像素很多

00:02:47.040 --> 00:02:51.180
Android 可能需要针对低密度设备

00:02:51.180 --> 00:02:53.140
缩小图片

00:02:53.140 --> 00:02:56.430
无论是哪种情况 图片都可能会看起来扭曲了或者变得模糊不清

00:02:56.430 --> 00:02:58.370
我们肯定不希望出现这种情况

00:02:58.370 --> 00:03:01.850
要解决该问题 我们可以针对每个密度类别

00:03:01.850 --> 00:03:04.890
为同一图片提供不同尺寸的版本

00:03:04.890 --> 00:03:08.225
这样会在所有设备上都能显示非常清晰的图片

00:03:08.225 --> 00:03:11.357
应用运行时 Android 设备不会对图片

00:03:11.357 --> 00:03:14.162
做出太多的拉伸或缩小处理

00:03:14.162 --> 00:03:18.714
设计师要知道提供哪些尺寸的资源

00:03:18.714 --> 00:03:20.025
他们可以遵守一定的独立像素与像素转换比例

00:03:20.025 --> 00:03:24.190
对中密度设备来说 1 dp = 1 px

00:03:24.190 --> 00:03:28.820
所以如果我们希望图片的尺寸是 48dp x 48dp

00:03:28.820 --> 00:03:34.110
那么该图片的 mdpi 版本应该是 48px x 48px

00:03:34.110 --> 00:03:38.820
对于高密度设备来说 1 dp = 1.5 px

00:03:38.820 --> 00:03:43.380
所以如果我们希望图片的尺寸为 48dp x 48dp

00:03:43.380 --> 00:03:48.440
那么该图片的 hdpi 版本应该为 72px x 72px

00:03:48.440 --> 00:03:50.290
我们可以根据提供的比例计算出

00:03:50.290 --> 00:03:53.550
高分辨率的尺寸

00:03:53.550 --> 00:03:57.680
可以看出 图片的 xxxhdpi 版本

00:03:57.680 --> 00:04:00.940
要比 mdpi 版本大了很多

00:04:00.940 --> 00:04:06.440
那是因为 xxxhdpi 设备的屏幕上有更多的像素

00:04:06.440 --> 00:04:10.380
最终这些图片在用户的设备上

00:04:10.380 --> 00:04:12.370
看起来尺寸将保持相同

00:04:13.450 --> 00:04:16.390
现在再仔细研究下我们提供的图片的

00:04:16.390 --> 00:04:17.010
像素尺寸

00:04:18.440 --> 00:04:21.079
我们打开 drawable-mdpi 文件夹

00:04:22.410 --> 00:04:25.310
看看 family_son 图片

00:04:25.310 --> 00:04:29.940
选中该文件 右击并选择“查看信息 (get info)”

00:04:32.010 --> 00:04:34.950
在这里 对于该图片的 mdpi 版本

00:04:34.950 --> 00:04:39.450
我们看到尺寸是 88 X 88 像素

00:04:39.450 --> 00:04:44.540
所以在最终应用中 该图片的尺寸将显示为 88dp x 88dp

00:04:44.540 --> 00:04:50.000
所以该版本的尺寸必须为 88px x 88px

00:04:50.000 --> 00:04:53.720
因为对于 mdpi 设备来说 1dp=1px

00:04:53.720 --> 00:04:58.930
那么对于同一图片的 xxxhdpi 版本来说 像素尺寸是多少？

00:04:58.930 --> 00:05:04.540
转到 drawable-xxxhdpi 文件夹

00:05:04.540 --> 00:05:09.790
找到 family_son 图片 选中它 同样选择“查看信息 (get info)”

00:05:12.790 --> 00:05:16.180
我们发现这里的图片大多了

00:05:16.180 --> 00:05:21.850
在这里列出尺寸是 352 x 352 像素

00:05:21.850 --> 00:05:25.060
我们这里是在应用将需要的存储空间和

00:05:25.060 --> 00:05:29.200
应用将需要的处理能力之间找到一个折中

00:05:29.200 --> 00:05:31.660
当我们提供多个版本的资源时

00:05:31.660 --> 00:05:36.360
应用的确会占用更多的存储空间 但是却需要更少的处理能力

00:05:36.360 --> 00:05:40.300
对于移动设备来说 这是一个非常数值得达成的折中点

00:05:40.300 --> 00:05:43.180
因为这意味着我们的设备将能够在处理能力更低的设备上运行

00:05:43.180 --> 00:05:45.450
而不会遇到性能问题

00:05:45.450 --> 00:05:48.910
现在我们已经明白为何在不同的文件夹里提供不同尺寸的

00:05:48.910 --> 00:05:50.620
不同资源

00:05:50.620 --> 00:05:53.260
那么请将所有这些图片添加到你的应用中吧

00:05:53.260 --> 00:05:54.980
复制每个 drawable 文件夹

00:05:54.980 --> 00:05:58.840
然后在 Android Studio 中添加到应用的 res 目录下

00:05:58.840 --> 00:06:00.250
转到 Android Studio

00:06:00.250 --> 00:06:06.060
我们看到所有 mdpi 版本的图片都位于 drawable-mdpi 文件夹内

00:06:07.070 --> 00:06:09.110
hdpi 文件夹也是一样的

00:06:09.110 --> 00:06:10.770
所有 hdpi 图片都位于这里

00:06:12.050 --> 00:06:15.170
所有其他分辨率也一样

00:06:15.170 --> 00:06:17.918
将所有这些文件都添加到 res 目录下后

00:06:17.918 --> 00:06:20.469
你的应用应该具有这五个新文件夹

00:06:21.630 --> 00:06:24.330
现在我们已经明白为何在不同的文件夹里

00:06:24.330 --> 00:06:27.560
提供不同尺寸的不同资源 那么请将所有这些资源

00:06:27.560 --> 00:06:29.560
添加到你的应用中吧

00:06:29.560 --> 00:06:31.864
复制每个 drawable 文件夹

00:06:31.864 --> 00:06:34.800
然后在 Android Studio 中添加到应用的 res 目录下

