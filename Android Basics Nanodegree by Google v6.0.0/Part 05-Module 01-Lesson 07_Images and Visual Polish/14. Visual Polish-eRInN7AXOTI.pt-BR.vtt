WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:04.267
Vou mostrar como fazer
as mudanças de layout XML apropriadas,

00:00:04.300 --> 00:00:07.667
para que nosso aplicativo corresponda
às indicações do designer.

00:00:07.701 --> 00:00:09.868
Vamos começar
com uma fácil.

00:00:09.901 --> 00:00:13.834
Percebi logo que há muito padding
na versão atual do aplicativo.

00:00:13.868 --> 00:00:15.934
Quando eu rolo
o aplicativo,

00:00:15.968 --> 00:00:19.334
veja que o padding está
ao redor de toda a lista.

00:00:19.367 --> 00:00:22.501
Mesmo se eu rolar a lista,
o padding continua.

00:00:22.534 --> 00:00:26.534
Isso significa que o padding deve estar
na ListView.

00:00:26.567 --> 00:00:31.767
Lembre-se de que declaramos o elemento XML
da ListView no arquivo XML word_list.

00:00:31.801 --> 00:00:35.300
E, de fato,
os valores padding estão definidos lá.

00:00:35.334 --> 00:00:37.667
Então vamos removê-los.

00:00:38.567 --> 00:00:41.367
Se também formos
para o arquivo dimens.xml,

00:00:41.400 --> 00:00:44.567
meu código não se reverte mais
para estes valores de dimensão.

00:00:44.601 --> 00:00:49.234
Os valores da activity_horizontal_margin
e da activity_vertical_margin.

00:00:49.267 --> 00:00:53.000
Então posso deletar estas duas linhas
do arquivo values/dimens.xml,

00:00:53.033 --> 00:00:56.601
onde a activity_horizontal_margin
e a activity_vertical_margin

00:00:56.634 --> 00:00:59.801
foram definidas inicialmente
para 16dp.

00:00:59.834 --> 00:01:03.000
Então vou deixar esta outra dimensão
que está no arquivo,

00:01:03.033 --> 00:01:06.801
esta para a list_item_height,
porque vamos precisar dela.

00:01:06.834 --> 00:01:10.267
Temos mais um arquivo de dimensão
sobrando,

00:01:10.300 --> 00:01:13.234
que está definido
para w820dp.

00:01:13.267 --> 00:01:16.033
Ele é usado para dispositivos
com telas maiores.

00:01:16.067 --> 00:01:21.300
Dentro dele, temos um valor ainda maior
para a activity_horizontal_margin.

00:01:21.334 --> 00:01:26.968
Mas não precisamos mais desta dimensão,
então podemos deletar o arquivo todo.

00:01:27.000 --> 00:01:32.100
Então irei até o Project,
acharei o arquivo e deletarei.

00:01:32.801 --> 00:01:34.934
Vamos ver
como está o aplicativo.

00:01:34.968 --> 00:01:38.167
Vou clicar na aba dos Números.
Legal.

00:01:38.200 --> 00:01:42.501
As mudanças acabaram
com a margem de 16dp ao redor da lista.

00:01:42.534 --> 00:01:43.634
Bom trabalho.

00:01:43.667 --> 00:01:46.000
Agora vamos para o layout
dos itens de lista.

00:01:46.033 --> 00:01:50.934
Lembre-se de que cada item deve
ter uma altura mínima de 88dp.

00:01:50.968 --> 00:01:55.801
Este número parece familiar
porque já o salvamos no arquivo dimens.xml.

00:01:55.834 --> 00:01:58.901
Salvamos como o valor
da list_item_height.

00:01:58.934 --> 00:02:01.400
Vou copiar isto
para usar mais tarde.

00:02:01.434 --> 00:02:06.434
Voltando para o layout dos itens de lista,
temos que nos referir a ele assim.

00:02:06.467 --> 00:02:12.367
Aqui, defini a altura mínima
para se referir a @dimen/list_item_height.

00:02:12.400 --> 00:02:16.400
Veja que preferi definir
o valor de altura mínima como 88dp

00:02:16.434 --> 00:02:19.667
do que fixar a altura como 88
exatamente.

00:02:19.701 --> 00:02:25.567
Isto significa que o LinearLayout deve ter,
no mínimo, 88dp de altura,

00:02:25.601 --> 00:02:30.133
mas pode ser mais alto dependendo
do conteúdo dentro do item de lista.

00:02:30.167 --> 00:02:34.968
Na simulação da NumbersActivity,
veja que o plano de fundo de cada item

00:02:35.000 --> 00:02:38.300
tem esta cor bege dada
por este valor hexadecimal.

00:02:38.334 --> 00:02:41.634
Já usamos essa cor
na tela da activity principal,

00:02:41.667 --> 00:02:44.701
então a armazenamos
no arquivo color.xml.

00:02:45.200 --> 00:02:49.200
Temos o valor hexadecimal
para a cor de que precisamos aqui.

00:02:49.234 --> 00:02:53.801
De volta ao layout dos itens de lista,
vamos nos referir àquela cor.

00:02:56.267 --> 00:03:00.634
Aqui no LinearLayout raiz, defini
o plano de fundo de todo o layout linear

00:03:00.667 --> 00:03:06.133
como o recurso de cor
@color/tan_background,

00:03:06.167 --> 00:03:10.234
e podemos nos referir aos recursos de cor
usando a sintaxe @color

00:03:10.267 --> 00:03:13.467
barra o nome do recurso de cor
que queremos.

00:03:13.501 --> 00:03:15.400
Vamos voltar às indicações.

00:03:15.434 --> 00:03:19.701
A imagem deve ser um quadrado
com 88dp para a altura e a largura.

00:03:19.734 --> 00:03:23.300
Basicamente, deve ser tão alta
quanto um item de lista.

00:03:23.334 --> 00:03:28.434
No arquivo dimens.xml, já armazenamos
esse 88dp no recurso de dimensões

00:03:28.467 --> 00:03:30.167
então podemos nos referir
a ele.

00:03:30.200 --> 00:03:33.767
Significa que, se decidirmos
mudar a altura do item de lista,

00:03:33.801 --> 00:03:38.601
por exemplo, aumentando para 96dp,
poderemos mudar um só lugar,

00:03:38.634 --> 00:03:42.801
de forma que todos os lugares que se referem
a ele serão atualizados automaticamente.

00:03:42.834 --> 00:03:46.567
De volta ao layout dos itens de lista,
dentro da ImageView,

00:03:46.601 --> 00:03:52.534
vou mudar a altura e a largura
para se referirem ao recurso list_item_height.

00:03:55.200 --> 00:04:00.467
Por fim, podemos excluir este atributo source
que usa o ícone marcador de posição.

00:04:00.501 --> 00:04:04.501
Agora que podemos definir a imagem
dinamicamente com o aplicativo em execução,

00:04:04.534 --> 00:04:07.367
não é mais necessário
ter esse atributo.

00:04:07.901 --> 00:04:11.000
Agora vamos ver
se tudo está como esperado.

00:04:11.033 --> 00:04:16.234
Aqui está o aplicativo em execução.
Vou clicar nos Números. Legal.

00:04:16.267 --> 00:04:21.200
Agora a imagem é um quadrado
com dimensões 88dp por 88dp.

00:04:21.234 --> 00:04:25.901
E a cor do plano de fundo da imagem é bege,
então está tudo bem até agora.

00:04:25.934 --> 00:04:27.801
Agora vamos
para a parte do texto.

00:04:27.834 --> 00:04:32.300
Primeiro, temos que definir a cor
do plano de fundo como este mesmo laranja.

00:04:32.334 --> 00:04:38.033
E esta cor é a mesma cor do plano de fundo
da categoria Números na activity principal.

00:04:38.067 --> 00:04:41.934
Então a cor hexadecimal,
#FT8E09,

00:04:41.968 --> 00:04:45.000
já deve estar
no arquivo colors.xml.

00:04:45.033 --> 00:04:50.334
De fato, está definida
como o recurso de cor category_numbers.

00:04:50.367 --> 00:04:53.567
Voltando ao layout de itens de lista,
vamos adicioná-la.

00:04:53.601 --> 00:04:56.801
Para o LinearLayout
que contém as duas TextViews,

00:04:56.834 --> 00:05:01.968
vamos definir sua cor de plano de fundo
como o recurso category_numbers

00:05:02.000 --> 00:05:06.834
e nos referir a ela
como @color/category_numbers.

00:05:07.667 --> 00:05:10.734
Ao definir a cor
neste LinearLayout,

00:05:10.767 --> 00:05:14.534
só influenciaremos os planos de fundo
das TextViews.

00:05:14.567 --> 00:05:17.901
Vamos voltar para as indicações
e ver o que falta.

00:05:17.934 --> 00:05:21.267
Precisamos mudar o estilo de fonte
destas exibições de texto.

00:05:21.300 --> 00:05:25.100
Elas devem ser brancas,
e a palavra miwok deve estar em negrito.

00:05:25.133 --> 00:05:28.067
Ambas devem ter
o tamanho 18sp,

00:05:28.100 --> 00:05:32.467
que, se você se lembrar do último curso,
mapeia a aparência textual média.

00:05:32.501 --> 00:05:35.801
Na TextView miwok,
vou definir o atributo textAppearance

00:05:35.834 --> 00:05:38.133
como textAppearanceMedium.

00:05:38.167 --> 00:05:41.868
Isso nos dá
o tamanho de fonte 18sp.

00:05:41.901 --> 00:05:44.200
Aí vou definir a textColor
como branca,

00:05:44.234 --> 00:05:47.801
pois sei que o framework do Android
tem esse recurso predefinido.

00:05:47.834 --> 00:05:53.601
Então posso usá-lo
chamando @android:color/white.

00:05:54.300 --> 00:05:57.033
Por fim,
quero definir o textStyle como negrito.

00:05:57.067 --> 00:06:01.667
Então quero repetir algo semelhante
para a TextView das traduções em inglês.

00:06:01.701 --> 00:06:06.601
Quero que a aparência do texto seja média,
e a cor, branca, mas não quero em negrito.

00:06:06.634 --> 00:06:08.434
Então não vou copiar
essa linha.

00:06:08.467 --> 00:06:12.534
Certo, vamos checar nosso dispositivo.
Vou clicar na activity Números.

00:06:12.567 --> 00:06:16.267
A aparência dos textos
e o plano de fundo parecem corretos,

00:06:16.300 --> 00:06:19.200
mas as posição das duas TextViews
não está boa.

00:06:19.234 --> 00:06:21.868
Elas estão imprensadas
no canto superior esquerdo

00:06:21.901 --> 00:06:25.267
do layout linear vertical,
aqui no plano de fundo laranja.

00:06:25.300 --> 00:06:30.000
Se olharmos as indicações em vermelho,
precisamos que as 2 TextViews

00:06:30.033 --> 00:06:32.801
estejam centradas verticalmente
nos itens de lista.

00:06:32.834 --> 00:06:36.634
Para saber como,
vamos revelar os limites de cada TextView,

00:06:36.667 --> 00:06:39.400
e, para nos ajudar,
vou ao "Mostrar limites de layout"

00:06:39.434 --> 00:06:41.968
nas opções do desenvolvedor
no menu de configurações.

00:06:42.000 --> 00:06:44.467
Lembra-se de como chegar lá?
Vá até "Configurações",

00:06:44.501 --> 00:06:50.467
"opções do desenvolvedor" e,
embaixo, "mostrar limites de layout".

00:06:50.501 --> 00:06:52.400
Vamos voltar
ao aplicativo miwok.

00:06:52.434 --> 00:06:55.934
Com os limites à mostra,
vejo que as duas TextViews

00:06:55.968 --> 00:06:59.000
estão imprensadas na borda superior
do layout linear vertical.

00:06:59.033 --> 00:07:04.567
Preciso movê-las um pouco para baixo,
para que ocupem uma altura vertical maior.

00:07:04.601 --> 00:07:08.801
Há várias maneiras de ajustar o layout,
e vou mostrar uma delas.

00:07:08.834 --> 00:07:10.400
No curso passado,

00:07:10.434 --> 00:07:14.067
aprendemos a atribuir pesos de layout
às Views filhas,

00:07:14.100 --> 00:07:18.300
para que elas ocupem mais espaço disponível
no layout linear pai.

00:07:18.334 --> 00:07:23.434
Posso atribuir 0 como a altura de cada View
e dar a elas peso 1,

00:07:23.467 --> 00:07:28.000
para que o espaço vertical seja dividido
igualmente entre as Views filhas.

00:07:28.033 --> 00:07:30.133
Além disso,
posso usar o atributo gravity.

00:07:30.167 --> 00:07:33.467
Para a 1ª TextView,
vou definir seu valor gravity como bottom,

00:07:33.501 --> 00:07:36.901
o que vai posicionar o texto
na parte de baixo da View.

00:07:36.934 --> 00:07:40.767
Para a 2ª TextView,
vou defini-lo como top,

00:07:40.801 --> 00:07:44.701
posicionando o texto
na parte de cima da TextView.

00:07:44.734 --> 00:07:47.200
O código deve ficar assim.

00:07:47.701 --> 00:07:50.834
A miwok_text_view
tem a largura match_parent,

00:07:50.868 --> 00:07:53.701
que vai preencher o resto
do layout dos itens.

00:07:53.734 --> 00:07:57.033
Sua altura será 0dp,
e seu peso será 1.

00:07:57.067 --> 00:08:00.534
A default_text_view
também tem largura match_parent.

00:08:00.567 --> 00:08:04.601
Sua altura também é 0dp,
e seu peso também é 1.

00:08:04.634 --> 00:08:07.934
Isso significa que as 2 TextViews
vão dividir a altura disponível

00:08:07.968 --> 00:08:09.367
no layout linear pai.

00:08:09.400 --> 00:08:13.734
Aí definimos o gravity,
que muda a posição do conteúdo da View.

00:08:13.767 --> 00:08:16.567
Veja que ele não muda
o tamanho da View.

00:08:16.601 --> 00:08:20.901
Aqui, posicionamos o texto dentro
da miwok_text_view na parte de baixo,

00:08:20.934 --> 00:08:24.901
e o texto dentro da default_text_view
na parte de cima.

00:08:24.934 --> 00:08:26.968
E fica assim
no dispositivo.

00:08:27.000 --> 00:08:28.334
Clicando no Números,

00:08:28.367 --> 00:08:32.200
vemos que as duas TextViews
estão centralizadas no item de lista.

00:08:32.234 --> 00:08:34.801
Vamos ver
como as outras activities ficaram.

00:08:34.834 --> 00:08:36.334
Elas estão boas.

00:08:36.367 --> 00:08:40.434
Agora só precisamos consertar
a cor do plano de fundo dos itens de lista,

00:08:40.467 --> 00:08:42.400
para que não usem todos
este laranja

00:08:42.434 --> 00:08:45.567
e, no lugar, usem as cores apropriadas
para cada categoria.

