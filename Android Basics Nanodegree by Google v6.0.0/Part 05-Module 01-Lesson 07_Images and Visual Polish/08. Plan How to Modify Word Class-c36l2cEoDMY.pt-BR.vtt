WEBVTT
Kind: captions
Language: pt-BR

00:00:00.252 --> 00:00:04.104
Atualmente, a classe de palavra
contém duas variáveis string;

00:00:04.132 --> 00:00:08.009
uma para a tradução padrão,
e outra para a tradução para miwok.

00:00:08.042 --> 00:00:12.140
Ambas as variáveis são privadas,
mas temos métodos públicos

00:00:12.173 --> 00:00:16.720
que outras classes podem usar
para obter acesso ao estado do objeto.

00:00:16.753 --> 00:00:20.454
Para adicionar suporte a imagens,
precisamos de uma nova variável

00:00:20.487 --> 00:00:24.430
para monitorar a imagem associada
a cada objeto de palavra.

00:00:24.463 --> 00:00:26.782
Qual será o tipo de dados
da variável?

00:00:26.815 --> 00:00:31.265
Poderíamos armazenar a imagem real,
mas isso consome muita memória,

00:00:31.298 --> 00:00:34.640
pois nossas ilustrações
não são pequenas.

00:00:34.673 --> 00:00:38.906
Além disso, em uma lista longa,
se rolarmos a tela até o fim,

00:00:38.939 --> 00:00:41.840
seria um desperdício
armazenar todas as imagens

00:00:41.873 --> 00:00:43.780
se elas já sumiram da tela.

00:00:43.813 --> 00:00:47.951
Isso inflaria a quantidade de memória
usada pela lista de palavras.

00:00:47.984 --> 00:00:52.886
Um método mais eficiente é armazenar
o ID de recurso de cada imagem.

00:00:52.919 --> 00:00:58.286
Um ID de recurso, algo tipo
R.drawable.number_one,

00:00:58.319 --> 00:00:59.958
é um inteiro.

00:00:59.991 --> 00:01:02.454
Então em vez de armazenar
a imagem real,

00:01:02.487 --> 00:01:06.841
armazenamos o nome do recurso
para achá-lo depois.

00:01:06.874 --> 00:01:09.985
Imagine a situação
como uma agenda de endereços.

00:01:10.018 --> 00:01:13.760
Você não precisa armazenar
a casa de alguém na agenda.

00:01:13.793 --> 00:01:17.062
Em vez disso,
você armazena o endereço.

00:01:17.095 --> 00:01:21.919
Caso precise dele, basta procurar
o endereço e achar a casa da pessoa.

00:01:21.952 --> 00:01:23.479
De volta à situação.

00:01:23.512 --> 00:01:27.516
Se o ListView pede um layout
de itens de lista para esta palavra,

00:01:27.549 --> 00:01:31.174
é responsabilidade do WordAdapter
retornar o ID de recurso,

00:01:31.207 --> 00:01:34.228
algo como
R.drawable.number_one,

00:01:34.261 --> 00:01:39.252
e transformá-lo em uma imagem real
de uma noz, que será exibida na tela.

00:01:39.285 --> 00:01:43.711
Vemos aqui que cada classe de palavra
contém 2 strings e 1 inteiro

00:01:43.744 --> 00:01:45.729
para o ID de recurso
de imagem.

00:01:45.762 --> 00:01:48.902
Para seguir a convenção
das variáveis da classe,

00:01:48.935 --> 00:01:51.773
estas variáveis de estado
devem ser declaradas

00:01:51.806 --> 00:01:54.931
com o modificador de acesso
privado, e não público.

00:01:54.964 --> 00:01:58.610
Isso significa que somente
métodos desta classe

00:01:58.643 --> 00:02:01.292
podem acessar
estas variáveis privadas.

00:02:01.325 --> 00:02:03.954
Podemos confiar
que os métodos desta classe

00:02:03.987 --> 00:02:06.705
vão modificar o ID de recurso
adequadamente.

00:02:06.738 --> 00:02:08.694
A variável não deve
ser pública,

00:02:08.727 --> 00:02:12.228
pois outras classes podem mudar
o ID de recurso de imagem

00:02:12.261 --> 00:02:15.469
para algo inválido,
o que faria o app falhar

00:02:15.502 --> 00:02:19.702
ao tentarmos traduzir o ID
de recurso em uma imagem real.

00:02:19.735 --> 00:02:22.030
De volta à 1ª pergunta
do teste.

00:02:22.063 --> 00:02:25.255
Que estado adicional
um objeto de palavra conteria?

00:02:25.288 --> 00:02:27.868
Precisamos de uma variável
inteira privada

00:02:27.901 --> 00:02:29.778
para o ID de recurso
de imagem.

00:02:29.811 --> 00:02:33.563
Como esta variável é privada,
precisamos de um método público

00:02:33.596 --> 00:02:38.210
para que outras classes acessem a imagem
associada a este objeto de palavra.

00:02:38.243 --> 00:02:41.862
A propósito, só crie modificadores
de acesso público

00:02:41.895 --> 00:02:43.924
para acessar
variáveis privadas

00:02:43.957 --> 00:02:47.843
caso outras classes
precisem dos métodos.

00:02:47.876 --> 00:02:50.470
Se criássemos
variáveis adicionais

00:02:50.503 --> 00:02:55.239
para gerenciar o objeto internamente,
elas não precisariam ser exógenas.

00:02:55.272 --> 00:02:58.019
Não precisamos criar
métodos get públicos

00:02:58.052 --> 00:03:01.351
para expôr as variáveis
a interlocutores externos.

00:03:01.384 --> 00:03:05.594
De volta à 2ª pergunta:
que método adicional deveríamos ter?

00:03:05.627 --> 00:03:09.239
Um método público
chamado getImageResourceId

00:03:09.272 --> 00:03:12.535
para retornar o ID de recurso
da imagem inteira.

