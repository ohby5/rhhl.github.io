WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:04.333
Bom trabalho liberando os recursos
do MediaPlayer quando não eram mais necessários.

00:00:04.367 --> 00:00:07.733
Você já está seguindo as boas práticas
do desenvolvimento Android.

00:00:07.767 --> 00:00:09.433
Bem, a maioria.

00:00:09.467 --> 00:00:14.833
Agora quero dar mais detalhes que exigirão
que nós modifiquemos o código um pouco mais.

00:00:14.867 --> 00:00:20.433
A questão é que temos trabalhado achando
que o usuário ficará sempre no aplicativo.

00:00:20.467 --> 00:00:26.033
E se ele decidir usar um navegador da Web
ou fazer um telefonema?

00:00:26.633 --> 00:00:29.733
Se o usuário não estiver olhando ativamente
para o aplicativo,

00:00:29.767 --> 00:00:33.533
não podemos terminar de executar o código
e liberar os recursos.

00:00:33.567 --> 00:00:37.767
Se o usuário abrir vários outros aplicativos
e nunca voltar ao aplicativo Miwok,

00:00:37.800 --> 00:00:41.900
o Android vai acabar apagando nossa activity
para usar esses recursos

00:00:41.933 --> 00:00:44.900
para executar aplicativos recentes
que o usuário tem usado.

00:00:44.933 --> 00:00:49.067
Como desenvolvedores, temos que estar prontos
para o usuário nos deixar quando quiser

00:00:49.100 --> 00:00:53.800
ou para o sistema destruir nossa activity
por precisar dos recursos.

00:00:53.833 --> 00:00:57.200
Por exemplo, num aplicativo de e-mail,
o desenvolvedor é responsável

00:00:57.233 --> 00:01:00.300
por armazenar a versão mais recente
do rascunho de e-mail,

00:01:00.333 --> 00:01:03.467
para que, quando o usuário retornar,
mesmo depois de dias ou meses,

00:01:03.500 --> 00:01:06.533
pareça que ele nunca saiu
do aplicativo.

00:01:06.567 --> 00:01:09.533
Neste caso,
o desenvolvedor deve indicar para o sistema

00:01:09.567 --> 00:01:12.933
que ele está interessado em saber
quando o usuário deixar a activity atual.

00:01:12.967 --> 00:01:16.867
A essa altura, o desenvolvedor deve salvar
a versão mais recente do rascunho.

00:01:16.900 --> 00:01:22.100
Mais tarde, quando o usuário voltar,
o rascunho deve estar preenchido na tela.

00:01:22.133 --> 00:01:27.367
Seria ruim se ele voltasse para o rascunho,
e a tela estivesse em branco

00:01:27.400 --> 00:01:30.467
porque as mudanças
nunca foram salvas.

00:01:30.500 --> 00:01:35.033
Tudo isso é impulsionado pela necessidade
de conservar recursos de memória no dispositivo.

00:01:35.067 --> 00:01:39.267
O Android quer ter recursos suficientes
para que o aplicativo em uso

00:01:39.300 --> 00:01:43.067
seja rápido e receptivo,
e que os recursos não sejam desperdiçados

00:01:43.100 --> 00:01:46.400
em aplicativos
que não são usados há um tempo.

00:01:46.433 --> 00:01:50.700
Para estruturar todo o caos
que poderia existir num dispositivo,

00:01:50.733 --> 00:01:53.667
o Android tem um ciclo de vida
que todas as activities podem seguir.

00:01:53.700 --> 00:01:58.267
O sistema suporta que a activity transite
de um estágio para outro no ciclo de vida

00:01:58.300 --> 00:02:01.867
e oferece callbacks para que o desenvolvedor
seja notificado

00:02:01.900 --> 00:02:04.400
quando essas mudanças ocorrerem
na sua activity.

00:02:04.433 --> 00:02:08.900
Quando você é notificado, você tem a chance
de executar certas instruções necessárias.

00:02:08.933 --> 00:02:11.600
Vamos discutir outros estados
que a activity pode adotar.

00:02:11.633 --> 00:02:16.200
Quando uma activity é lançada,
ela é criada, iniciada e retomada.

00:02:16.233 --> 00:02:19.800
Neste estado, a activity está ativa,
e o usuário pode interagir com ela.

00:02:19.833 --> 00:02:23.367
Assim que o usuário abrir outra activity
ou outro aplicativo,

00:02:23.400 --> 00:02:26.933
ela passará para o estado pausado,
e depois para um estado interrompido.

00:02:26.967 --> 00:02:29.633
Se ela for fechada,
ela se tornará destruída.

00:02:29.667 --> 00:02:32.767
Se o usuário voltar para a activity,
ela será reiniciada,

00:02:32.800 --> 00:02:37.833
e voltaremos para o estado iniciado,
e o usuário poderá interagir com ela de novo.

00:02:37.867 --> 00:02:41.500
Mostrei aqui um diagrama simplificado
do ciclo de vida das activities

00:02:41.533 --> 00:02:44.800
para que você pudesse ter uma visão geral
do que está acontecendo.

00:02:44.833 --> 00:02:49.100
Na documentação oficial do Android,
na seção "Iniciando uma Activity",

00:02:49.133 --> 00:02:52.167
temos um diagrama
de ciclo de vida completo.

00:02:52.200 --> 00:02:55.900
Ele é mais complexo
do que o que eu mostrei,

00:02:55.933 --> 00:02:57.933
mas a ideia principal
é a mesma.

00:02:57.967 --> 00:02:59.967
O sistema Android
é responsável

00:03:00.067 --> 00:03:03.200
pela passagem da sua activity
por cada um destes estados.

00:03:03.233 --> 00:03:06.500
Você, como desenvolvedor,
não pode controlar em que estado está.

00:03:06.533 --> 00:03:09.333
Partindo daqui,
quando sua activity é lançada,

00:03:09.367 --> 00:03:13.133
ela passa para o estado criado
usando o método onCreate.

00:03:13.967 --> 00:03:17.833
Depois passa para o estado iniciado
usando o método onStart.

00:03:17.867 --> 00:03:20.833
A esta altura,
ela se torna visível para o usuário.

00:03:20.867 --> 00:03:24.733
Daí, ela vai para o estado retomado
através do método onResume.

00:03:24.767 --> 00:03:27.833
Neste caso,
a activity ainda é visível para o usuário,

00:03:27.867 --> 00:03:30.633
mas ele pode começar
a interagir com ela.

00:03:30.667 --> 00:03:35.133
Aqui, você pode visualizar animações,
usar sensores, como sensores de localização,

00:03:35.167 --> 00:03:37.333
e até usar uma câmera
no dispositivo.

00:03:37.367 --> 00:03:42.033
A activity pode ficar no estado retomado
pelo tempo que o usuário olhar a tela,

00:03:42.067 --> 00:03:45.167
o que pode levar minutos,
horas ou mais.

00:03:45.867 --> 00:03:48.533
Assim que seu usuário mudar
de activity,

00:03:48.567 --> 00:03:51.733
ela será pausada através
do método onPause,

00:03:51.767 --> 00:03:55.367
e daí irá para o estado interrompido
pelo método onStop.

00:03:55.400 --> 00:03:59.733
Neste momento,
ela não está mais visível para o usuário.

00:03:59.767 --> 00:04:02.367
Como o usuário
não pode vê-la,

00:04:02.400 --> 00:04:05.833
se o sistema determinar
que sua activity não é mais necessária,

00:04:05.867 --> 00:04:09.433
ele pode destruí-la através
do método onDestroy

00:04:09.467 --> 00:04:12.167
para liberar recursos
no dispositivo,

00:04:12.200 --> 00:04:15.567
e sua activity entrará
no estado destruído.

00:04:15.600 --> 00:04:18.733
Caso contrário,
ela ficará no estado interrompido.

00:04:18.767 --> 00:04:22.633
Se o usuário decidir voltar à activity
antes de sua destruição,

00:04:22.667 --> 00:04:26.233
ela será reiniciada
pelo método onRestart

00:04:26.833 --> 00:04:30.500
e voltará para o estado iniciado
pelo método onStart.

00:04:31.633 --> 00:04:35.833
Depois, voltará para o estado retomado
pelo método onResume.

