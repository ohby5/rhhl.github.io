WEBVTT
Kind: captions
Language: zh-CN

00:00:00.460 --> 00:00:02.950
我们去网络搜索下如何定义当列表项被点击时

00:00:02.950 --> 00:00:05.180
出现的行为

00:00:05.180 --> 00:00:12.921
我直接输入“handle listview item click android”

00:00:12.921 --> 00:00:15.160
并搜索

00:00:15.160 --> 00:00:17.240
第一条结果看起来不错

00:00:17.240 --> 00:00:19.280
注意它也是个 stackoverflow 帖子

00:00:19.280 --> 00:00:22.770
表明其他开发者可能也经常遇到这一问题

00:00:22.770 --> 00:00:24.470
我们点开来看看

00:00:24.470 --> 00:00:27.620
问题“how to handle the click event in Listview in android”

00:00:27.620 --> 00:00:29.890
和我们所需了解的完全一样

00:00:31.030 --> 00:00:34.030
现在我不会请你去详细阅读这个问题的内容

00:00:34.030 --> 00:00:36.490
你可以私底下花时间去阅读下

00:00:36.490 --> 00:00:39.790
我们直接跳到这里的答案 看起来很有用

00:00:39.790 --> 00:00:44.140
这里有个绿色对号 还有好多好评

00:00:44.140 --> 00:00:46.387
在这个答案代码示例中

00:00:46.387 --> 00:00:51.270
这里有个 lv(表示的是变量名称 ListView).setOnItemClickListener

00:00:51.270 --> 00:00:54.580
然后传入 onItemClickListener 对象

00:00:54.580 --> 00:00:57.830
然后 指出当列表视图中的某个项被点击后

00:00:57.830 --> 00:01:01.230
我们会创建一个新的 intent 然后开始新的 Activity

00:01:02.670 --> 00:01:04.180
所以这个方法看起来是可行的

00:01:04.180 --> 00:01:06.940
但是为了再次确认下它是定义点击行为的推荐方法

00:01:06.940 --> 00:01:10.440
我们去关于 ListView 的官方文档中查阅下

00:01:11.680 --> 00:01:14.910
转到 Android 开发者文档并进入 Develop 和

00:01:14.910 --> 00:01:18.080
Reference 部分 查看关于 ListView 的信息

00:01:18.080 --> 00:01:22.440
在这里 我想具体搜索下 setOnItemClickListener

00:01:22.440 --> 00:01:23.270
方法

00:01:23.270 --> 00:01:25.870
查看这里的第一个内容

00:01:25.870 --> 00:01:29.010
该方法的说明表示当该 AdopterView 中的项被点击后

00:01:29.010 --> 00:01:32.240
它会注册一个要被调用的回调

00:01:32.240 --> 00:01:33.310
听起来是正确的

00:01:33.310 --> 00:01:37.290
当某项被点击时 这里的监听器

00:01:37.290 --> 00:01:40.860
会包含一个将被 Android 系统调用的回调方法

00:01:41.920 --> 00:01:43.970
我们点击该 OnItemClickListener

00:01:43.970 --> 00:01:45.550
了解下详细信息

00:01:45.550 --> 00:01:48.430
和 OnClickListener 接口类似

00:01:48.430 --> 00:01:52.220
这个 OnItemClickListener 也是个接口

00:01:52.220 --> 00:01:55.800
在第 1 节课中 我们学习了接口包含一或多个

00:01:55.800 --> 00:01:59.520
抽象方法 我们可以使用这些方法来与对象互动

00:01:59.520 --> 00:02:02.350
但是我们需要自己定义并实施这些方法

00:02:02.350 --> 00:02:06.680
在这种情况下 我们在这里看到 onItemClickListener 接口

00:02:06.680 --> 00:02:11.050
具有一个抽象方法 叫做 onItemClick

00:02:11.050 --> 00:02:14.360
我们需要定义下该方法中的代码

00:02:14.360 --> 00:02:18.180
然后当 ListView 中的具体项被触摸后

00:02:18.180 --> 00:02:21.930
系统将回调该方法并执行我们放入其中的这些方法

00:02:21.930 --> 00:02:24.340
再回到我们的 stackoverflow 示例

00:02:24.340 --> 00:02:27.600
在这里可以看到 当开发者在 onItemClick 方法中提供自己的逻辑时

00:02:27.600 --> 00:02:31.290
系统会创建一个 onItemClickListener 对象

00:02:32.660 --> 00:02:35.950
所以第一个问题的答案是我们对 ListView

00:02:35.950 --> 00:02:38.220
调用 setOnItemClickListener 方法

00:02:38.220 --> 00:02:40.320
在该方法中 我们将传入一个输入值

00:02:40.320 --> 00:02:44.116
即一个监听器 数据类型是 OnItemClickListener

00:02:44.116 --> 00:02:45.670
再提一点

00:02:45.670 --> 00:02:49.530
在文档中 你可能多次注意到关于 AdapterView 的信息

00:02:49.530 --> 00:02:52.930
为何要一直提到 AdapterView 明显我们要查看的是

00:02:52.930 --> 00:02:53.802
ListView 逻辑？

00:02:53.802 --> 00:02:57.140
在第 2 节课中 我们学习到 ListView

00:02:57.140 --> 00:02:59.260
也是一种类型的 AdapterView

00:02:59.260 --> 00:03:02.720
我们研究过的其他类型 adaptor 包括 GridView 和 spinner

