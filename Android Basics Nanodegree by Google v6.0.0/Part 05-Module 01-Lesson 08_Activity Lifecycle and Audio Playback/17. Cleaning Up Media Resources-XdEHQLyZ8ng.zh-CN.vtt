WEBVTT
Kind: captions
Language: zh-CN

00:00:00.820 --> 00:00:01.810
在第 2 节课中

00:00:01.810 --> 00:00:05.400
你了解了正式地管理内存的重要性

00:00:05.400 --> 00:00:07.610
这对移动设备来说很重要

00:00:07.610 --> 00:00:10.330
因为与传统的大型台式机相比

00:00:10.330 --> 00:00:13.840
手机和平板电脑的内存资源非常有限

00:00:13.840 --> 00:00:17.610
你会逐渐发现 资源效率对 Android 框架的设计

00:00:17.610 --> 00:00:20.500
有很大的影响

00:00:20.500 --> 00:00:23.410
例如 对于这个视图回收流程

00:00:23.410 --> 00:00:26.370
我们发现我们需要设计一种方式来有效地展示数据

00:00:26.370 --> 00:00:28.270
这只是一方面

00:00:29.390 --> 00:00:33.500
为了使 Android 设备能顺畅地运行 对用户的输入做出快速响应

00:00:33.500 --> 00:00:36.960
并且不会耗尽用户的电量 作为开发者

00:00:36.960 --> 00:00:39.850
我们还需要节约内存

00:00:39.850 --> 00:00:42.820
作为开发者 你能做的最重要的一点就是

00:00:42.820 --> 00:00:46.030
在不需要某些资源后 释放这些资源

00:00:46.030 --> 00:00:48.880
以便设备上的其他应用也能使用这些资源

00:00:48.880 --> 00:00:53.830
MediaPlayer 就非常适合解释这类开发者行为

00:00:53.830 --> 00:00:56.830
我们再仔细研究下为了播放音频我们需要采取的操作

00:00:57.830 --> 00:01:01.620
首先 我们需要获取 MediaPlayer 类的实例

00:01:01.620 --> 00:01:04.060
注意 每当你实例化某个对象时

00:01:04.060 --> 00:01:06.890
你都会用到分配到你的应用中的某些内存

00:01:06.890 --> 00:01:09.440
然后你需要传入一个音频文件

00:01:09.440 --> 00:01:12.510
该文件必须消耗内存才能播放

00:01:12.510 --> 00:01:17.660
所有这些都会占用内存 也称为占用内存的资源

00:01:17.660 --> 00:01:20.760
这个优化问题存在两个方面

00:01:20.760 --> 00:01:25.540
第一个方面 如何判断何时不再需要 MediaPlayer 资源？

00:01:25.540 --> 00:01:28.030
第二个方面 如何释放这些资源

00:01:29.490 --> 00:01:31.810
为了判断何时不再需要这些资源

00:01:31.810 --> 00:01:36.080
我们需要回想下音频 MediaPlayer 所具有的状态

00:01:36.080 --> 00:01:38.430
我们知道当我们首次创建 MediaPlayer 时

00:01:38.430 --> 00:01:42.150
我们使用了 create() 方法 该方法会使 MediaPlayer 进入准备状态

00:01:42.150 --> 00:01:44.170
接着会进入开始状态

00:01:44.170 --> 00:01:47.780
然后是暂停状态或停止状态

00:01:47.780 --> 00:01:50.140
或播放完成状态

00:01:50.140 --> 00:01:53.180
现在有个重要的最后步骤 即结束状态

00:01:53.180 --> 00:01:57.060
一旦 MediaPlayer 对象进入结束状态 就无法再使用它

00:01:57.060 --> 00:01:59.860
我们无法再将其转移到任何其他状态

00:01:59.860 --> 00:02:03.550
当该 MediaPlayer 被销毁后 该 MediaPlayer 使用的内存

00:02:03.550 --> 00:02:06.540
会被系统收回 用于其他任务

00:02:06.540 --> 00:02:08.280
回到我们的原始问题

00:02:08.280 --> 00:02:11.660
如何判断何时不再需要这些内存资源？

00:02:11.660 --> 00:02:14.310
我们的音频文件非常的短

00:02:14.310 --> 00:02:15.980
只有一两秒钟的时间

00:02:15.980 --> 00:02:19.800
意味着播放过程很快就会结束

00:02:19.800 --> 00:02:21.540
结束播放后

00:02:21.540 --> 00:02:23.630
我们就不再需要这些资源

00:02:23.630 --> 00:02:26.770
所以我们不应该继续保留这些 MediaPlayer 资源

00:02:26.770 --> 00:02:29.350
并希望用户继续点击相同的列表项

00:02:29.350 --> 00:02:33.260
我们应该通过调用 release() 方法释放这些资源

00:02:33.260 --> 00:02:37.420
这会使该 MediaPlayer 进入结束状态 系统将收回该内存资源

00:02:37.420 --> 00:02:41.050
在这个文档中 尤其是这段内容

00:02:41.050 --> 00:02:44.860
重点指出一旦 MediaPlayer 对象不再被使用

00:02:44.860 --> 00:02:47.385
则调用 release() 方法

00:02:47.385 --> 00:02:49.735
以便立即从内部播放器引擎中释放该资源

00:02:49.735 --> 00:02:52.985
这样不会导致我们想要播放的未来对象文件的

00:02:52.985 --> 00:02:56.735
未来 MediaPlayer 对象实例

00:02:56.735 --> 00:02:58.865
不会高效地播放甚至耗尽我们所需的电量

00:02:58.865 --> 00:03:00.695
如果你想详细了解这方面的详情

00:03:00.695 --> 00:03:04.520
强烈建议你通读这篇 release() 方法文档

00:03:04.520 --> 00:03:06.580
现在回到状态图表

00:03:06.580 --> 00:03:09.450
假设用户重新点击了

00:03:09.450 --> 00:03:13.900
那么我们需要为同一（甚至不同的）音频文件创建一个新的 MediaPlayer 对象

00:03:13.900 --> 00:03:16.640
并再次经历这整个生命周期

00:03:16.640 --> 00:03:19.510
在这个练习中 请完成以下任务

00:03:19.510 --> 00:03:22.130
以便正确地清除应用中的资源

00:03:22.130 --> 00:03:25.240
对于第一步 在声音文件完成播放后

00:03:25.240 --> 00:03:28.100
使用提供的代码段释放相关资源

00:03:29.190 --> 00:03:30.930
我们为你提供了一个辅助方法的代码段

00:03:30.930 --> 00:03:34.050
该方法会调用 release() 方法

00:03:34.050 --> 00:03:36.120
这段代码是这样的

00:03:36.120 --> 00:03:39.880
称为辅助方法 是因为它会执行某项任务

00:03:39.880 --> 00:03:41.250
以便帮助代码的其他部分完成任务

00:03:41.250 --> 00:03:43.430
你可以复制这段辅助方法

00:03:43.430 --> 00:03:47.410
我们将其命名为 releaseMediaPlayer 并粘贴到 NumbersActivity

00:03:47.410 --> 00:03:50.000
以及其他类别 Activity 文件中

00:03:50.000 --> 00:03:54.420
这个方法会检查 MediaPlayer 是否被初始化

00:03:54.420 --> 00:03:57.410
如果 mMediaPlayer 变量不为 null 即不为空

00:03:57.410 --> 00:04:00.760
那么我们就具有无效的 MediaPlayer 对象

00:04:00.760 --> 00:04:02.330
我们应该对该对象调用 release()

00:04:03.600 --> 00:04:06.870
这一检查操作在 Java 中很常见

00:04:06.870 --> 00:04:09.590
如果某个变量具有某种类型的对象

00:04:09.590 --> 00:04:14.670
例如这里的 MediaPlayer 默认变量是 null 表示为空

00:04:14.670 --> 00:04:17.269
即没有任何内容设为等于该变量

00:04:17.269 --> 00:04:19.010
在对该变量调用方法前

00:04:19.010 --> 00:04:22.600
你需要确保该变量引用的是有效的对象

00:04:22.600 --> 00:04:25.000
否则会出现 Java 错误

00:04:25.000 --> 00:04:26.690
调用 release() 后

00:04:26.690 --> 00:04:30.770
我们可以通过将其设为等于 null 来清空该变量

00:04:30.770 --> 00:04:34.750
我们使用 null 值来表明 MediaPlayer 当前未配置为正在播放音频

00:04:34.750 --> 00:04:36.860
回到练习说明

00:04:36.860 --> 00:04:40.290
你可以复制我们在代码段中向你展示的方法

00:04:40.290 --> 00:04:43.970
并粘贴到所有四个类别 Activity 文件中

00:04:43.970 --> 00:04:46.770
一旦 MediaPlayer 完成播放声音文件后 就调用该方法

00:04:46.770 --> 00:04:49.570
你需要运用在上一道练习中所学的知识

00:04:49.570 --> 00:04:53.020
即当媒体文件停止播放时获得回调

00:04:53.020 --> 00:04:56.430
以便知道何时调用 releaseMediaPlayer 方法

00:04:56.430 --> 00:04:59.830
最后 请你再次调用该辅助方法

00:04:59.830 --> 00:05:03.530
从而在我们开始初始化另一个 MediaPlayer 对象前

00:05:03.530 --> 00:05:07.750
释放该 MediaPlayer 资源 以便播放其他音频文件

00:05:07.750 --> 00:05:08.320
这么做

00:05:08.320 --> 00:05:11.990
是为了清空 Android 在播放旧文件时用到的任何资源

00:05:11.990 --> 00:05:13.960
然后转向全新的音频文件

