WEBVTT
Kind: captions
Language: ar

00:00:00.300 --> 00:00:03.040
يجب مسح موارد مشغل الوسائط في أقرب وقت

00:00:03.040 --> 00:00:04.380
لأنك لم تعد بحاجة إليها بعد الآن.

00:00:04.380 --> 00:00:07.780
ولذا أنت بالفعل تتبع أفضل الممارسات يتخذها مطور
آندرويد،

00:00:07.780 --> 00:00:09.460
على الأقل بالنسبة للجزء الأكبر.

00:00:09.460 --> 00:00:13.180
والآن أريد أن أخبرك أكثر عن التفاصيل التي ستطلب منا
تعديل الكود

00:00:13.180 --> 00:00:13.940
فقط قليلًا أكثر.

00:00:13.940 --> 00:00:17.370
وبالتالي فإن المشكلة هي أننا كنا نعمل تحت افتراض

00:00:17.370 --> 00:00:19.299
أن المستخدم سيبقى دائما داخل التطبيق.

00:00:20.470 --> 00:00:24.410
حسنًا، ماذا لو قرر المستخدم الخروج إلى متصفح ويب

00:00:24.410 --> 00:00:25.440
أو حتى توجه لإجراء مكالمة هاتفية؟

00:00:27.160 --> 00:00:29.770
حسنًا، إذا لم يكن المستخدم يبحث في التطبيق،

00:00:29.770 --> 00:00:33.570
فلن نتمكن من إنهاء تنفيذ الكود ومسح موارد مشغل
الموسيقى.

00:00:33.570 --> 00:00:36.860
ولذا في حالة انتقال المستخدم إلى عدة تطبيقات أخرى
وعدم العودة إلى

00:00:36.860 --> 00:00:40.418
تطبيق آرمي ووك، في النهاية سيقوم آندرويد بإتلاف
نشاطنا.

00:00:40.418 --> 00:00:44.050
ومن ثم يمكن استخدام هذه الموارد لتشغيل التطبيقات
الأحدث

00:00:44.050 --> 00:00:44.950
التي يتفاعل المستخدم معها.

00:00:44.950 --> 00:00:46.660
بصفتنا مطورين، نحتاج أن نكون على استعداد

00:00:46.660 --> 00:00:49.100
عند مغادرة المستخدم النشاط في أي وقت.

00:00:49.100 --> 00:00:52.110
أو أن نكون مستعدين لإتلاف النظام نشاطنا لأنه بحاجة
إلى

00:00:52.110 --> 00:00:54.110
هذه الموارد لشيء آخر.

00:00:54.110 --> 00:00:57.250
على سبيل المثال، في تطبيق البريد الإلكتروني، المطورون
مسؤولون عن

00:00:57.250 --> 00:01:00.350
تخزين الإصدار الأحدث لمسودة البريد الإلكتروني
للمستخدم.

00:01:00.350 --> 00:01:02.970
وبالتالي عن عودة المستخدم إلى التطبيق، حتى ولو بعد
أيام أو أشهر،

00:01:02.970 --> 00:01:05.340
يبدو الحال كما لو أن المستخدم لم يغادر التطبيق.

00:01:06.560 --> 00:01:09.570
وفي هذه الحالة، يجب أن يشير المطور إلى النظام

00:01:09.570 --> 00:01:12.970
أنه مهتم بمعرفة متى يترك المستخدم النشاط الحالي.

00:01:12.970 --> 00:01:13.730
وفي هذه النقطة،

00:01:13.730 --> 00:01:16.890
على المستخدم حفظ أحدث إصدار لمسودة البريد
الإلكتروني.

00:01:16.890 --> 00:01:19.170
وفيما بعد، عندما يأتي المستخدم مرة أخرى إلى
النشاط،

00:01:19.170 --> 00:01:22.150
يجب ظهور مسودة البريد الإلكتروني على الشاشة.

00:01:22.150 --> 00:01:25.110
ولذا من السيئ عند العودة إلى مسودة البريد الإلكتروني
للكتابة

00:01:25.110 --> 00:01:28.910
وتظهر الشاشة فارغة تمامًا

00:01:28.910 --> 00:01:30.490
لعدم حفظ التغييرات التي قاموا بها.

00:01:30.490 --> 00:01:33.190
لذلك كل السلوك بحاجة إلى حفظ

00:01:33.190 --> 00:01:35.080
موارد الذاكرة في أي جهاز.

00:01:35.080 --> 00:01:38.090
نظام آندرويد بحاجة إلى موارد كافية،

00:01:38.090 --> 00:01:42.600
لأن التطبيق الحالي الذي يتفاعل معه المستخدم سريع،
ومتجاوب

00:01:42.600 --> 00:01:46.430
والموارد لا تضيع في التطبيقات التي لم يتفاعل معها
المستخدم في هذه الأثناء.

00:01:46.430 --> 00:01:49.570
ولتوفير الهيكل المطلوب لجميع حالات عدم الاكتمال التي
حدثت في الجهاز،

00:01:49.570 --> 00:01:53.690
يتمتع نظام آندرويد بدورة حياة يمكن من خلالها تتبع
جميع الأنشطة.

00:01:53.690 --> 00:01:56.360
وبالتالي سيتعامل النظام مع نقل النشاط

00:01:56.360 --> 00:02:00.350
من مرحلة لأخرى ضمن دورة الحياة، كما أنه يوفر ردود

00:02:00.350 --> 00:02:04.430
بحيث يمكنك كمطور الحصول على إشعارات عند حدوث هذه
التغييرات في تطبيقك.

00:02:04.430 --> 00:02:05.480
ولذا عند ظهور الإشعار إليك،

00:02:05.480 --> 00:02:08.940
يمكنك أن تأخذ هذه الفرصة لتنفيذ بعض التعليمات التي
تحتاج إليها.

00:02:08.940 --> 00:02:11.630
هيا بنا نناقش الحالات الأخرى الموجودة في النشاط.

00:02:11.630 --> 00:02:15.360
عند إطلاق أي نشاط لأول مرة، يتم إنشاءه، وبدء
تشغيله،

00:02:15.360 --> 00:02:16.250
ثم استئناف تشغيله.

00:02:16.250 --> 00:02:19.850
والآن، وفي هذه النقطة نجد أن النشاط فعال وبإمكان
المستخدم التفاعل معه.

00:02:19.850 --> 00:02:23.400
وبمجرد انتقال المستخدم إلى نشاط مختلف أو تطبيق
مختلف،

00:02:23.400 --> 00:02:26.960
ينتقل هذا النشاط إلى حالة الإيقاف المؤقت، ثم إلى
حالة الإيقاف.

00:02:26.960 --> 00:02:29.670
وإذا تم إغلاقه، يصبح تالفًا.

00:02:29.670 --> 00:02:32.800
ولذا إذا عاد المستخدم إلى هذا النشاط بعد إعادة
التشغيل،

00:02:32.800 --> 00:02:35.640
وانتقلنا مرة أخرى إلى حالة بدء التشغيل

00:02:35.640 --> 00:02:38.190
بإمكان المستخدم الآن التفاعل معه مرة أخرى.

00:02:38.190 --> 00:02:41.530
لقد عرضت لك الآن هنا رسمًا بيانيًا مبسطًا عن دورة
حياة أي نشاط.

00:02:41.530 --> 00:02:44.475
بحيث يمكنك أولًا فهم نظرة عامة على مستوى عال عما
يحدث.

00:02:44.475 --> 00:02:49.120
ولذا في مستندات التوثيق لآندرويد في بدء تشغيل قسم
النشاط،

00:02:49.120 --> 00:02:52.190
لدينا رسم بياني كامل هنا عن دورة حياة النشاط.

00:02:52.190 --> 00:02:54.980
هذا الرسم البياني أكثر تعقيدًا قليلًا من الذي عرضته
لك قبل ذلك

00:02:54.980 --> 00:02:56.960
ولكن الفكرة الرئيسية متشابهة.

00:02:57.970 --> 00:03:00.140
ولذا تذكر أن نظام آندرويد مسؤول عن

00:03:00.140 --> 00:03:03.230
نقل نشاطك إلى كل من هذه الحالات.

00:03:03.230 --> 00:03:06.115
ولذلك أنت كمطور لا يمكنك التحكم في الحالة التي أنت
فيها.

00:03:06.115 --> 00:03:09.380
لذلك بدءًا من هنا، عندما يتم إطلاق النشاط،

00:03:09.380 --> 00:03:12.560
ينتقل النشاط إلى حالة تم إنشاؤها باستخدام وظيفة
onCreate.

00:03:14.060 --> 00:03:18.000
وبعد ذلك ينتقل إلى حالة بدء التشغيل باستخدام وظيفة
OnStart.

00:03:18.000 --> 00:03:20.880
وفي هذه المرحلة يصبح النشاط مرئي للمستخدم.

00:03:20.880 --> 00:03:24.260
وبعد ذلك ينتقل إلى حالة الاستئناف باستخدام وظيفة
OnResume.

00:03:24.260 --> 00:03:27.860
وفي هذه الحالة، يظل هذا النشاط مرئي للمستخدم.

00:03:27.860 --> 00:03:30.680
ولكن بإمكان المستخدم الآن التفاعل مع النشاط.

00:03:30.680 --> 00:03:35.270
حيث يمكنك عرض الرسوم المتحركة، واستخدام المستشعرات،
مثل مستشعرات الموقع

00:03:35.270 --> 00:03:36.390
أو حتى استخدام الكاميرا في الجهاز.

00:03:36.390 --> 00:03:40.970
قد يظل النشاط في حالة الاستئناف في حين أن

00:03:40.970 --> 00:03:44.740
المستخدم ينظر إلى الشاشة، وبالتالي قد يستغرق الأمر
دقائق أو ساعات أو حتى أكثر.

00:03:45.860 --> 00:03:48.580
والآن بمجرد أن يتحول المستخدم إلى نشاط مختلف،

00:03:48.580 --> 00:03:51.910
ثم يتم إيقاف النشاط مؤقتًا عبر وظيفة OnPause،

00:03:51.910 --> 00:03:55.400
وبعد ذلك ينتقل إلى حالة الإيقاف باستخدام وظيفة
OnStop.

00:03:55.400 --> 00:03:59.760
وفي هذه الحالة، لم يعد النشاط مرئي للمستخدم.

00:03:59.760 --> 00:04:02.400
ومن ثم لم يعد المستخدم قادرًا على رؤية النشاط.

00:04:02.400 --> 00:04:05.870
إذا حدد النظام أن النشاط لم يعد هناك حاجة إليه،

00:04:05.870 --> 00:04:09.460
فقد يتلف النظام النشاط عبر وظيفة OnDestroy

00:04:09.460 --> 00:04:12.380
لتفريغ الموارد في الجهاز،

00:04:12.380 --> 00:04:15.610
ثم بعد ذلك دخول النشاط في حالة تم إتلافه.

00:04:15.610 --> 00:04:18.769
ورغم ذلك، قد يظل النشاط في حالة الإيقاف.

00:04:18.769 --> 00:04:22.670
إذا قرر المستخدم العودة إلى النشاط قبل أن يتم
إتلافه،

00:04:22.670 --> 00:04:26.840
يتم إعادة تشغيل النشاط ا عبر وظيفة OnRestart،

00:04:26.840 --> 00:04:29.830
ثم يعود إلى حالة بدء التشغيل عبر وظيفة onStart.

00:04:29.830 --> 00:04:34.790
وفي النهاية يعود إلى حالة الاستئناف عبر وظيفة
onResume.

