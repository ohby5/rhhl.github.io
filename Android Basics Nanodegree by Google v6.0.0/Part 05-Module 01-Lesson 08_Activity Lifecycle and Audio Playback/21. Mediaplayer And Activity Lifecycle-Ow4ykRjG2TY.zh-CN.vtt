WEBVTT
Kind: captions
Language: zh-CN

00:00:00.240 --> 00:00:03.390
当你创建一个 Activity 它会经历一系列的生命周期阶段

00:00:03.390 --> 00:00:08.050
首先是 Created Started 然后是 Resumed

00:00:08.050 --> 00:00:10.150
此时用户就可以与该 Activity 互动了

00:00:11.180 --> 00:00:14.870
当用户离开该 Activity 它就进入 Paused 状态

00:00:14.870 --> 00:00:16.178
然后是 Stopped 状态

00:00:16.178 --> 00:00:19.370
如果不再需要该 Activity 系统会结束该 Activity

00:00:19.370 --> 00:00:21.480
那么它就会进入 Destroyed 状态

00:00:21.480 --> 00:00:24.430
因为 onDestroy 方法可能不会被调用

00:00:24.430 --> 00:00:29.150
所以我们只能确定 onPause 和 onStop 方法将被调用

00:00:29.150 --> 00:00:31.080
我们再来看看关于 MediaPlayer 类中的

00:00:31.080 --> 00:00:34.550
Release 方法的文档

00:00:34.550 --> 00:00:39.010
文档在这里指出 当 Activity 通过 onPause 方法被暂停后

00:00:39.010 --> 00:00:41.980
或通过 onStop 方法被停止后

00:00:41.980 --> 00:00:45.670
那么此方法 即 Release 方法会被调用 以便释放 MediaPlayer 对象

00:00:45.670 --> 00:00:48.700
哪个 Activity 方法都可以

00:00:48.700 --> 00:00:51.260
要么是 onPause 方法 要么是 onStop 方法

00:00:51.260 --> 00:00:53.700
因为你只需要释放一次

00:00:53.700 --> 00:00:57.320
所以我们将选择在 onStop 方法中释放我们的资源

00:00:57.320 --> 00:01:00.710
当 Activity 完全针对用户隐藏后 我们将

00:01:00.710 --> 00:01:03.620
释放媒体资源 即使没有播放完当前的音频文件

00:01:03.620 --> 00:01:06.270
现在对我们的应用做出这些代码更改吧

00:01:06.270 --> 00:01:10.090
打开 NumbersActivity 向下滚动到 releaseMediaPlayer 方法前面

00:01:10.090 --> 00:01:14.360
我将重写 onStop Activity 生命周期回调方法

00:01:14.360 --> 00:01:17.840
注意 每次要重写 Activity 生命周期方法 如此处所示

00:01:17.840 --> 00:01:20.850
我们都应该调用该方法的超级类版本

00:01:20.850 --> 00:01:24.820
如这里的 super.onStop() 因为该 Activity

00:01:24.820 --> 00:01:28.030
知道如何停止 Activity 并在后台清空资源

00:01:28.030 --> 00:01:30.410
作为开发者 我们不需要操心这些

00:01:30.410 --> 00:01:33.180
如果你尝试注释掉这行代码

00:01:33.180 --> 00:01:36.110
你会发现应用将出现异常崩溃

00:01:36.110 --> 00:01:36.680
所以请勿这么做

00:01:37.790 --> 00:01:40.470
这里 我不再直接对 MediaPlayer 对象

00:01:40.470 --> 00:01:42.070
调用 release 方法

00:01:42.070 --> 00:01:46.910
而是调用我们之前添加的 releaseMediaPlayer 辅助方法

00:01:46.910 --> 00:01:49.540
我们使用 releaseMediaPlayer 方法

00:01:49.540 --> 00:01:50.730
而不是 release 方法

00:01:50.730 --> 00:01:54.070
是因为该方法具有一定的逻辑 当 MediaPlayer 变量

00:01:54.070 --> 00:01:57.630
当前未配置为播放声音文件时 就将 MediaPlayer 变量重新设为 null

00:01:57.630 --> 00:02:01.370
这样无论是该 Activity 完成音频文件的播放

00:02:01.370 --> 00:02:05.150
还是被停止了 我们都可以释放该 Activity 中的

00:02:05.150 --> 00:02:08.250
MediaPlayer 资源 现在我们需要在设备上测试下

00:02:10.370 --> 00:02:12.590
对于这个正在设备上运行的新版应用

00:02:12.590 --> 00:02:16.170
当我点按任何类别 Activity 假设 Numbers

00:02:16.170 --> 00:02:18.495
我可以像往常一样播放每个单词的发音

00:02:18.495 --> 00:02:20.590
[米沃克语]

00:02:20.590 --> 00:02:22.400
现在如果我播放某个发音

00:02:22.400 --> 00:02:25.340
然后通过点按主屏幕按钮立即离开该应用

00:02:25.340 --> 00:02:29.230
应该立即停止播放发音 因为我添加了这段 onStop 代码

00:02:29.230 --> 00:02:30.555
我们试试

00:02:30.555 --> 00:02:33.130
[米沃克语]

00:02:33.130 --> 00:02:35.780
不错 达到了预期的效果

00:02:35.780 --> 00:02:38.570
因为之前即使当我离开该 Activity 每个单词的发音还会继续播放

00:02:38.570 --> 00:02:42.480
现在当我离开该 Activity 播放会中断

00:02:42.480 --> 00:02:44.600
太棒了 代码逻辑能按预期的运行

00:02:44.600 --> 00:02:46.810
现在我将对其他 Activity 重复相同的操作

00:02:47.930 --> 00:02:52.660
这里 我重写了 colorsActivity 中的 onStop 方法

00:02:52.660 --> 00:02:53.420
然后是 FamilyActivity

00:02:55.300 --> 00:02:56.780
最后是 PhrasesActivity

00:02:57.860 --> 00:03:00.810
再运行下应用 确保所有其他 Activity

00:03:00.810 --> 00:03:01.911
都如按预期运行

00:03:06.299 --> 00:03:16.299
[米沃克语]

