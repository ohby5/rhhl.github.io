WEBVTT
Kind: captions
Language: en

00:00:00.400 --> 00:00:01.850
So let's step back for a moment.

00:00:01.850 --> 00:00:04.460
Now audio is one of those
critical expenses in mobile and

00:00:04.460 --> 00:00:07.130
users expect it and
they expect it to be done well.

00:00:07.130 --> 00:00:10.860
&gt;&gt; And you've already done a good job of
interacting with the media player API.

00:00:10.860 --> 00:00:13.960
But to be a good citizen on the device,
we have to think about how

00:00:13.960 --> 00:00:18.280
our app deals with the system and
other apps that also want to play audio.

00:00:18.280 --> 00:00:21.370
&gt;&gt; So this brings us to our next topic,
audio focus.

00:00:21.370 --> 00:00:24.250
Now Android uses audio focus to
manage audio playback on the device.

00:00:24.250 --> 00:00:27.410
So this means only apps that
are holding audio focus

00:00:27.410 --> 00:00:29.580
should be able to play
audio at any given time.

00:00:29.580 --> 00:00:32.960
&gt;&gt; So sometimes this means pausing or
stopping the sounds in our app so

00:00:32.960 --> 00:00:35.400
that other more important
sounds can be played.

00:00:35.400 --> 00:00:38.150
For example, if you are listening to
music and then you get a call from your

00:00:38.150 --> 00:00:42.085
mom, we need to pause the music and
then resume it once the call is over.

00:00:42.085 --> 00:00:44.590
&gt;&gt; Or you can think of it like this.

00:00:44.590 --> 00:00:49.160
So meetings at Udasity we have this
box which is also a microphone and

00:00:49.160 --> 00:00:52.200
that means only the person holding
the box should be able to speak.

00:00:52.200 --> 00:00:54.948
&gt;&gt; So if I want to speak
then I need to grab the box.

00:00:54.948 --> 00:00:58.710
&gt;&gt; So at Android this box represents all
audio focus that means if I'm an app and

00:00:58.710 --> 00:01:01.000
I want to play a sound I just
need to grab the audio focus.

00:01:02.790 --> 00:01:05.250
When an app loses audio focus,
it needs to pause or

00:01:05.250 --> 00:01:07.050
stop the audio that it's playing.

00:01:07.050 --> 00:01:10.905
So when I get an audio focus,
I can make my sound [SOUND]

00:01:10.905 --> 00:01:12.983
&gt;&gt; But then if you get a test message,

00:01:12.983 --> 00:01:13.770
then [SOUND]
&gt;&gt; And

00:01:13.770 --> 00:01:17.174
then you start navigating
in 500 feet turn left.

00:01:17.174 --> 00:01:19.718
&gt;&gt; [SOUND] Low battery alert.

00:01:19.718 --> 00:01:22.172
&gt;&gt; [SOUND] Jessica, your mom is calling.

00:01:22.172 --> 00:01:22.924
&gt;&gt; One second.

00:01:22.924 --> 00:01:25.462
Hey mom,
yeah I'm just recording a shoot.

00:01:25.462 --> 00:01:28.230
&gt;&gt; All right since we are hand-holding
less I'd like you to read the provided

00:01:28.230 --> 00:01:32.330
articles on audio focus and it's okay
if you don't understand everything but

00:01:32.330 --> 00:01:34.820
try to find some major
takeaways from the articles.

00:01:34.820 --> 00:01:37.610
So then try your best into
these three targeted questions.

00:01:37.610 --> 00:01:40.100
So the first question is,

00:01:40.100 --> 00:01:43.770
what method do you call to request all
your focus from the Android system?

00:01:44.860 --> 00:01:48.800
Next, what method do you call
in order to release audio focus?

00:01:49.970 --> 00:01:53.830
And lastly, what callback method
do you implement to get notified

00:01:53.830 --> 00:01:56.240
when audio focus state changes?

00:01:56.240 --> 00:01:57.570
So we'll take this knowledge and

00:01:57.570 --> 00:02:00.530
apply it to a Miwok app code
in an upcoming coding task.

