WEBVTT
Kind: captions
Language: zh-CN

00:00:00.650 --> 00:00:02.380
打开 NumbersActivity

00:00:02.380 --> 00:00:05.750
从这里开始 检测列表项上的点击操作

00:00:05.750 --> 00:00:09.620
我们需要做的是暂时将其与提示消息绑定了

00:00:09.620 --> 00:00:11.480
以便知道我们的代码可以运行

00:00:11.480 --> 00:00:13.242
往下滚动到这行

00:00:13.242 --> 00:00:17.630
listView.setAdapter 我们会在这行将我们的 WordAdapter 与 listView 绑定

00:00:17.630 --> 00:00:22.010
在这行之后可以配置我们的 onClickListener

00:00:22.010 --> 00:00:26.546
我们将使用 listView 对象并对其调用 setOnItemClickListener 方法

00:00:26.546 --> 00:00:29.084
当它从自动填充建议中出现时

00:00:29.084 --> 00:00:30.750
按下 Enter

00:00:30.750 --> 00:00:34.020
这里我们需要传入 OnItemClickListener

00:00:34.020 --> 00:00:37.530
因为这是接口 我们需要自己实施方法

00:00:37.530 --> 00:00:40.440
这里我们仅写了一个方法

00:00:40.440 --> 00:00:44.090
所以很容易在行内直接实施为匿名类

00:00:44.090 --> 00:00:46.470
但是 如果我们定义了多个方法

00:00:46.470 --> 00:00:49.900
我们可能需要在单独的类文件里定义每个方法

00:00:49.900 --> 00:00:52.690
然后在这里调用类构造函数

00:00:52.690 --> 00:00:54.510
要开始写我们的匿名类

00:00:54.510 --> 00:00:57.420
我在这里输入“new OnItemClickListener”

00:00:58.530 --> 00:01:01.480
Android Studio 给出了自动填充建议

00:01:01.480 --> 00:01:03.320
我选择该建议

00:01:03.320 --> 00:01:07.540
根据该建议 Android Studio 知道我们需要寻找一个 OnItemClickListener

00:01:07.540 --> 00:01:10.070
并重写该 onClick 方法

00:01:10.070 --> 00:01:14.110
我们暂时先弹出一个提示消息 而不是使用 onItemClick 方法

00:01:15.206 --> 00:01:19.310
称之为 Toast.makeText 传入一个 Context

00:01:19.310 --> 00:01:21.650
注意我们的 Activity 是个 Context

00:01:21.650 --> 00:01:24.500
通常 我们可以引用我们所位于的类

00:01:24.500 --> 00:01:27.314
在 NumbersActivity 中可以使用 this

00:01:27.314 --> 00:01:30.830
但在某些位置 例如 OnItemClickListener 内

00:01:30.830 --> 00:01:33.448
使用单词 this 会比较模糊

00:01:33.448 --> 00:01:38.389
所以这里 我们先指定类 即 NumbersActivity.this

00:01:38.389 --> 00:01:41.995
提示消息的第二个输入值为显示我们想在屏幕上

00:01:41.995 --> 00:01:42.979
看到的内容

00:01:42.979 --> 00:01:46.575
这里 我们让其显示“List item clicked”

00:01:46.575 --> 00:01:49.935
对于第三个输入值 我们指定提示消息的时长

00:01:49.935 --> 00:01:52.295
这里 我们让其显示很短的时间

00:01:53.735 --> 00:01:58.325
makeText 方法调用的输出值将为新的 toast 对象 

00:01:58.325 --> 00:02:00.445
在此之后 我们可以对其调用 show() 方法

00:02:01.625 --> 00:02:03.490
现在在设备上运行下应用

00:02:03.490 --> 00:02:07.440
点按 NumbersActivity 然后点按某个列表项

00:02:07.440 --> 00:02:09.120
不错 可以显示提示消息

00:02:09.120 --> 00:02:12.310
现在来修改下该行为 点击列表项后

00:02:12.310 --> 00:02:15.350
会播放音频文件 而不是弹出提示消息

00:02:15.350 --> 00:02:19.940
首先 我下载了音频文件 我在测试题中为你提供了该文件

00:02:19.940 --> 00:02:22.490
复制该文件 回到 Android studio

00:02:22.490 --> 00:02:25.930
我在应用的资源目录下创建了 raw 文件夹

00:02:25.930 --> 00:02:28.380
我将刚才的音频文件粘贴到该文件夹内

00:02:29.440 --> 00:02:31.630
我们可以保留默认的名称

00:02:31.630 --> 00:02:34.290
现在音频文件已经包含在我们的应用中了

00:02:34.290 --> 00:02:37.810
我们先重点研究下 NumbersActivity 看看如何播放该音频文件

00:02:37.810 --> 00:02:40.500
我们知道我们需要 MediaPlayer 对象实例

00:02:40.500 --> 00:02:43.930
我们在这个 Activity 中定义一个新的成员变量

00:02:43.930 --> 00:02:46.090
我们可以回到 MediaPlayer

00:02:46.090 --> 00:02:47.470
应用的教程

00:02:47.470 --> 00:02:51.240
或者回到我们看到的第一篇关于 Media Playback 的文章

00:02:51.240 --> 00:02:52.840
二者都可以

00:02:52.840 --> 00:02:56.470
我们可以复制这段代码 即为某个原始声音文件创建

00:02:56.470 --> 00:02:57.700
一个新的 MediaPlayer 对象

00:02:58.800 --> 00:03:01.460
现在回到  Android Studio 中的应用

00:03:01.460 --> 00:03:05.180
在 onItemClick 方法中 我们删除这行

00:03:05.180 --> 00:03:09.230
显示提示消息的代码 并粘贴 MediaPlayer 代码

00:03:09.230 --> 00:03:11.620
我们需要对该代码做出一些修改

00:03:11.620 --> 00:03:15.720
这里我们不需要再次定义 MediaPlayer 对象数据类型

00:03:15.720 --> 00:03:21.000
可以直接引用称为 mMediaPlayer 的全局变量

00:03:21.000 --> 00:03:23.708
我们需要将所有指代变量名称 MediaPlayer 的地方

00:03:23.708 --> 00:03:26.549
更新为 mMediaPlayer

00:03:26.549 --> 00:03:28.940
这里有几个错误

00:03:28.940 --> 00:03:31.760
这里的变量 Context 无法被识别

00:03:31.760 --> 00:03:35.310
我们需要将其替换为指代 NumbersActivity Context

00:03:35.310 --> 00:03:38.980
使用语法 NumbersActivity.this

00:03:38.980 --> 00:03:43.470
此外 Android Studio 提示无法识别

00:03:43.470 --> 00:03:45.150
原始资源 sound_file_1

00:03:45.150 --> 00:03:48.360
我们需要将声音文件称为 number_1

00:03:48.360 --> 00:03:50.330
直接更新这里的名称

00:03:50.330 --> 00:03:53.730
我们可以直接使用资源的名称

00:03:53.730 --> 00:03:57.070
不用加上 MP3 文件扩展名

00:03:57.070 --> 00:04:00.130
在为给定声音文件创建 MediaPlayer 对象后

00:04:00.130 --> 00:04:03.080
我们可以调用 start() 方法来开始播放声音文件

00:04:04.460 --> 00:04:06.090
现在在设备上测试下

00:04:06.090 --> 00:04:08.162
点按 Numbers 类别

00:04:08.162 --> 00:04:12.257
点按任意一个列表项 看看是否能播放 lutti 声音文件

00:04:12.257 --> 00:04:14.451
lutti

00:04:14.451 --> 00:04:16.401
lutti

00:04:16.401 --> 00:04:19.390
lutti

00:04:19.390 --> 00:04:20.220
很棒

00:04:20.220 --> 00:04:22.590
我们的应用可以播放单个音频文件了

00:04:22.590 --> 00:04:23.090
不错

