WEBVTT
Kind: captions
Language: zh-CN

00:00:00.470 --> 00:00:03.340
我将创建一个新项目 叫做 MusicPlayer

00:00:03.340 --> 00:00:06.460
点击“开始一个新的 Android Studio 项目 (Start a new Android Studio project)” 

00:00:06.460 --> 00:00:09.070
我将应用命名为 MusicPlayer

00:00:09.070 --> 00:00:12.298
点击“下一步”接受这个默认的最低 SDK

00:00:12.298 --> 00:00:15.370
然后选择 Empty Activity 模板

00:00:15.370 --> 00:00:16.910
点击“下一步” 然后点击“完成”

00:00:18.670 --> 00:00:21.380
完成后 首先我将修改布局

00:00:21.380 --> 00:00:23.210
使屏幕上出现两个按钮

00:00:23.210 --> 00:00:26.470
打开我的 activity_main.xml 文件

00:00:26.470 --> 00:00:29.780
转到 TextView 关闭这个

00:00:29.780 --> 00:00:32.200
打开 activity_main.xml 文件后

00:00:32.200 --> 00:00:34.160
我将打开预览面板

00:00:34.160 --> 00:00:38.380
修改现有的 activity_main.xml 文件

00:00:38.380 --> 00:00:41.010
使其从 RelativeLayout 变成 Linearlayout

00:00:41.010 --> 00:00:45.500
在这里做出更改 这样会使播放和暂停按钮相互堆叠

00:00:45.500 --> 00:00:49.820
你可以随意安排这些按钮的位置

00:00:49.820 --> 00:00:53.132
可以放在屏幕的中间位置 甚至水平成一排

00:00:53.132 --> 00:00:55.928
我移动下这些内容 从而能够垂直查看所有这些内容

00:00:55.928 --> 00:00:59.328
同时在这里添加屏幕方向为垂直方向

00:00:59.328 --> 00:01:03.758
接着修改这个 textView 将其改为 Button

00:01:03.758 --> 00:01:06.510
然后复制并粘贴了 从而出现两个按钮

00:01:08.140 --> 00:01:11.118
第一个按钮的文本设为“播放”

00:01:11.118 --> 00:01:13.805
第二个按钮的文本设为“暂停”

00:01:13.805 --> 00:01:17.175
同时向每个按钮添加视图 ID 因为稍后我们会在

00:01:17.175 --> 00:01:20.415
Java 代码中引用这些 ID 以便为每个按钮定义 ButtonClick 行为

00:01:22.185 --> 00:01:25.455
在预览面板看看布局 看起来不错

00:01:25.455 --> 00:01:28.005
现在转到 MainActivity 文件

00:01:28.005 --> 00:01:30.775
这里我将为每个按钮添加 clickListener

00:01:30.775 --> 00:01:34.720
和第 1 节课提到的内容比较相似 我们将为这个按钮实施一个匿名 clickListener

00:01:34.720 --> 00:01:38.130
并位于 onClick 回调方法之上

00:01:38.130 --> 00:01:41.940
在 onCreate 方法中 我将使用 findViewById 方法

00:01:41.940 --> 00:01:45.360
找到我们创建的 playButton 并传入 ViewId

00:01:47.200 --> 00:01:49.430
然后对该按钮设置 OnClickListener 方法

00:01:53.500 --> 00:01:57.797
对于 onClick 方法中的说明 在弄明白

00:01:57.797 --> 00:02:01.648
如何播放歌曲文件前 暂时将仅弹出一条提示消息

00:02:04.600 --> 00:02:07.068
我可以针对暂停按钮使用相同的逻辑

00:02:07.068 --> 00:02:11.024
我将选中这整个代码块 复制粘贴了

00:02:11.024 --> 00:02:14.757
只需要更改变量名称 视图 ID

00:02:14.757 --> 00:02:18.820
以及提示消息以便指代暂停按钮

00:02:18.820 --> 00:02:22.160
我们在手机上运行下应用 确保到目前为止所编写的代码可以运行

00:02:22.160 --> 00:02:22.820
不错

00:02:22.820 --> 00:02:25.430
每个按钮都弹出了不同的提示消息

00:02:25.430 --> 00:02:27.560
一个是“播放” 一个是“暂停”

00:02:27.560 --> 00:02:29.920
现在开始添加歌曲文件

00:02:29.920 --> 00:02:32.980
我按照之前演示的步骤创建了 raw 文件夹

00:02:32.980 --> 00:02:35.390
这是在我的计算机上的歌曲文件

00:02:35.390 --> 00:02:38.900
可能有人好奇是啥歌曲 其实它是 Android Developer

00:02:38.900 --> 00:02:41.030
YouTube 频道的预告片歌曲

00:02:41.030 --> 00:02:42.461
将该文件复制粘贴到

00:02:42.461 --> 00:02:45.608
Android Studio 中的该 raw 文件夹下

00:02:45.608 --> 00:02:48.510
不错 添加完毕 歌曲文件现在添加到我们的应用中了

00:02:48.510 --> 00:02:50.700
我们来看看如何播放该歌曲

00:02:50.700 --> 00:02:53.820
一种方式是 回到之前的 Media Playback 文章

00:02:53.820 --> 00:02:57.520
但是我想演示下另一种查找答案的方式

00:02:57.520 --> 00:03:02.210
我们去网上搜索 android media player tutorial

00:03:02.210 --> 00:03:03.450
第一条结果看起来不错

00:03:04.860 --> 00:03:07.640
这些代码段看起也很有用

00:03:07.640 --> 00:03:08.970
阅读说明后发现

00:03:08.970 --> 00:03:12.520
这行代码为我们创建了 MediaPlayer 对象

00:03:12.520 --> 00:03:16.750
注意 我们传入了两个输入值 一个 Context

00:03:16.750 --> 00:03:18.500
以及原始音频文件的资源 ID

00:03:18.500 --> 00:03:22.160
在这个实例中 歌曲是文件的名称

00:03:22.160 --> 00:03:27.080
创建完 MediaPlayer 后 我们可以调用 start() 和 pause() 等方法

00:03:27.080 --> 00:03:30.760
似乎对应的是我们的播放按钮

00:03:30.760 --> 00:03:32.130
和暂停按钮

00:03:32.130 --> 00:03:35.317
这篇文章的剩余部分讨论了你可以调用的其他方法

00:03:35.317 --> 00:03:37.418
你可以以后再回来查看这些内容

00:03:37.418 --> 00:03:40.296
这行代码看起来非常有用

00:03:40.296 --> 00:03:42.890
我直接复制并粘贴到我们的应用中

00:03:42.890 --> 00:03:46.390
回到我们的代码 应该在哪创建 MediaPlayer？

00:03:46.390 --> 00:03:48.670
根据测试题中的提示

00:03:48.670 --> 00:03:51.920
我们将 MediaPlayer 设为全局变量

00:03:51.920 --> 00:03:56.000
因为我们想针对每个按钮从 OnClickListener 上引用 MediaPlayer

00:03:56.000 --> 00:04:00.460
如果这一理由不太好理解 也没关系 当你在 Java 方面的经验越多

00:04:00.460 --> 00:04:03.760
你将更容易理解在匿名类 (例如这些点击监听器) 中

00:04:03.760 --> 00:04:07.500
使用的变量存在的要求

00:04:07.500 --> 00:04:09.570
在这里

00:04:09.570 --> 00:04:11.800
我们将 MediaPlayer 设为全局变量

00:04:12.930 --> 00:04:15.780
在 MainActivity 文件中 我们该何时

00:04:15.780 --> 00:04:17.670
设置或初始化 MediaPlayer 呢？

00:04:17.670 --> 00:04:19.570
当用户点击“播放”按钮吗？

00:04:21.380 --> 00:04:24.000
我认为应该设为在此之前

00:04:24.000 --> 00:04:27.700
当 Activity 首次创建时我们就初始化

00:04:27.700 --> 00:04:30.680
这样的话 当我们点按播放时 MediaPlayer 对象就已经准备好

00:04:31.700 --> 00:04:34.250
我将从教程中复制的代码粘贴到此处

00:04:35.320 --> 00:04:37.870
并作出修改 使其符合我们的应用

00:04:37.870 --> 00:04:40.400
现在不需要再次声明我输入的这个对象

00:04:40.400 --> 00:04:44.090
因为该变量已经声明为全局变量

00:04:44.090 --> 00:04:47.225
同时将 R.raw.song 重命名为

00:04:47.225 --> 00:04:53.560
R.raw.android_trailer 因为这是我们的歌曲文件的名称

00:04:53.560 --> 00:04:55.940
然后在 playButton ClickListener 中

00:04:55.940 --> 00:05:00.990
我们可以删除提示消息并调用 mediaPlayer.start()

00:05:00.990 --> 00:05:04.028
然后对 pauseButton ClickListener 执行类似的操作

00:05:04.028 --> 00:05:07.318
删除提示消息并调用 mediaPlayer.pause()

00:05:07.318 --> 00:05:08.838
现在测试下应用

00:05:08.838 --> 00:05:15.458
[音乐]

00:05:15.458 --> 00:05:17.510
不错 听起来很棒

00:05:17.510 --> 00:05:19.560
歌曲可以播放 播放按钮和暂停按钮

00:05:19.560 --> 00:05:21.910
也能像预期的那样正常工作

00:05:21.910 --> 00:05:24.230
现在回到我们之前找到的教程

00:05:24.230 --> 00:05:25.830
如果你还有时间的话

00:05:25.830 --> 00:05:28.990
可以研究下其他媒体播放器方法

00:05:28.990 --> 00:05:31.990
例如这里的 seekTo 方法

00:05:31.990 --> 00:05:35.880
用于跳到歌曲的不同部分 或者这个 setVolume 方法

00:05:35.880 --> 00:05:38.850
用于调节音量 很棒

00:05:38.850 --> 00:05:39.770
可以看出

00:05:39.770 --> 00:05:43.890
写一个小的示例应用有助于熟悉 Android 中的新 API

00:05:43.890 --> 00:05:48.010
而不存在功能完整的应用所具有的各种复杂性

00:05:48.010 --> 00:05:50.654
暂时先将该音乐播放器应用放在一边

00:05:50.654 --> 00:05:53.600
稍后再回来研究它 现在回到 Miwok 应用吧

