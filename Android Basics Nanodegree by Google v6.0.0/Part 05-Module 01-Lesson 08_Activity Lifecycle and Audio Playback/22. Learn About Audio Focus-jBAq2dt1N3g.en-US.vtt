WEBVTT
Kind: captions
Language: en-US

00:00:00.160 --> 00:00:03.220
So both articles we provided
you contain the answer but

00:00:03.220 --> 00:00:05.350
let's just take a look
at one of the articles.

00:00:05.350 --> 00:00:06.721
So Joanna's blog post here.

00:00:06.721 --> 00:00:11.440
Now in this first section,
she explains about audio focus.

00:00:11.440 --> 00:00:12.700
And further down here,

00:00:12.700 --> 00:00:16.780
she says that you can request the audio
focus from the AudioManager class and

00:00:16.780 --> 00:00:20.330
she provided a link to the method that
we can call to request audio focus.

00:00:20.330 --> 00:00:21.450
So, let's navigate there.

00:00:21.450 --> 00:00:25.061
So, here's the requestAudioFocus
method in Android documentation.

00:00:25.061 --> 00:00:26.942
Now, let's go back to the blog post.

00:00:26.942 --> 00:00:30.979
In that same sentence, she provides a
link on how to release audio focus when

00:00:30.979 --> 00:00:33.230
you're done playing the sound.

00:00:33.230 --> 00:00:36.090
And that takes us to
the abandonAudioFocus method

00:00:36.090 --> 00:00:38.260
within the AudioManager class.

00:00:38.260 --> 00:00:40.780
All right, so we've answered
the first two questions so far.

00:00:40.780 --> 00:00:45.190
We can request audio focus from
the Android system by calling

00:00:45.190 --> 00:00:50.210
the AudioManager's requestAudioFocus
method and then we can play our audio.

00:00:50.210 --> 00:00:54.730
When we're immediately done playing
audio, we can release audio focus

00:00:54.730 --> 00:00:59.260
by calling the abandonAudioFocus
method in the AudioManager class.

00:00:59.260 --> 00:01:02.499
Now note that these two methods do have
input parameters that you'll need to

00:01:02.499 --> 00:01:05.687
pass in, but you can shove that in
the documentation later when we actually

00:01:05.687 --> 00:01:07.300
need to use these methods.

00:01:07.300 --> 00:01:11.240
All right, so on to the third question
of what callback should we implement so

00:01:11.240 --> 00:01:14.615
that we can get notified when
the audio focus changes for our app?

00:01:14.615 --> 00:01:16.290
An example of this case is,

00:01:16.290 --> 00:01:20.100
if a phone call comes in then we need to
adjust our audio playback accordingly.

00:01:20.100 --> 00:01:23.850
Now back in the bog post in the same
paragraph, it explains the system

00:01:23.850 --> 00:01:28.360
may need to temporarily or permanently
take the audio focus away from our app.

00:01:28.360 --> 00:01:30.580
And so for
that we need to create an instance

00:01:30.580 --> 00:01:33.280
of the OnAudioFocusChangeListener
to listen for

00:01:33.280 --> 00:01:36.000
these changes on the device so
that we can react to them.

00:01:36.000 --> 00:01:39.740
So let's navigate to the
OnAudioFocusChangeListener interface.

00:01:39.740 --> 00:01:42.890
So OnAudioFocusChangeListener
is another interface

00:01:42.890 --> 00:01:44.820
just like other interfaces
that we've used.

00:01:44.820 --> 00:01:49.580
Like OnClickListener and the media
players OnCompletionListener interface.

00:01:49.580 --> 00:01:53.370
So notice that it contains one abstract
method that we'll need to implement.

00:01:53.370 --> 00:01:57.040
So we need to provide code on what
to do when the audio focus changes.

00:01:57.040 --> 00:01:59.890
So for example, if we lose
audio focus we should probably

00:01:59.890 --> 00:02:02.220
stop playing the pronunciation
of the word in our app.

00:02:02.220 --> 00:02:05.426
And we can figure out the details of how
to handle audio focus changes later.

00:02:05.426 --> 00:02:07.783
All right, so
back to the third quiz question.

00:02:07.783 --> 00:02:10.699
In order to be notified of
changes in audio focus,

00:02:10.699 --> 00:02:14.410
we need to create
an OnAudioFocusChangeListener.

00:02:14.410 --> 00:02:18.055
And then we need to implement
the onAudioFocusChange callback method.

00:02:18.055 --> 00:02:19.089
[BLANK_AUDIO]

