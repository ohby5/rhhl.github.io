WEBVTT
Kind: captions
Language: zh-CN

00:00:00.300 --> 00:00:03.040
不错 你能够在不需要 MediaPlayer 资源后

00:00:03.040 --> 00:00:04.380
立即清空了这些资源

00:00:04.380 --> 00:00:07.780
你已经遵守了 Android 开发流程的最佳做法

00:00:07.780 --> 00:00:09.460
至少在大部分情况下

00:00:09.460 --> 00:00:13.180
现在我将再介绍一些详情 需要再对代码

00:00:13.180 --> 00:00:13.940
稍加修改

00:00:13.940 --> 00:00:17.370
问题是我们一直假设的是

00:00:17.370 --> 00:00:19.299
用户将始终呆在我们的应用中

00:00:20.470 --> 00:00:24.410
如果用户决定离开应用 例如转到网络浏览器

00:00:24.410 --> 00:00:25.440
甚至接个电话呢？

00:00:27.160 --> 00:00:29.770
如果用户没有活跃地查看我们的应用

00:00:29.770 --> 00:00:33.570
则我们就无法结束执行我们的代码 并清空 MediaPlayer 资源

00:00:33.570 --> 00:00:36.860
如果用户切换到了其他几个应用 并且再也没有回到

00:00:36.860 --> 00:00:40.418
Miwok 应用 那么最终 Android 将销毁我们的 Activity

00:00:40.418 --> 00:00:44.050
以便使用这些资源来运行

00:00:44.050 --> 00:00:44.950
用户最近互动的应用

00:00:44.950 --> 00:00:46.660
作为开发者 我们要随时准备好

00:00:46.660 --> 00:00:49.100
用户会离开我们的 Activity

00:00:49.100 --> 00:00:52.110
或者系统会销毁我们的 Activity 因为它需要

00:00:52.110 --> 00:00:54.110
这些资源并用于其他任务

00:00:54.110 --> 00:00:57.250
例如 在电子邮件应用中

00:00:57.250 --> 00:01:00.350
开发者需要负责存储用户邮件草稿的最新版本

00:01:00.350 --> 00:01:02.970
当用户回到该应用 即使在几天

00:01:02.970 --> 00:01:05.340
或几个月之后 看起来也像用户从来没有离开过该应用一样

00:01:06.560 --> 00:01:09.570
在这种情况下 开发者应该向系统表示

00:01:09.570 --> 00:01:12.970
希望知道用户何时离开的当前 Activity

00:01:12.970 --> 00:01:13.730
此时

00:01:13.730 --> 00:01:16.890
开发者应该保存了邮件草稿的最新版本

00:01:16.890 --> 00:01:19.170
当用户后来返回该 Activity 时

00:01:19.170 --> 00:01:22.150
邮件草稿内容应该出现在屏幕上

00:01:22.150 --> 00:01:25.110
如果用户回到之前正在撰写的邮件草稿

00:01:25.110 --> 00:01:28.910
发现屏幕完全是空白的 因为他们所做的更改从未被保存

00:01:28.910 --> 00:01:30.490
那么就很糟糕

00:01:30.490 --> 00:01:33.190
所有这些行为都需要保留

00:01:33.190 --> 00:01:35.080
设备上的内存资源

00:01:35.080 --> 00:01:38.090
Android 希望具有足够的资源 使用户当前互动的应用

00:01:38.090 --> 00:01:42.600
能快速运行并及时响应 并且用户一段时间

00:01:42.600 --> 00:01:46.430
都没有与其互动的应用上的资源没有被浪费

00:01:46.430 --> 00:01:49.570
为了使所有这一切都能在设备上有条不紊的发生

00:01:49.570 --> 00:01:53.690
Android 提供了一个所有 Activity 都可以遵守的生命周期

00:01:53.690 --> 00:01:56.360
系统可以使 Activity 从生命周期的一个阶段

00:01:56.360 --> 00:02:00.350
过渡到另一个阶段 并提供回调

00:02:00.350 --> 00:02:04.430
这样作为开发者 当这些更改发生在你的 Activity 中时 你就会收到通知

00:02:04.430 --> 00:02:05.480
当你收到通知后

00:02:05.480 --> 00:02:08.940
你就可以借此机会执行某些所需的操作

00:02:08.940 --> 00:02:11.630
我们来讨论下 Activity 所具有的其他状态

00:02:11.630 --> 00:02:15.360
当 Activity 首次被启动时 进入 Created 状态 Started 状态

00:02:15.360 --> 00:02:16.250
然后进入 Resumed 状态

00:02:16.250 --> 00:02:19.850
此时 该 Activity 处于活跃状态 用户可以与其互动

00:02:19.850 --> 00:02:23.400
一旦用户转到其他 Activity 或不同的应用

00:02:23.400 --> 00:02:26.960
则该 Activity 会进入 Paused 状态 然后进入 Stopped 状态

00:02:26.960 --> 00:02:29.670
如果被结束 就会被销毁

00:02:29.670 --> 00:02:32.800
如果用户回到该 Activity 它会重新开始

00:02:32.800 --> 00:02:35.640
我们回到 Started 状态

00:02:35.640 --> 00:02:38.190
现在用户又可以与其互动了

00:02:38.190 --> 00:02:41.530
这里 我展示了简化版的 Activity 生命周期图表

00:02:41.530 --> 00:02:44.475
让你能够大概了解下所发生的过程

00:02:44.475 --> 00:02:49.120
在官方 Android 文档的“Starting an Activity”部分

00:02:49.120 --> 00:02:52.190
我们可以找到完整的 Activity 生命周期图表

00:02:52.190 --> 00:02:54.980
这个图表比我之前展示的要复杂些

00:02:54.980 --> 00:02:56.960
但是主旨是一样的

00:02:57.970 --> 00:03:00.140
Android 系统负责

00:03:00.140 --> 00:03:03.230
将你的 Activity 过渡到这里的每个状态

00:03:03.230 --> 00:03:06.115
作为开发者 你无法控制你所在的状态

00:03:06.115 --> 00:03:09.380
从这里开始 当你的 Activity 被启动后

00:03:09.380 --> 00:03:12.560
该 Activity 通过 onCreate 方法进入 Created 状态

00:03:14.060 --> 00:03:18.000
然后使用 onStart 方法进入 Started 状态

00:03:18.000 --> 00:03:20.880
这时候 它对用户可见了

00:03:20.880 --> 00:03:24.260
从这里 通过 onResume 方法进入 Resumed 状态

00:03:24.260 --> 00:03:27.860
此时 该 Activity 依然对用户可见

00:03:27.860 --> 00:03:30.680
但现在用户可以开始与该 Activity 互动了

00:03:30.680 --> 00:03:35.270
此时 你可以播放动画 使用传感器 例如位置传感器

00:03:35.270 --> 00:03:36.390
甚至可以使用设备上的摄像头

00:03:36.390 --> 00:03:40.970
该 Activity 可以一直保持为 Resumed 状态 只要用户盯着该屏幕

00:03:40.970 --> 00:03:44.740
所以可以是几分钟 几小时 甚至更长时间

00:03:45.860 --> 00:03:48.580
一旦用户切换到其他 Activity

00:03:48.580 --> 00:03:51.910
那么你的 Activity 就会通过 onPause 方法进入 Paused 状态

00:03:51.910 --> 00:03:55.400
并接着通过 onStop 方法进入 Stopped 状态

00:03:55.400 --> 00:03:59.760
此时 该 Activity 对用户不再可见

00:03:59.760 --> 00:04:02.400
因为用户无法再看到该 Activity

00:04:02.400 --> 00:04:05.870
如果系统判断不再需要你的 Activity

00:04:05.870 --> 00:04:09.460
就会通过 onDestroy 方法销毁你的 Activity

00:04:09.460 --> 00:04:12.380
以便释放设备上的资源

00:04:12.380 --> 00:04:15.610
接着 你的 Activity 就会进入 Destroyed 状态

00:04:15.610 --> 00:04:18.769
否则 你的 Activity 可以保持在 Stopped 状态

00:04:18.769 --> 00:04:22.670
在被销毁之前 如果用户决定回到该 Activity

00:04:22.670 --> 00:04:26.840
该 Activity 就会通过 onRestart 方法重新开始

00:04:26.840 --> 00:04:29.830
并通过 onStart 方法重新进入 Started 状态

00:04:29.830 --> 00:04:34.790
并最终通过 onResume 方法回到 Resumed 状态

