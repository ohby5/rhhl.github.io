WEBVTT
Kind: captions
Language: zh-CN

00:00:00.290 --> 00:00:03.510
现在你应该已经确认了 message 是一个全局变量

00:00:03.510 --> 00:00:06.920
你可以从它声明的位置看出来 它的声明在这里

00:00:07.980 --> 00:00:11.000
它的声明没有在任何一个方法内

00:00:11.000 --> 00:00:13.980
事实上 它的声明在所有方法外部

00:00:13.980 --> 00:00:16.600
尽管它声明在了两个大括号中间

00:00:16.600 --> 00:00:19.200
这是我们所谓的 MainActivity 类

00:00:19.200 --> 00:00:21.070
下一个问题是

00:00:21.070 --> 00:00:23.050
message 应该是全局变量吗

00:00:23.050 --> 00:00:28.430
无论何时我们使用 message 都会设置它的值

00:00:28.430 --> 00:00:30.040
然后立即显示它

00:00:30.040 --> 00:00:34.230
当我们设置了 message 我们不需要知道它之前的值

00:00:34.230 --> 00:00:38.140
全局变量适用于保存变量之前的值

00:00:38.140 --> 00:00:41.290
在应用中 像按钮点击或其他事件之间的变量

00:00:41.290 --> 00:00:43.800
它们是保存应用状态的办法

00:00:43.800 --> 00:00:44.870
它们并不适用于

00:00:44.870 --> 00:00:48.370
保存变量的中间值

00:00:48.370 --> 00:00:51.300
记住 当执行这些方法块中的代码时

00:00:51.300 --> 00:00:54.990
是连续执行每一个语句的

00:00:54.990 --> 00:00:59.187
如果你的变量只存在于代码块内部

00:00:59.187 --> 00:01:01.293
那它就不用设为全局变量了

00:01:01.293 --> 00:01:02.959
它是被局部使用的

00:01:02.959 --> 00:01:04.918
它只是在这个方法内使用

00:01:04.918 --> 00:01:06.320
message 变量就是这个情况

00:01:06.320 --> 00:01:09.240
它就是一种中间变量 只在这个时刻使用

00:01:09.240 --> 00:01:12.640
所以 message 不用设为一个全局变量

00:01:12.640 --> 00:01:15.810
现在 是否因为它是全局变量而程序就不能运转呢？

00:01:15.810 --> 00:01:20.110
不 它运转正常 但是假设我忘了写这一行

00:01:20.110 --> 00:01:22.350
如果我点击 No 按钮

00:01:22.350 --> 00:01:25.770
将出现的是 程序首先获取 healthLevel

00:01:25.770 --> 00:01:27.180
并且减1

00:01:27.180 --> 00:01:29.540
另外 你可能想知道

00:01:29.540 --> 00:01:30.670
healthLevel 的值

00:01:30.670 --> 00:01:33.200
我们将在下一个视频中讨论这个问题

00:01:33.200 --> 00:01:35.230
现在我们先假设它是0

00:01:35.230 --> 00:01:37.070
我们取0 然后减1

00:01:37.070 --> 00:01:38.920
他们的 healthLevel 是负1了

00:01:38.920 --> 00:01:41.560
然后我们不写这一行

00:01:41.560 --> 00:01:43.820
直接输出了 message 的大小

00:01:43.820 --> 00:01:45.280
那么 message 的值是多少？

00:01:45.280 --> 00:01:47.530
当创建一个全局变量

00:01:47.530 --> 00:01:52.290
却没给它初始值 它会被赋予一个默认值

00:01:52.290 --> 00:01:55.760
对于字符串类型 默认初始值是空字符串

00:01:55.760 --> 00:01:58.280
就是一个字符串中没有文本

00:01:58.280 --> 00:02:00.924
这就意味着当用户点击 No 按钮 看不到任何

00:02:00.924 --> 00:02:01.920
消息

00:02:01.920 --> 00:02:05.180
这可不太妙 但是这是意料之中的

00:02:05.180 --> 00:02:06.780
当事情变得完全错乱时

00:02:06.780 --> 00:02:09.520
假设你先点击了 Yes 按钮

00:02:09.520 --> 00:02:12.910
这时就会错乱 你回答 Yes healthLevel 当前值 是1

00:02:12.910 --> 00:02:14.620
在屏幕上显示它

00:02:14.620 --> 00:02:17.700
我们假设在那之后点了 No 按钮

00:02:17.700 --> 00:02:21.530
程序会从 healthlevel 减1 然后变成0

00:02:21.530 --> 00:02:24.790
但是 message 值不会变化 因为我们

00:02:24.790 --> 00:02:25.970
已经删除了那行代码

00:02:25.970 --> 00:02:28.940
所以 message 会保持它之前的值

00:02:28.940 --> 00:02:32.190
你回答 Yes healthlevel 当前值是1

00:02:32.190 --> 00:02:33.770
它会再次显示那个值

00:02:33.770 --> 00:02:37.330
这一切会发生 是因为 healthlevel 存在

00:02:37.330 --> 00:02:38.540
于多种方法之间

00:02:38.540 --> 00:02:42.500
所以无论之前值是多少 我们现在不修改它

00:02:42.500 --> 00:02:43.890
它还是之前的值

00:02:43.890 --> 00:02:46.340
并且不会抛出编译错误

00:02:46.340 --> 00:02:49.930
如果 message 是一个局部变量 当你忘记赋值

00:02:49.930 --> 00:02:53.140
将会出现编译错误 程序将无法执行

00:02:53.140 --> 00:02:55.800
但是因为你设置的是全局变量 所以没事

00:02:55.800 --> 00:02:59.010
它只是输出之前的值

00:02:59.010 --> 00:02:59.920
这是错误的

00:02:59.920 --> 00:03:03.170
总结一下 message 不应该是全局变量

00:03:03.170 --> 00:03:03.700
为什么呢？

00:03:03.700 --> 00:03:06.370
它并不是真的应用于方法之间的

00:03:06.370 --> 00:03:09.150
否则它会保存别的方法调用时

00:03:09.150 --> 00:03:11.410
被赋予的值

00:03:11.410 --> 00:03:14.780
因为全局变量会有默认值设置

00:03:14.780 --> 00:03:18.650
或者它能使用其它方法中赋予的值

00:03:18.650 --> 00:03:21.500
我们犯了错 并且忘记设置正确的值

00:03:21.500 --> 00:03:24.300
我们不应该这样 这会加大工作难度

00:03:24.300 --> 00:03:26.770
这是例子中的一个变量

00:03:26.770 --> 00:03:28.153
让我们 再找一个变量 healthLevel

