WEBVTT
Kind: captions
Language: ja

00:00:00.710 --> 00:00:04.570
私はこれらの質問に XML に
ジャンプする前に回答します

00:00:04.570 --> 00:00:07.050
最初の最初は ビューの選択です

00:00:07.050 --> 00:00:08.670
それぞれの周りに 
わかるように 箱を描きます

00:00:09.700 --> 00:00:11.130
はい そこには正式に考えられる
5 つの異なるビューがあります

00:00:11.130 --> 00:00:14.070
正式にビューだと考えられる
ビューグループは含みません

00:00:14.070 --> 00:00:17.610
とにかく これら 5 つのビューには
3 つの下部のボタンから見て─

00:00:17.610 --> 00:00:19.330
二つのテキストビューが上部にあります

00:00:19.330 --> 00:00:24.480
さらに そこにイメージビューは
どこにも存在しません

00:00:24.480 --> 00:00:28.300
今 あなたはなぜ私が二つのテキストビューを
置いたのかと思っているかもしれません

00:00:28.300 --> 00:00:31.940
最終的な製品スタイル
<i>teamA</i> と─

00:00:31.940 --> 00:00:34.050
得点は非常に異なっています

00:00:34.050 --> 00:00:37.530
なので 私はこれらを二つの分離した
テキストビューにすると決めたのです

00:00:37.530 --> 00:00:40.080
ステップ 2 へといきましょう
どちらがビューの位置を定めるかです

00:00:40.080 --> 00:00:43.100
私はどのビューグループを
使いたいかをここで選択します

00:00:43.100 --> 00:00:46.830
私の二つの意見は、<i>linear layouts</i>
か <i>relative layout</i> です

00:00:46.830 --> 00:00:49.450
これは縦の列のビューです

00:00:49.450 --> 00:00:52.720
何をしたいのかが非常に明快
それが <i>linear layout</i> です

00:00:54.370 --> 00:00:57.310
はい それではステップ 3 です
ビューのスタイルです

00:00:57.310 --> 00:01:00.320
私はそれを XML と共に作用している
として扱います

00:01:00.320 --> 00:01:02.780
はい それでは XML に行ってみましょう

00:01:02.780 --> 00:01:04.970
私はテキストタブを見たいです

00:01:04.970 --> 00:01:07.740
最初に私がやることは
ただいくつかの不必要なものを

00:01:07.740 --> 00:01:09.760
削除することです

00:01:09.760 --> 00:01:12.470
なので私はこのテキストビューを
削除することから始めます

00:01:13.490 --> 00:01:16.597
さらにこれらの全ての
<i>paddingLeft 
paddingRight</i> ―

00:01:16.597 --> 00:01:19.750
<i>paddingTop paddingBottom</i>
もまた削除していきます

00:01:19.750 --> 00:01:23.090
私が言及したもの意外は削除しないよう
注意してください

00:01:23.090 --> 00:01:24.568
はい

00:01:24.568 --> 00:01:27.760
私達がこれから使うビューグループは
<i>relative layout</i> ではなく―

00:01:27.760 --> 00:01:30.370
<i>linear layout</i> だと言いました
なので 私はそれを今変えていきます

00:01:31.370 --> 00:01:34.590
それと この <i>linear layout</i> の内部に
二つのテキストビューを―

00:01:34.590 --> 00:01:35.800
三つのボタンと共に設置していきます

00:01:35.800 --> 00:01:37.710
私はそれらを作成していきます

00:01:37.710 --> 00:01:40.460
私はこのテキストビューの幅や高さを―

00:01:40.460 --> 00:01:42.780
今は細かく設定しません

00:01:42.780 --> 00:01:45.300
今は 私はただ <i>wrap_content</i> と―

00:01:45.300 --> 00:01:48.070
テキストビューの右側の
テキストに書きます

00:01:49.310 --> 00:01:52.490
私は先に進み このテキストビューと
同じようにテキストをセットします

00:01:52.490 --> 00:01:54.710
この最初のテキストビューは
ただ <i>Team A</i> だけ書きます

00:01:56.250 --> 00:01:58.710
はい それではどのような感じか
プレビューを見てみましょう

00:01:58.710 --> 00:02:01.800
はい <i>Team A</i> と書いてある
小さなテキストビューを見えます

00:02:01.800 --> 00:02:03.610
はい もう少し作成してみましょう

00:02:03.610 --> 00:02:07.200
次は テキストビューとして
下に得点を表示します

00:02:07.200 --> 00:02:09.758
なので 私達は
テキストを打ち込んでいきます

00:02:09.758 --> 00:02:12.490
はい テキストビューの文字が見えます
<i>Enter</i> を押します

00:02:12.490 --> 00:02:15.590
そして これもまた <i>wrap_content</i>
で作っていきます

00:02:15.590 --> 00:02:17.860
そして テキストを追加していきます

00:02:17.860 --> 00:02:21.560
得点は通常ゼロから始まります
なので 始めはゼロになります

00:02:21.560 --> 00:02:22.580
はい

00:02:22.580 --> 00:02:23.250
さて ボタンです

00:02:23.250 --> 00:02:25.510
私はこれから文字のボタンを
書いていきます

00:02:25.510 --> 00:02:28.230
これらもまた同様に <i>wrap_content</i>
にします

00:02:28.230 --> 00:02:32.002
はい それでは最初のボタンの
テキストを <i>+3 Points</i> と書きます

00:02:32.002 --> 00:02:34.800
これをコピー＆ペーストし―

00:02:34.800 --> 00:02:39.780
さらに二つのボタンを作成します

00:02:39.780 --> 00:02:43.020
そして一つは <i>+2 Points</i> と―

00:02:43.020 --> 00:02:45.250
もう一つは <i>Free Throw</i> とします

00:02:45.250 --> 00:02:47.000
はい プレビューでどんな感じか
見てみましょう

00:02:48.180 --> 00:02:51.070
3 つのボタンを持っているように見えます

00:02:51.070 --> 00:02:54.420
<i>Team A</i> と 0 も見えます

00:02:54.420 --> 00:02:55.910
なので 私の全ての作成したビューを
持っていますが―

00:02:55.910 --> 00:02:59.100
最終的な見た目へと到達した
ようには見えません

00:02:59.100 --> 00:03:01.080
これらは縦の列であることを思い出して下さい

00:03:01.080 --> 00:03:03.222
私はレイアウトの向きを
変える必要があります

00:03:03.222 --> 00:03:05.190
私はそれをこれからやっていきます

00:03:05.190 --> 00:03:09.600
私はビューを <i>vertical</i> にしたいので
これから <i>orientation</i> を書いていきます

00:03:09.600 --> 00:03:11.860
はい 見た感じが
少しだけ改善されました

00:03:11.860 --> 00:03:17.290
これらのボタンは実際はウィンドウの
幅いっぱいまで拡張されていました

00:03:17.290 --> 00:03:19.950
私は実際は <i>wrap_content</i> を
ボタンに使うべきではなく―

00:03:19.950 --> 00:03:23.290
代わりに <i>wrap_content</i> に
していきます

00:03:23.290 --> 00:03:24.470
なので 今すぐそれを
変えてみましょう

00:03:25.830 --> 00:03:29.030
はい 全てのボタンの幅は
今 <i>match_parent</i> になっています

00:03:29.030 --> 00:03:29.740
プレビューを見てみましょう

00:03:30.760 --> 00:03:33.470
はい いい感じですね
ボタンは拡張されました

00:03:33.470 --> 00:03:34.270
いいでしょう

00:03:34.270 --> 00:03:39.220
ただ テキストはまだ
コーナーに固定され潰されています

00:03:39.220 --> 00:03:43.680
私は <i>gravity</i> と言われているものを
使っていきます

00:03:43.680 --> 00:03:46.430
はい これは <i>Google Drawling</i> の画面です

00:03:46.430 --> 00:03:48.710
<i>Google Drawling</i> 内で
テキストボックスを作成しましょう

00:03:50.030 --> 00:03:52.350
はい ここには
ビューの境界があります

00:03:52.350 --> 00:03:54.330
私は <i>Team A</i> と書きます

00:03:54.330 --> 00:03:57.790
デフォルトでは それは左上の角に
配置されます

00:03:57.790 --> 00:04:00.780
そしてこれはテキストビューと同じで
あなたがテキストをビュー内に書くとき―

00:04:00.780 --> 00:04:03.440
デフォルトでは左上の角に配置されます

00:04:03.440 --> 00:04:08.700
それは <i>Google Drawings</i> と
私はこのテキストと―

00:04:08.700 --> 00:04:13.740
基本的な同等の属性を選択して
列に呼ぶことができ―

00:04:13.740 --> 00:04:18.940
テキストボックス内部を
平行 中央と垂直 中央にできます

00:04:18.940 --> 00:04:20.190
とてもいい感じです

00:04:20.190 --> 00:04:23.980
ビューの内容と
ビューの内部の境界の動きは―

00:04:23.980 --> 00:04:27.340
ちょうど何を <i>layout gravity</i> がするかです

00:04:27.340 --> 00:04:30.330
さらに もしあなたがこれがアラインメント
メソッドに似ていると思うなら―

00:04:30.330 --> 00:04:34.220
あなたは <i>relative layout</i> と
使うことができます

00:04:34.220 --> 00:04:36.990
しかし <i>linear layout</i> の <i>gravity</i> 属性
を使うことができ これを強力にします

00:04:36.990 --> 00:04:38.670
コード内のそれを
注意して見ていきます

00:04:40.130 --> 00:04:43.980
私は最初のテキストビューを選び
<i>gravity</i> を書いていきます

00:04:45.190 --> 00:04:46.970
はい <i>gravity</i> には
二つの選択があります

00:04:46.970 --> 00:04:48.990
<i>layout gravity</i> と <i>gravity</i> です

00:04:48.990 --> 00:04:50.570
私はたった今
<i>gravity</i> の属性について言いました

00:04:50.570 --> 00:04:52.650
それが私達が使うものの1つです

00:04:52.650 --> 00:04:55.650
はい そしてその後 
たくさんの選択がここにはあります

00:04:55.650 --> 00:04:58.220
それに 私は平行 中央の配置に
したいと思っています

00:04:58.220 --> 00:05:00.088
なので それをこれから使います

00:05:00.088 --> 00:05:02.620
そして プレビューで何をしたのかを
これから見ていきます

00:05:04.010 --> 00:05:08.130
そんなに変わったようには見えません
しかし これには実は理由があります

00:05:09.440 --> 00:05:13.300
ここをクリックし ズームすると
ここからは見づらいかもしれませんが

00:05:14.610 --> 00:05:15.750
はい そして―

00:05:15.750 --> 00:05:20.960
ここに <i>Team A</i> とあります
そして そのビューの境界周囲がわかります

00:05:20.960 --> 00:05:24.650
もし私があなたに
そのビュー内部の中央に―

00:05:24.650 --> 00:05:26.950
これがあったのだと言ったら あなたは
私と話し合えないかもしれません

00:05:26.950 --> 00:05:31.510
それはビュー内部の中心に思えます
そのビューは、ただとても小さい

00:05:31.510 --> 00:05:33.020
<i>Google Drawing</i> に戻りましょう

00:05:33.020 --> 00:05:38.940
もしサイズをちょうど
テキストと同サイズまで下げたら―

00:05:38.940 --> 00:05:40.450
それは中央になります
しかし―

00:05:40.450 --> 00:05:44.520
もしそれが左に押されたら
それは大きく違うようには見えません

00:05:44.520 --> 00:05:47.230
なので もしスマホの
中央にしたいなら―

00:05:47.230 --> 00:05:50.090
ビューをスマホの長さまで伸ばして
作成する必要があります

00:05:50.090 --> 00:05:52.170
それは幅を変えることを
必要とします

00:05:54.020 --> 00:05:55.970
はい ここで私は
プレビューを閉じていきます

00:05:57.200 --> 00:05:58.840
そして ここの <i>width</i> のところに
行きます

00:06:00.120 --> 00:06:04.850
<i>wrap_content</i> のかわりに
<i>match_parent</i> にします

00:06:04.850 --> 00:06:06.150
はい
プレビューをもう一度見ましょう

00:06:07.430 --> 00:06:07.930
ズームアウトします

00:06:09.120 --> 00:06:10.610
はい とても良い感じに
なりました

00:06:10.610 --> 00:06:12.200
中央になっているように見えます

00:06:12.200 --> 00:06:14.420
さあ、同じことを
ここの得点にしましょう

00:06:15.840 --> 00:06:18.910
はい これに
<i>gravity</i> を同様に
追加していきます

00:06:18.910 --> 00:06:20.425
全てのレイアウトの <i>gravity</i> です

00:06:20.425 --> 00:06:25.950
<i>center_horizontal</i> と
<i>width</i> を <i>match_parent</i> に変えていきます

00:06:27.260 --> 00:06:29.160
はい もう一度
チェックしてみましょう

00:06:29.160 --> 00:06:30.870
いい感じです
全てが中央にあります

00:06:30.870 --> 00:06:32.190
とてもいい感じに見えます

00:06:32.190 --> 00:06:34.400
全てが潰されていることを除いては

00:06:34.400 --> 00:06:37.330
これらの要素の間には
スペースの余裕がありません

00:06:37.330 --> 00:06:41.020
それぞれのテキストビューの <i>padding</i> に
4 を与えます

00:06:41.020 --> 00:06:45.875
<i>padding</i> を書いていきます
4dp にします

00:06:47.000 --> 00:06:48.360
dp を覚えていますか

00:06:48.360 --> 00:06:52.010
そして私はただの <i>padding</i> を使っています
<i>padding bottom</i> とかじゃありません

00:06:52.010 --> 00:06:54.260
テキストビュー全体の周囲に
4dp のスペースを供給します

00:06:54.260 --> 00:06:56.950
プレビューでとのように見えるか
見てみましょう

00:06:58.390 --> 00:07:00.850
はい それは少しだけ広い
スペースを与えました

00:07:00.850 --> 00:07:03.750
同じことを得点のテキストビューにも
していきます

00:07:07.830 --> 00:07:10.808
はい これから同じことを
ボタンにもしていきます

00:07:15.811 --> 00:07:18.610
うーん ちゃんと効いているようには
思えません

00:07:18.610 --> 00:07:23.693
もしもう少し大きく
8 くらいにしてみたらどうでしょう？

00:07:23.693 --> 00:07:25.528
20 ？

00:07:25.528 --> 00:07:29.820
うーん 興味深いですね ボタン自身が
大きくなっているように思えます

00:07:29.820 --> 00:07:31.740
私はボタンそれ自身を
大きくしたくはありません

00:07:31.740 --> 00:07:33.980
ボタンのスペース周辺を
大きくしたいです

00:07:33.980 --> 00:07:37.640
そして実は それは <i>layout_margin</i>
の方が良い仕事をしてくれます

00:07:37.640 --> 00:07:41.040
覚えておいてください <i>padding</i> は
ビュー内部の <i>padding</i> に追加し―

00:07:41.040 --> 00:07:42.930
<i>margin</i> はビュー周辺のスペースに
追加します

00:07:43.930 --> 00:07:45.310
なので私達はこれを <i>layout_margin</i>
に変えていきます

00:07:45.310 --> 00:07:46.890
8dp にします

00:07:46.890 --> 00:07:48.850
はい より良い感じです

00:07:48.850 --> 00:07:53.120
今 2 つのビューの間の周囲に
スペースがあります

00:07:53.120 --> 00:07:55.019
さあ 先に進み 他のボタンを
やっていきましょう

00:07:56.480 --> 00:07:59.710
マージン パディングではなく 
<i>layout_margin</i>

00:07:59.710 --> 00:08:01.440
はい とても良い感じに見えます

00:08:01.440 --> 00:08:04.100
もしあなたが私がやったのと
違う属性を選んだなら―

00:08:04.100 --> 00:08:08.320
おそらく <i>padding</i> を 5 の代わりに 4
それで大丈夫です

00:08:08.320 --> 00:08:11.710
覚えておいて下さい このポイントは
読みやすいように作成しているだけです

00:08:11.710 --> 00:08:15.409
私達は全てのフォントサイズと
色について 後の段階で心配しています

00:08:16.750 --> 00:08:17.920
はい

00:08:17.920 --> 00:08:18.670
素晴らしい働きです

00:08:18.670 --> 00:08:19.860
あなたはそのステップをやりました

