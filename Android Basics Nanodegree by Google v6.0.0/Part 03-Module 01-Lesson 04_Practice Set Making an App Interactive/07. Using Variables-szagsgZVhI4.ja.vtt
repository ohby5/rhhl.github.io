WEBVTT
Kind: captions
Language: ja

00:00:00.650 --> 00:00:01.569
これからの一連のクイズで

00:00:01.569 --> 00:00:04.390
変数の使い方をお見せします

00:00:04.390 --> 00:00:08.100
パート 2 で行うプログラムは
全てコンパイルになるでしょう

00:00:08.100 --> 00:00:10.820
つまり パソコンが書かれているコードを
理解することができ―

00:00:10.820 --> 00:00:13.164
アプリを作成できるということです

00:00:13.675 --> 00:00:16.065
プログラムがスマホで
実行出来ようになるまでの間は―

00:00:16.065 --> 00:00:19.605
予定された目標を
達成しない事があるかもしれません

00:00:19.605 --> 00:00:21.775
それはいわゆる「ロジカルエラー」です

00:00:21.775 --> 00:00:23.975
ロジカルエラーとは
コードを作るに使われたロジックに

00:00:23.975 --> 00:00:26.515
何か間違いがあることを意味します

00:00:26.895 --> 00:00:29.345
短いプログラムとシナリオの例を見て―

00:00:29.345 --> 00:00:32.415
そのうちの 1 つを
一緒に解決していきましょう

00:00:32.415 --> 00:00:34.380
ここに 1 つの例があります

00:00:34.380 --> 00:00:37.560
それぞれのプログラムに目標があり
ここに書きだされています

00:00:37.560 --> 00:00:40.450
そのプログラム自体は
この緑の枠内にあります

00:00:40.450 --> 00:00:44.590
このプログラムの目標は
「睡眠不足」というものを計算することです

00:00:44.590 --> 00:00:47.380
必要となる睡眠量は年齢によって
若干変わりますが

00:00:47.380 --> 00:00:50.730
平均では一晩に 8 時間の睡眠が必要です

00:00:50.730 --> 00:00:54.710
ですので このプログラムは 1 週間分の
睡眠不足を計算しようというものです

00:00:54.710 --> 00:00:59.930
プログラムのユーザーは
平日と週末の平均睡眠時間の―

00:00:59.930 --> 00:01:02.310
概算をすることになっています

00:01:02.310 --> 00:01:06.340
この場合 ユーザーの睡眠は
平日 5 時間で 週末 9 時間だと―

00:01:06.340 --> 00:01:08.190
仮定しています

00:01:08.190 --> 00:01:11.400
このタスクのコードは この緑枠の中です

00:01:11.400 --> 00:01:14.390
まず最初にすることは
このコードを解読して―

00:01:14.390 --> 00:01:17.130
目標が達成できたか否かを
見極めることです

00:01:17.130 --> 00:01:20.650
コード内のステートメントを
1 つずつやってみて―

00:01:20.650 --> 00:01:23.490
実際にスクリーン上に表示される
状態を見極めます

00:01:23.490 --> 00:01:28.120
ここで呼び出されるメソッドには

00:01:28.120 --> 00:01:30.500
displayと括弧内の要素があり

00:01:30.500 --> 00:01:32.960
スクリーン上にこれを表示すると
予想されます

00:01:32.960 --> 00:01:35.860
これらの問題では
複数の表示があり

00:01:35.860 --> 00:01:40.410
display1, display2, display3等が
見られるでしょう

00:01:40.410 --> 00:01:42.060
このビデオを見続けていると

00:01:42.060 --> 00:01:45.120
問題の 1 つくらい 解決方法を
知りたいと思うでしょう

00:01:45.120 --> 00:01:47.930
複数の変数の情報交換するのは
これが最初ではありません

00:01:47.930 --> 00:01:50.540
変数はこの問題に取り組んでいる間
何度か値が変わるかもしれません

00:01:51.800 --> 00:01:54.590
では 取り組んでもらう前に
最初の問題を一緒に解いてみましょう

00:01:54.590 --> 00:01:57.410
今回は「ハンドシミュレーション」
という技術を使っていきます

00:01:57.410 --> 00:02:00.590
この技術はパソコンからいったん離れて―

00:02:00.590 --> 00:02:03.090
パソコンが実行しているモノを
把握する試みです

00:02:03.090 --> 00:02:06.020
これは変数がどうなるかを追跡するのに―

00:02:06.020 --> 00:02:07.580
本当に効率的な方法なのです

00:02:07.580 --> 00:02:10.190
では 一行ずつ行きます
ここからいきますよ

00:02:10.190 --> 00:02:13.130
一行目は変数の宣言ですので

00:02:13.130 --> 00:02:15.560
変数の名前を書き入れます
「weekday （平日） 」ですね

00:02:17.030 --> 00:02:19.890
この初期の値は 5 ですので

00:02:19.890 --> 00:02:22.550
「 weekday 」の下に値の「 5 」を入れます

00:02:23.050 --> 00:02:26.354
これは「平日の値が現在 5 である」
と言うことを表しています

00:02:27.550 --> 00:02:29.760
一行目は終わりました
次の行へ移ります

00:02:29.760 --> 00:02:33.320
「weekend （週末） 」という変数が
ありますので 書きだします

00:02:34.920 --> 00:02:37.120
その変数の値は 9 です

00:02:37.770 --> 00:02:39.110
良さそうですね

00:02:39.110 --> 00:02:42.310
次の行に行きます　これは変数
「 optimalHours （理想的睡眠時間）」の―

00:02:42.310 --> 00:02:45.730
宣言と具現化ですので
同じことをやります

00:02:48.090 --> 00:02:49.690
よし
でも値を「 7*8 」とはしません

00:02:49.690 --> 00:02:52.730
実際に計算して値を出します

00:02:52.730 --> 00:02:55.180
なぜなら それがoptimalHours の中に
保存されるからです

00:02:55.180 --> 00:02:59.660
では 暗算で 7 × 8 ＝56

00:02:59.660 --> 00:03:02.170
いいですね
もう 1 つ ここに宣言があります

00:03:02.170 --> 00:03:06.030
「 actualHours （実際の睡眠時間）」
という変数を作りますので 書きだします

00:03:06.030 --> 00:03:08.260
これは weekday の値と同じです

00:03:08.260 --> 00:03:10.130
ちなみに 現在の weekday の値です

00:03:10.130 --> 00:03:13.170
過去や未来の weekday の値ではありません

00:03:13.170 --> 00:03:17.370
現在の weekday の値を追跡しているのは
こちらにありますね

00:03:17.370 --> 00:03:19.720
これを確認すると 5 です

00:03:19.720 --> 00:03:22.390
なので これは数字の 5 となるはずです

00:03:22.930 --> 00:03:26.040
「 int actualHours = 5 」となるので―

00:03:26.040 --> 00:03:28.230
こっちにそう書いていきます

00:03:29.230 --> 00:03:31.070
OK　次の行です

00:03:31.070 --> 00:03:33.510
再び actualHours を変更します

00:03:33.510 --> 00:03:39.630
現在の actualHours の値 +
weekend の値 × 2

00:03:40.020 --> 00:03:44.340
こちらを見ると
現在の actualHours の値は 5

00:03:45.720 --> 00:03:48.910
現在の weekend の値は
9 となっています

00:03:50.720 --> 00:03:53.330
そして ここに小さな方程式があります

00:03:53.330 --> 00:03:56.100
掛け算を足し算の前にするので

00:03:56.100 --> 00:04:00.300
9 × 2 = 18 
そこに 5 を足します

00:04:00.300 --> 00:04:04.520
暗算すると 18 + 5 = 23

00:04:04.520 --> 00:04:07.150
この答えは 23 ですね

00:04:07.150 --> 00:04:11.100
そうしたら actualHours の
古い値を消していく必要があります

00:04:11.100 --> 00:04:13.650
そして 新しい値を書きます

00:04:13.650 --> 00:04:14.810
よし 終わりました

00:04:14.810 --> 00:04:16.440
次の行へ行きます

00:04:16.440 --> 00:04:19.540
「 int solution （ 整数の解答）」とあるので
これは変数の宣言ですね

00:04:19.540 --> 00:04:21.000
そして これは何かと
等しくなっているのですが

00:04:21.000 --> 00:04:22.820
言葉の solution を先に書きます

00:04:22.820 --> 00:04:27.150
solution = optimalHours - actualHours
ですので

00:04:27.610 --> 00:04:33.060
optimalHours は 56 で
actualHours は 23 です

00:04:35.270 --> 00:04:37.300
さあ 電卓を使ってもいいです

00:04:37.300 --> 00:04:41.520
簡単ですね　56 - 23 = 33

00:04:42.960 --> 00:04:45.150
OK そして 次の行

00:04:45.150 --> 00:04:47.810
最後の行は「 display(solution)」
表示（解答）です

00:04:47.810 --> 00:04:52.550
solution は 33 ですね

00:04:52.550 --> 00:04:56.100
ですから「 33 」と表示されることになります

00:04:56.100 --> 00:04:58.220
さて これが

00:04:58.220 --> 00:05:02.560
プログラムの実行をすることを
見つける方法です

00:05:02.560 --> 00:05:05.590
しかし 正しいことをしたか？ 
という疑問が実際のところありますね

00:05:05.590 --> 00:05:08.170
ロジカルエラーが
このどこかにあるんじゃないか？

00:05:08.170 --> 00:05:11.730
「誰かが平日に 5 時間寝て
週末は9時間寝ると

00:05:11.730 --> 00:05:15.640
その週の終わりには 33 時間の
睡眠不足になる？」

00:05:15.640 --> 00:05:16.660
どう思いますか？　知りたいですね

00:05:16.660 --> 00:05:21.360
では やってみましょう
今 この実践セット2 のアプリを作りました

00:05:21.360 --> 00:05:24.440
これを試すために
このコードをこの実践セット 2 に

00:05:24.440 --> 00:05:26.870
入力する方法もお見せします

00:05:26.870 --> 00:05:28.590
まずは ハンドシミュレーションを
することをお勧めします

00:05:28.590 --> 00:05:32.530
なぜならどうなるかを
よりよく把握することができるからです

00:05:32.530 --> 00:05:35.690
でも このコードを
AndroidStudio に入れて―

00:05:35.690 --> 00:05:37.160
試してみることも有益です

00:05:37.160 --> 00:05:40.200
お勧めは インストラクターノートにある
問題のあるコードを―

00:05:40.200 --> 00:05:45.880
コピー &amp; ペーストして
onCreate メソッドに入れることです

00:05:45.880 --> 00:05:49.480
これが MainActivity クラスの
最初にあるメソッドです

00:05:49.480 --> 00:05:53.540
見ていてください
ここに変更前の onCreate があります

00:05:54.530 --> 00:05:57.300
そこへ この様に コードを貼り付けました

00:05:57.890 --> 00:06:01.000
次にコピー &amp; ペーストが必要なのは

00:06:01.000 --> 00:06:07.300
このコードが機能するに必要な物で
下の方に行って このコードです

00:06:07.300 --> 00:06:10.840
この部分を入れてコピーします

00:06:11.650 --> 00:06:15.840
最後に必要なのは XMLに行って―

00:06:15.840 --> 00:06:21.272
TextView に「 id/display_text_view 」
があるかを確認します

00:06:21.272 --> 00:06:26.370
これが完全にこの部分に
一致しているかを確認してください

00:06:28.005 --> 00:06:31.855
この 2 つが一致している限り
このコードを実行すれば―

00:06:33.085 --> 00:06:35.155
スクリーン上に値が表示されます

00:06:35.155 --> 00:06:38.500
見えにくいですが
こちらに「 33 」とあります

00:06:38.500 --> 00:06:40.675
いいですね　これで終わりです

00:06:40.675 --> 00:06:43.805
ハンドシミュレーションを行い
作り方と実行の仕方も一緒にやりました

00:06:43.805 --> 00:06:47.165
では引き続きプログラムの実行事項を
理解していきましょう

