WEBVTT
Kind: captions
Language: ru

00:00:00.650 --> 00:00:01.569
В следующем наборе тестов, —

00:00:01.569 --> 00:00:04.390
Я покажу тебе, как в действительности
используются переменные.

00:00:04.390 --> 00:00:08.100
Все программы, которые ты будешь писать
в части 2, будут компилироваться.

00:00:08.100 --> 00:00:10.820
Это означает, что компьютер может
понять написанный для него код, —

00:00:10.820 --> 00:00:12.614
а мы можем создать приложение.

00:00:13.675 --> 00:00:16.065
Ок, хотя программы и могут
запускаться на телефоне, —

00:00:16.065 --> 00:00:19.605
есть риск, что они, возможно, делают не
то, что требуется по условию задачи.

00:00:19.605 --> 00:00:21.775
В таком случае говорят, что
в программе есть логическая ошибка.

00:00:21.775 --> 00:00:24.535
Логическая ошибка означает, что в логике,
в соответствии с которой ты писал код, —

00:00:24.535 --> 00:00:25.245
есть ошибка.

00:00:26.895 --> 00:00:28.445
Давай посмотрим на небольшую программу —

00:00:28.445 --> 00:00:32.415
и на пример сценария и я покажу тебе,
как нужно решить одну из таких проблем.

00:00:32.415 --> 00:00:34.380
Вот этот пример.

00:00:34.380 --> 00:00:37.560
У каждой программы будет своя цель,
которая записывается здесь.

00:00:37.560 --> 00:00:40.450
Сама программа находится
в зеленом блоке.

00:00:40.450 --> 00:00:44.590
Итак, цель этой программы – посчитать
что-то, что называется «дефицит сна».

00:00:44.590 --> 00:00:48.080
Сколько нужно времени для сна, немного
зависит от возраста, но в среднем, —

00:00:48.080 --> 00:00:50.730
людям надо около восьми
часов ночного сна.

00:00:50.730 --> 00:00:54.710
Что эта программа пытается сделать –
это посчитать дефицит сна за одну неделю.

00:00:54.710 --> 00:00:57.850
Пользователи программы могут указать,
сколько они спят в среднем —

00:00:57.850 --> 00:01:02.310
в будние дни и сколько – на выходных.

00:01:02.310 --> 00:01:06.340
Для примера, мы предположим, что пользо-
ватель спит по пять часов в будний день —

00:01:06.340 --> 00:01:08.190
и по девять часов - на выходных.

00:01:08.190 --> 00:01:11.400
Код для этого задания
находится здесь, в зеленом блоке.

00:01:11.400 --> 00:01:14.390
Первое, что тебе надо сделать –
прочитать код и —

00:01:14.390 --> 00:01:17.130
понять, достигает ли он цели.

00:01:17.130 --> 00:01:19.620
Затем надо проанализировать
каждое выражение, —

00:01:19.620 --> 00:01:23.490
которое есть в коде, и понять, что на
самом деле будет выведено на экран.

00:01:23.490 --> 00:01:28.920
Допустим, этот метод вызывается здесь,
такие выражения со словом display, с —

00:01:28.920 --> 00:01:29.860
круглыми скобками и —

00:01:29.860 --> 00:01:32.960
чем-либо в скобках,
выводят содержимое скобок на экран.

00:01:32.960 --> 00:01:35.860
В некоторых задачах будет по
нескольку кусочков контента для —

00:01:35.860 --> 00:01:40.410
вывода на экран, тогда ты, возможно,
увидишь display1, display2, display3.

00:01:40.410 --> 00:01:42.060
Ок, если ты ещё смотришь это видео, —

00:01:42.060 --> 00:01:45.120
ты, наверное, думаешь, как же
решить одну из этих задач.

00:01:45.120 --> 00:01:47.930
Ты уже не первый раз имеешь
дело с несколькими переменными, —

00:01:47.930 --> 00:01:50.540
значения которых могут меняться
по несколько раз в тексте программы.

00:01:51.800 --> 00:01:54.590
Давай я сделаю первую задачу с тобой,
а уже потом ты будешь делать их сам.

00:01:54.590 --> 00:01:57.990
Я буду использовать прием, называемый
ручным моделированием, и суть его —

00:01:57.990 --> 00:02:01.050
состоит в том, чтобы попытаться понять,
что делает компьютер, но —

00:02:01.050 --> 00:02:03.090
не в том смысле, чтобы неотрывно
следить за компьютером.
42

00:02:06.230 --> 00:02:07.580
переменными.

00:02:07.580 --> 00:02:10.190
Ок, теперь надо пройти строку за строкой,
давай я начну вместе с тобой.

00:02:10.190 --> 00:02:13.130
В первой строке здесь, я вижу,
объявляется переменная, поэтому —

00:02:13.130 --> 00:02:15.560
я запишу имя переменной, weekday.

00:02:17.030 --> 00:02:19.890
Она также инициализируется
значением 5, —

00:02:19.890 --> 00:02:22.280
поэтому под weekday я записываю 5.

00:02:22.280 --> 00:02:25.794
Это показывает, что сейчас в переменной
weekday лежит 5.

00:02:27.550 --> 00:02:29.760
Ок, это была первая строка,
переходим к следующей.

00:02:29.760 --> 00:02:32.620
Тут у нас переменная weekend,
я записываю её, —

00:02:32.620 --> 00:02:37.770
и значение этой переменной – 9.

00:02:37.770 --> 00:02:39.110
Выглядит неплохо, —

00:02:39.110 --> 00:02:42.310
я перехожу к следующей строке,
которая является объявлением и —

00:02:42.310 --> 00:02:45.410
инстанциированием переменной
optimalHours, здесь я сделаю то же самое.

00:02:48.090 --> 00:02:49.690
Но я не буду записывать значение 7*8.

00:02:49.690 --> 00:02:52.730
Я вычислю результат этого выражения,
потому что именно результат —

00:02:52.730 --> 00:02:55.180
записывается в переменную optimalHours.

00:02:55.180 --> 00:02:59.660
Вычислим немного в уме,
7 умножить на 8 – будет 56.

00:02:59.660 --> 00:03:02.170
Здесь у нас ещё одно объявление.

00:03:02.170 --> 00:03:06.030
Мы создаем переменную actualHours,
записываю её тоже.

00:03:06.030 --> 00:03:08.260
Так, она равна
значению weekday, —

00:03:08.260 --> 00:03:10.130
текущему значению переменной weekday.

00:03:10.130 --> 00:03:13.170
Это не какое-то прошлое значение weekday
или будущее.

00:03:13.170 --> 00:03:17.370
А следим мы за текущим значением
weekday здесь.

00:03:17.370 --> 00:03:19.720
И я могу просто посмотреть и
увидеть, что это - 5.

00:03:19.720 --> 00:03:21.920
Поэтому я могу просто считать,
что это число 5.

00:03:21.920 --> 00:03:25.570
И, фактически, тут сказано int
actualHours равно 5, поэтому —

00:03:25.570 --> 00:03:28.230
я записываю это значение здесь.

00:03:29.230 --> 00:03:31.070
Переходим к следующей строке.

00:03:31.070 --> 00:03:35.800
Мы присваиваем actualHours новое
значение, равное текущему значению —

00:03:35.800 --> 00:03:40.020
actualHours плюс weekend умноженное на 2.

00:03:40.020 --> 00:03:45.720
Текущее значение actualHours я могу
посмотреть здесь – это 5, а —

00:03:45.720 --> 00:03:50.720
текущее значение weekend – 9.

00:03:50.720 --> 00:03:53.330
Получаем небольшое выражение.

00:03:53.330 --> 00:03:56.100
Умножение я делаю перед сложением, —

00:03:56.100 --> 00:03:59.240
9 умножить на 2 – это 18, и плюс 5.

00:03:59.240 --> 00:04:03.670
И ещё немного расчетов в уме,
18 плюс 5 – это 23.

00:04:03.670 --> 00:04:06.350
В итоге получаем 23.

00:04:06.350 --> 00:04:11.100
Что мне сейчас нужно сделать – это
зачеркнуть старое значение actualHours и

00:04:11.100 --> 00:04:13.650
записать её новое значение.

00:04:13.650 --> 00:04:14.810
Ок, сделано.

00:04:14.810 --> 00:04:16.440
Переходим к следующей строке.

00:04:16.440 --> 00:04:19.540
Мы видим int solution, это
объявление переменной.

00:04:19.540 --> 00:04:21.000
И ей присваивается какое-то значение,
но —

00:04:21.000 --> 00:04:22.820
сначала я записываю слово solution.

00:04:22.820 --> 00:04:26.860
А равно оно разнице optimalHours
и actualHours.

00:04:26.860 --> 00:04:32.700
Идем сюда, optimalHours равно 56,
а actualHours – 23, —

00:04:32.700 --> 00:04:35.860
Можешь воспользоваться калькулятором, —

00:04:35.860 --> 00:04:41.140
А я посчитаю быстрее тебя,
я знаю, что 56 минус 23 – это 33.

00:04:41.140 --> 00:04:45.050
Ок, идем дальше и —

00:04:45.050 --> 00:04:47.810
в последней строке видим
display(solution).

00:04:47.810 --> 00:04:51.810
Смотрим сюда и видим, что
значение solution – 33.

00:04:51.810 --> 00:04:56.100
Значит, на экран будет выведено число 33.

00:04:56.100 --> 00:04:59.110
Значит, вот так я, или ты, или —

00:04:59.110 --> 00:05:02.560
кто угодно может понять,
что эта программа только что сделала.

00:05:02.560 --> 00:05:05.590
Но вопрос в другом, сделала
ли она все так, как надо?

00:05:05.590 --> 00:05:08.170
Нет ли логической ошибки
где-нибудь здесь или —

00:05:08.170 --> 00:05:11.730
может ли быть такое, что если человек спит
по пять часов в будние дни и по девять —

00:05:11.730 --> 00:05:15.640
часов по выходным, то он получит тридцать
три часа дефицита сна к концу недели.

00:05:15.640 --> 00:05:16.660
И я хочу знать, что ты думаешь об этом.

00:05:16.660 --> 00:05:21.360
Ок, небольшое отступление, сейчас ты
добавил это упражнение в приложение и —

00:05:21.360 --> 00:05:24.440
я хочу показать тебе, как ещё ты мог бы
добавить код из упражнения —

00:05:24.440 --> 00:05:26.870
в приложение, если бы захотел
протестировать его.

00:05:26.870 --> 00:05:28.590
Я настоятельно рекомендую сначала
выполнять ручное моделирование, —

00:05:28.590 --> 00:05:32.530
потому что оно дает тебе лучшее
понимание того, что происходит.

00:05:32.530 --> 00:05:35.690
Хорошо также уметь открыть
код в Андроид Студия и —

00:05:35.690 --> 00:05:37.160
позапускать его немного.

00:05:37.160 --> 00:05:41.510
Поэтому я предлагаю копировать
код из задания, —

00:05:41.510 --> 00:05:45.880
который дается в заметках инструктора,
и вставлять в метод onCreate.

00:05:45.880 --> 00:05:49.480
Это первый метод, который ты будешь
видеть в классе MainActivity здесь.

00:05:49.480 --> 00:05:52.240
Давай ещё раз для ясности,
вот так твой метод onCreate выглядит —

00:05:52.240 --> 00:05:56.650
до изменений, и в него ты можешь вставить
код, как это сделала я.

00:05:57.890 --> 00:06:00.920
Ок, что ещё тебе надо будет
скопировать и вставить,

00:06:00.920 --> 00:06:06.480
без чего эта строка кода не будет
работать – находится здесь.

00:06:06.480 --> 00:06:10.460
Вот этот код, и я также добавила
его в заметки инструктора.

00:06:11.650 --> 00:06:15.840
И последнее, что тебе нужно будет
сделать – это перейти в файл XML и —

00:06:15.840 --> 00:06:21.632
убедиться, что в твоей текстовой
вьюшке есть Id/display_text_view, —

00:06:21.632 --> 00:06:25.990
и это должно в точности совпадать
с тем, что показано здесь.

00:06:27.255 --> 00:06:30.425
Ок, если эти два места совпадают,
когда ты запускаешь этот —

00:06:30.425 --> 00:06:35.155
код, ты получишь значение,
напечатанное на экране.

00:06:35.155 --> 00:06:38.500
Немного трудно увидеть, но
сейчас это 33.

00:06:38.500 --> 00:06:41.325
Ок, прослушав материал этого урока: о
том,
как делать ручное моделирование и —

00:06:41.325 --> 00:06:43.805
как доводить программу до
рабочего состояния на телефоне.

00:06:43.805 --> 00:06:47.165
Можешь теперь выяснить, делает
ли
эта программа то, что требуется.

