WEBVTT
Kind: captions
Language: zh-CN

00:00:00.650 --> 00:00:01.569
在接下来的一组测验中

00:00:01.569 --> 00:00:04.390
我要给你展示变量是如何使用的

00:00:04.390 --> 00:00:08.100
你在第二部分做的所有程序都将会编译

00:00:08.100 --> 00:00:10.820
这意味着计算机能够理解写下的代码

00:00:10.820 --> 00:00:12.614
我们能够创建一个应用

00:00:13.675 --> 00:00:16.065
当程序能在手机上运行时

00:00:16.065 --> 00:00:19.605
它可能不会按照预期目标运行

00:00:19.605 --> 00:00:21.775
这是一个逻辑错误

00:00:21.775 --> 00:00:24.535
逻辑错误意味着有你编写代码时的

00:00:24.535 --> 00:00:25.245
的逻辑有一些错误

00:00:26.895 --> 00:00:28.445
我们来看这个小程序

00:00:28.445 --> 00:00:32.415
和一个示例场景 我将引导你如何去解决它们

00:00:32.415 --> 00:00:34.380
好 这里是一个例子

00:00:34.380 --> 00:00:37.560
每个程序都有一个目标 将它们写在这

00:00:37.560 --> 00:00:40.450
程序本身在这个绿色的框里

00:00:40.450 --> 00:00:44.590
所以 这个程序的目标是计算所谓的睡眠欠债

00:00:44.590 --> 00:00:48.080
你需要的睡眠时间在不同的年龄会不同 但是一般情况下

00:00:48.080 --> 00:00:50.730
人们每晚大约需要8小时的睡眠

00:00:50.730 --> 00:00:54.710
这个程序试图计算一周的睡眠欠债

00:00:54.710 --> 00:00:57.850
程序用户将继续估计他们平均一周睡多长时间

00:00:57.850 --> 00:01:02.310
以及平均每天睡多长时间

00:01:02.310 --> 00:01:06.340
对于这个例子 我们假设用户平日里睡5个小时

00:01:06.340 --> 00:01:08.190
在周末睡9个小时

00:01:08.190 --> 00:01:11.400
在这个绿色的框里是这个任务的代码

00:01:11.400 --> 00:01:14.390
你要做的第一件事是阅读这个代码

00:01:14.390 --> 00:01:17.130
并决定目标是否已经实现

00:01:17.130 --> 00:01:19.620
然后 你要做的是浏览代码里的每个语句

00:01:19.620 --> 00:01:23.490
决定在屏幕上显示什么

00:01:23.490 --> 00:01:28.920
假设这些方法在这里调用 看起来像 display

00:01:28.920 --> 00:01:29.860
括号

00:01:29.860 --> 00:01:32.960
和它们之间的代码 将显示在屏幕上

00:01:32.960 --> 00:01:35.860
现在 其中的一些问题将会有他们想要展示的多个内容块

00:01:35.860 --> 00:01:40.410
所以你可能看到 display1 display2 display3

00:01:40.410 --> 00:01:42.060
如果你仍然在看这个视频

00:01:42.060 --> 00:01:45.120
你可能想知道如何解决这些问题

00:01:45.120 --> 00:01:47.930
这不是第一次处理多个变量

00:01:47.930 --> 00:01:50.540
它的值可能在问题里多次改变

00:01:51.800 --> 00:01:54.590
所以在你毫无头绪之前 我来展示第一个

00:01:54.590 --> 00:01:57.990
现在我要使用一个叫做手工模拟的技术 

00:01:57.990 --> 00:02:01.050
这种技术涉及的是试图理清计算机正在做的

00:02:01.050 --> 00:02:03.090
不需要非在计算机上运行

00:02:03.090 --> 00:02:06.230
对于我们来说 它只是一个组织方式来用一个变量

00:02:06.230 --> 00:02:07.580
跟踪我们正在做的事

00:02:07.580 --> 00:02:10.190
现在 逐行阅读代码 我们一起开始

00:02:10.190 --> 00:02:13.130
第一行 我看到了一个变量的声明

00:02:13.130 --> 00:02:15.560
所以 继续并写下变量名 weekday

00:02:17.030 --> 00:02:19.890
初始化为5

00:02:19.890 --> 00:02:22.280
所以在 weekday 下边写下值5

00:02:22.280 --> 00:02:25.794
这代表着变量 weekday 当前储存为5

00:02:27.550 --> 00:02:29.760
好了 这是第一行 我移动到下一行

00:02:29.760 --> 00:02:32.620
有一个名为 weekend 的变量写下它

00:02:32.620 --> 00:02:37.770
变量值为9

00:02:37.770 --> 00:02:39.110
好了 看起来很好

00:02:39.110 --> 00:02:42.310
移动到下一行变量 optimalHours 的声明和初始化

00:02:42.310 --> 00:02:45.410
所以我会做同样的事情

00:02:48.090 --> 00:02:49.690
我不打算写下值7*8

00:02:49.690 --> 00:02:52.730
实际上 我会计算出来

00:02:52.730 --> 00:02:55.180
因为那是储存在 optimalHours 里的

00:02:55.180 --> 00:02:59.660
用心算 为56

00:02:59.660 --> 00:03:02.170
这里 我们有了另一个声明

00:03:02.170 --> 00:03:06.030
我们有了一个叫 actualHours 的变量 所以写出来

00:03:06.030 --> 00:03:08.260
它等于 weekday 的值

00:03:08.260 --> 00:03:10.130
这是 weekday 的当前值

00:03:10.130 --> 00:03:13.170
它不是 weekday 的过去值或将来值

00:03:13.170 --> 00:03:17.370
现在 我们跟踪 weekday 的当前值到这里

00:03:17.370 --> 00:03:19.720
我只能看这里 它的值为5

00:03:19.720 --> 00:03:21.920
我真的应该想想这个 5

00:03:25.570 --> 00:03:28.230
继续 在这里写下5

00:03:29.230 --> 00:03:31.070
移动到下一行

00:03:31.070 --> 00:03:35.800
所以现在再次改变 actualHours 的值 让它等于

00:03:35.800 --> 00:03:40.020
当前的 actualHours 的值加 2倍的 weekend 的值

00:03:40.020 --> 00:03:45.720
看这里 当前的 actualHours 的值为5

00:03:45.720 --> 00:03:50.720
当前的 weekend 的值为9

00:03:50.720 --> 00:03:53.330
现在这有一个等式

00:03:53.330 --> 00:03:56.100
做加法之前先做乘法

00:03:56.100 --> 00:03:59.240
9*2=18 然后再加5

00:03:59.240 --> 00:04:03.670
18加5是23

00:04:03.670 --> 00:04:06.350
所以 现在 actualHours 的值为23

00:04:06.350 --> 00:04:11.100
我必须要做的是划掉 actualHours 之前的值

00:04:11.100 --> 00:04:13.650
写下 actualHours 的新值

00:04:13.650 --> 00:04:14.810
所以就这样做了

00:04:14.810 --> 00:04:16.440
移动到下一行

00:04:16.440 --> 00:04:19.540
有一个 solution 那是一个变量声明

00:04:19.540 --> 00:04:21.000
它被设置等于一些东西 但是

00:04:21.000 --> 00:04:22.820
首先我先写下这个单词 solution

00:04:22.820 --> 00:04:26.860
solution 等于 optimalHours 减 actualHours

00:04:26.860 --> 00:04:32.700
我们看这边 optimalHours 的值为56 actualHours 的值为23

00:04:32.700 --> 00:04:35.860
现在使用计算器是没有关系的

00:04:35.860 --> 00:04:41.140
我之前正好这样做了  我知道56减去23是33

00:04:41.140 --> 00:04:45.050
移动到下一行

00:04:45.050 --> 00:04:47.810
最后一行是 display(solution)

00:04:47.810 --> 00:04:51.810
所以看这边可以知道 solution 的值为33

00:04:51.810 --> 00:04:56.100
它将显示数字33 

00:04:56.100 --> 00:04:59.110
所以 那是我或你或任何人

00:04:59.110 --> 00:05:02.560
都可以计算出这个程序的结果

00:05:02.560 --> 00:05:05.590
但是真正的问题是 它是否做了对的事

00:05:05.590 --> 00:05:08.170
在这里会不会有逻辑错误

00:05:08.170 --> 00:05:11.730
或是否有平日睡5个小时和周末睡9个小时的人

00:05:11.730 --> 00:05:15.640
在一周的最后可能有33个小时的睡眠时间差

00:05:15.640 --> 00:05:16.660
我想要知道你的想法

00:05:16.660 --> 00:05:21.360
好吧 快速滑动笔记 现在你已经创建这个 Practice Set 2 应用

00:05:21.360 --> 00:05:24.440
所以我只是要告诉你怎样把代码放到 Practice Set 2 应用里

00:05:24.440 --> 00:05:26.870
如果你想要测试一下这段代码

00:05:26.870 --> 00:05:28.590
我建议首先是手动模拟

00:05:28.590 --> 00:05:32.530
它将给你正在做的事的一个更好的理解

00:05:32.530 --> 00:05:35.690
但是它也可以把代码加入到 Android Studio 里

00:05:35.690 --> 00:05:37.160
测试一下它

00:05:37.160 --> 00:05:41.510
所以我的建议是你复制粘贴问题的代码到 onCreate 方法里

00:05:41.510 --> 00:05:45.880
代码将在讲师注释里提供

00:05:45.880 --> 00:05:49.480
那是你在这里 MainActivity 里看到的第一个方法

00:05:49.480 --> 00:05:52.240
好了 只是要很清楚 这里是你 onCreate 方法修改之前的样子

00:05:52.240 --> 00:05:56.650
然后你可以粘贴代码 就像我所做的一样

00:05:57.890 --> 00:06:00.920
好了 你需要做的另一件事是复制粘贴代码

00:06:00.920 --> 00:06:06.480
它将使下面的这一行代码有效

00:06:06.480 --> 00:06:10.460
这段代码 我也会把它加入到讲师注释里

00:06:11.650 --> 00:06:15.840
你要做的最后一件事是到你的 XML 文件

00:06:15.840 --> 00:06:21.632
确保你的文本视图的 ID 为 Id/display_text_view

00:06:21.632 --> 00:06:25.990
这应该完全匹配在这里所显示的

00:06:27.255 --> 00:06:30.425
只要这两点匹配了 当你运行这段代码时

00:06:30.425 --> 00:06:35.155
你会得到屏幕上的输出结果

00:06:35.155 --> 00:06:38.500
这可能有一点不清楚 但是它显示的是33

00:06:38.500 --> 00:06:41.325
所有的这一切 然后我会试着去手动模拟

00:06:41.325 --> 00:06:43.805
并未获得一些帮助让它能在手机上运行

00:06:43.805 --> 00:06:47.165
继续 试着确认这个程序是否和预期一样

