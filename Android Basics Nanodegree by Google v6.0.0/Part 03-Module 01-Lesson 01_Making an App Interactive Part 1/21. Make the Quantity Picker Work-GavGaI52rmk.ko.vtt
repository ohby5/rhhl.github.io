WEBVTT
Kind: captions
Language: ko

00:00:00.270 --> 00:00:03.630
지난 영상에서
처음 두 단계를 거쳤습니다.

00:00:03.630 --> 00:00:06.670
이제 여러분이 실험할 수 있는
몇 가지를 보여드릴게요.

00:00:06.670 --> 00:00:10.040
초기 수량 값을 바꿔서

00:00:10.040 --> 00:00:13.690
앱이 실행될 때, 2 대신
0으로 나타나게 할 겁니다.

00:00:13.690 --> 00:00:17.030
이렇게 하는 방법은
광역 수량 변수를 변경해

00:00:17.030 --> 00:00:19.400
초기값이 0이 되게 하는 겁니다.

00:00:19.400 --> 00:00:22.930
increment와 decrement 
메소드가 제대로 작동해야겠죠.

00:00:22.930 --> 00:00:24.390
increment 메소드가 호출되었을 때

00:00:24.390 --> 00:00:26.570
이것은 최근의 수량 값을
사용해 1을 더합니다.

00:00:26.570 --> 00:00:31.140
decrement 메소드가 호출되면
수량을 1 감소시킵니다.

00:00:31.140 --> 00:00:33.250
계속해 지금 시도해봅시다.

00:00:33.250 --> 00:00:34.040
이상하게 보이네요.

00:00:34.040 --> 00:00:35.490
전 0으로 보이게 하고 싶어요.

00:00:35.490 --> 00:00:39.700
더하기 버튼을 누르니
이상하게도 1로 가네요.

00:00:39.700 --> 00:00:43.850
이건 감소되는 것 같지만
이제 증가되네요.

00:00:43.850 --> 00:00:46.110
버튼이 작동하는 것 같지만

00:00:46.110 --> 00:00:49.120
어떤 이유로 초기 값이 잘못되었어요.

00:00:49.120 --> 00:00:52.350
Activity main 레이아웃 파일을
바꾸는 걸 잊었네요.

00:00:52.350 --> 00:00:55.050
이 레이아웃에
초기 수량 값이 2라고 하는

00:00:55.050 --> 00:00:56.860
텍스트 뷰가 하나 있어요.

00:00:56.860 --> 00:01:01.290
그것은 앱을 실행했을 때
2를 표현하는 분제를 고쳐줄 거예요.

00:01:01.290 --> 00:01:04.680
좋아요, 이제 이건
0의 초기 수량을 보여주네요.

00:01:04.680 --> 00:01:07.310
증가를 누르면 적절하게 업데이트되네요.

00:01:07.310 --> 00:01:09.340
감소를 눌러도 적절하게 업데이트됩니다.

00:01:10.500 --> 00:01:13.630
초기 수량 값을 
두 군데에 가지고 있는 게

00:01:13.630 --> 00:01:15.900
조금 까다롭게 보이죠.

00:01:15.900 --> 00:01:19.660
같은 것을 대표하는 코드의
두 장소를 갖는 것은

00:01:19.660 --> 00:01:24.080
우리가 방금 본 것처럼 미래의 
버그의 근원이 될 수도 있어요.

00:01:24.080 --> 00:01:28.150
이 문제를 해결하는 강화된 방법은
앱이 실행되었을 때 즉시

00:01:28.150 --> 00:01:31.990
메인 액티비티가 실제로
수량 0을 표시하게 하는 겁니다.

00:01:31.990 --> 00:01:35.040
초기 값을 갖기 위해
레이아웃에 의존하지 않게요.

00:01:35.040 --> 00:01:37.890
진실의 단 하나의 근원은
이 광역 변수입니다.

00:01:37.890 --> 00:01:39.260
지금은 걱정하지 마세요.

00:01:39.260 --> 00:01:43.280
강의 3 이후에 할 심화단계입니다.

00:01:43.280 --> 00:01:46.030
우리가 코드로 실험할 다른 방법은

00:01:46.030 --> 00:01:49.510
더하기 버튼이 주문된 커피 수를 
한 번에 두 배가 되게 하고

00:01:49.510 --> 00:01:53.450
빼기 버튼이 한 번에
절반이 되게 하는 겁니다.

00:01:53.450 --> 00:01:55.360
초기 수량 2로 시작하죠.

00:01:55.360 --> 00:01:59.110
빼기 버튼을 먼저 누르면
우리는 이것을 절반으로 만들어요.

00:02:00.140 --> 00:02:04.100
increment 메소드를 호출하면
주문된 커피 수를 두 배로 하죠.

00:02:04.110 --> 00:02:07.900
현재 수량을 가져와서 2를 곱해줍니다.

00:02:07.900 --> 00:02:12.558
그것은 새 수량 값으로 업데이트 되고 
화면에 그것을 보여줍니다.

00:02:12.558 --> 00:02:14.900
한편, decrement 메소드도 있어요.

00:02:14.900 --> 00:02:19.090
decrement 메소드에서 주문된
커피 수를 절반으로 만들고 싶어요.

00:02:19.090 --> 00:02:21.720
현재 수량을 가져와 2로 나눕니다.

00:02:22.960 --> 00:02:24.470
이것은 새로운 수량 값이 되죠.

00:02:24.470 --> 00:02:26.360
이것을 화면에 띄워줍니다.

00:02:26.360 --> 00:02:27.540
시도해 봅시다.

00:02:28.060 --> 00:02:30.660
여러분이 초기 수량 값을
바꾸려 할 때마다

00:02:30.660 --> 00:02:32.000
이것이 에러의 근원이 되는 걸 봅니다.

00:02:32.000 --> 00:02:34.250
두 곳에서 다 바꿔야 하죠.

00:02:34.250 --> 00:02:35.105
이제 앱을 실행해봅시다.

00:02:35.105 --> 00:02:36.460
좋아요.

00:02:36.460 --> 00:02:38.650
초기 수량 2로 시작되네요.

00:02:38.650 --> 00:02:41.660
더하기를 누르면, 한 번에
수량을 두 배로 만들어야 해요.

00:02:41.660 --> 00:02:43.070
멋저요, 그렇게 하네요.

00:02:43.070 --> 00:02:44.350
빼기 버튼을 누르면

00:02:44.350 --> 00:02:46.820
주문된 커피 수를 한 번에
반으로 줄여야 하죠.

00:02:46.820 --> 00:02:49.530
작동하네요.

00:02:49.530 --> 00:02:54.260
디버거에서 실행하면 각각 어떻게
변수를 업데이트하는지 볼 수 있어요.

00:02:54.260 --> 00:02:57.358
수량 값은 2에서 시작하고
4로 업데이트돼요.

00:02:57.358 --> 00:03:01.830
그리고 수량이 4에서 시작하고

00:03:01.830 --> 00:03:05.050
8로 업데이트되고, 그런 식이죠.

00:03:06.870 --> 00:03:09.960
여러분이 이 수량 picker를 가지고 
창의적인 방법을 더 많이

00:03:09.960 --> 00:03:11.300
생각하셨을 것 같네요.

00:03:11.300 --> 00:03:15.420
바라건대, 여러분이 광역 변수
사용을 이해하는 데 도움을 줄 거예요.

00:03:15.420 --> 00:03:19.020
하지만 이 주문 버튼을 누르면
주문한 커피 수에 따른

00:03:19.020 --> 00:03:21.200
가격을 보여주지 않네요.

00:03:21.200 --> 00:03:22.430
다음 영상에서 고쳐봅시다.

