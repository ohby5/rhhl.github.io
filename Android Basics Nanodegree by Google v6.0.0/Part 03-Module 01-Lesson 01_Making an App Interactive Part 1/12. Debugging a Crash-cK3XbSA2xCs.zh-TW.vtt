WEBVTT
Kind: captions
Language: zh-TW

00:00:00.430 --> 00:00:03.250
一个应用程序崩溃指的是程序意外终止，并且

00:00:03.250 --> 00:00:05.880
弹出一条信息说程序停止运行的情况。

00:00:07.160 --> 00:00:10.320
对于Android开发者来说，一天之中要遇到许多许多次。

00:00:10.320 --> 00:00:11.990
即使是经验最丰富的也不例外。

00:00:11.990 --> 00:00:16.400
有时是因为代码排印错误，有时是非常低级的错误。

00:00:16.400 --> 00:00:20.250
而有的时候也会是因为

00:00:20.250 --> 00:00:23.010
对怎样给某个功能写代码存在根本性的误解。

00:00:23.010 --> 00:00:26.910
虽然你可能会抓狂，但是你心中的理智的声音会

00:00:26.910 --> 00:00:30.200
对你说你应该向前去尝试继续调试程序。

00:00:30.200 --> 00:00:33.900
在这个视频中，我们将要学习的就是怎样对Android程序崩溃问题进行调试。

00:00:33.900 --> 00:00:38.910
调试的意思就是确定并修复程序中的bug和错误。

00:00:38.910 --> 00:00:42.050
如果是非常明显的错误，比如java语法错误，

00:00:42.050 --> 00:00:44.660
那么Android的DU（磁盘使用情况）会帮你捕捉到这个错误

00:00:44.660 --> 00:00:48.870
并且在程序被安装到你手机上之前会显示一个红色的错误提示。

00:00:48.870 --> 00:00:52.480
这叫编译期错误，因为这样连安装程序

00:00:52.480 --> 00:00:53.860
到你的设备上都不行。

00:00:55.170 --> 00:00:58.690
如果你想要试着生成一个编译期错误，只需要

00:00:58.690 --> 00:01:02.140
删除这个括号或者这个分好，然后你就会看到错误出现了。

00:01:03.370 --> 00:01:07.710
这与在第一课的时候我们故意生成一个XML错误一样。

00:01:07.710 --> 00:01:10.760
我们看过错误信息后就可以取消这次改变。

00:01:11.810 --> 00:01:15.700
其他可能出现的错误是，如果我删除左边的大括号，那么我就

00:01:15.700 --> 00:01:20.220
会得到一个错误，或者如果我忘记加右括号，也会出现一个错误。

00:01:21.390 --> 00:01:25.140
但是有时只有在你开始运行这个程序的时候才会有错误产生。

00:01:25.140 --> 00:01:28.270
这叫做运行时错误，因为它是程序运行过程中出现的。

00:01:29.370 --> 00:01:31.940
我们来故意制造一个程序崩溃，然后

00:01:31.940 --> 00:01:35.390
找出解决的步骤，那么当你遇到真正的程序崩溃时，

00:01:35.390 --> 00:01:37.510
你就知道怎么处理了。

00:01:37.510 --> 00:01:41.330
这个例子基于我之前看到过的一个学生他遇到的情况。

00:01:41.330 --> 00:01:43.520
所以，对于初学者来说是很可能会碰到的。

00:01:43.520 --> 00:01:45.410
我会先带着你们把所有的步骤都过一遍，

00:01:45.410 --> 00:01:46.849
之后你们会有一个亲自完成的机会。

00:01:47.990 --> 00:01:50.450
要故意制造一个程序崩溃，

00:01:50.450 --> 00:01:52.500
我要修改一下MainActivity的Java文件。

00:01:52.500 --> 00:01:58.090
我将这个方法改成名字为“s”的submitOrders。

00:01:58.090 --> 00:02:00.070
然后在设备上运行。

00:02:00.070 --> 00:02:02.130
一开始一切卡起来都很好，但是

00:02:02.130 --> 00:02:04.800
当我点击ORDER按钮时，程序崩溃了。

00:02:06.000 --> 00:02:10.500
很遗憾，出现一条信息显示“程序Just Java已停止”。

00:02:10.500 --> 00:02:13.110
我唯一能做的就是点击OK退出程序。

00:02:14.840 --> 00:02:18.190
幸运的是，我们能使用Android Studio来找出到底发生了什么。

00:02:19.660 --> 00:02:21.330
当你在设备上运行该程序的时候，

00:02:21.330 --> 00:02:25.860
你会看到在屏幕底部弹出Android DDMS对话框。

00:02:25.860 --> 00:02:28.990
这条信息显示的是让你监控你的Android设备。

00:02:28.990 --> 00:02:32.980
所有在屏幕之后发生的，而用户是看不到的。

00:02:32.980 --> 00:02:36.230
如果它没有自动运行，你可以点击下面Android的标签，

00:02:36.230 --> 00:02:38.970
那么Android DDMS就启动了。

00:02:38.970 --> 00:02:41.930
你可以通过拖动这个箭头来调整高度。

00:02:42.938 --> 00:02:44.480
如果将箭头拖到右边，

00:02:44.480 --> 00:02:47.450
你会看到与电脑连接的设备列表。

00:02:47.450 --> 00:02:49.460
现在我只连接了Nexus 6。

00:02:49.460 --> 00:02:53.940
而且我又打开了Just Java程序，所以它才会在这个列表里面显示。

00:02:55.190 --> 00:02:58.565
再次把它拖到左边，这样有更多的空间来看运行记录（logs）。

00:02:58.565 --> 00:03:02.850
右手边的区域是显示日志消息的地方。

00:03:02.850 --> 00:03:05.380
如果你点击这个下拉菜单，并且不加筛选，

00:03:05.380 --> 00:03:08.750
那么这个系统以及其他程序的日志消息都会显示出来。

00:03:10.440 --> 00:03:14.850
它像进程管理器，音频、声音、

00:03:14.850 --> 00:03:17.470
麦克风等等这些东西。

00:03:17.470 --> 00:03:20.710
系统日志像是手机的日记，记录了

00:03:20.710 --> 00:03:21.789
设备上发生的事情。

00:03:22.850 --> 00:03:25.150
我们叫它logcat。

00:03:25.150 --> 00:03:25.780
如果你Google

00:03:25.780 --> 00:03:30.840
什么叫logcat，那么就会弹出来自Android Developers网页的定义。

00:03:30.840 --> 00:03:33.380
它说明了logcat怎样记录Android系统，

00:03:33.380 --> 00:03:36.200
你可以从哪收集和查看调试输出。

00:03:37.480 --> 00:03:42.170
重新回到日志，最新的记录显示在最底部。

00:03:42.170 --> 00:03:43.790
所以，如果你想及时回顾的话，

00:03:43.790 --> 00:03:46.940
你必须向上滚动页面，看看到底你要找的是什么。

00:03:46.940 --> 00:03:51.660
我们改变过滤器调回到Just Java程序。

00:03:51.660 --> 00:03:55.140
这大大减少了信息的数量，

00:03:55.140 --> 00:03:56.850
只会显示与我们的程序相关的消息。

00:03:56.850 --> 00:03:58.430
这样阅读起来简单多了。

00:03:59.480 --> 00:04:01.260
当设备上发生崩溃时，

00:04:01.260 --> 00:04:05.720
关于当时设备准备做的动作的描述会显示在日志中。

00:04:05.720 --> 00:04:07.410
红色的文字就是崩溃信息。

00:04:08.480 --> 00:04:10.140
这可以通过查看堆栈踪迹知道，

00:04:10.140 --> 00:04:13.840
因为它会追踪到错误最初发生的地点。

00:04:13.840 --> 00:04:16.550
之所以知道这是我们的应用程序是因为

00:04:16.550 --> 00:04:19.560
com.example.android.justjava是我们的进程。

00:04:19.560 --> 00:04:22.730
对于我们的程序，进程名字与软件包的名字是对应的，

00:04:22.730 --> 00:04:24.440
但是它们不一定总是要对应。

00:04:24.440 --> 00:04:26.560
我们还没有真正学过进程，

00:04:26.560 --> 00:04:30.730
但重要的是，它表示这是我们的应用程序。

00:04:30.730 --> 00:04:32.640
现在，堆栈踪迹有很多的文字。

00:04:32.640 --> 00:04:34.488
需要把所有的都看一遍。

00:04:34.488 --> 00:04:35.400
我们只要查看那些

00:04:35.400 --> 00:04:39.170
能帮助我们解决问题的信息就可以了。

00:04:39.170 --> 00:04:42.410
我们要查找堆栈踪迹中任何与

00:04:42.410 --> 00:04:45.710
我们所运行的方法或是文件相关的东西。

00:04:45.710 --> 00:04:48.580
所以我们要留意名为main activity的文件。

00:04:49.660 --> 00:04:51.700
开始阅读错误信息吧。

00:04:51.700 --> 00:04:52.890
我跳过这一部分，

00:04:52.890 --> 00:04:57.120
刚刚看过了IllegalStateException，
没有找到submitOrder方法。

00:04:58.490 --> 00:05:02.720
错误信息进一步解释了为什么会在无效状态。

00:05:03.830 --> 00:05:06.942
原因是无法在MainActivity中为

00:05:06.942 --> 00:05:09.950
视图类按钮onClick程序处理器，

00:05:09.950 --> 00:05:13.760
找到submitOrder方法。

00:05:13.760 --> 00:05:17.830
那句话中有很多的词语，也许没有很大的意义。

00:05:17.830 --> 00:05:19.910
但是这里有几条有用的信息。

00:05:19.910 --> 00:05:22.920
它提到了按钮，而在我们的程序中只有一个按钮，所以

00:05:22.920 --> 00:05:26.610
我们可以推测可能与那个按钮有关。

00:05:26.610 --> 00:05:29.530
那么它的意思并非是说在activity

00:05:29.530 --> 00:05:31.930
找到submitOrder方法。

00:05:31.930 --> 00:05:36.500
回顾关于按钮的代码，我们的确指定了，当按下按钮

00:05:36.500 --> 00:05:38.850
应该要引发名为submitOrder的方法。

00:05:38.850 --> 00:05:39.710
现在来看一下。

00:05:39.710 --> 00:05:43.415
我把DDMS窗口拖到下面然后

00:05:43.415 --> 00:05:46.315
打开activity_main.xml文档。

00:05:46.315 --> 00:05:48.955
这是按钮的XML元素。

00:05:48.955 --> 00:05:54.215
我们的确说过android:onClick应该引发submitOrder方法。

00:05:54.215 --> 00:05:56.395
如果我重新进入main activity，

00:05:56.395 --> 00:06:00.090
我会看到submitOrder不再是一个方法，而是

00:06:00.090 --> 00:06:04.240
我们将它变成了submitOrders，这就是问题出现的原因。

00:06:04.240 --> 00:06:08.330
如果我往前，去掉多余的“s”,那么

00:06:08.330 --> 00:06:11.950
main activity中的就是submitOrder，程序应该能重新运行了

00:06:11.950 --> 00:06:13.113
当我重新运行这个应用程序

00:06:13.113 --> 00:06:16.380
并且点击命令按钮，程序没有崩溃，哇哦。

00:06:16.380 --> 00:06:19.790
开始吧，试着在你们的应用程序中制造一次崩溃，

00:06:19.790 --> 00:06:21.800
通过改变submitOrder方法名字的方式。

00:06:23.000 --> 00:06:25.390
然后检查日志消息中的堆栈跟踪，再

00:06:25.390 --> 00:06:26.950
然后仔细阅读错误信息。

00:06:28.000 --> 00:06:31.390
最后修复错误，让你的程序重新运行起来。

00:06:31.390 --> 00:06:32.610
完成时检查这个盒子。

