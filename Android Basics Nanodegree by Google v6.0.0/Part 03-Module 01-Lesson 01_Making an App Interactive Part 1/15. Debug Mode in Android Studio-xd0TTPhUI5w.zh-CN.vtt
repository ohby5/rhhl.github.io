WEBVTT
Kind: captions
Language: zh-CN

00:00:00.470 --> 00:00:02.850
目前 我们已经有了很大的进步

00:00:02.850 --> 00:00:05.080
我们继续在应用中创建更有挑战的

00:00:05.080 --> 00:00:08.900
东西 我们需要改善我们的调试技巧

00:00:08.900 --> 00:00:09.490
在这集视频中

00:00:09.490 --> 00:00:12.590
我们将要学习如何使用 debugger (调试) 工具

00:00:12.590 --> 00:00:15.450
我们使用 Android Studio 来进入 debugger

00:00:15.450 --> 00:00:19.720
debugger 是为了帮助我们识别和修正代码中的错误的工具

00:00:19.720 --> 00:00:23.040
debugger 最大的好处是 我们可以在某一定点暂停应用

00:00:23.040 --> 00:00:27.960
然后我们可以更仔细地检查应用所处的状态

00:00:27.960 --> 00:00:30.350
通常情况下 当应用在你的设备上运行时

00:00:30.350 --> 00:00:33.050
所有的代码被迅速执行

00:00:33.050 --> 00:00:37.200
在毫秒之内 它可以响应按钮点击 更新屏幕

00:00:37.200 --> 00:00:39.470
计算价格 等等

00:00:39.470 --> 00:00:43.510
使用 debugger 我们可以暂停在代码的某一行

00:00:43.510 --> 00:00:47.620
这样 就可以控制快慢 逐行的执行代码

00:00:48.760 --> 00:00:52.690
如果你想学习更多如何在 Android Studio 中调试应用的技术

00:00:52.690 --> 00:00:56.070
只需要搜索 debugging Android Studio

00:00:56.070 --> 00:00:57.550
第一个链接比较好

00:00:57.550 --> 00:00:59.720
它是一个 developer.android.com 的网页

00:00:59.720 --> 00:01:02.810
它包含了许多关于如何调试应用的技术

00:01:02.810 --> 00:01:05.560
总之 我们要学习如何使用断点

00:01:05.560 --> 00:01:06.320
学完这节课程之后

00:01:06.320 --> 00:01:08.860
你可以随时回到这个页面

00:01:09.930 --> 00:01:13.120
在这个练习中我会向你展示 Android设备可以

00:01:13.120 --> 00:01:17.160
自上而下的逐行的执行某个方法中的代码

00:01:17.160 --> 00:01:20.420
我们也将证明点击+按钮会触发 increment

00:01:20.420 --> 00:01:23.670
方法 点击-按钮会触发 decrement 方法

00:01:24.850 --> 00:01:27.220
首先设置一些断点

00:01:27.220 --> 00:01:30.010
代码中被设置断点的行就意味着

00:01:30.010 --> 00:01:32.980
debugger 到这里会暂停

00:01:32.980 --> 00:01:35.600
红色的圆点表示断点设置在

00:01:35.600 --> 00:01:38.290
MainActivity.java 文件的第25行

00:01:39.440 --> 00:01:43.380
你可以在你的代码中的很多地方设置断点

00:01:43.380 --> 00:01:43.960
但是 现在

00:01:43.960 --> 00:01:48.220
我只在 increment 方法的第一行设置一个断点

00:01:48.220 --> 00:01:52.240
然后 我可以点击这个 bug 图标 在调试模式下运行这个应用

00:01:52.240 --> 00:01:55.440
应用会在这些断点暂停

00:01:55.440 --> 00:01:56.550
当在调试状态下运行时

00:01:56.550 --> 00:01:59.160
如果在正常的模式下运行这个应用

00:01:59.160 --> 00:02:01.890
它就不会在这些断点处暂停

00:02:01.890 --> 00:02:05.200
呆一会儿 你可能会看见 在设备上出现了一句对话

00:02:05.200 --> 00:02:06.710
写着等待调试

00:02:06.710 --> 00:02:09.620
也会有一个强迫关闭应用的按钮 不要点击它

00:02:09.620 --> 00:02:13.590
只需要等待 debugger 慢慢靠近 这个消息就会消失

00:02:13.590 --> 00:02:15.880
然后应用程序开始正常的运行 你可以与它进行交互

00:02:16.920 --> 00:02:21.820
在调试状态下 这个窗口会弹出并显示 debugger 的状态

00:02:21.820 --> 00:02:24.770
如果看不见 你可以单击下面的 Debug 选项

00:02:25.900 --> 00:02:30.340
如果我点击+按钮 我希望 increment 方法能够被触发

00:02:30.340 --> 00:02:33.230
并且暂停在断点这里

00:02:33.230 --> 00:02:35.000
让我们看看发生了什么

00:02:35.000 --> 00:02:36.560
它确实停在这里了

00:02:36.560 --> 00:02:40.310
在调试面板上 我们可以看见一个变量列表

00:02:40.310 --> 00:02:43.440
它反映了被暂停的应用的当前状态

00:02:43.440 --> 00:02:45.620
我们没有看见数量变化

00:02:45.620 --> 00:02:48.990
因为还没有执行完这行代码

00:02:48.990 --> 00:02:51.820
调试的方法有很多种

00:02:51.820 --> 00:02:55.000
我点击 step over 选项

00:02:55.000 --> 00:02:58.670
这将跳过当前行代码 执行下一行代码

00:02:58.670 --> 00:03:01.330
现在 应用暂停在26行了

00:03:01.330 --> 00:03:03.700
第25行代码已经执行完了

00:03:03.700 --> 00:03:07.020
这就是为什么我们能看到数量变化

00:03:08.060 --> 00:03:12.280
这个变量列表也展示了每一个变量的当前值

00:03:12.280 --> 00:03:15.850
我们可以证明 quantity 变量的值是3

00:03:15.850 --> 00:03:17.030
这是我们指定的

00:03:18.090 --> 00:03:20.970
我们知道现在应用暂停在这一点

00:03:20.970 --> 00:03:22.690
因为当你点击加号按钮时

00:03:22.690 --> 00:03:25.960
quantity 的值将会自动更新到3

00:03:25.960 --> 00:03:28.030
但是现在 quantity 的值还是2

00:03:28.030 --> 00:03:31.830
所以我们知道 increment 方法还没有执行完

00:03:31.830 --> 00:03:34.530
我们可以点击 step over 来执行下一行

00:03:34.530 --> 00:03:35.745
这时 这个方法已经执行完了

00:03:35.745 --> 00:03:39.508
我们并不想知道它是如何更新屏幕的

00:03:39.508 --> 00:03:42.030
让我们重新打开程序

00:03:42.030 --> 00:03:44.890
我们只关心屏幕是否真的刷新了

00:03:44.890 --> 00:03:47.610
如果你感兴趣 你可以点击其他的选项

00:03:47.610 --> 00:03:51.040
来看一下它是如何更新屏幕的

00:03:51.040 --> 00:03:52.590
现在 应用运行正常

00:03:52.590 --> 00:03:54.950
但是这个 debugger 还是存在的

00:03:54.950 --> 00:03:59.020
所以 如果我再次点击+按钮 它将会停在这个断点

00:03:59.020 --> 00:04:02.900
如果我想分离这个 debugger 使得当我点击+按钮时

00:04:02.900 --> 00:04:05.690
它不再停在这一行 我可以点击这个红色的停止按钮

00:04:07.000 --> 00:04:10.240
现在 无论何时我点击这个加号按钮 它都会立即响应

00:04:10.240 --> 00:04:11.345
并且将值更新为3

00:04:12.600 --> 00:04:14.870
我希望你能在你的电脑上实现它

00:04:14.870 --> 00:04:18.108
在 increment 和 decrement 方法中设置断点

00:04:18.108 --> 00:04:21.394
在调试模式中运行应用 然后在设备上

00:04:21.394 --> 00:04:24.380
触发这些断点

00:04:24.380 --> 00:04:27.340
一行一行的执行代码 保证 quantity

00:04:27.340 --> 00:04:31.130
变量能够正确的显示变量表中的值

00:04:31.130 --> 00:04:34.180
你可以点击这个运行按钮 重新运行这个应用

00:04:34.180 --> 00:04:35.890
使得它正常运行

00:04:35.890 --> 00:04:38.430
或者你可以点击停止按钮 分离 debugger

