WEBVTT
Kind: captions
Language: zh-CN

00:00:00.670 --> 00:00:04.780
Katherine 我们的应用运行的很顺利 但还存在一个难题

00:00:04.780 --> 00:00:06.150
是什么难题呢？

00:00:06.150 --> 00:00:08.029
它只能点两杯咖啡

00:00:08.029 --> 00:00:09.560
点两杯有什么问题吗？

00:00:09.560 --> 00:00:11.630
点三杯比点两杯要好吧 点四杯比点三杯好吧

00:00:11.630 --> 00:00:12.720
有时候我需要点更多

00:00:12.720 --> 00:00:14.170
我懂了 你想要更多的咖啡

00:00:14.170 --> 00:00:16.560
改一下代码就行了

00:00:16.560 --> 00:00:18.230
把 2 改成 3

00:00:18.230 --> 00:00:21.470
所以我需要改变我们的代码

00:00:21.470 --> 00:00:25.620
在这还有这 改变咖啡的杯数

00:00:25.620 --> 00:00:28.810
那我想为我的朋友们点十杯咖啡呢？

00:00:28.810 --> 00:00:30.835
你有这么多朋友吗？

00:00:30.835 --> 00:00:33.580
看来我们需要想点别的办法

00:00:33.580 --> 00:00:34.810
对 我们需要一个更好的办法

00:00:34.810 --> 00:00:37.770
我知道了 我们用上变量怎么样

00:00:37.770 --> 00:00:38.890
变量？

00:00:38.890 --> 00:00:40.460
可以改变的一种东西？

00:00:40.460 --> 00:00:42.310
是的 变量没有固定值

00:00:42.310 --> 00:00:48.001
你可以把变量理解为一个盒子 像这样

00:00:48.001 --> 00:00:48.760
好的

00:00:48.760 --> 00:00:50.220
没错 这就是变量

00:00:50.220 --> 00:00:52.420
这是一个盒子 你可以往里边放入值

00:00:52.420 --> 00:00:53.770
这写着 int

00:00:53.770 --> 00:00:55.520
是的 int 代表整数类型

00:00:55.520 --> 00:00:58.490
你可以往这个盒子里放入整数或者一个值

00:00:58.490 --> 00:00:59.170
没错

00:00:59.170 --> 00:01:00.740
你甚至可以给它起个名字

00:01:00.740 --> 00:01:04.910
就叫它订购的咖啡杯数吧

00:01:04.910 --> 00:01:05.410
可以

00:01:07.020 --> 00:01:10.086
你起的名字好长

00:01:10.086 --> 00:01:12.576
勉强合适订购吧

00:01:12.576 --> 00:01:13.770
— 好了吗？ — 好了

00:01:13.770 --> 00:01:17.260
现在你可以在代码中通过使用这个名字来引用变量了

00:01:17.260 --> 00:01:19.600
而不是输入 2

00:01:19.600 --> 00:01:20.580
嗯

00:01:20.580 --> 00:01:23.440
之后我们还可以根据需求修改这个值

00:01:23.440 --> 00:01:24.850
现在让我们把值放进去

00:01:24.850 --> 00:01:26.370
我们该怎么做呢？

00:01:26.370 --> 00:01:29.584
我有一些便利贴

00:01:29.584 --> 00:01:31.440
这是从哪来的？

00:01:31.440 --> 00:01:34.660
我们所点的咖啡数是2

00:01:34.660 --> 00:01:36.710
为什么才两杯？

00:01:36.710 --> 00:01:40.834
一杯是我的 另一杯给我的朋友 Katherine 

00:01:40.834 --> 00:01:41.750
谢谢你

00:01:41.750 --> 00:01:46.620
现在我们有一个变量 numberOfCoffeesOrdered 

00:01:46.620 --> 00:01:48.120
它的值是 2

00:01:48.120 --> 00:01:50.260
让我们在代码中实现

00:01:50.260 --> 00:01:53.180
之前我们用一个字面值来代表

00:01:53.180 --> 00:01:55.840
所订购的咖啡数

00:01:55.840 --> 00:01:59.330
数字是指一个固定值 比如2

00:01:59.330 --> 00:02:02.822
5 或者这个 2 都是字面值

00:02:02.822 --> 00:02:07.126
我们刚刚讨论了用字面值来表示数量

00:02:07.126 --> 00:02:10.470
所以如果点了两杯咖啡

00:02:10.470 --> 00:02:15.000
一杯 5 美元 计算价格时我们要用 2 乘以 5

00:02:15.000 --> 00:02:19.550
因为他们没有自带 所以如果算上纸杯的钱的话 

00:02:19.550 --> 00:02:23.540
杯子会浪费木材资源 我们再收取两美元

00:02:23.540 --> 00:02:26.830
再用 2 乘以 2

00:02:26.830 --> 00:02:30.320
当我们使用字面值时 很明显这并不理想 我们不得不

00:02:30.320 --> 00:02:33.640
对咖啡数量做重复计算

00:02:33.640 --> 00:02:34.560
另一方面

00:02:34.560 --> 00:02:39.200
我们可以用变量值代表所点的咖啡数

00:02:39.200 --> 00:02:43.250
如果把代表咖啡数的变量叫做 numberOfCoffees 

00:02:43.250 --> 00:02:46.755
然后计算价格时我们只需要使用变量名就行了

00:02:46.755 --> 00:02:50.520
用 numberOfCoffees 乘以 5

00:02:50.520 --> 00:02:54.315
为了计算纸杯的价格 再使用变量名

00:02:54.315 --> 00:02:58.190
用 numberOfCoffees 乘以 2

00:02:58.190 --> 00:03:01.590
这两种方法的差别在于一个用了实际的值

00:03:01.590 --> 00:03:03.780
而我们使用了一个变量

00:03:03.780 --> 00:03:06.500
这个变量的值

00:03:06.500 --> 00:03:10.490
在进行实际计算时会被代替

00:03:10.490 --> 00:03:12.330
所以 当我们计算价格时

00:03:12.330 --> 00:03:15.740
我们只需要查看一下变量的值 然后再乘5就行了

00:03:15.740 --> 00:03:19.900
在使用变量时还有一个额外的步骤是

00:03:19.900 --> 00:03:20.570
在开始时

00:03:20.570 --> 00:03:25.370
给 numberOfCoffees  赋一个初始值

00:03:25.370 --> 00:03:29.760
我们设定初始值为值2 

00:03:29.760 --> 00:03:33.970
但是这次我们只用到了一次

00:03:33.970 --> 00:03:36.010
结果是一样的

00:03:36.010 --> 00:03:38.730
因为 numberOfCoffees 的值是 2

00:03:38.730 --> 00:03:41.860
所以数量还是 2 价格还是 10

00:03:41.860 --> 00:03:44.310
纸杯的价格还是 4

00:03:44.310 --> 00:03:47.270
这种办法的真正的优势是

00:03:47.270 --> 00:03:50.190
你可以在任何时候改变变量的值

00:03:50.190 --> 00:03:53.300
比如我想把 numberOfCoffees 的值变为 3

00:03:53.300 --> 00:03:55.430
我只需要在这个地方修改一下就好

00:03:55.430 --> 00:03:57.880
其他地方的值也会随之进行精确计算

00:03:57.880 --> 00:04:00.080
数量依然是 numberOfCoffees 

00:04:00.080 --> 00:04:02.080
现在这个变量的值是3

00:04:02.080 --> 00:04:04.475
价格就是用 numberOfCoffees 乘 5

00:04:04.475 --> 00:04:06.653
也就是 3 乘以 5

00:04:06.653 --> 00:04:10.543
纸杯的价格就是用 numberOfCoffees 乘 2

00:04:10.543 --> 00:04:12.834
现在也就是 3 乘以 2

00:04:12.834 --> 00:04:14.069
如果我们用一个数字

00:04:14.069 --> 00:04:16.555
那么我们就需要把这的数量变成 3

00:04:16.555 --> 00:04:19.625
这的价格就会是 3 乘以 5

00:04:19.625 --> 00:04:22.105
纸杯的价格为 3 乘以 2

00:04:22.105 --> 00:04:24.125
当我们使用变量时

00:04:24.125 --> 00:04:27.390
就不需要每次都修改具体值

00:04:27.390 --> 00:04:29.390
我们只需修改变量即可

00:04:29.390 --> 00:04:32.520
其他变量会自动更新

00:04:33.730 --> 00:04:37.120
我们仔细看看实际代码是怎样

00:04:37.120 --> 00:04:39.370
创建和使用变量的

00:04:39.370 --> 00:04:43.720
创建一个变量可以写成 int numberOfCoffees = 2；

00:04:43.720 --> 00:04:48.410
这就创建了一个名为 numberOfCoffees 的变量

00:04:48.410 --> 00:04:51.990
把2放到变量盒子里

00:04:51.990 --> 00:04:56.740
接下来的两行代码用到了我们第一行创建的变量

00:04:56.740 --> 00:04:59.000
这两行是用来更新屏幕的

00:04:59.000 --> 00:05:03.040
我们可以把变量里包含的咖啡数显示出来

00:05:03.040 --> 00:05:05.720
检查一下是不是 2

00:05:05.720 --> 00:05:07.650
所以我们在这显示 2

00:05:07.650 --> 00:05:09.330
为了显示这个价格

00:05:09.330 --> 00:05:14.360
现在 numberOfCoffees 的值是 2

00:05:14.360 --> 00:05:18.170
2乘以5等于10 所以价格是10美元

00:05:19.310 --> 00:05:20.947
我可以很轻易改变代码

00:05:20.947 --> 00:05:23.650
把 numberOfCoffees 从2变到3

00:05:23.650 --> 00:05:27.570
这个盒子代表我们的变量 numberOfCoffees 

00:05:27.570 --> 00:05:31.300
现在我们给变量赋初始值3

00:05:31.300 --> 00:05:33.160
这两行代码不需改动

00:05:33.160 --> 00:05:34.710
因为我们使用的是变量

00:05:35.710 --> 00:05:38.460
当我们调用 display 显示 numberOfCoffees 时

00:05:38.460 --> 00:05:40.930
变量值是3

00:05:40.930 --> 00:05:42.325
所以这会显示3

00:05:43.600 --> 00:05:48.260
然后显示价格 numberOfCoffees 的值是3

00:05:48.260 --> 00:05:51.070
然后乘以5 结果是15美元

00:05:51.070 --> 00:05:55.480
在 Android Studio 中代码是这样实现的

00:05:56.700 --> 00:06:00.690
现在数量是2

00:06:00.690 --> 00:06:06.608
我们来创建一个变量 输入 int numberOfCoffees=2；

00:06:07.840 --> 00:06:10.740
现在我们有了一个值为2的变量

00:06:10.740 --> 00:06:14.640
顺便说一下 这个文本是灰色的 这说明表示咖啡数的变量

00:06:14.640 --> 00:06:19.580
从来没有被使用过 确实没被用过 现在我们就使用它 

00:06:19.580 --> 00:06:21.430
不是显示数字2

00:06:21.430 --> 00:06:24.140
我要把它替换成变量名

00:06:24.140 --> 00:06:28.140
弹出了自动补全项 按回车键

00:06:28.140 --> 00:06:29.940
系统会为你自动补全

00:06:29.940 --> 00:06:33.180
然后 变量名就不是灰色了 它

00:06:33.180 --> 00:06:34.730
至少在一个地方已经被用过了

00:06:34.730 --> 00:06:37.180
我可以对 displayPrice 做同样的事

00:06:37.180 --> 00:06:40.140
不使用数字2 我会把

00:06:40.140 --> 00:06:44.820
它变成变量名 numberOfCoffees 按回车键自动补全

00:06:44.820 --> 00:06:48.630
我还可以创建一个变量来表示价格5

00:06:48.630 --> 00:06:50.880
但价格只用了一次

00:06:50.880 --> 00:06:53.360
所以就让它是数字就可以了

00:06:53.360 --> 00:06:56.100
现在让我们保存代码 在设备上运行吧

00:06:56.100 --> 00:06:57.830
这就是它在设备上的样子

00:06:57.830 --> 00:07:00.800
当你点击 ORDER按钮 时 数量是2 价格是10美元

00:07:00.800 --> 00:07:06.500
跟之前一模一样 但现在我们的代码具有鲁棒性了

00:07:06.500 --> 00:07:10.620
有鲁棒性意味着以后不容易出现问题

00:07:10.620 --> 00:07:13.020
比如说如果有人想修改代码

00:07:13.020 --> 00:07:16.400
他们想在很多地方使用咖啡数量

00:07:16.400 --> 00:07:20.840
然后他们不得不把所有咖啡数改成2

00:07:20.840 --> 00:07:24.200
如果我们使用变量 numberOfCoffees 那么我们只需

00:07:24.200 --> 00:07:28.210
改变一次变量就行了 然后所有地方都会自动更新

00:07:28.210 --> 00:07:31.330
这样就不会遗漏某一行

00:07:31.330 --> 00:07:34.060
需要进行更新的代码

00:07:34.060 --> 00:07:36.040
只需修改这一个地方就行了

00:07:37.290 --> 00:07:39.280
在你去 Android Studio 中练习这些之前

00:07:39.280 --> 00:07:42.780
我希望你做一下这个小测验

00:07:42.780 --> 00:07:46.620
在下边把这行代码输入一遍

00:07:46.620 --> 00:07:49.790
这行代码会创建一个新的整型变量

00:07:49.790 --> 00:07:53.330
这两行代码会使用到这个整型变量

00:07:53.330 --> 00:07:56.110
之所以让你先做一下这个练习是因为你会

00:07:56.110 --> 00:07:59.220
注意到你输入的每一个字符

00:07:59.220 --> 00:08:02.310
否则 如果你丢掉一个字母 在 Android Studio 中会报错

00:08:02.310 --> 00:08:04.790
阅读错误信息是很困难的

00:08:04.790 --> 00:08:07.840
输入一遍你所看到的

00:08:07.840 --> 00:08:11.190
这有助于你理解你见过的每个字符

00:08:11.190 --> 00:08:14.850
字母是大写还是小写 没有空格还是

00:08:14.850 --> 00:08:16.550
有空格

00:08:16.550 --> 00:08:19.090
还可以逐渐适应 Java 中

00:08:19.090 --> 00:08:24.100
创建变量或者使用变量的规则 还有之前你学到的

00:08:24.100 --> 00:08:27.140
每行Java代码都要有分号结尾

00:08:27.140 --> 00:08:29.230
如果你输入有误 比如

00:08:29.230 --> 00:08:32.200
变量名有误 那么 Java 就会报错

00:08:32.200 --> 00:08:35.580
有一些东西是约定俗成的 最好这么写

00:08:35.580 --> 00:08:40.090
比如在操作符前后各加一个空格 像这样

00:08:40.090 --> 00:08:43.690
如果不加 也不会报错

00:08:43.690 --> 00:08:47.940
只是按照传统的样式来更好一些

00:08:47.940 --> 00:08:50.020
这样代码读起来很方便

00:08:50.020 --> 00:08:53.020
当你输入完成 就继续看下一个视频

