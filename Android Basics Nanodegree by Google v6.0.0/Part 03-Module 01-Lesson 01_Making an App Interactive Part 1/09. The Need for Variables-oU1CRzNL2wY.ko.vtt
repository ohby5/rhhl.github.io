WEBVTT
Kind: captions
Language: ko

00:00:00.580 --> 00:00:02.910
자, 캐서린, 우리의 앱은
잘 만들어지고 있어요,

00:00:02.910 --> 00:00:04.780
하지만 한가지 문제를
발견했습니다.

00:00:04.780 --> 00:00:06.150
문제가 뭔가요?

00:00:06.150 --> 00:00:08.029
이것은 오로지
2잔의 커피만 주문해요.

00:00:08.029 --> 00:00:09.560
커피 2잔에
무슨 문제가 있나요?

00:00:09.560 --> 00:00:11.630
2잔 보다는 3잔이 낫고,
3잔 보다는 4잔이 낫잖아요.

00:00:11.630 --> 00:00:12.720
가끔 저는 커피가 더 필요하다고요.

00:00:12.720 --> 00:00:14.170
알겠어요, 커피가 더 필요하군요.

00:00:14.170 --> 00:00:16.560
그걸 해결하기 위해서는
코드만 바꾸면 되요.

00:00:16.560 --> 00:00:18.230
2잔 대신에 3잔으로 바꾸는 거죠.

00:00:18.230 --> 00:00:19.870
네, 그럼 여기에
우리의 코드가 있습니다.

00:00:19.870 --> 00:00:23.340
우리는 커피잔의 수를
바꿔야 할 겁니다.

00:00:23.340 --> 00:00:25.120
여기와 여기에서요.

00:00:25.570 --> 00:00:26.880
만약 제가 나중에 제 친구들과 마실

00:00:26.880 --> 00:00:28.810
10잔의 커피가
필요하면 어떻게 하나요?

00:00:28.810 --> 00:00:30.325
그 정도로 친구가 많으신가요?

00:00:30.835 --> 00:00:33.580
그러면 다른 방법을 찾아보죠.

00:00:33.580 --> 00:00:34.810
네, 우리에겐 더 나은 해결책이 있어요

00:00:34.810 --> 00:00:37.770
그러면.. 오, 알겠어요.
변수를 사용하면 됩니다.

00:00:37.770 --> 00:00:40.450
변수요? 크기가 변하는 
변수를 말하는 건가요?

00:00:40.470 --> 00:00:42.310
네, 변수는 고정 값을
가지고 있지 않습니다.

00:00:42.310 --> 00:00:46.991
변수를 이렇게 생긴
박스로 생각하시면 됩니다.

00:00:48.001 --> 00:00:48.760
그렇군요.

00:00:48.760 --> 00:00:50.220
이것을 변수라고 하겠습니다.

00:00:50.220 --> 00:00:52.420
이것은 박스이고,
이 안에 값을 넣을 수 있습니다.

00:00:52.420 --> 00:00:53.770
int라고 적혀있네요.

00:00:53.770 --> 00:00:55.520
int는 정수(integer)를 나타냅니다.

00:00:55.520 --> 00:00:58.150
정수 또는 다른 수를
이 박스 안에 넣을 수 있죠.

00:00:58.150 --> 00:01:00.780
그렇죠! 그리고 여기에
이름을 지을 수도 있어요.

00:01:00.780 --> 00:01:04.490
이걸 주문한 커피잔의 수라고 합시다.

00:01:04.490 --> 00:01:05.760
좋아요.

00:01:06.620 --> 00:01:08.346
긴 이름이군요.

00:01:11.306 --> 00:01:12.416
가까스로 맞췄네요.

00:01:12.416 --> 00:01:13.770
-좋네요.
-좋습니다.

00:01:13.770 --> 00:01:15.550
이제 우리는 2잔의 값을
넣는 것 대신에

00:01:15.550 --> 00:01:17.260
이 이름을 사용해서

00:01:17.260 --> 00:01:19.170
이 변수를 코드 안에서
사용할 수 있습니다.

00:01:19.170 --> 00:01:20.140
그렇군요.

00:01:20.140 --> 00:01:23.070
나중에 우리가 원한다면
이것을 업데이트 할 수도 있습니다.

00:01:23.440 --> 00:01:26.380
이제 값을 안에 넣어봅시다.
그걸 어떻게 하죠?

00:01:26.380 --> 00:01:28.204
음, 제가 포스트잇을
가지고 있는데요.

00:01:29.584 --> 00:01:31.440
그건 어디서 나온 거죠?

00:01:31.440 --> 00:01:35.030
주문한 커피잔의 수를
2잔이라고 합시다.

00:01:35.030 --> 00:01:36.710
왜 2잔만 하는 거죠?

00:01:36.710 --> 00:01:39.764
하나는 제 것이고, 다른 하나는
제 친구인 캐서린 것입니다.

00:01:40.834 --> 00:01:41.750
고마워요.

00:01:42.290 --> 00:01:45.790
이제 우리는 주문한
커피잔의 수라고 불리는

00:01:45.790 --> 00:01:48.120
2잔의 값을 가지고 있는
변수를 가지고 있습니다.

00:01:48.120 --> 00:01:50.260
우리 코드를 여기에 사용해봅시다.

00:01:50.260 --> 00:01:53.180
주문한 커피잔의 수량을 나타내는

00:01:53.180 --> 00:01:55.840
literal 값을
사용하기 전에 말이죠.

00:01:55.840 --> 00:01:58.850
literal은 2잔과 같은
고정 값을 의미합니다.

00:01:59.330 --> 00:02:02.310
엄밀히 따지면,
5잔과 2잔도 literal 값입니다.

00:02:02.310 --> 00:02:04.252
하지만 우리는 지금
수량을 나타내기 위해서

00:02:04.252 --> 00:02:06.166
literal을 사용하는 것에
대해서 얘기하고 있습니다.

00:02:06.981 --> 00:02:09.861
수량이 주문한 2잔의 커피라면

00:02:10.221 --> 00:02:13.420
우리가 가격을 계산할 때 
2X5를 합니다.

00:02:13.610 --> 00:02:15.820
커피 한 잔이 5달러니까요.

00:02:15.820 --> 00:02:19.220
자기 컵을 안 가지고 온 
나무낭비를 하는 고객에게

00:02:19.220 --> 00:02:21.900
종이컵을 사용하는 데에
비용을 부과하려면,

00:02:21.900 --> 00:02:24.140
종이컵 1잔에 2달러를
부과하면 됩니다.

00:02:24.140 --> 00:02:26.520
그러면 2잔X2달러를 하면 됩니다.

00:02:26.830 --> 00:02:27.830
우리가 literal을 썼다면

00:02:27.830 --> 00:02:30.910
수량의 개수를 계속 반복해서
계산해야 하기 때문에

00:02:30.910 --> 00:02:33.300
이것이 이상적이지
않다는 것을 알 수 있죠.

00:02:33.640 --> 00:02:36.230
반면에, 우리는 주문된
커피잔의 수량을

00:02:36.230 --> 00:02:38.600
나타내는 변수를
사용할 수 있습니다.

00:02:39.200 --> 00:02:42.890
커피잔의 개수라고
불리는 변수가 수량이면

00:02:42.890 --> 00:02:44.630
가격을 계산할 때

00:02:44.630 --> 00:02:48.085
우리는 커피잔의 개수라는
변수의 이름만 사용하면 됩니다

00:02:48.085 --> 00:02:50.520
그리고 1잔에
5달러를 곱하면 되죠.

00:02:50.520 --> 00:02:52.550
종이컵에 부과하는
비용을 계산하기 위해서

00:02:52.550 --> 00:02:55.815
우리는 커피잔의 개수라는
변수이름을 사용하고

00:02:55.815 --> 00:02:58.190
2잔에 2달러를 곱하면 됩니다.

00:02:58.190 --> 00:02:59.880
이 두 가지의 방법의 차이점은

00:02:59.880 --> 00:03:03.800
실제로 literal값 대신에 
변수를 사용했습니다.

00:03:03.800 --> 00:03:06.500
그리고 이 변수의 값은

00:03:06.500 --> 00:03:10.490
실제로 이 수식의 값을
구할 때 대체될 것입니다.

00:03:10.490 --> 00:03:12.330
그러므로 우리가 가격을 계산할 때

00:03:12.330 --> 00:03:15.740
5를 곱하기 전에
이 값을 확인해야 합니다.

00:03:15.740 --> 00:03:19.900
변수를 사용할 때, 여러분이
해야 할 추가적인 단계는

00:03:19.900 --> 00:03:23.450
처음에, 커피잔의 개수라고 
불리는 변수가

00:03:23.450 --> 00:03:25.370
초기 값을 가지도록
설정하는 것입니다.

00:03:25.370 --> 00:03:28.050
우리가 초기 값을
2잔으로 설정한 경우는

00:03:28.050 --> 00:03:29.760
literal이었습니다.

00:03:29.760 --> 00:03:31.760
하지만 이번에는 많은 곳 대신에

00:03:31.760 --> 00:03:33.970
오로지 한 곳에서만
literal을 사용했습니다.

00:03:33.970 --> 00:03:36.010
최종결과는 여전히 같을 것입니다.

00:03:36.010 --> 00:03:38.740
커피잔의 개수라고 불리는 변수가
2잔의 값을 찾을테니까요.

00:03:38.740 --> 00:03:40.580
그러므로 수량은
여전히 2잔일 것이고

00:03:40.580 --> 00:03:41.860
가격은 변함없이
10달러일 것입니다.

00:03:41.860 --> 00:03:44.310
그리고 종이컵에 대한 비용은
변함없이 4달러일 것이고요.

00:03:44.670 --> 00:03:47.080
이러한 접근으로 인한 진정한 이점은

00:03:47.080 --> 00:03:49.560
여러분이 언제든지 변수 값을
바꿀 수 있다는 것입니다.

00:03:50.190 --> 00:03:53.300
만약 제가 커피잔의 개수인 변수를
3잔으로 바꾸고 싶다고 합시다.

00:03:53.300 --> 00:03:55.430
저는 그냥 여기 한 곳에서
그것을 바꾸면 됩니다.

00:03:55.430 --> 00:03:57.880
그래도 모든 것은
여전히 정확하겠죠.

00:03:57.880 --> 00:04:00.080
수량은 여전히 커피잔의 개수라고
불리는 변수이고

00:04:00.080 --> 00:04:02.080
이제 3잔의 값을 가지게 되었습니다.

00:04:02.080 --> 00:04:04.475
이제 가격은 커피잔의 개수인
변수에 5를 곱한 것이니

00:04:04.475 --> 00:04:06.653
값은 3X5 이고

00:04:07.263 --> 00:04:10.543
종이컵에 대한 비용은 커피잔의
개수인 변수에 2를 곱한 것이니

00:04:10.543 --> 00:04:12.394
이제 3X2 인 겁니다.

00:04:12.834 --> 00:04:14.429
만약 우리가 literal을 사용한다면

00:04:14.429 --> 00:04:16.555
여기에서 수량을 3으로 바꾸고

00:04:16.885 --> 00:04:19.625
가격을 계산하는 것을
3X5로 바꿔야 하고

00:04:19.625 --> 00:04:22.105
종이컵에 대한 비용은
3X2로 바꿔야 했을 것입니다.

00:04:22.105 --> 00:04:24.125
그러므로 우리가 변수를 사용하면

00:04:24.125 --> 00:04:27.390
매번 특정한 값을
사용할 필요가 없는 것입니다.

00:04:27.390 --> 00:04:29.390
변수 이름만 사용하면
우리는 자동적으로

00:04:29.390 --> 00:04:32.520
변수에서 가장 최근의
값을 얻을 수 있을 것입니다.

00:04:33.730 --> 00:04:37.150
변수를 만들고 사용하기 위한
실제 코드가 어떻게 생겼는지

00:04:37.150 --> 00:04:38.630
더욱 면밀하게 보겠습니다.

00:04:39.370 --> 00:04:43.720
변수를 만들기 위해서,
int numberOfCoffees=2라고 합시다.

00:04:44.060 --> 00:04:48.410
이로 인해 numberOfCoffees라는
이름을 가진 변수가 생기고

00:04:48.410 --> 00:04:51.670
변수 박스 안에 
2잔의 값을 넣겠습니다.

00:04:51.990 --> 00:04:56.740
여기에 2줄은 이 화면을
업데이트 하기 위해서

00:04:56.740 --> 00:04:59.000
우리가 첫 번째 줄에서
만든 변수를 사용합니다.

00:04:59.000 --> 00:05:03.040
변수를 보고 안에 있는
값을 확인하여

00:05:03.040 --> 00:05:05.730
커피잔의 개수인 2를 
보여줄 수 있습니다.

00:05:05.730 --> 00:05:07.650
여기에 2잔이 있습니다.

00:05:07.650 --> 00:05:09.330
가격을 보여주기 위해서

00:05:09.330 --> 00:05:12.570
우리는 numberOfCoffees라고
불리는 변수의 값을 볼 것입니다.

00:05:12.570 --> 00:05:14.360
안에 2잔이라고 적혀있네요.

00:05:14.360 --> 00:05:18.170
2X5=10입니다.
그러므로 가격은 10달러이죠.

00:05:19.310 --> 00:05:20.947
이 코드를 쉽게 바꿀 수도 있습니다.

00:05:20.947 --> 00:05:23.650
numberOfCoffees를 2잔
대신에 3잔이 되는 겁니다.

00:05:24.280 --> 00:05:27.570
값를 나타내는 박스인
numberOfCoffees는

00:05:27.570 --> 00:05:31.010
이제 3잔을 이 변수 안에서
초기 값으로 가지고 있습니다.

00:05:31.300 --> 00:05:33.160
여기에 있는 2줄의 코드는
바뀌지 않습니다.

00:05:33.160 --> 00:05:34.710
우리가 변수의 이름을
사용했기 때문이죠.

00:05:35.710 --> 00:05:38.460
display (numberOfCoffees);를 보면,

00:05:38.460 --> 00:05:40.930
이 변수의 값은 3잔입니다.

00:05:40.930 --> 00:05:42.325
그러므로 수량이 3잔으로
나타나는 것입니다.

00:05:43.600 --> 00:05:46.980
가격을 나타내기 위해서
numberOfCoffees의 값을 보겠습니다.

00:05:46.980 --> 00:05:48.260
3이네요.

00:05:48.260 --> 00:05:51.300
여기에 5를 곱하면 
15달러가 되겠네요.

00:05:52.760 --> 00:05:55.480
이것이 안드로이드 스튜디오에서
코드가 바뀌는 모습입니다.

00:05:56.700 --> 00:06:00.690
현재 이것은 2잔의 수량을 가진
literal 값을 사용하고 있습니다.

00:06:00.690 --> 00:06:02.978
그 대신에 변수를 만들어봅시다.

00:06:02.978 --> 00:06:06.788
int numberOfCoffees 2라고 적겠습니다.

00:06:07.828 --> 00:06:10.550
이제 저는 2잔의 값을 가진
변수를 가지고 있습니다.

00:06:10.550 --> 00:06:12.730
그런데 이 텍스트는
회색으로 적혀있습니다.

00:06:12.730 --> 00:06:15.400
즉, 커피잔의 변수가 결코
사용되지 않았다는 것을 뜻합니다.

00:06:15.400 --> 00:06:17.720
제가 이걸 다시 사용하지
않았기 때문이죠.

00:06:17.720 --> 00:06:19.350
하지만 저는 이제
이것을 사용할 거예요.

00:06:19.580 --> 00:06:21.430
literal 값인 2잔을
보여주는 대신에

00:06:21.430 --> 00:06:24.140
이것을 변수이름으로
바꿔서 사용할 것입니다.

00:06:24.140 --> 00:06:26.480
자동완성 옵션으로 나타나네요.

00:06:26.480 --> 00:06:29.910
엔터를 치면 자동적으로 
채워질 것입니다.

00:06:29.910 --> 00:06:32.220
그러면 이 변수이름은
더 이상 회색이 아닙니다.

00:06:32.220 --> 00:06:34.730
이제 적어도 한 곳에서
사용되었지 때문이지요.

00:06:34.730 --> 00:06:37.180
가격을 나타내는데도
똑같이 할 수 있습니다.

00:06:37.180 --> 00:06:39.340
literal 값인 2잔을
사용하는 대신에

00:06:39.340 --> 00:06:42.430
numberOfCoffees라는 변수로
바꿔서 사용할 것입니다.

00:06:42.430 --> 00:06:44.820
자동완성이 되도록 엔터를 치겠습니다.

00:06:44.820 --> 00:06:48.620
엄밀히 말하면 저는 5달러인
가격 값의 변수를 만들 수도 있어요.

00:06:48.620 --> 00:06:50.880
하지만 이것은 오직 한 곳에서만 
사용될 것이기 때문에

00:06:50.880 --> 00:06:53.360
literal 값을
사용하도록 둘 것입니다.

00:06:53.360 --> 00:06:56.100
이제 코드를 저장하고
기기에서 작동시켜봅시다.

00:06:56.100 --> 00:06:57.730
이것이 기기에서
보이는 모습입니다.

00:06:57.730 --> 00:07:00.800
주문버튼을 누르면, 수량은 2잔,
가격은 10달러가 나타납니다.

00:07:01.430 --> 00:07:04.130
이것은 이전과 같은 상황이죠.

00:07:04.130 --> 00:07:06.500
하지만 우리의 코드가 더 탄탄합니다.

00:07:06.500 --> 00:07:08.660
탄탄하다라는 것은 코드가 앞으로

00:07:08.660 --> 00:07:10.620
더 적은 에러를
일으킨다는 것을 뜻합니다.

00:07:10.620 --> 00:07:13.020
예를 들어, 다른 누군가가 
이 코드를 바꾸고

00:07:13.020 --> 00:07:16.400
수량을 여러 곳에서 사용하려고 한다면

00:07:16.400 --> 00:07:20.840
2잔의 값을 여러 곳에서
바꿔야 할 것입니다.

00:07:20.840 --> 00:07:23.360
대신에 우리가 numberOfCoffees라는
변수를 사용한다면

00:07:23.360 --> 00:07:25.710
단 한 곳에서만 변수를 바꾸면

00:07:25.710 --> 00:07:28.210
모든 것이 자동적으로
업데이트 될 것입니다.

00:07:28.210 --> 00:07:31.330
이러한 방법으로 누구든
실수로 가장 최근에 주문된

00:07:31.330 --> 00:07:34.060
커피잔의 수에 필요한 코드를
놓치지 않을 것입니다.

00:07:34.060 --> 00:07:36.040
단 한 곳에서만
변경을 하면 되는 것이죠.

00:07:37.290 --> 00:07:39.280
여러분이 이것을 안드로이드
스튜디오에서 직접 해보시기 전에

00:07:39.280 --> 00:07:42.780
먼저 이 퀴즈를 풀면서
연습해보시길 바랍니다.

00:07:42.780 --> 00:07:46.620
이 코드를 여기 아래에 적어보세요.

00:07:46.620 --> 00:07:49.790
이 코드는 새로운 int 변수를 
만들 것입니다.

00:07:49.790 --> 00:07:53.330
여기에 있는 두 줄의 코드는
int 변수를 사용할 것입니다.

00:07:53.330 --> 00:07:55.290
이것을 먼저 연습해 
보셨으면 하는 이유는

00:07:55.290 --> 00:07:56.690
여러분이 코드를 작성할 때

00:07:56.690 --> 00:07:58.980
모든 글자에 집중할 수 있도록
하기 위해서입니다.

00:07:59.220 --> 00:08:00.630
그렇게 하지 않고 글자를 놓친다면

00:08:00.630 --> 00:08:02.310
안드로이드 스튜디오에서
에러가 생길 것입니다.

00:08:02.310 --> 00:08:04.790
그리고 에러 메시지를
읽는 것은 힘들겠지요.

00:08:04.790 --> 00:08:07.840
여기에 보이는 그대로
입력하시길 바랍니다.

00:08:07.840 --> 00:08:11.190
이것은 여러분이 여기 모든 
글자를 인식하도록 도와줍니다.

00:08:11.190 --> 00:08:14.030
대문자이든, 소문자이든,
띄어쓰기를 하지 않았든,

00:08:14.030 --> 00:08:16.110
띄어쓰기를 사용했든지 말이죠.

00:08:16.550 --> 00:08:20.430
여러분은 또한 변수를 만들거나
변수를 사용하는 데에 관한

00:08:20.430 --> 00:08:22.790
자바규칙을 사용하는데
익숙해지실 겁니다.

00:08:22.790 --> 00:08:24.120
이전에 우리가 배운 것처럼

00:08:24.120 --> 00:08:27.140
모든 자바코드 명령문은
뒤에 세미콜론을 있어야 합니다.

00:08:27.140 --> 00:08:28.860
이것을 잘못 입력하면

00:08:28.860 --> 00:08:32.200
가령, 변수 이름을 잘못 입력하면
자바에서 에러가 생길 겁니다.

00:08:32.200 --> 00:08:35.580
하지만 다른 것들은 더욱 형식적이고
가장 좋은 연습이 될 것입니다.

00:08:35.580 --> 00:08:40.090
예를 들어 이렇게 operator앞과
뒤에서 띄어쓰기를 하는 것이죠.

00:08:40.090 --> 00:08:43.680
이렇게 띄어쓰기 안 한다고 해서
뚜렷한 에러가 생기진 않겠지만

00:08:43.690 --> 00:08:47.940
이 코드 디자인 방식을 따르는
프로그래밍 연습을 하는 게 더 낫습니다.

00:08:47.940 --> 00:08:50.020
이렇게 하면 여러분의 코드를
읽기 더 쉽기 때문이죠.

00:08:49.989 --> 00:08:53.389
이 코드를 적는 것이 끝나셨으면
다음 영상에서 계속해서 배워보도록 하죠.

