WEBVTT
Kind: captions
Language: en-US

00:00:00.008 --> 00:00:00.986
Okay Katherine.

00:00:00.986 --> 00:00:02.175
&gt;&gt; Mm-hm.
&gt;&gt; We hit the plus sign.

00:00:02.175 --> 00:00:05.209
[SOUND] And the number of cups of
coffee goes up from two to three.

00:00:05.209 --> 00:00:06.585
&gt;&gt; Okay.
&gt;&gt; But we keep hitting the plus sign.

00:00:06.585 --> 00:00:07.709
[SOUND] Again.

00:00:07.709 --> 00:00:08.669
[SOUND] And again.

00:00:08.669 --> 00:00:13.043
[SOUND] And the number of cups of coffee
just stays at two, it's not going up.

00:00:13.043 --> 00:00:16.554
&gt;&gt; Okay, well I think it's because
we're missing one concept, and

00:00:16.554 --> 00:00:18.260
that is variable scope.

00:00:18.260 --> 00:00:19.020
&gt;&gt; Variable scope?

00:00:19.020 --> 00:00:19.520
&gt;&gt; Yeah.

00:00:19.520 --> 00:00:20.640
&gt;&gt; Care to explain?

00:00:20.640 --> 00:00:23.230
&gt;&gt; Variable scope means that when
a variable is declared in a method,

00:00:23.230 --> 00:00:25.748
it can be only used in
the scope of that method.

00:00:25.748 --> 00:00:27.220
&gt;&gt; [SOUND]
&gt;&gt; Pay attention.

00:00:27.220 --> 00:00:27.780
&gt;&gt; Katherine.

00:00:27.780 --> 00:00:29.480
&gt;&gt; Yeah.
&gt;&gt; We're talking in gibberish.

00:00:29.480 --> 00:00:31.880
Someone needs to give students
in this class a medal for

00:00:31.880 --> 00:00:32.990
getting this far ahead.

00:00:32.990 --> 00:00:35.140
&gt;&gt; Okay.
&gt;&gt; Let's slow down and explain clearly.

00:00:35.140 --> 00:00:36.305
&gt;&gt; Sorry.
Okay, I can explain.

00:00:36.305 --> 00:00:37.955
&gt;&gt; Okay, so we hit the plus button.

00:00:37.955 --> 00:00:39.540
&gt;&gt; Mm-hm.
&gt;&gt; And the increment method inside

00:00:39.540 --> 00:00:40.450
a code gets called.

00:00:40.450 --> 00:00:41.480
&gt;&gt; Yes.
&gt;&gt; And then what happens?

00:00:41.480 --> 00:00:43.300
&gt;&gt; Well,
we create the quantity variable.

00:00:43.300 --> 00:00:43.920
&gt;&gt; Right.

00:00:43.920 --> 00:00:45.309
&gt;&gt; It is initialized to value two.

00:00:45.309 --> 00:00:46.150
&gt;&gt; Right.
&gt;&gt; And we

00:00:46.150 --> 00:00:47.980
update it to three cups of coffee.

00:00:47.980 --> 00:00:51.470
&gt;&gt; And then when the increment
method ends, then what happens?

00:00:51.470 --> 00:00:53.165
&gt;&gt; Well,
then the variable gets destroyed.

00:00:53.165 --> 00:00:54.742
[SOUND]
&gt;&gt; Okay, so

00:00:54.742 --> 00:00:58.169
when I press the plus button again
[SOUND] the increment method gets called

00:00:58.169 --> 00:00:58.966
in our code-
&gt;&gt; And

00:00:58.966 --> 00:01:01.450
then we create a quantity variable.

00:01:01.450 --> 00:01:02.110
&gt;&gt; Oh, wow.

00:01:02.110 --> 00:01:03.220
Another one magically appeared.

00:01:03.220 --> 00:01:04.385
&gt;&gt; Yeah, a brand new one.

00:01:04.385 --> 00:01:06.160
&gt;&gt; Okay.
&gt;&gt; And it's initialized to two, and

00:01:06.160 --> 00:01:07.550
then we update it to three.

00:01:07.550 --> 00:01:10.700
&gt;&gt; And then the increment method
ends again, and then what happens?

00:01:10.700 --> 00:01:11.955
&gt;&gt; The variable gets destroyed.

00:01:11.955 --> 00:01:15.462
[SOUND] What we really
need is a global variable.

00:01:15.462 --> 00:01:16.250
&gt;&gt; Oh, yeah.

00:01:16.250 --> 00:01:20.630
A variable that can be accessed by any,
and all, pieces of code inside our app.

00:01:20.630 --> 00:01:22.650
&gt;&gt; Exactly, like any method,
the increment method or

00:01:22.650 --> 00:01:23.935
the decrement method.

00:01:23.935 --> 00:01:24.730
&gt;&gt; Mm-hm.
&gt;&gt; So we create

00:01:24.730 --> 00:01:26.580
a global variable like this.

00:01:26.580 --> 00:01:28.750
It's still the quantity variable.

00:01:28.750 --> 00:01:29.855
&gt;&gt; Mm-hm.
&gt;&gt; But now it's global.

00:01:29.855 --> 00:01:33.020
&gt;&gt; Mm-hm.
&gt;&gt; So after a method finishes executing,

00:01:33.020 --> 00:01:34.590
it doesn't get destroyed.

00:01:34.590 --> 00:01:36.960
&gt;&gt; Okay,
let's use this in our code next.

00:01:36.960 --> 00:01:40.540
&gt;&gt; The problem in our app is that if
I hit the + button a bunch of times,

00:01:40.540 --> 00:01:43.010
the number of cups of coffee
never increases beyond 3.

00:01:43.010 --> 00:01:47.880
The reason is because the + button
triggers the increment method.

00:01:47.880 --> 00:01:50.910
In this method, we always create
a new quantity variable, and

00:01:50.910 --> 00:01:51.800
initialize it to 2.

00:01:51.800 --> 00:01:55.730
So when we update the quantity,
it's always set to 3.

00:01:55.730 --> 00:01:59.650
This method has no memory of the fact
that I already called it before

00:01:59.650 --> 00:02:04.050
by clicking on the + button, and that
I'm already displaying 3 cups of coffee.

00:02:04.050 --> 00:02:06.310
It has no idea that I want 4 cups now.

00:02:06.310 --> 00:02:10.512
In the old code, we declared a local
variable for quantity in the increment

00:02:10.512 --> 00:02:14.890
method and a local variable for
quantity in the decrement method.

00:02:14.890 --> 00:02:18.760
The reason why we can declare
a variable with the same name twice is

00:02:18.760 --> 00:02:20.690
because they are in
different variable scopes.

00:02:21.950 --> 00:02:24.920
This is the scope of the quantity
variable declared in

00:02:24.920 --> 00:02:26.380
the increment method.

00:02:26.380 --> 00:02:30.100
Within these bounds we can refer to
the quantity and update the quantity.

00:02:30.100 --> 00:02:31.463
But outside of these bounds,

00:02:31.463 --> 00:02:34.770
other methods would not know
about this quantity variable.

00:02:34.770 --> 00:02:37.790
You would get an unresolved
symbol error because

00:02:37.790 --> 00:02:40.170
other methods wouldn't
know about this variable.

00:02:41.190 --> 00:02:43.660
Similarly, this is
the variable scope for

00:02:43.660 --> 00:02:47.150
the local quantity variable
declared in the decrement method.

00:02:47.150 --> 00:02:50.770
Within this method, you can display the
variable and update the variable, but

00:02:50.770 --> 00:02:54.690
beyond the bounds of this scope,
you can't reference it.

00:02:54.690 --> 00:02:57.170
In the updated code
with a global variable,

00:02:57.170 --> 00:02:58.790
this is what it would look like.

00:02:58.790 --> 00:03:01.920
Instead of declaring the quantity
variable in the increment method,

00:03:01.920 --> 00:03:05.820
we've pulled it out to be declared
at the top of the main activity.

00:03:05.820 --> 00:03:09.540
It's declared within the opening and
closing braces of the main activity.

00:03:09.540 --> 00:03:14.150
So anything inside the main activity
will know about the quantity variable.

00:03:14.150 --> 00:03:18.055
This is the variable scope for
this global quantity variable.

00:03:18.055 --> 00:03:20.700
All the methods and
other variables in the main activity

00:03:20.700 --> 00:03:24.430
can now refer to the quantity,
and also update it.

00:03:24.430 --> 00:03:28.300
So the increment method updates the
quantity variable, and also displays it.

00:03:28.300 --> 00:03:32.330
And the decrement method also updates
the quantity and displays it, and

00:03:32.330 --> 00:03:35.950
the quantity always refers back
to the global variable here.

00:03:35.950 --> 00:03:39.860
The advantage of pulling it out into
a single global variable is now we have

00:03:39.860 --> 00:03:44.130
a single source of truth for
how many cups of coffee the user wants.

00:03:44.130 --> 00:03:47.100
Even if we've increased the number
of coffees a bunch of times,

00:03:47.100 --> 00:03:49.280
then if we decrease
the number of coffees,

00:03:49.280 --> 00:03:52.520
then it'll just use the last
known value of the quantity.

00:03:52.520 --> 00:03:55.890
Before it was weird that we had two
quantity variables, because those

00:03:55.890 --> 00:04:00.770
two variables could get out of sync, and
the user ends up only seeing one value.

00:04:00.770 --> 00:04:03.990
So it makes sense to have
one single source of truth,

00:04:03.990 --> 00:04:07.440
a global variable to keep track
of the number of coffees ordered.

00:04:07.440 --> 00:04:10.910
You might wonder why we don't just make
everything be a global variable and

00:04:10.910 --> 00:04:12.780
have it solve all our problems.

00:04:12.780 --> 00:04:17.040
You really don't want to make a variable
global unless there's a real need

00:04:17.040 --> 00:04:21.060
that other things in the main activity
need to reference that variable for.

00:04:21.060 --> 00:04:24.770
If you only need to use a method
within the context of a single method,

00:04:24.770 --> 00:04:26.750
you should just keep
it a local variable.

00:04:26.750 --> 00:04:28.600
It's sort of like having a secret.

00:04:28.600 --> 00:04:31.705
You only tell people on
a need to know basis.

00:04:31.705 --> 00:04:34.475
Similarly, you only want
to reveal variables

00:04:34.475 --> 00:04:38.045
that other people absolutely must know
about in order for the app to work.

00:04:39.275 --> 00:04:41.615
In the MainActivity in
the increment method,

00:04:41.615 --> 00:04:44.879
I'm going to copy this line of code
that declares the quantity variable.

00:04:46.270 --> 00:04:50.320
I just hit Cmd+X, or it's Ctrl+X to cut.

00:04:50.320 --> 00:04:54.520
And then at the top of the main
activity class, I'm going to paste it.

00:04:54.520 --> 00:04:58.610
This will be pasted right after
the opening breaks of the main activity.

00:04:58.610 --> 00:05:01.880
Notice that it is outside
the braces of other methods.

00:05:02.960 --> 00:05:05.310
Otherwise, if it was inside
the braces of a method,

00:05:05.310 --> 00:05:07.890
it would be considered a local variable.

00:05:07.890 --> 00:05:11.580
Quantity is now a global variable
within the MainActivity class.

00:05:11.580 --> 00:05:14.122
We'll learn more about
classes in the next lesson.

00:05:14.122 --> 00:05:18.800
The MainActivity is a class that
contains methods and variables.

00:05:18.800 --> 00:05:23.130
Now, any method in the MainActivity
can refer to this quantity variable.

00:05:23.130 --> 00:05:27.790
So this increment method just updates
the quantity and displays it.

00:05:27.790 --> 00:05:31.240
Notice that a global variable has a
purple font color for the variable name.

00:05:32.350 --> 00:05:35.940
If it's a local variable, the font
color is black for the variable name.

00:05:35.940 --> 00:05:38.960
So that's how you can tell
the difference between local and

00:05:38.960 --> 00:05:40.330
global variables.

00:05:40.330 --> 00:05:43.580
Speaking of local variables, we want
to get rid of this local variable in

00:05:43.580 --> 00:05:47.000
the decrement method, because we want
to use the global quantity variable.

00:05:48.390 --> 00:05:53.120
The variable name in these methods must
match the global variable name, exactly.

00:05:53.120 --> 00:05:56.080
If I said quantities here,
it would give an error because

00:05:56.080 --> 00:05:59.530
quantities is not defined as a local or
a global variable anywhere.

00:06:01.030 --> 00:06:02.670
And I'll undo that so
that it works again.

00:06:03.700 --> 00:06:06.150
If I run the app,
let's see what happens.

00:06:06.150 --> 00:06:08.470
The app starts off at a quantity of 2.

00:06:08.470 --> 00:06:11.800
If I hit the + button,
it actually increases.

00:06:11.800 --> 00:06:14.470
If I hit the- button,
it actually decreases.

00:06:14.470 --> 00:06:15.540
That's pretty awesome.

00:06:15.540 --> 00:06:18.620
We've succeeded in building
our quantity picker.

00:06:18.620 --> 00:06:23.000
Now, I want you to be able to build this
on your phone so you can increase it or

00:06:23.000 --> 00:06:26.730
decrease it as much as you
want to your heart's desire.

00:06:26.730 --> 00:06:30.960
We've included a link to the
MainActivity code for you to reference.

00:06:30.960 --> 00:06:34.170
I'd rather have you type it out
yourself by following this video

00:06:34.170 --> 00:06:36.520
instead of copying and pasting the code.

00:06:36.520 --> 00:06:39.470
That way, you'll be able to create
global variables on your own

00:06:39.470 --> 00:06:39.990
in the future.

00:06:41.030 --> 00:06:42.290
I'm going to attach the debugger so

00:06:42.290 --> 00:06:45.120
we can see carefully what's happening
with the quantity variable.

00:06:45.120 --> 00:06:48.705
I'm going to add breakpoints in
the increment and decrement methods and

00:06:48.705 --> 00:06:50.890
then run the debugger.

00:06:50.890 --> 00:06:54.270
When I hit the + button,
then this breakpoint triggers.

00:06:54.270 --> 00:06:56.720
Before this line of
code has even executed,

00:06:56.720 --> 00:07:00.340
we see that the global quantity
variable already exists with a value

00:07:00.340 --> 00:07:03.320
of 2 because of this
line of code up here.

00:07:03.320 --> 00:07:06.910
If I set to the next line, then this
line has finished executing and

00:07:06.910 --> 00:07:09.640
we've increased the quantity up to 3.

00:07:09.640 --> 00:07:12.910
I can hit resume so
that the app updates to a quantity of 3.

00:07:12.910 --> 00:07:17.360
If I hit the + button again, then before
I've even executed this line of code,

00:07:17.360 --> 00:07:21.310
we already have the global quantity
variable set to a value of 3.

00:07:21.310 --> 00:07:24.750
That was the last known quantity we
had before, and it sill remembers it.

00:07:25.940 --> 00:07:27.770
If i increase the quantity by 1,

00:07:27.770 --> 00:07:30.610
then the global quantity
variable has a variable of 4 now.

00:07:30.610 --> 00:07:32.755
I can hit resume to
update the screen with 4.

00:07:33.850 --> 00:07:37.390
Now, we can see that every time
the increment method is called ,we can

00:07:37.390 --> 00:07:41.990
actually continue to build off
of the existing quantity value.

00:07:41.990 --> 00:07:44.840
Let's see how it interacts
with the decrement method.

00:07:44.840 --> 00:07:48.160
If I hit the- button,
then this breakpoint triggers.

00:07:48.160 --> 00:07:50.630
The global quantity
variable has a value of 4,

00:07:50.630 --> 00:07:52.970
which is what we last left off with.

00:07:52.970 --> 00:07:57.950
If I decrease the quantity by 1 than
it goes down to 3 cups of coffee.

00:07:57.950 --> 00:08:01.720
And I can display that on the screen and
it changes to 3.

00:08:01.720 --> 00:08:05.740
With a single global variable for
quantity, the increment and

00:08:05.740 --> 00:08:07.990
decrement methods can now increase or

00:08:07.990 --> 00:08:12.190
decrease the number of coffees by 1
based on the latest value of quantity.

00:08:13.560 --> 00:08:15.180
Now, it's your turn, go ahead and

00:08:15.180 --> 00:08:18.420
replace the 2 local variables
with 1 global variable.

00:08:18.420 --> 00:08:21.560
Then, use a debugger to verify that
the quantity variable is actually

00:08:21.560 --> 00:08:23.480
updating as expected.

00:08:23.480 --> 00:08:27.420
Once your quantity picker works,
go ahead and do a little happy dance.

00:08:27.420 --> 00:08:30.640
And then you can try to
experiment a little bit.

00:08:30.640 --> 00:08:33.445
What happens if you have a different
initial quantity value, like 0?

00:08:34.480 --> 00:08:37.710
Or try doubling the quantity each
time the + button is pressed.

00:08:37.710 --> 00:08:41.460
Or halving the quantity each
time the- button is pressed.

00:08:41.460 --> 00:08:44.760
Feel free to experiment with
whatever you're curious about.

00:08:44.760 --> 00:08:47.850
If you ever wondered,
what would happen if I do this or that?

00:08:47.850 --> 00:08:50.060
Those are sometimes some of
the best learning moments,

00:08:50.060 --> 00:08:51.120
because they're unexpected.

00:08:52.530 --> 00:08:54.650
When you're done check
these boxes to continue.

