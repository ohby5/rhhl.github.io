WEBVTT
Kind: captions
Language: zh-CN

00:00:00.450 --> 00:00:03.860
在这段视频中我们将学习关于更新变量的知识

00:00:03.860 --> 00:00:06.760
运用到 Just-Java 应用中

00:00:06.760 --> 00:00:11.210
一旦建立了一个变量我们就可以使用赋值运算符修改它的值

00:00:11.210 --> 00:00:14.460
在之前我们创建变量时已经学到了

00:00:14.460 --> 00:00:19.270
格式是把变量名放在左边 接着是等号

00:00:19.270 --> 00:00:21.130
然后是一个新的值

00:00:21.130 --> 00:00:24.650
这条语句也和其他一样以分号结束

00:00:24.650 --> 00:00:25.930
这一行表示

00:00:25.930 --> 00:00:29.710
我们把3这个新值赋值给 quantity 变量

00:00:30.800 --> 00:00:34.770
还是使用盒子做比喻 int quantity =2； 创建了新的

00:00:34.770 --> 00:00:37.600
名为 quantity 的变量并把2放进去了

00:00:38.650 --> 00:00:44.000
当我们说 quantity=3； 我们将一个新值3放入变量

00:00:44.000 --> 00:00:45.110
同时拿出旧值

00:00:45.110 --> 00:00:47.770
因为变量一次只能容纳一个值

00:00:48.840 --> 00:00:50.080
当我们说 quantity=4；

00:00:50.080 --> 00:00:53.730
这时我们将一个新值4放进变量

00:00:53.730 --> 00:00:56.890
把之前的3拿出来

00:00:56.890 --> 00:01:01.330
之后当我们说 quantity=5； 我们为变量定义了新值

00:01:01.330 --> 00:01:04.790
注意我们只需要指定一次变量的数据类型

00:01:04.790 --> 00:01:06.825
在这里就是整型

00:01:06.825 --> 00:01:10.750
在后面的几行代码引用这个变量

00:01:10.750 --> 00:01:13.080
我们不需要指定数据类型

00:01:13.080 --> 00:01:15.590
如果我们在第二行又写 int

00:01:15.590 --> 00:01:19.560
这时电脑认为我们想创建另外的 quantity 变量

00:01:19.560 --> 00:01:23.890
然而 我们不允许在同一个地方创建两个名字相同的变量和

00:01:23.890 --> 00:01:26.690
同样的方法 这可能报错

00:01:26.690 --> 00:01:30.490
所以当我们声明一个变量 你需要指定数据类型

00:01:30.490 --> 00:01:33.590
当你更新它 你不需要指定数据类型

00:01:33.590 --> 00:01:36.790
现在我要打开 MainActivit y的Java文件并修改

00:01:36.790 --> 00:01:41.120
increment 方法来适应更新变量的方法

00:01:41.120 --> 00:01:43.870
当+按钮被点击就会触发这个方法 并且

00:01:43.870 --> 00:01:47.710
我要把 quantity 变量初始化为2

00:01:47.710 --> 00:01:52.020
之后我讲加一行代码来更新 quantity 变量为3

00:01:52.020 --> 00:01:55.310
之后我们在屏幕上演示最终 quantity 变量

00:01:55.310 --> 00:01:56.690
当我们在设备上运行它

00:01:56.690 --> 00:02:00.630
如果我点击+按钮 它更新 quantity 为3

00:02:00.630 --> 00:02:04.610
这是因为最终值 quantity 变量为3

00:02:04.610 --> 00:02:07.530
当我们想要在屏幕上演示时

00:02:07.530 --> 00:02:11.020
我们怎么知道应用不是直接跳到将值设置成3这一行呢？

00:02:11.020 --> 00:02:14.360
好的 我们可以使用前面介绍的调试工具

00:02:14.360 --> 00:02:16.920
来检查 quantity 变量在每一行的值

00:02:16.920 --> 00:02:20.390
让我们在 increment 方法的第一行添加一个断点

00:02:20.390 --> 00:02:22.880
然后我以调试模式运行应用

00:02:22.880 --> 00:02:26.660
好的 Android Studio 说debugger(调试器)已连接好

00:02:26.660 --> 00:02:29.510
我可以点击这个 Debug 选项卡来打开Debug调试窗口

00:02:29.510 --> 00:02:33.660
现在当我点击+按钮 它触发 increment 方法

00:02:33.660 --> 00:02:35.190
25行的断点

00:02:35.190 --> 00:02:38.080
此时第一行已经被执行 所以

00:02:38.080 --> 00:02:40.700
我们已经创建了值为2的 quantity 变量

00:02:40.700 --> 00:02:42.620
如果我们跳到下一行

00:02:42.620 --> 00:02:45.640
这时 quantity=3 ;就已经被执行 并且

00:02:45.640 --> 00:02:48.750
我们的却看到 quantity 变量已经变为3了

00:02:48.750 --> 00:02:50.890
这时应该把它显示到屏幕上了

00:02:50.890 --> 00:02:53.020
我们只是点击 Resume 继续运行应用

00:02:53.020 --> 00:02:57.850
然后可以看到屏幕上的值已经变为3了

00:02:57.850 --> 00:03:01.420
我将给你演示更多的例子关于更新 quantity 变量

00:03:01.420 --> 00:03:04.350
尽管从应用功能的角度来看

00:03:04.350 --> 00:03:08.040
点击+按钮增加不止一杯咖啡

00:03:08.040 --> 00:03:09.690
没有多大意义

00:03:09.690 --> 00:03:13.370
但从代码角度看如果你愿意 你可以添加几行

00:03:13.370 --> 00:03:15.819
代码来多次更新变量

00:03:17.010 --> 00:03:19.260
然后以调试模式再次运行应用

00:03:19.260 --> 00:03:23.000
如果我点击+按钮 断点就被触发

00:03:23.000 --> 00:03:26.810
如果我跳到下一行 然后第一行已经执行完了

00:03:26.810 --> 00:03:30.320
我们已经创建了一个初始值为2的 quantity 变量

00:03:30.320 --> 00:03:33.910
我们继续到下一行 quantity 更新为3

00:03:33.910 --> 00:03:38.100
下一步 quantity 变量变成4然后5

00:03:39.350 --> 00:03:42.110
如果我点击 Resume继续执行

00:03:42.110 --> 00:03:45.845
屏幕最终将更新显示 quantity 的最新值 也就是5

00:03:47.110 --> 00:03:50.790
现在请你在计算机上修改 MainActivity 中的 increment 方法

00:03:52.350 --> 00:03:54.080
然后使用debugger(调试器)逐步执行

00:03:54.080 --> 00:03:58.300
来验证 quantity 变量被如预期更新

00:03:58.300 --> 00:04:01.490
然后对 decrement 方法重复上面的步骤

00:04:01.490 --> 00:04:04.540
在那个方法里 将 quantity 变量初始化为2

00:04:04.540 --> 00:04:08.900
然后更新它从而减少到一杯咖啡

00:04:08.900 --> 00:04:11.080
当你在设备上运行时 应用打开了

00:04:11.080 --> 00:04:13.250
开始的数量是2

00:04:13.250 --> 00:04:16.980
如果你点击—按钮 这时数量减少为1

00:04:16.980 --> 00:04:20.320
如果你点击+按钮它变为3

00:04:20.320 --> 00:04:23.620
这块的数量选择器不如我们想的那样 不过

00:04:23.620 --> 00:04:25.485
我们只是在一个时间内学习了一个概念

00:04:25.485 --> 00:04:28.230
慢慢构建正确的功能

00:04:28.230 --> 00:04:31.170
现在你可以关联任意的行为

00:04:31.170 --> 00:04:34.600
为 ORDER 按钮 用为最终也要改变

00:04:34.600 --> 00:04:36.600
当我们做完这些 请勾选复选框

