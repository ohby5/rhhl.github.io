WEBVTT
Kind: captions
Language: zh-TW

00:00:00.008 --> 00:00:00.980
凱瑟琳。

00:00:00.980 --> 00:00:01.580
&gt;&gt; 嗯。
&gt;&gt; 所以，

00:00:01.580 --> 00:00:03.620
當我們在程式按加鍵，

00:00:03.620 --> 00:00:05.380
咖啡的數量就會增加。

00:00:05.380 --> 00:00:07.320
&gt;&gt; 對，咖啡就會由兩杯增加到三杯。

00:00:07.320 --> 00:00:10.110
當我們再按加鍵會發生什麼？

00:00:10.110 --> 00:00:11.990
&gt;&gt; 那只會維持三杯。

00:00:11.990 --> 00:00:12.590
對。

00:00:12.590 --> 00:00:15.700
所以無論我們按多少次加鍵，

00:00:15.700 --> 00:00:18.360
咖啡數量只維持三杯。

00:00:18.360 --> 00:00:19.930
&gt;&gt; 對。
&gt;&gt; 為什麼？

00:00:19.930 --> 00:00:23.870
&gt;&gt; 我認為那是因為我們只更新編碼至三。

00:00:23.870 --> 00:00:25.200
而我們從沒有修正它。

00:00:25.200 --> 00:00:27.720
&gt;&gt; 對，那數字被寫死了。

00:00:27.720 --> 00:00:29.100
&gt;&gt; 對。
&gt;&gt; 你知道這令我想起什麼？

00:00:29.100 --> 00:00:30.040
&gt;&gt; 什麼？

00:00:30.040 --> 00:00:32.840
&gt;&gt; [笑]我大學電腦教授經常說。

00:00:32.840 --> 00:00:33.340
&gt;&gt; 然後呢？

00:00:34.410 --> 00:00:36.230
當你交你最後的企劃時。

00:00:36.230 --> 00:00:37.100
&gt;&gt; 然後呢？

00:00:37.100 --> 00:00:39.100
&gt;&gt; 拜託不要那個種數字。

00:00:39.100 --> 00:00:40.260
&gt;&gt; 等等，那種數字是什麼？

00:00:40.260 --> 00:00:41.730
&gt;&gt; 三是那種數字其中之一。

00:00:41.730 --> 00:00:43.930
&gt;&gt; 好吧。
&gt;&gt; 三是那種數字因為

00:00:43.930 --> 00:00:46.475
當我們心算時，而對電腦...

00:00:46.475 --> 00:00:48.115
&gt;&gt; 我們告訴了它正確答案。

00:00:48.115 --> 00:00:52.535
&gt;&gt; 對，所以讓電腦自行計算比較好。

00:00:52.535 --> 00:00:53.105
&gt;&gt; 等等。

00:00:53.105 --> 00:00:55.025
當你一提到計算。

00:00:55.025 --> 00:00:56.515
&gt;&gt; 嗯。
&gt;&gt; 我要開始寫些東西。

00:00:56.515 --> 00:00:57.565
&gt;&gt; 好。

00:00:57.565 --> 00:00:58.515
先寫下些偽代碼。

00:00:59.555 --> 00:01:01.895
先為這寫些偽代碼。

00:01:01.895 --> 00:01:04.595
假設我們已設立數量變數，並設其為二。

00:01:04.595 --> 00:01:07.575
當按下加鍵時，

00:01:07.575 --> 00:01:10.450
我們會將是二的數量變數,

00:01:10.450 --> 00:01:12.480
&gt;&gt; 加一使其變為三，

00:01:12.480 --> 00:01:16.550
然後儲存在數量變數為新數值。

00:01:16.550 --> 00:01:19.510
如果我們再按加鍵，我們會將現在的數量值三

00:01:19.510 --> 00:01:23.840
加一使其變成四。

00:01:23.840 --> 00:01:26.700
然後將其儲存在變數內，

00:01:26.700 --> 00:01:30.200
而這是其Java碼。

00:01:30.200 --> 00:01:32.310
我們先將一變數初始化。

00:01:32.310 --> 00:01:33.980
如果再按加鍵，

00:01:33.980 --> 00:01:36.890
那我們會將現有的數量值加一，

00:01:36.890 --> 00:01:39.990
然後將其儲存為新的數量值。

00:01:41.670 --> 00:01:45.160
當你看這些編碼時可在腦中想像那些箱子。

00:01:45.160 --> 00:01:47.850
儘管我們習慣由左至右地閱讀，

00:01:47.850 --> 00:01:50.960
我總是由等號的右邊開始。

00:01:51.970 --> 00:01:54.240
在此，我們有現時的數量值。

00:01:54.240 --> 00:01:58.100
數量值是二，然後加一使其變為三。

00:01:58.100 --> 00:02:02.090
然後我們將三儲在變數內。

00:02:02.090 --> 00:02:05.590
我們先前所學的表示式在右邊。

00:02:05.590 --> 00:02:08.850
表示式可由變數、符號、

00:02:08.850 --> 00:02:10.630
數值和其他組成。

00:02:10.630 --> 00:02:15.200
如果我們再按加鍵，我們就可使數量＝數量＋1。

00:02:15.200 --> 00:02:17.660
目前，數量值是三，

00:02:17.660 --> 00:02:20.680
加一使其變成四。

00:02:20.680 --> 00:02:23.970
然後我們將四儲在數量變數內為新數值。

00:02:25.320 --> 00:02:27.660
我們將其減成一個常見的模式，

00:02:27.660 --> 00:02:31.290
使每次按加鍵電腦都能重複。

00:02:31.290 --> 00:02:35.940
我們只需寫數量＝數量＋1，

00:02:35.940 --> 00:02:40.010
就不用重寫明確有幾杯咖啡數值的新代碼，

00:02:40.010 --> 00:02:44.200
然後可以繼續建立現有的數量值。

00:02:44.200 --> 00:02:46.060
這樣更有彈性。

00:02:46.060 --> 00:02:48.395
比方你想改變初始數值到三，

00:02:48.395 --> 00:02:51.595
那你不用改變其他編碼。

00:02:51.595 --> 00:02:55.675
因為無論最新數量值是什麼，我們都會用它。

00:02:55.675 --> 00:02:59.535
如果照舊方法做，我們想更新數量值至三，

00:02:59.535 --> 00:03:02.985
那當你按加鍵後，你要重新一段

00:03:02.985 --> 00:03:07.360
數值等於四的編碼並更新其數值至五。

00:03:07.360 --> 00:03:10.960
當我們每次更新數量到全新的確實數值，

00:03:10.960 --> 00:03:13.870
電腦很難得知它們之間的模式。

00:03:14.870 --> 00:03:18.680
如果我們依目前的數量變數更新數量，

00:03:18.680 --> 00:03:21.750
並可預測地為其增值，電腦

00:03:21.750 --> 00:03:25.090
就可在每次按加鍵時計算出答案。

00:03:25.090 --> 00:03:27.929
這方法更適合我們的訂購咖啡程式。

00:03:28.930 --> 00:03:30.440
每次按加鍵，

00:03:30.440 --> 00:03:33.590
我們能為現有數量值加一。

00:03:33.590 --> 00:03:37.330
在空格中練習

00:03:37.330 --> 00:03:38.860
寫每行的編碼。

00:03:38.860 --> 00:03:41.060
留意每個字母和符號。

00:03:42.120 --> 00:03:45.900
這是你第一次用變數更新變數，

00:03:45.900 --> 00:03:48.850
請確定你正確打出變數名字。

00:03:48.850 --> 00:03:52.190
完成時，在每行編碼執行後

00:03:52.190 --> 00:03:54.720
填好這代表目前數量值的列。

