WEBVTT
Kind: captions
Language: zh-CN

00:00:00.240 --> 00:00:02.680
这个问题没有唯一正确答案

00:00:02.680 --> 00:00:06.151
正确与否取决于它能不能帮你识别出

00:00:06.151 --> 00:00:09.245
应用的行为是否正确

00:00:09.245 --> 00:00:12.640
以下是我注意的一些地方

00:00:12.640 --> 00:00:15.990
在错误的应用行为中 当你点击 ORDER 按钮时

00:00:15.990 --> 00:00:19.990
quantity 每次都会变成相同的值 但这是不该发生的

00:00:19.990 --> 00:00:22.320
我还发现对于 quantity 的值来说

00:00:22.320 --> 00:00:25.010
对应的价格是正确的 但实际上价格应该是

00:00:25.010 --> 00:00:28.310
对应你最后选择的 quantity 的值

00:00:28.310 --> 00:00:31.570
再说一次 quantity 只与事实有关 它的值是不能变的

00:00:31.570 --> 00:00:34.230
我们去代码中看看为什么会发生这种状况

00:00:35.390 --> 00:00:39.320
在 activity_main.xml 布局文件中 ORDER 按钮是在这里声明的

00:00:39.320 --> 00:00:40.576
当点击 ORDER 按钮

00:00:40.576 --> 00:00:43.102
会调用 activity_main.xml 中的 submitOrder 方法

00:00:43.102 --> 00:00:47.890
在 MainActivity.java 文件中 submitOrder方法在这

00:00:47.890 --> 00:00:51.030
这段代码我们已经很久没有改变过了

00:00:51.030 --> 00:00:54.570
我们在里边声明了一个整型变量 并赋初值为5

00:00:54.570 --> 00:00:56.300
在屏幕上显示出来

00:00:56.300 --> 00:01:00.610
然后用咖啡杯数乘以5美元显示总价

00:01:00.610 --> 00:01:03.700
现在这些代码已经没什么意义了 因为我们要提交

00:01:03.700 --> 00:01:06.530
更新后的 quantity 值

00:01:06.530 --> 00:01:09.411
另一个问题是 我们创建了一个整型变量

00:01:09.411 --> 00:01:12.478
而我们已经有了一个全局变量 quantity

00:01:12.478 --> 00:01:13.747
用来实时保存咖啡的杯数

00:01:13.747 --> 00:01:18.026
在 MainActivity 类中我们已经有了一个全局变量

00:01:18.026 --> 00:01:22.520
所以该类内所有方法都可以使用 quantity 变量

00:01:22.520 --> 00:01:27.060
但是 在 submitOrder 方法中 我们又创建了一个局部 quantity 变量

00:01:27.060 --> 00:01:30.410
理论上 你可以声明一个和全局变量同名

00:01:30.410 --> 00:01:32.200
的局部变量

00:01:32.200 --> 00:01:34.812
这意味着在这个方法中

00:01:34.812 --> 00:01:38.581
局部变量声明之后 你在引用它时

00:01:38.581 --> 00:01:41.985
它就会指向值为5的局部变量 quantity

00:01:41.985 --> 00:01:44.396
而不是值为2的全局变量

00:01:44.396 --> 00:01:46.310
所以 display(quantity) 和

00:01:46.310 --> 00:01:51.500
displayPrice(quantity *5) 都会指向局部变量 quantity

00:01:51.500 --> 00:01:54.080
这是局部变量的作用域

00:01:54.080 --> 00:01:55.490
在作用域之外

00:01:55.490 --> 00:01:59.490
当你引用 quantity 时 它就指向全局变量

00:01:59.490 --> 00:02:00.330
想想看

00:02:00.330 --> 00:02:03.430
你每次都创建一个新的 quantity 并显示它

00:02:03.430 --> 00:02:07.040
当你提交订单时你会发现这种行为是没有意义的

00:02:07.040 --> 00:02:10.370
你真正应该做的是使用

00:02:10.370 --> 00:02:14.900
实时保存咖啡数的全局变量

00:02:14.900 --> 00:02:18.040
用全局变量计算咖啡总价

00:02:18.040 --> 00:02:22.070
为了修复代码我们不应该声明局部变量

00:02:22.070 --> 00:02:25.130
应该只使用这个全局变量 quantity

00:02:25.130 --> 00:02:28.550
也不应该在屏幕上更新 quantity

00:02:28.550 --> 00:02:31.270
+和—按钮会使屏幕更新

00:02:31.270 --> 00:02:33.520
出正确的 quantity 值

00:02:33.520 --> 00:02:37.570
我们还希望 submitOrder 按钮为我们更新出总价

00:02:37.570 --> 00:02:41.600
但现在我们要计算总价 quantity 乘以5作为总价

00:02:41.600 --> 00:02:43.990
使用全局变量 quantity

00:02:43.990 --> 00:02:47.720
为了达到刚刚我们提到的效果 我要更新一下代码

00:02:47.720 --> 00:02:50.860
注意 quantity 变成了紫色

00:02:50.860 --> 00:02:54.030
这表明我们正在使用 MainActivity 中的全局变量 quantity

00:02:54.030 --> 00:02:57.940
点击按钮后 会触发 submitOrder方法

00:02:57.940 --> 00:02:59.580
在屏幕上显示价格

00:02:59.580 --> 00:03:03.934
价格通过全局变量 quantity 乘以5得到

00:03:04.970 --> 00:03:06.670
看起来没错 我们在设备上运行一下

00:03:07.680 --> 00:03:09.530
现在是最终测试

00:03:09.530 --> 00:03:13.660
我们把 quantity 变成6 然后点击 Order 按钮

00:03:13.660 --> 00:03:14.510
没错 是30美元

00:03:14.510 --> 00:03:17.630
我们再试试其他数 以防这是一个巧合

00:03:17.630 --> 00:03:18.958
看起来是正确的 正确的

00:03:18.958 --> 00:03:22.600
成功了

00:03:22.600 --> 00:03:24.310
你刚刚修复了你的第一个 bug

00:03:24.310 --> 00:03:26.400
这项任务你干得不错

00:03:26.400 --> 00:03:28.970
我们的应用运行正常

00:03:28.970 --> 00:03:32.280
但我不得不承认 这个 UI 有点丑

00:03:32.280 --> 00:03:35.800
尤其是选择数量的这个 可以做的更好看一点

00:03:35.800 --> 00:03:36.740
接下来我们解决这个问题

