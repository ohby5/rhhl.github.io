WEBVTT
Kind: captions
Language: ja

00:00:00.670 --> 00:00:04.780
キャサリン アプリができてきたけど
大きな問題が１つあるよ

00:00:04.780 --> 00:00:06.150
何が問題なの？

00:00:06.150 --> 00:00:08.029
だって ２杯のコーヒーしか注文してないよ

00:00:08.029 --> 00:00:09.560
２杯のコーヒーでは だめなの？

00:00:09.560 --> 00:00:11.630
３杯は２杯よりいいし
４杯は３杯よりいいよ

00:00:11.630 --> 00:00:12.720
時にはもっと要るよ

00:00:12.720 --> 00:00:14.170
分かった もっとコーヒーが要るのね

00:00:14.170 --> 00:00:16.040
つまりコードを

00:00:16.040 --> 00:00:18.230
２の代わりに３というように変えるのね

00:00:18.230 --> 00:00:21.470
すると このコードの中で
コーヒーの数を変えることが必要だ

00:00:21.470 --> 00:00:25.620
こことここ

00:00:25.620 --> 00:00:28.810
じゃあ その後で僕と友達で
10 杯欲しくなったら？

00:00:28.810 --> 00:00:30.835
そんなに友達がいるの？

00:00:30.835 --> 00:00:33.580
じゃ何か別のものが必要だね

00:00:33.580 --> 00:00:34.810
よい解決策が必要

00:00:34.810 --> 00:00:37.770
じゃ 変数はどうかな？

00:00:37.770 --> 00:00:38.890
変数って？

00:00:38.890 --> 00:00:40.460
何か変わる物？

00:00:40.460 --> 00:00:42.310
そう変数は一定の値がない

00:00:42.310 --> 00:00:48.001
このような箱を変数と考えて
こんな感じ

00:00:48.001 --> 00:00:48.760
オーケー

00:00:48.760 --> 00:00:50.220
だからこれが変数

00:00:50.220 --> 00:00:52.420
箱で 値が中に入れられるの

00:00:52.420 --> 00:00:53.770
int だって

00:00:53.770 --> 00:00:55.520
int は整数の略よ

00:00:55.520 --> 00:00:58.490
わかった
整数 つまり数がこの箱に入れられるんだ

00:00:58.490 --> 00:00:59.170
そのとおり！

00:00:59.170 --> 00:01:00.740
名前を付けることもできるわ

00:01:00.740 --> 00:01:04.910
これを注文されたコーヒーの数としよう

00:01:04.910 --> 00:01:06.160
オーケー

00:01:07.020 --> 00:01:10.086
長い名前ね

00:01:10.086 --> 00:01:12.576
注文がやっと収まるくらいだよ

00:01:12.576 --> 00:01:13.770
オーケー

00:01:13.770 --> 00:01:17.260
これで２の値の代わりに

00:01:17.260 --> 00:01:19.600
この名前の変数をコードで参照できる

00:01:19.600 --> 00:01:20.580
オーケー

00:01:20.580 --> 00:01:23.440
後で更新することもできるわ

00:01:23.440 --> 00:01:24.850
じゃあ 値を中に入れましょう

00:01:24.850 --> 00:01:26.370
どうやって？

00:01:26.370 --> 00:01:29.584
ポスト・イットがあるよ

00:01:29.584 --> 00:01:31.440
どこから来たの？

00:01:31.440 --> 00:01:34.660
注文されたコーヒーの数を２としよう

00:01:34.660 --> 00:01:36.710
たった２杯だけ？

00:01:36.710 --> 00:01:40.834
僕に１杯
そして友達のキャサリンに１杯

00:01:40.834 --> 00:01:41.750
ありがとう

00:01:41.750 --> 00:01:46.620
numberOfCoffeesOrdered という
変数ができて

00:01:46.620 --> 00:01:48.120
それに２が入ってる

00:01:48.120 --> 00:01:50.260
これをコードに実装してみよう

00:01:50.260 --> 00:01:53.180
以前はリテラル値を使って

00:01:53.180 --> 00:01:55.840
コーヒーの注文数を示しました

00:01:55.840 --> 00:01:59.330
リテラルとは
２のような一定の値を意味します

00:01:59.330 --> 00:02:02.822
実は この５や２もリテラル値だけれど

00:02:02.822 --> 00:02:07.126
ここでは量のリテラルについて話します

00:02:07.126 --> 00:02:10.470
もし２杯のコーヒーを注文したとすると

00:02:10.470 --> 00:02:15.000
その値段を計算するには
２ × ５ １杯 ＄５ だからね

00:02:15.000 --> 00:02:19.550
紙コップを有料にしたかったら―

00:02:19.550 --> 00:02:23.540
マイカップなしで木を無駄にしてるから―
紙コップを $2 とすると

00:02:23.540 --> 00:02:26.830
２杯 × $２です

00:02:26.830 --> 00:02:30.320
リテラルを使うと
量の数を繰り返し使うから

00:02:30.320 --> 00:02:33.640
好ましくないですね

00:02:33.640 --> 00:02:34.560
一方

00:02:34.560 --> 00:02:39.200
コーヒー注文数に
変数を使用することもできます

00:02:39.200 --> 00:02:43.250
量を numberOfCoffees という
変数にして

00:02:43.250 --> 00:02:46.755
値段を計算すると
この変数名を使って

00:02:46.755 --> 00:02:50.520
numberOfCoffees × $ ５

00:02:50.520 --> 00:02:54.315
紙コップの値段を計算するにも
この変数名を使って

00:02:54.315 --> 00:02:58.190
numberOfCoffees × ＄２

00:02:58.190 --> 00:03:01.590
この２つの差は

00:03:01.590 --> 00:03:03.780
リテラル値の代わりに
変数を使っていること

00:03:03.780 --> 00:03:06.500
そして変数の値は

00:03:06.500 --> 00:03:10.490
実際にこの式の値を求める際に
置換されます

00:03:10.490 --> 00:03:12.330
だから 実際に値段を計算するとき

00:03:12.330 --> 00:03:15.740
５で掛ける前にこの値が何であるか
確認します

00:03:15.740 --> 00:03:19.210
変数を使う時に
１つ必要となるステップは

00:03:19.210 --> 00:03:20.570
まず始めに

00:03:20.570 --> 00:03:25.370
変数 numberOfCoffees と
その初期値を設定すること

00:03:25.370 --> 00:03:29.760
この場合は初期値を２
これもリテラルです

00:03:29.760 --> 00:03:33.970
でも 今回はリテラル値を複数の場所ではなく
一カ所だけで使うことになります

00:03:33.970 --> 00:03:36.010
最終結果は同じになります

00:03:36.010 --> 00:03:38.730
なぜなら numberOfCoffees の値は
２に置換されるから

00:03:38.730 --> 00:03:41.860
だから量は２のままで
価格は＄10 のまま

00:03:41.860 --> 00:03:44.310
紙コップの価格は４のままになります

00:03:44.310 --> 00:03:47.270
このアプローチの真の利点は

00:03:47.270 --> 00:03:50.190
変数の値をいつでも変更できること

00:03:50.190 --> 00:03:53.300
numberOfCoffees を
３にしたければ

00:03:53.300 --> 00:03:55.430
この１カ所を３に変えればいいのです

00:03:55.430 --> 00:03:57.880
そして後はそのままで正確です

00:03:57.880 --> 00:04:00.080
量はここでも numberOfCoffees で

00:04:00.080 --> 00:04:02.080
今度は値が３になっています

00:04:02.080 --> 00:04:04.475
価格は numberOfCoffees の５倍で

00:04:04.475 --> 00:04:06.653
その値は３ × ５

00:04:06.653 --> 00:04:10.543
紙コップの料金は
numberOfCoffees × ２で

00:04:10.543 --> 00:04:12.834
これは３ × ２

00:04:12.834 --> 00:04:14.069
もし リテラルを使っていると

00:04:14.069 --> 00:04:16.555
ここで量を３に
変えなければならないですね

00:04:16.555 --> 00:04:19.625
そして価格の計算を
３ × ５に更新し

00:04:19.625 --> 00:04:22.105
紙コップの料金も３ × ２に変更します

00:04:22.105 --> 00:04:24.125
変数を使うと

00:04:24.125 --> 00:04:27.390
毎回 特定の数字を参照しなくて済みます

00:04:27.390 --> 00:04:29.390
変数名を参照し

00:04:29.390 --> 00:04:32.520
自動的に最新の値を得ることができます

00:04:33.730 --> 00:04:37.120
変数を作成して利用する
実際のコードを

00:04:37.120 --> 00:04:39.370
もっと詳しく見てみましょう

00:04:39.370 --> 00:04:43.720
変数を作成するには
int numberOfCoffees = 2と書きます

00:04:43.720 --> 00:04:48.410
これで numberOfCoffees という名の
変数が得られます

00:04:48.410 --> 00:04:51.990
この変数の箱に初期値２を入れます

00:04:51.990 --> 00:04:56.740
これらの次の２つの行は
最初の行で作った変数を使用し

00:04:56.740 --> 00:04:59.000
画面を更新します

00:04:59.000 --> 00:05:03.040
コーヒーの数を表示するのに
この変数を参照し

00:05:03.040 --> 00:05:05.720
その中の値を確認します
ここでは２です

00:05:05.720 --> 00:05:07.650
ここで２を示します

00:05:07.650 --> 00:05:09.330
価格を表示するには

00:05:09.330 --> 00:05:14.360
変数 numberOfCoffees の値を見て
これは 2

00:05:14.360 --> 00:05:18.170
そして２ × ５＝１０
だから価格は＄１０です

00:05:19.310 --> 00:05:20.947
このコードは簡単に変えられるので

00:05:20.947 --> 00:05:23.650
numberOfCoffees を
２の代わりに３にします

00:05:23.650 --> 00:05:27.570
変数を示す箱 
numberOfCoffees には

00:05:27.570 --> 00:05:31.300
初期値として３を入れます

00:05:31.300 --> 00:05:33.160
次の２つの行はかわりません

00:05:33.160 --> 00:05:34.710
なぜなら変数名を使っているからです

00:05:35.710 --> 00:05:38.460
numberOfCoffees を
表示するように呼ぶと

00:05:38.460 --> 00:05:40.930
この変数の値は３です

00:05:40.930 --> 00:05:42.325
だから量は３が示されます

00:05:43.600 --> 00:05:48.260
価格を示すには
numberOfCoffees つまり３を見て

00:05:48.260 --> 00:05:51.070
それを５倍して
$15 が得られます

00:05:51.070 --> 00:05:55.480
これは Android Studio の中の
コードの変更です

00:05:56.700 --> 00:06:00.690
現在はリテラル値である２が
量として使われています

00:06:00.690 --> 00:06:06.608
代わりに変数を作るために
int numberOfCoffees ＝2 を書きます

00:06:07.840 --> 00:06:10.740
これで２の値を持つ変数ができます

00:06:10.740 --> 00:06:14.640
ところで このテキストは灰色で表示され
コーヒーの変数が参照されていない

00:06:14.640 --> 00:06:19.580
まだ使われていないことを示します
では使いましょう

00:06:19.580 --> 00:06:21.430
リテラル値２の代わりに

00:06:21.430 --> 00:06:24.140
変数名に変更します

00:06:24.140 --> 00:06:28.140
自動補完が出るので
Enter を押すと

00:06:28.140 --> 00:06:29.940
自動的に書き込んでくれます

00:06:29.940 --> 00:06:33.180
そしてこの変数名は少なくとも１カ所で
使用されたので

00:06:33.180 --> 00:06:34.730
灰色で無くなります

00:06:34.730 --> 00:06:37.180
displayPrice でも
同じことができます

00:06:37.180 --> 00:06:40.140
リテラル値２を使う代わりに

00:06:40.140 --> 00:06:44.820
変数 numberOfCoffees に書き換えます
Enter で自動補完します

00:06:44.820 --> 00:06:48.630
技術的には１杯の値段である
$5 の変数を作ることもできます

00:06:48.630 --> 00:06:50.880
しかし これは一カ所でしか使われないので

00:06:50.880 --> 00:06:53.360
リテラル値を使っておきましょう

00:06:53.360 --> 00:06:56.100
このコードを保存して
デバイスで実行してみましょう

00:06:56.100 --> 00:06:57.830
このようにデバイスに表示されます

00:06:57.830 --> 00:07:00.800
Order を押すと
量は２で価格は $10.00 です

00:07:00.800 --> 00:07:06.500
これは前と同じ動作ですが
このコードはもっと堅固です

00:07:06.500 --> 00:07:10.620
堅固というのは
将来エラーが出る可能性が少ないことです

00:07:10.620 --> 00:07:13.020
たとえば誰かがこのコードを変えようとし

00:07:13.020 --> 00:07:16.400
この量を複数の場所で使うとすると

00:07:16.400 --> 00:07:20.840
いろんな場所でこの２を
置き換える必要があります

00:07:20.840 --> 00:07:24.200
かわりに
変数 numberOfCoffees を使うと

00:07:24.200 --> 00:07:28.210
一カ所を変えるだけで
すべて自動的に更新されます

00:07:28.210 --> 00:07:31.330
そうすればコードの中で
最新のコーヒー注文数が必要な行を

00:07:31.330 --> 00:07:34.060
見落とすことがありません

00:07:34.060 --> 00:07:36.040
一カ所変えるだけで大丈夫です

00:07:37.290 --> 00:07:39.570
では これを
Android Studioでやってみる前に

00:07:39.570 --> 00:07:42.780
このクイズでまず練習しましょう

00:07:42.780 --> 00:07:46.620
この行のコードを以下に入力しましょう

00:07:46.620 --> 00:07:49.790
この行のコードは
新しい整数の変数を作成し

00:07:49.790 --> 00:07:53.330
この２行はこの変数の値を使います

00:07:53.330 --> 00:07:56.110
これを最初に練習する理由は

00:07:56.110 --> 00:07:59.220
タイプする文字1つ１つに気を配ることです

00:07:59.220 --> 00:08:02.310
そうしないと文字を間違え
Android Studioでエラーが出るでしょう

00:08:02.310 --> 00:08:04.790
エラーメッセージを
読みとるのは難しいかもしれません

00:08:04.790 --> 00:08:07.840
では見た通りに書き込みましょう

00:08:07.840 --> 00:08:11.190
これはそれぞれの文字について

00:08:11.190 --> 00:08:14.850
大文字や小文字であるとか

00:08:14.850 --> 00:08:16.550
スペースの有無に気を配る練習です

00:08:16.550 --> 00:08:21.300
変数の作成や利用につれて
Java の規則にも慣れてくるでしょう

00:08:21.300 --> 00:08:24.100
以前に習ったように

00:08:24.100 --> 00:08:27.140
Java のコードステートメントの
終わりにはセミコロンを打ちます

00:08:27.140 --> 00:08:29.230
これを正確にしないと
例えば

00:08:29.230 --> 00:08:32.200
変数名で Java のエラーが出ます

00:08:32.200 --> 00:08:35.580
しかし他のことは どちらかというと伝統で
ベストプラクティスです

00:08:35.580 --> 00:08:40.090
たとえばこのような演算子の前に
スペースを置くことですね

00:08:40.090 --> 00:08:43.690
このスペースを置かなくても
明らかなエラーは出ませんが

00:08:43.690 --> 00:08:47.940
コードの慣行スタイルとして
こうする習慣を持つ方がいいです

00:08:47.940 --> 00:08:50.020
コードが読みやすいですからね

00:08:50.070 --> 00:08:55.570
これを入力し終えたら
次のビデオに進みましょう

