WEBVTT
Kind: captions
Language: ja

00:00:00.430 --> 00:00:03.250
アプリのクラッシュとは異常終了し―

00:00:03.250 --> 00:00:05.880
‟このアプリは停止しました”という
メッセ―ジが出てしまうことです

00:00:07.160 --> 00:00:10.320
デベロッパーたちには一日に何度も起こることです

00:00:10.320 --> 00:00:11.990
たとえ経験豊富な人でも

00:00:11.990 --> 00:00:16.400
コードの入力ミスや小さなミスが原因だったり

00:00:16.400 --> 00:00:20.250
ある機能のコードの書き方を
間違って理解していたことが―

00:00:20.250 --> 00:00:23.010
原因である場合もあります

00:00:23.010 --> 00:00:26.910
パニックに陥っている一方で頭の中では冷静に

00:00:26.910 --> 00:00:30.200
アプリのデバッグをしろ！と考えているはずです

00:00:30.200 --> 00:00:33.900
このビデオではクラッシュした時のデバッグを学びます

00:00:33.900 --> 00:00:38.910
デバッグとはアプリのバグやエラーを特定し修正することです

00:00:38.910 --> 00:00:42.050
Javaのシンタックスエラーのように
明らかなエラーであれば―

00:00:42.050 --> 00:00:44.660
Android studioが見つけ出し

00:00:44.660 --> 00:00:48.870
携帯にアプリをインストールする前に
赤いエラーを表示させます

00:00:48.870 --> 00:00:52.480
これはコンパイル時のエラーと呼ばれます

00:00:52.480 --> 00:00:54.670
インストールしようと思っても
アプリの作成をさせないからです

00:00:55.170 --> 00:00:58.690
コンパイル時のエラーを見てみたければ

00:00:58.690 --> 00:01:02.140
カッコやセミコロンを消せば
エラーが表示されます

00:01:03.370 --> 00:01:07.710
レッスン１でXMLのエラーをわざと出したときと似ています

00:01:07.710 --> 00:01:10.760
エラーメッセージを読んでから変更を取り消しました

00:01:11.810 --> 00:01:15.700
他にもエラーの原因となりえるのは
この開き波カッコを消すとエラーが出ます

00:01:15.700 --> 00:01:20.220
閉じ波カッコを忘れてもエラーになります

00:01:21.390 --> 00:01:25.140
アプリを使い始めてからでないとエラーが出ないこともあります

00:01:25.140 --> 00:01:28.270
これは実行している時に起きるので
実行時エラーと呼ばれます

00:01:29.370 --> 00:01:31.940
では わざとアプリをクラッシュさせて

00:01:31.940 --> 00:01:35.390
解決方法を探りましょう
そうすれば本当にクラッシュした時に

00:01:35.390 --> 00:01:37.510
自分で原因を探れるからです

00:01:37.510 --> 00:01:41.330
これは生徒が実際に直面したクラッシュに基づいています

00:01:41.330 --> 00:01:43.520
初心者には起こりやすいようです

00:01:43.520 --> 00:01:45.410
まず全ステップを紹介してますので

00:01:45.410 --> 00:01:46.849
後で自分で試してみてください

00:01:47.990 --> 00:01:50.450
故意的にクラッシュを起こすため

00:01:50.450 --> 00:01:53.180
メインアクティビティのjavaファイルを書き換えます

00:01:53.500 --> 00:01:58.090
メソッドの名前をsubmitOrdersに変えます

00:01:58.090 --> 00:02:00.070
デバイスで実行してみます

00:02:00.070 --> 00:02:02.130
一見問題なさそうですが

00:02:02.130 --> 00:02:04.800
注文ボタンを押すとクラッシュします

00:02:06.000 --> 00:02:10.500
メッセージでは‟残念ながらJust javaのアプリは
停止しました”とあります

00:02:10.500 --> 00:02:13.110
終わらせるためにOKボタンを押すしかありません

00:02:14.840 --> 00:02:18.190
何が起こったのかAndroid Studioを使ってみることができます

00:02:19.660 --> 00:02:21.330
デバイスでアプリを実行するとき

00:02:21.330 --> 00:02:25.860
Android DDMSのウィンドウが画面下に出てきます

00:02:25.860 --> 00:02:28.990
Androidのデバイスをモニターするための情報が出てきます

00:02:28.990 --> 00:02:32.980
ユーザーには見えない裏方の情報です

00:02:32.980 --> 00:02:36.230
開いていなかったら Androidという所をクリックしてみましょう

00:02:36.230 --> 00:02:38.970
Android DDMSが開きます

00:02:38.970 --> 00:02:41.930
矢印をドラッグしてウィンドウの高さを調節できます

00:02:42.938 --> 00:02:44.480
矢印を右にドラッグすると

00:02:44.480 --> 00:02:47.450
コンピューターに接続されたデバイスの一覧が見れます

00:02:47.450 --> 00:02:49.460
今はNexus6が接続されています

00:02:50.270 --> 00:02:53.940
Just Javaのアプリを開いたので ここに書いてあります

00:02:55.190 --> 00:02:58.565
ログが見やすいように左にドラッグしておきましょう

00:02:59.315 --> 00:03:02.850
この右側はログメッセージが表示された場所です

00:03:02.850 --> 00:03:05.380
ドロップダウンをクリックしフィルターを解除すると

00:03:05.380 --> 00:03:08.750
すべてのシステムとアプリのログメッセージが表示されます

00:03:10.440 --> 00:03:14.850
アクティビティー管理やオーディオ サウンド

00:03:14.850 --> 00:03:17.470
マイクやすべてです

00:03:17.470 --> 00:03:22.010
システムログは日記のようなもので
デバイス上で何があったかを記録しています

00:03:22.850 --> 00:03:24.540
ログキャットとも呼びます

00:03:24.970 --> 00:03:30.840
ログキャットの意味を検索すると
Androidディベロッパーのサイトが出てきます

00:03:30.840 --> 00:03:33.380
‟ログキャットとはAndroidのログシステムでありー

00:03:33.380 --> 00:03:36.200
デバッグのアウトプットを集めて見ることができる”

00:03:37.480 --> 00:03:42.170
ログに戻ります　一番最近に起こったことは下に出てきます

00:03:42.170 --> 00:03:43.790
時間をさかのぼりたいときは

00:03:43.790 --> 00:03:46.940
上にスクロールして探してください

00:03:46.940 --> 00:03:51.660
フィルターでJust Javaのアプリに限定しましょう

00:03:51.660 --> 00:03:56.720
これでアプリに関係したログメッセージだけに限定することができました

00:03:56.850 --> 00:03:58.430
ずっと読みやすくなりましたね

00:03:59.480 --> 00:04:01.260
デバイスでクラッシュが起こると

00:04:01.260 --> 00:04:05.720
携帯の動作の説明がログに残ります

00:04:05.720 --> 00:04:07.410
赤い文字で書かれたのがクラッシュです

00:04:08.480 --> 00:04:10.140
これはスタックトレースを見ると言い

00:04:10.140 --> 00:04:13.840
エラーの元の原因を辿ることから そう呼ばれます

00:04:13.840 --> 00:04:16.550
私たちのプロセスなのでアプリだと分かります

00:04:16.550 --> 00:04:19.560
com.example.android.justjavaです

00:04:19.560 --> 00:04:22.730
プロセス名がパッケージ名と一致していますが

00:04:22.730 --> 00:04:24.440
いつもそうとは限りません

00:04:24.440 --> 00:04:26.560
プロセスについては学んでいませんが

00:04:26.560 --> 00:04:30.730
これは要するに自分のアプリだと特定することです

00:04:30.730 --> 00:04:32.640
スタックトレースに沢山のテキストがありますが

00:04:32.640 --> 00:04:34.488
すべてを読む必要はありません

00:04:34.488 --> 00:04:38.920
問題解決に役立ちそうな情報だけを読み取りたいので

00:04:39.170 --> 00:04:42.410
取り組んでいるメソッドかファイルについて書いてあるものを

00:04:42.410 --> 00:04:45.710
スタックトレースから探しましょう

00:04:45.710 --> 00:04:48.580
ファイル名とメインアクティビティを探します

00:04:49.660 --> 00:04:51.700
エラーメッセージを読んでみましょう

00:04:51.700 --> 00:04:52.890
ここの部分まで飛んで

00:04:52.890 --> 00:04:57.120
IllegalStateExceptionとあります
‟submitOrderのメソッドが見つかりません”

00:04:58.490 --> 00:05:02.720
このエラーメッセージは無効状態の理由も説明しています

00:05:03.830 --> 00:05:06.942
理由は‟ビュークラスボタンのonClick handleのための―

00:05:06.942 --> 00:05:13.430
アクティビティやメインアクティビティに
submitOrderのメソッドが見つかりません”とあります

00:05:13.760 --> 00:05:17.830
色々書いてありますが意味が分かりませんね

00:05:17.830 --> 00:05:19.910
でも良いヒントがありました

00:05:19.910 --> 00:05:22.920
アプリに唯一あるボタンについて話していたので

00:05:22.920 --> 00:05:26.610
あのボタンに関係していることが推測できます

00:05:26.610 --> 00:05:31.710
そしてアクティビティにsubmitOrderと
メソッドが探せないということ

00:05:31.930 --> 00:05:36.500
ボタンのコードを見てみると ボタンが押されたら

00:05:36.500 --> 00:05:38.850
submitOrderというメソッドを起動すると書いてあります

00:05:38.850 --> 00:05:39.980
見てみましょう

00:05:40.280 --> 00:05:45.325
DDMSウィンドウを下げて
activity_main.xmlファイルを開きます

00:05:46.315 --> 00:05:48.955
これがボタンXMLの要素です

00:05:48.955 --> 00:05:54.215
クリックでsubmitOrderのメソッドを起動すると
確かに書いてあります

00:05:54.215 --> 00:05:56.395
メインアクティビティに戻ってみると

00:05:56.395 --> 00:06:00.090
submitOrderはメソッドではない代わりに

00:06:00.090 --> 00:06:04.240
submitOrdersに変えていました
だから問題が起きたのですね

00:06:04.240 --> 00:06:09.600
余分な‟s”を消すとメインアクティビティの
submitOrderのメソッドになりました

00:06:09.750 --> 00:06:11.950
アプリは正常なはずです

00:06:11.950 --> 00:06:14.463
アプリを実行して注文ボタンを押しても

00:06:14.463 --> 00:06:16.740
クラッシュしません　やった！

00:06:17.220 --> 00:06:19.790
submitOrderメソッドの名前を変えて

00:06:19.790 --> 00:06:21.800
わざとクラッシュを起こしてみましょう

00:06:23.000 --> 00:06:25.390
ログを確認しスタックトレースを見て

00:06:25.390 --> 00:06:26.950
エラーメッセージをよく読みましょう

00:06:28.000 --> 00:06:31.390
エラーを修正すればアプリが正しく動きます

00:06:31.390 --> 00:06:32.610
できたらチェックを入れてください

