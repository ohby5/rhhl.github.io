WEBVTT
Kind: captions
Language: zh-CN

00:00:00.860 --> 00:00:01.440
耶！

00:00:01.440 --> 00:00:03.870
你刚刚已经完成了应用交互的工作

00:00:03.870 --> 00:00:06.930
之前 当你按下按钮的时候 它不会有任何反应

00:00:06.930 --> 00:00:08.410
但是现在 随着代码的改变

00:00:08.410 --> 00:00:11.680
当你按下按钮的时候 它实际上更新了屏幕上的一些东西

00:00:11.680 --> 00:00:12.180
真棒！

00:00:13.340 --> 00:00:16.400
让我们试着深入地探究一下你刚刚做的事

00:00:16.400 --> 00:00:21.120
首先在 Button的 XML 元素上增加一个新的 android:onClick= 属性

00:00:21.120 --> 00:00:22.800
这意味着 当点击按钮时

00:00:22.800 --> 00:00:27.960
它将试着去执行我们在 Java 中说的

00:00:27.960 --> 00:00:30.900
被命名为 submitOrder 的指令的集合

00:00:32.060 --> 00:00:33.750
进入我们给你的

00:00:33.750 --> 00:00:35.300
MainActivity 文件

00:00:35.300 --> 00:00:37.830
我知道在屏幕有很多奇怪的字符和文字

00:00:37.830 --> 00:00:40.930
但是 现在你所有需要知道的是 这是一个方法

00:00:40.930 --> 00:00:42.930
它的名字是 submitOrder

00:00:42.930 --> 00:00:45.620
一个方法可以包含多行的 Java 代码

00:00:45.620 --> 00:00:48.200
这转换成一组

00:00:48.200 --> 00:00:51.050
在设备上能够被理解和执行的编码

00:00:51.050 --> 00:00:53.720
如果在这个方法中有多行代码

00:00:53.720 --> 00:00:57.830
设备将首先执行第一行代码 然后是第二行代码

00:00:57.830 --> 00:00:59.550
这样直到方法的底部

00:00:59.550 --> 00:01:03.890
我们给方法命名的原因是为了以后更方便地引用

00:01:03.890 --> 00:01:08.200
例如 在 XML 里我们能引用 submitOrder 方法

00:01:08.200 --> 00:01:10.380
就好比我们每个人都有一个名字

00:01:10.380 --> 00:01:12.560
如果你有一个宠物 你也会给它起一个名字

00:01:12.560 --> 00:01:14.670
以便于以后容易引用它

00:01:14.670 --> 00:01:18.350
所以在代码中 如果我们有一堆想要引用的语句

00:01:18.350 --> 00:01:21.570
可以把它放在一个方法里 然后给这个方法一个名称

00:01:21.570 --> 00:01:25.850
还记得在第一课里我是怎样告诉你的 XML 有非常特殊的句法规则

00:01:25.850 --> 00:01:30.100
决定一些东西是否是有效地 XML

00:01:30.100 --> 00:01:34.700
那么 Java 有类似的用于确定有效地 Java 代码是什么样的规则

00:01:34.700 --> 00:01:38.800
对于方法 其中的语句包含在这个起始大括号

00:01:38.800 --> 00:01:42.510
和这个闭合大括号里

00:01:42.510 --> 00:01:45.650
上边 也有一个叫做 onCreate 的方法

00:01:45.650 --> 00:01:49.930
这个方法里的语句包含在这个起始大括号和

00:01:49.930 --> 00:01:51.770
这个闭合大括号

00:01:51.770 --> 00:01:54.800
最后 有一个叫做 display 的方法

00:01:54.800 --> 00:01:58.320
代码语句被声明在

00:01:58.320 --> 00:01:59.930
这对大括号之间

00:01:59.930 --> 00:02:02.920
你也注意到 MainActivity 也有起始大括号和

00:02:02.920 --> 00:02:03.822
右大括号

00:02:03.822 --> 00:02:06.600
MainActivity 的所有功能

00:02:06.600 --> 00:02:10.199
被定义在这个大括号之中

00:02:10.199 --> 00:02:13.165
到目前为止 这个 MainActivity 文件里包含了三个方法

00:02:13.165 --> 00:02:15.340
当你声明一个方法后

00:02:15.340 --> 00:02:19.500
这意味着定义了该方法 即你可以进行实际操作了

00:02:19.500 --> 00:02:22.430
在这个例子中 我们声明了 display 方法

00:02:22.430 --> 00:02:25.805
然后我们把它用在这行代码 这里我们通过它的名字来调用它

00:02:25.805 --> 00:02:29.655
所以这是我们声明方法和调用方法的地方

00:02:29.655 --> 00:02:32.495
总结一下 当在 UI 里按下按钮时

00:02:32.495 --> 00:02:34.995
它会触发 submitOrder 方法

00:02:34.995 --> 00:02:38.635
然后我们执行 submitOrder 方法里的每一行代码

00:02:38.635 --> 00:02:40.895
从方法的顶部到底部

00:02:40.895 --> 00:02:44.690
在这种情况下 这里仅有一行代码语句 所以我们只执行这一句

00:02:44.690 --> 00:02:48.370
现在让我们看一下这一行代码 display（1）即显示一行

00:02:48.370 --> 00:02:51.980
我选择这一行代码是因为它看起来像

00:02:51.980 --> 00:02:55.800
在圆括号里的数字会显示在屏幕上

00:02:56.980 --> 00:02:59.870
所以 当我点击在 UI 里的这个 ORDER 按钮时

00:02:59.870 --> 00:03:03.570
然后它会触发在 MainActivity 里的 submitOrder 方法

00:03:03.570 --> 00:03:07.377
然后我们执行 display (1) 这行语句

00:03:07.377 --> 00:03:10.270
更新屏幕显示 1

00:03:10.270 --> 00:03:13.730
如果我把这改为 2 你认为会发生什么呢？

00:03:13.730 --> 00:03:14.980
让我们运行应用看看

00:03:15.990 --> 00:03:18.260
当我点击这个 ORDER 按钮时 它显示 2

00:03:18.260 --> 00:03:22.709
点击 ORDER 按钮触发了叫做 submitOrder 的方法

00:03:22.709 --> 00:03:25.918
然后我们执行 display (2) 这行语句

00:03:25.918 --> 00:03:27.870
更新屏幕显示为2

00:03:27.870 --> 00:03:29.350
现在轮到你了

00:03:29.350 --> 00:03:33.150
你可以在圆括号里输入不同的数吗？

00:03:33.150 --> 00:03:37.130
你可以选另一个更小的 更大的数 或者甚至一个负数

00:03:37.130 --> 00:03:40.170
尝试 MainActivity 里的这行代码

00:03:40.170 --> 00:03:41.610
当你完成的时候选中该复选框

