WEBVTT
Kind: captions
Language: ko

00:00:00.430 --> 00:00:03.390
이 코드 라인은 변수를 
만드는 것을 담당합니다.

00:00:03.390 --> 00:00:06.510
변수는 커피 잔 수인
2의 값이 들어간 이 박스와

00:00:06.510 --> 00:00:08.290
비슷하다는 것을 기억하세요.

00:00:08.290 --> 00:00:10.700
우리는 이번 수업에서
이 코드 라인의 각 부분을 이야기하고

00:00:10.700 --> 00:00:13.500
더 많은 변수를 생성하는 것을
배울 예정입니다.

00:00:13.500 --> 00:00:17.040
여러분은 아마 변수를 선언하는 방법에
특정한 규칙이 있다는 걸 알았을 겁니다.

00:00:18.160 --> 00:00:22.080
제가 변수를 선언한다고 할 때 이것은
변수를 정의하거나 변수를

00:00:22.080 --> 00:00:23.970
생성하는 것과 같은 의미입니다.

00:00:23.970 --> 00:00:26.560
이건 우리가 지금까지 봐 온
코드 라인입니다.

00:00:26.560 --> 00:00:30.420
이것은 Java에서 변수를 선언하는
아주 특정한 양식을 따르고 있습니다.

00:00:30.420 --> 00:00:32.490
여러분은 이걸 거의 공식과 
같다고 생각할 것입니다.

00:00:32.490 --> 00:00:35.840
먼저, 변수에 어떤 종류의 데이터가
들어가는지 말해야 합니다.

00:00:35.840 --> 00:00:39.350
이 경우에는 우리가 int라고 줄여 
말하는 integer이 되겠네요.

00:00:39.350 --> 00:00:41.400
다음은 변수 이름입니다.

00:00:41.400 --> 00:00:42.130
우리의 경우,

00:00:42.130 --> 00:00:46.830
변수 이름은 numberOfCoffees이고
다음은 초기 값입니다.

00:00:46.830 --> 00:00:50.310
이 경우에는 2잔의 커피 주문을
나타내는 2입니다.

00:00:50.310 --> 00:00:54.250
이 코드 선언은 ;로 끝나는데
Java의 규칙에 따른 것입니다.

00:00:54.250 --> 00:00:56.860
이 라인을 하나씩 나눠 살펴봅시다.

00:00:56.860 --> 00:00:58.580
첫 번째 단어는 Data type인데

00:00:58.580 --> 00:01:02.070
이것은 변수에 삽입되도록 허용하는
데이터의 종류입니다.

00:01:02.070 --> 00:01:06.500
이 경우 우리는 오직 정수 값만 
변수로써 입력할 수 있습니다.

00:01:06.500 --> 00:01:09.690
제가 이전에 말했던 것처럼
int는 integer의 약자입니다.

00:01:09.690 --> 00:01:11.440
integer는 정수를 의미합니다.

00:01:11.440 --> 00:01:13.735
기본적으로 0을 포함한 모든 숫자와

00:01:13.735 --> 00:01:16.845
분수나 소수가 아닌 모든 음수들이
여기에 포함됩니다.

00:01:16.845 --> 00:01:21.450
0, 5, 145, 이 숫자들은 
모두 정수의 예입니다.

00:01:21.450 --> 00:01:26.330
주문한 커피 수는 오직 1, 2, 4 등
반드시 정수여야 합니다.

00:01:26.330 --> 00:01:29.890
우리는 고객이 1.5잔의 커피를
주문하길 바라진 않습니다.

00:01:29.890 --> 00:01:31.780
만약 고객이 1잔 이상을 원한다면
2잔을 주문해야겠죠.

00:01:31.780 --> 00:01:35.020
그러고 남는 절반은 
친구에게 주거나 할 겁니다.

00:01:35.020 --> 00:01:38.450
음수는 우리의 경우엔 
어울리지 않습니다.

00:01:38.450 --> 00:01:42.160
Java엔 오직 양수만 허용하는
데이터 종류는 없습니다.

00:01:42.160 --> 00:01:45.020
그러므로 다음 수업 후반부에서 
우리는 어떻게 음수를 변수에

00:01:45.020 --> 00:01:48.690
삽입하는 것을 막는 코드를 
삽입할지 배울 것입니다.

00:01:48.690 --> 00:01:52.250
선언의 다음 단계는 변수 이름입니다.

00:01:52.250 --> 00:01:54.570
이 경우에는 numberOfCoffees네요.

00:01:54.570 --> 00:01:56.890
이것이 낙타 대문자로 
쓰인 것에 주목하세요.

00:01:56.890 --> 00:02:00.230
소문자로 시작하고. 
다양한 단어가 이어질 경우

00:02:00.230 --> 00:02:02.250
각 단어의 첫 글자를 
대문자로 쓴 것입니다.

00:02:02.250 --> 00:02:06.450
변수에 이름표를 붙였다고
생각하시면 됩니다.

00:02:06.450 --> 00:02:09.160
이 변수를 이런 이름으로
언급할 수 있습니다.

00:02:09.160 --> 00:02:11.490
여기 제가 그려낸 것도 있습니다.

00:02:11.490 --> 00:02:13.960
이 변수 상자는 이런 
이름을 가지고 있어요.

00:02:13.960 --> 00:02:15.950
만약 이 값이 무엇인지 알고 싶거나

00:02:15.950 --> 00:02:18.690
이 값을 바꾸고 싶을 때는 
이름을 사용해야 합니다.

00:02:18.690 --> 00:02:22.340
적절한 변수 이름을 고르는 것은
여러분 개발자에게 달려 있고

00:02:22.340 --> 00:02:25.050
변수가 무엇에 사용되느냐에 
달려 있습니다.

00:02:25.050 --> 00:02:28.420
저는 이 경우, 변수가 주문한 
커피 수를 저장하는 것이기에

00:02:28.420 --> 00:02:30.310
이것을 그대로 변수 이름으로 
골랐습니다.

00:02:30.310 --> 00:02:33.610
여러분은 coffeeCount나 
numberOfCoffeesOrdered,

00:02:33.610 --> 00:02:37.250
orderedCoffee 등 다른 
이름을 고를 수도 있습니다.

00:02:37.250 --> 00:02:40.050
다른 사람들이 쉽게 이해할 수만 있으면

00:02:40.050 --> 00:02:43.680
무슨 이름을 쓰든 괜찮습니다.

00:02:43.680 --> 00:02:45.960
제가 변수 이름은 무엇이든 
괜찮다고 말했는데

00:02:45.960 --> 00:02:49.570
사실 Java는 변수 이름에 대한
몇 가지 규칙이 있습니다.

00:02:49.570 --> 00:02:51.480
이제 이 규칙들을 살펴봅시다.

00:02:51.480 --> 00:02:54.560
variable names java라고 
검색해 볼게요.

00:02:54.560 --> 00:02:56.190
첫 번째 링크가 괜찮아 보이네요.

00:02:57.090 --> 00:03:00.070
오라클 사의 공식 Java 문서입니다.

00:03:00.070 --> 00:03:03.990
이 윗부분은 변수에 대해 말하고 있고
한가할 때 읽어보면 되겠네요.

00:03:03.990 --> 00:03:06.870
여기 아래에 우리가 
찾는 정보가 있습니다.

00:03:06.870 --> 00:03:09.110
변수의 이름에 관한 것인데요.

00:03:09.110 --> 00:03:13.770
길이는 상관 없지만 너무 긴 이름은
실용성이 떨어질 수 있습니다.

00:03:13.770 --> 00:03:16.810
반면, 지나치게 짧은 
이름은 좋을 수도 있지만

00:03:16.810 --> 00:03:21.550
만약 N처럼 한 글자로만 되어 있으면
N이 무엇을 뜻하는지 모를 수 있습니다.

00:03:21.550 --> 00:03:24.260
그러니 여러분은 설명이 충실한 이름과
매번 쓰기 어려운 이름 사이에서

00:03:24.260 --> 00:03:26.660
조화를 이루고 싶을 것입니다.

00:03:26.660 --> 00:03:30.770
여러분이 원한다면 여기에 다양한
세부 사항들을 읽어볼 수 있습니다.

00:03:30.770 --> 00:03:34.580
하지만 핵심 사항은 만약 여러분의 이름이
오직 하나의 단어로만 구성되었다면

00:03:34.580 --> 00:03:37.360
그 단어를 소문자로 
써야 한다는 것입니다.

00:03:37.360 --> 00:03:40.470
cadence, speed, 
gear 같은 식으로요.

00:03:40.470 --> 00:03:43.330
만약 변수 이름이 한 개 
이상의 단어로 이뤄졌다면

00:03:43.330 --> 00:03:45.940
매 단어의 첫 글자를 
대문자로 쓰고 싶겠지만

00:03:45.940 --> 00:03:48.500
첫 단어는 소문자로 시작되어야 합니다.

00:03:48.500 --> 00:03:50.700
gearRatio나 currentGear이 
예시가 되겠네요.

00:03:51.710 --> 00:03:54.580
우리의 numberOfCoffees도 
이 규칙을 따릅니다.

00:03:55.630 --> 00:03:59.560
선언의 다음 부분은
지정 연산자 혹은 = 기호입니다.

00:04:00.880 --> 00:04:04.440
수학 시간, 여러분은 1+1=2같은
수식에서 이것을 보았을 겁니다.

00:04:04.440 --> 00:04:07.070
하지만 Java에서
=는 다른 것을 의미합니다.

00:04:07.070 --> 00:04:10.270
=은 값이나 변수를 
할당할 때 쓰입니다.

00:04:10.270 --> 00:04:14.628
이 경우, 우리는 numberOfCoffees의 값을
2로 할당했습니다.

00:04:14.628 --> 00:04:16.029
박스 비유를 사용하면서

00:04:16.029 --> 00:04:20.550
우리는 커피 수를 나타내는 변수로
숫자 2를 넣었습니다.

00:04:20.550 --> 00:04:22.250
여러분이 = 기호를 볼 때마다

00:04:22.250 --> 00:04:24.950
오른쪽엔 무엇이 위치하는 지

00:04:24.950 --> 00:04:28.570
이것을 왼쪽의 변수에 
넣는 것을 생각하세요.

00:04:28.570 --> 00:04:30.540
이 얘기를 제법 했지만

00:04:30.540 --> 00:04:33.790
여기 2는 변수의 초기값입니다.

00:04:33.790 --> 00:04:36.530
그러니 2를 변수에 넣으세요.

00:04:36.530 --> 00:04:42.300
초기값은 반드시 데이터 종류에 따른
유효한 값이어야 함을 기억하세요.

00:04:42.300 --> 00:04:44.800
이 경우는 오직 정수만이 
변수로 허용됩니다.

00:04:44.800 --> 00:04:49.190
2는 유효한 정수이며 
변수에 들어갈 수 있습니다.

00:04:50.500 --> 00:04:54.580
마지막으로 중요한 것은, 
마지막에 ;를 써야 한다는 겁니다.

00:04:54.580 --> 00:04:56.620
요약하면, 변수를 선언할 때

00:04:56.620 --> 00:05:00.090
데이터 종류를 구체화해야 하고
그 뒤에 변수 이름을 쓴 후

00:05:00.090 --> 00:05:04.440
=를 쓴 다음 초기값을 입력하고
;으로 마무리해야 합니다.

00:05:05.510 --> 00:05:08.570
이 경우, 우리는 numberOfCoffees라는
변수를 만들었습니다.

00:05:08.570 --> 00:05:12.770
데이터 종류는 int이므로 오직 정수만
이 변수에 저장될 수 있습니다.

00:05:12.770 --> 00:05:17.110
그리고 우리는 2를 이 변수의
초기값으로 할당합니다.

00:05:17.110 --> 00:05:19.910
혹은 변수 이름을 우리가 말 했던
규칙에 따라 바꿀 수도 있습니다.

00:05:19.910 --> 00:05:24.070
초기값은 같은 데이터 종류이면
바꿀 수 있습니다.

00:05:24.070 --> 00:05:27.550
여러분은 정수 변수가 필요하므로
데이터 종류를 int 외에는 변경할 수 없습니다.

00:05:27.550 --> 00:05:30.240
우리는 다른 데이터 종류들에 
대해서도 배울 것이고

00:05:30.240 --> 00:05:32.410
그것은 특정한 철자로 
작성되어야 합니다.

00:05:33.530 --> 00:05:36.880
이제 당신이 변수를 써야 할 때 언제든 
이것을 이름으로 언급하면

00:05:36.880 --> 00:05:41.320
이것은 나중에 앱이 실행될 때 
실제 값으로 바뀔 겁니다.

00:05:42.350 --> 00:05:43.490
이제 계속해서 진행해서

00:05:43.490 --> 00:05:47.080
여러분의 앱에 이 코드들을 붙여넣기 
하지 말고 삽입해 보세요.

00:05:47.080 --> 00:05:51.310
작성하는 것과 값을 만들고 사용하는 것을
실제로 연습하기 위해서입니다.

00:05:51.310 --> 00:05:52.800
그리고 앱을 휴대폰에서 
작동시켜 보세요.

00:05:52.800 --> 00:05:55.390
여러분이 주문 버튼을 눌렀을 때
이렇게 보이는지 확인하세요.

00:05:56.760 --> 00:05:59.770
그 다음, 약간 실험을 해 봅시다.

00:05:59.770 --> 00:06:01.940
새 초기값을 변수에 할당하세요.

00:06:03.160 --> 00:06:06.050
그 다음 새 변수 이름을 할당하세요.

00:06:06.050 --> 00:06:09.930
numberOfCoffees 대신 
quantity처럼 다른 것을 시도해 봅시다.

00:06:11.290 --> 00:06:14.630
초보자들이 일반적으로 하는 실수는
전체를 아주 빠르게 훑어본 후

00:06:14.630 --> 00:06:17.650
실수 없이 작성을 끝냈다고 
생각하는 것입니다.

00:06:17.650 --> 00:06:20.140
하지만 모든 글자들을 
하나씩 확인한다면

00:06:20.140 --> 00:06:21.950
문제를 발견할 수도 있습니다.

00:06:23.020 --> 00:06:25.810
끝내는 데 시간은 좀 걸리겠지만

00:06:25.810 --> 00:06:29.050
시간을 들여 천천히 입력한 
모든 글자를 살펴보세요.

00:06:29.050 --> 00:06:32.650
만약 문제를 보게 되면
에러 메시지를 읽어 보시고요.

00:06:32.650 --> 00:06:38.160
가령, 이 에러 메시지는 numberOcoffees의 
기호를 이해하지 못했다고 합니다.

00:06:38.160 --> 00:06:41.160
Java는 numberOCoffees를 
이해하지 못하는데

00:06:41.160 --> 00:06:44.950
변수 이름이 실제로는
numberOfCoffees이기 때문입니다.

00:06:44.950 --> 00:06:48.370
여러분이 에러를 잘 확인해 내길 바라고,
때로는 undo 버튼을 눌러

00:06:48.370 --> 00:06:49.900
에러를 해결할 수도 있습니다.

00:06:51.080 --> 00:06:54.370
혹은 우리가 여러분께 드렸던 코드처럼
실제로 작동되는 코드로 돌아갈 수 있습니다.

00:06:55.460 --> 00:06:58.510
다 마치시면 이 박스들을 
체크하고 계속 진행하세요.

