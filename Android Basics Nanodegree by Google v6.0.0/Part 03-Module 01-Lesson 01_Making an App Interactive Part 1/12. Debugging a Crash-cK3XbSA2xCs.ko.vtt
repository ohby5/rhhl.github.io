WEBVTT
Kind: captions
Language: ko

00:00:00.430 --> 00:00:03.250
앱 고장은 이것이 갑작스럽게 종료되고

00:00:03.250 --> 00:00:05.880
앱이 멈추었다는 대화 메시지가
나타나는 것을 말합니다.

00:00:07.160 --> 00:00:10.320
안드로이드 개발자들이 
하루에도 몇 번씩 겪는 일이죠.

00:00:10.320 --> 00:00:11.990
가장 숙련된 개발자도 마찬가지입니다.

00:00:11.990 --> 00:00:16.400
때때로 문제는 코드의 
어처구니없는 오타입니다.

00:00:16.400 --> 00:00:20.250
그렇지 않다면 특정 기능의 코드를
작성하는 것에 대한 이해에 있어

00:00:20.250 --> 00:00:23.010
근본적인 오해가 있기 
때문일 수 있습니다.

00:00:23.010 --> 00:00:26.910
아마 여러분이 혼란에 빠진 상황에서 
머릿속 이성의 목소리는

00:00:26.910 --> 00:00:30.200
계속해서 앱의 결함을 
디버그하라고 할 겁니다.

00:00:30.200 --> 00:00:33.900
이 영상에서 우리는 어떻게 안드로이드 
앱의 고장을 디버그하는지를 배웁니다.

00:00:33.900 --> 00:00:38.910
디버그는 앱에서 버그를 발견하고
고치는 것을 의미합니다.

00:00:38.910 --> 00:00:42.050
만약 java 구문 오류 같은 
명백한 오류라면

00:00:42.050 --> 00:00:44.660
안드로이드의 DU가 
그걸 발견해낼 것이고

00:00:44.660 --> 00:00:48.870
여러분 폰에 앱을 설치하려 할 때
빨간 에러를 보여 줄 겁니다.

00:00:48.870 --> 00:00:52.480
이것은 compile time error라고 하는데
여러분이 디바이스에 앱을 설치하는 것부터

00:00:52.480 --> 00:00:53.860
실패하게 만들기 때문입니다.

00:00:55.170 --> 00:00:58.690
만약 compile time error을 만들어 
보고 싶다면 이 괄호들이나 ;를

00:00:58.690 --> 00:01:02.140
지우기만 하면 에러가 
뜨는 것을 발견할 것입니다.

00:01:03.370 --> 00:01:07.710
이건 우리가 수업 1에서 XML 에러를
일부러 만든 것과 비슷합니다.

00:01:07.710 --> 00:01:10.760
그 다음 우리는 에러 메시지를 읽게 되고
변경 사항을 취소하게 됩니다.

00:01:11.810 --> 00:01:15.700
또 다른 가능성 있는 에러들은 
만약 제가 닫는 괄호를 삭제하거나

00:01:15.700 --> 00:01:20.220
이를 깜박했을 때 발생할 수 있습니다.

00:01:21.390 --> 00:01:25.140
하지만 때때로 에러는 여러분이
앱을 실행할 때 발생하기도 합니다.

00:01:25.140 --> 00:01:28.270
이건 run time error라고 불리는데
당신의 앱이 작동할 때 생기기 때문입니다.

00:01:29.370 --> 00:01:31.940
이제 고의로 앱의 오류를 만들고

00:01:31.940 --> 00:01:35.390
이를 해결하는 과정을 밟아나가서
여러분이 진짜 오류와 마주했을 때

00:01:35.390 --> 00:01:37.510
그것을 스스로 다룰 수 
있도록 해 봅시다.

00:01:37.510 --> 00:01:41.330
이건 실제 학생이 마주한 오류를
바탕으로 하는 것입니다.

00:01:41.330 --> 00:01:43.520
그렇기에 이 오류는 초보자에게 
나타날 가능성이 높습니다.

00:01:43.520 --> 00:01:45.410
우선 제가 모든 단계를 
먼저 진행한 후에

00:01:45.410 --> 00:01:46.849
여러분이 직접 해 볼 
시간을 갖겠습니다.

00:01:47.990 --> 00:01:50.450
앱의 오류를 일부러 만들기 위해

00:01:50.450 --> 00:01:52.500
저는 MainActivity Java 
파일을 수정하겠습니다.

00:01:52.500 --> 00:01:58.090
여기 이 메소드 이름 
submitOrder에 s를 붙여 바꾸고

00:01:58.090 --> 00:02:00.070
디바이스에서 실행해 보겠습니다.

00:02:00.070 --> 00:02:02.130
처음엔 다 괜찮아 보이지만

00:02:02.130 --> 00:02:04.800
ORDER 버튼을 누를 때 
오류가 발생합니다.

00:02:06.000 --> 00:02:10.500
이 오류는 'Unfortunately, 앱 이름, Just Java
has stopped.' 라는 메시지를 띄웁니다.

00:02:10.500 --> 00:02:13.110
제가 할 수 있는 일은 OK 버튼을 눌러
앱을 종료하는 것 뿐입니다.

00:02:14.840 --> 00:02:18.190
다행히, 우리는 Android Studio를 사용해
실제로 무슨 일인지 파악할 수 있습니다.

00:02:19.660 --> 00:02:21.330
여러분이 디바이스에서 앱을 실행할 때

00:02:21.330 --> 00:02:25.860
Android DDMS 창이 스크린 
아래에서 나타나는 것이 보일 겁니다.

00:02:25.860 --> 00:02:28.990
이것이 여러분의 안드로이드 기기를
관찰한 정보를 보여 줄 겁니다.

00:02:28.990 --> 00:02:32.980
모든 것들은 사용자가 볼 수 없는
뒷편에서 일어납니다.

00:02:32.980 --> 00:02:36.230
만약 이것이 열려 있지 않다면
여기 Android라 적힌 탭을 눌러

00:02:36.230 --> 00:02:38.970
Android DDMS를 열 수 있습니다.

00:02:38.970 --> 00:02:41.930
여러분은 창의 높이를
이 화살표를 끌어 조절할 수 있고

00:02:42.938 --> 00:02:44.480
만약 화살표를 오른쪽으로 끌면

00:02:44.480 --> 00:02:47.450
컴퓨터에 연결된 기기들의 
목록을 볼 수 있을 겁니다.

00:02:47.450 --> 00:02:49.460
지금 저는 Nexus 6만 
연결된 상태입니다.

00:02:49.460 --> 00:02:53.940
이게 왜 목록에 있는지 알아보려
다시 Java 앱을 열었습니다.

00:02:55.190 --> 00:02:58.565
이걸 왼쪽으로 끌면
기록을 볼 공간이 더 생깁니다.

00:02:58.565 --> 00:03:02.850
이 우변은 로그 메시지가 
보이는 곳입니다.

00:03:02.850 --> 00:03:05.380
여러분이 이 드롭다운 메뉴를 눌러
No Filters를 선택하면

00:03:05.380 --> 00:03:08.750
전체 시스템과 다른 앱의 
로그 메시지를 보여 줍니다.

00:03:10.440 --> 00:03:14.850
이것은 액티비티 매니저, 
오디오, 사운드,

00:03:14.850 --> 00:03:17.470
마이크, 다른 모든 것들을 나타냅니다.

00:03:17.470 --> 00:03:20.710
시스템 로그는 여러분의 폰이
기기에서 무슨 일이 일어나는지

00:03:20.710 --> 00:03:21.789
작성하는 일기 같은 겁니다.

00:03:22.850 --> 00:03:25.070
우리는 이걸 로그캣이라고 부릅니다.

00:03:25.070 --> 00:03:30.840
로그캣이 무엇인지 검색하면 안드로이드 
개발자들의 웹페이지 정의가 뜰 겁니다.

00:03:30.840 --> 00:03:33.380
이것은 로그캣이 어떻게 
디버그 아웃풋을 수집하고 모으는

00:03:33.380 --> 00:03:36.200
안드로이드의 로깅 
시스템인지 설명합니다.

00:03:37.480 --> 00:03:42.170
로그로 돌아와서 가장 최근의 이벤트들은
가장 아래쪽에서 나타납니다.

00:03:42.170 --> 00:03:43.790
그렇기에 만약 여러분이 
과거를 되돌아보려 할 땐

00:03:43.790 --> 00:03:46.940
찾는 부분을 보기 위해 
스크롤을 올려야 할 겁니다.

00:03:46.940 --> 00:03:51.660
필터를 우리 앱, JustJava로 
다시 바꾸어 봅시다.

00:03:51.660 --> 00:03:55.140
이것은 로그 메시지의 
양을 상당히 줄이고

00:03:55.140 --> 00:03:56.850
우리 앱에 관련된 것만 보여 줍니다.

00:03:56.850 --> 00:03:58.430
읽기 훨씬 쉬워졌습니다.

00:03:59.480 --> 00:04:01.260
기기에 고장이 발생할 때

00:04:01.260 --> 00:04:05.720
폰이 무엇을 시도했는지에 대한 
설명이 로그에 기록됩니다.

00:04:05.720 --> 00:04:07.410
여기 우리의 고장 지점이 
빨간 글자로 표시되었습니다.

00:04:08.480 --> 00:04:10.140
이것은 stack trace를 
살피는 것이라고 하는데

00:04:10.140 --> 00:04:13.840
에러가 어디에서 시작되었는지
기원을 거슬러 올라가기 때문입니다.

00:04:13.840 --> 00:04:18.200
우리의 프로세스 때문에 이것이 우리 
앱 com.example.android.justjava

00:04:18.200 --> 00:04:19.560
인 걸 알 수 있습니다.

00:04:19.560 --> 00:04:22.730
우리 앱에서, 프로세스 이름은 
페키지 이름과 짝을 이루지만

00:04:22.730 --> 00:04:24.440
항상 짝을 이뤄야 할 필요는 없습니다.

00:04:24.440 --> 00:04:26.560
우리는 프로세스에 대해 
배우지 않았지만,

00:04:26.560 --> 00:04:30.730
이것은 본질적으로 
우리 앱을 증명하는 것입니다.

00:04:30.730 --> 00:04:32.640
stack trace의 글자들이 
많이 있습니다.

00:04:32.640 --> 00:04:34.488
그걸 모두 읽을 필요는 없습니다.

00:04:34.488 --> 00:04:39.160
우리는 문제 해결을 도와줄 관련
정보들을 찾아내고 싶은 겁니다.

00:04:39.180 --> 00:04:42.410
우리는 stack trace에서 현재 작업 중인

00:04:42.410 --> 00:04:45.710
방법들이나 파일들에 대해 설명하는 
부분을 찾아 내야 합니다.

00:04:45.710 --> 00:04:48.580
계속해서 파일 이름, 
MainActivity를 살펴봅시다.

00:04:49.660 --> 00:04:51.700
에러 메시지를 읽어 봅시다.

00:04:51.700 --> 00:04:52.890
저는 이 부분을 넘어가고

00:04:52.890 --> 00:04:57.120
IllegalStateException, Could not find
the method submitOrder를 읽었습니다.

00:04:58.490 --> 00:05:02.720
이 에러 메시지는 왜 이것이 
무효 상태인지 설명해 줍니다.

00:05:03.830 --> 00:05:06.942
그 이유는 액티비티, MainActivity에서

00:05:06.942 --> 00:05:09.950
onClick handler이 view class 버튼을

00:05:09.950 --> 00:05:13.760
submitOrder 방법에서 
찾을 수 없다는 것입니다.

00:05:13.760 --> 00:05:17.830
문장에 단어도 많고 
이해하기 쉽지 않네요.

00:05:17.830 --> 00:05:19.910
하지만 여기 좋은 
단서 몇 개가 있습니다.

00:05:19.910 --> 00:05:22.920
이것은 버튼을 의미하고
우리 앱에는 버튼이 딱 한 개 있으니까

00:05:22.920 --> 00:05:26.610
버튼과 관련된 문제라고 
추정할 수 있습니다.

00:05:26.610 --> 00:05:29.530
그리고 이것은 액티비티에서 
메소드 submitOrder을

00:05:29.530 --> 00:05:31.930
사용할 수 없게 됐다고 말합니다.

00:05:31.930 --> 00:05:36.500
버튼 코드로 돌아가 살펴보면
우리는 버튼이 눌렸을 때

00:05:36.500 --> 00:05:38.850
이것이 submitOrder을 유발해야 한다고
명시해 두었습니다.

00:05:38.850 --> 00:05:39.710
이제 그것을 살펴봅시다.

00:05:39.710 --> 00:05:43.415
저는 이 DDMS 창을 끌어내리고

00:05:43.415 --> 00:05:46.315
acrivity_main.xml 파일을 
열어 보겠습니다.

00:05:46.315 --> 00:05:48.955
이것이 버튼 XML 요소입니다.

00:05:48.955 --> 00:05:54.215
그리고 우리는 정말로 android:onClick이
submitOrder을 유발해야 한다고 썼네요.

00:05:54.215 --> 00:05:56.395
만약 제가 main activity로 돌아가면

00:05:56.395 --> 00:06:00.090
우리가 submitOrders로 수정했던 
메소드 submitOrder는

00:06:00.090 --> 00:06:04.240
더 이상 메소드가 아님을 발견할 것이며
문제가 왜 발생했는지 알 수 있습니다.

00:06:04.240 --> 00:06:08.330
만약 제가 main activity에서 
여분의 s를 삭제한다면

00:06:08.330 --> 00:06:11.950
앱이 다시 작동할 것입니다.

00:06:11.950 --> 00:06:13.113
제가 앱을 다시 작동시키고

00:06:13.113 --> 00:06:16.380
Order 버튼을 누르면, 오류는 더 이상
발생하지 않을 겂니다. 야호.

00:06:16.380 --> 00:06:19.790
당신의 앱에서 submitOrder 
메소드의 이름을 바꿔

00:06:19.790 --> 00:06:21.800
오류를 발생시켜 봅시다.

00:06:23.000 --> 00:06:25.390
그리고 stack trace에서 
로그들을 확인하고

00:06:25.390 --> 00:06:26.950
에러 메시지를 주의 깊게 읽어 보세요.

00:06:28.000 --> 00:06:31.201
그리고 나서 앱이 다시 작동할 수 있게
에러를 수정해 봅시다.

00:06:31.201 --> 00:06:33.041
다 하셨으면 이 박스를 체크하세요.

