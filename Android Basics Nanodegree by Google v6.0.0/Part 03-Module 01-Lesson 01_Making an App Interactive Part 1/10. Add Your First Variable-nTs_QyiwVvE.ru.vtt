WEBVTT
Kind: captions
Language: ru

00:00:00.430 --> 00:00:03.390
Эта строка кода
отвечает за создание переменной.

00:00:03.390 --> 00:00:06.510
Вспомним, что переменная -
как эта коробочка,

00:00:06.510 --> 00:00:08.290
количество чашек кофе,
со значением 2 внутри.

00:00:08.290 --> 00:00:10.700
На этом занятии мы поговорим
о каждой части этой строки кода,

00:00:10.700 --> 00:00:13.500
а затем создадим еще переменные.

00:00:13.500 --> 00:00:17.040
Вы могли заметить, что переменную задают
по определенным правилам.

00:00:18.160 --> 00:00:22.080
Когда я говорю об объявлении переменной,
это значит то же самое,

00:00:22.080 --> 00:00:23.970
что и определить или создать переменную.

00:00:23.970 --> 00:00:26.560
Вот уже виденная нами строка кода.

00:00:26.560 --> 00:00:30.420
Она следует особому формату, по которому
в Java задаются переменные.

00:00:30.420 --> 00:00:32.490
Можете считать это почти формулой.

00:00:32.490 --> 00:00:35.840
Во-первых, надо сказать, какой тип данных
может быть внутри переменной.

00:00:35.840 --> 00:00:39.350
В данном случае, это целое число,
которые мы для краткости назовем <i>int</i>.

00:00:39.350 --> 00:00:41.400
Далее следует имя переменной,

00:00:41.400 --> 00:00:42.130
в нашем случае

00:00:42.130 --> 00:00:46.830
это <i>numberOfCoffees</i> и исходное значение.

00:00:46.830 --> 00:00:50.310
У нас это 2, т.е. 2 заказанные чашки кофе,

00:00:50.310 --> 00:00:54.250
и это выражение кода заканчивается на ;,
в соответствии с правилами Java.

00:00:54.250 --> 00:00:56.860
Давайте разберем
каждую составляющую этой строки.

00:00:56.860 --> 00:00:58.580
Первое слово - <i>DataType</i>,

00:00:58.580 --> 00:01:02.070
это тип данных, которым позволено
быть внутри переменной.

00:01:02.070 --> 00:01:04.250
В нашем случае лишь целые числа

00:01:04.250 --> 00:01:06.450
допускаются к хранению в переменной.

00:01:06.450 --> 00:01:09.690
Как мы уже упомянули ранее,
<i>int</i> - сокращение от <i>integer</i>.

00:01:09.690 --> 00:01:11.440
А <i>integer</i> - это целое число.

00:01:11.440 --> 00:01:14.100
По существу, это любое число,
включая ноль и отрицательные числа,

00:01:14.101 --> 00:01:16.845
без долей и десятичных знаков.

00:01:16.845 --> 00:01:21.450
0, 5, 145, все это целые числа.

00:01:21.450 --> 00:01:24.900
Число заказанных чашек кофе
будет только целым,

00:01:24.900 --> 00:01:26.320
как 1, 2, 4 и т.д.

00:01:26.320 --> 00:01:29.890
Мы не хотим,
чтобы покупатель заказал 1,5 чашки.

00:01:29.890 --> 00:01:32.200
Если он хочет больше 1 чашки,
то ему придется купить 2,

00:01:32.201 --> 00:01:35.020
и отдать остающиеся полчашки другу,
например.

00:01:35.020 --> 00:01:38.450
Отрицательные же числа
в нашем случае не имеют смысла.

00:01:38.450 --> 00:01:42.160
В Java нет типа данных, который
позволял бы только положительные числа.

00:01:42.160 --> 00:01:45.020
Так что на следующем занятии
мы разберем, как добавить код,

00:01:45.020 --> 00:01:48.690
предупреждающий ввод
отрицательных чисел в переменную.

00:01:48.690 --> 00:01:52.250
Дальше задается имя переменной.

00:01:52.250 --> 00:01:54.570
Сейчас это <i>numberOfCoffees</i>.

00:01:54.570 --> 00:01:56.890
Заметьте, что оно написано в <b>camel case.</b>

00:01:56.890 --> 00:01:59.999
Начинается с прописной буквы,

00:02:00.000 --> 00:02:02.250
а первые буквы каждого
последующего слова - заглавные.

00:02:02.250 --> 00:02:06.450
Можете считать это присвоением
переменной именного тэга.

00:02:06.450 --> 00:02:09.160
Вы можете обращаться к этой переменной
при помощи ее имени.

00:02:09.160 --> 00:02:11.490
Здесь я нарисовала и это.

00:02:11.490 --> 00:02:13.960
Эта коробочка с переменной носит это имя.

00:02:13.960 --> 00:02:15.950
Если вы хотите узнать ее значение

00:02:15.950 --> 00:02:18.690
или поменять его,
то вам нужно использовать имя.

00:02:18.690 --> 00:02:22.340
Выбор подходящего имени,
по правде, лежит на разработчике,

00:02:22.340 --> 00:02:25.050
и зависит от целей
использования переменной.

00:02:25.050 --> 00:02:28.420
В данном случае переменная хранит
количество заказанных чашек кофе,

00:02:28.420 --> 00:02:30.310
потому я и выбрала это имя.

00:02:30.310 --> 00:02:33.610
Вы могли бы выбрать другие,
например, <i>coffee count</i>,

00:02:33.610 --> 00:02:37.250
<i>number of coffees ordered</i> или
<i>ordered coffees.</i>

00:02:37.250 --> 00:02:40.050
Это правда может быть что угодно,
до тех пор, пока другим людям

00:02:40.050 --> 00:02:43.680
будет легко понять,
что представляет собой переменная.

00:02:43.680 --> 00:02:46.960
Именем может служить что угодно,
но на деле в Java есть пара правил

00:02:46.960 --> 00:02:49.570
для задания имен переменных.

00:02:49.570 --> 00:02:50.720
Посмотрим на эти правила.

00:02:50.720 --> 00:02:54.560
Я набираю "variable names Java".

00:02:54.560 --> 00:02:55.680
Первая ссылка выглядит неплохо.

00:02:57.090 --> 00:03:00.070
Это официальная документация
по Java от Oracle.

00:03:00.070 --> 00:03:01.599
Вот тут сверху говорится о переменных,

00:03:01.600 --> 00:03:03.990
можете почитать об этом
в свое бесконечное свободное время.

00:03:03.990 --> 00:03:06.870
А вот и то, что мы искали.

00:03:06.870 --> 00:03:09.110
Здесь говорится о наименовании переменных.

00:03:09.110 --> 00:03:13.770
Имя может быть любой длины,
но слишком длинное - не очень практично.

00:03:13.770 --> 00:03:17.810
Слишком же короткое, с другой стороны,
может быть хорошим, но если оно состоит

00:03:17.810 --> 00:03:21.550
из одной буквы, N к примеру,
вам будет сложно понять, что это означает.

00:03:21.550 --> 00:03:24.260
Так что нужно найти баланс
между описательным именем и таким,

00:03:24.260 --> 00:03:26.660
которое не будет пыткой писать каждый раз.

00:03:26.660 --> 00:03:30.770
Тут намного больше деталей, которые
вы можете почитать при желании.

00:03:30.770 --> 00:03:34.580
Но главная идея -
если имя состоит из одного слова,

00:03:34.580 --> 00:03:37.360
то оно должно быть написано
строчными буквами.

00:03:37.360 --> 00:03:40.470
Как <i>последовательность</i>, <i>скорость</i>,
<i>инструмент</i> и прочее.

00:03:40.470 --> 00:03:43.330
Если имя переменной
состоит из нескольких слов,

00:03:43.330 --> 00:03:45.940
то нужно сделать заглавной

00:03:45.940 --> 00:03:48.500
первую букву каждого слова, кроме первого.

00:03:48.500 --> 00:03:50.700
Как пример, gear ratio.

00:03:51.710 --> 00:03:54.580
Наш пример с числом чашек кофе
также следует этому правилу.

00:03:55.630 --> 00:03:59.560
Следующий шаг объявления переменной -
назначение оператора, знака =.

00:04:00.880 --> 00:04:04.440
На уроках математики вы часто видели
примеры вроде 1 плюс 1 равно 2.

00:04:04.440 --> 00:04:07.070
Но в Java знак "равно" имеет другой смысл.

00:04:07.070 --> 00:04:10.270
"Равно" означает
присвоение переменной значения.

00:04:10.270 --> 00:04:14.628
Здесь мы назначаем
переменной <i>numberOfCoffees</i> значение 2.

00:04:14.628 --> 00:04:16.029
Используя нашу метафору с коробкой,

00:04:16.029 --> 00:04:20.550
мы кладем число 2 внутрь переменной,
представляющей количество чашек кофе.

00:04:20.550 --> 00:04:22.250
Так что, где бы вам не встретился знак =,

00:04:22.250 --> 00:04:24.950
думайте о захвате того,
что стоит справа от него,

00:04:24.950 --> 00:04:28.570
и вложении внутрь переменной
слева от знака.

00:04:28.570 --> 00:04:30.540
Мы уже немного говорили об этом,

00:04:30.540 --> 00:04:33.790
вот это число 2 -
исходное значение переменной.

00:04:33.790 --> 00:04:36.530
Так что вложим его внутрь.

00:04:36.530 --> 00:04:40.380
Запомните, что исходное значение
должно быть подходящего типа,

00:04:40.380 --> 00:04:42.270
в соответствии с заданным типом данных.

00:04:42.270 --> 00:04:44.800
Здесь в переменную допускаются
только целые числа.

00:04:44.800 --> 00:04:49.190
2 - валидное целое, так что
его можно вложить в переменную.

00:04:50.500 --> 00:04:54.580
И последнее в списке, но не по значимости:
в самом конце мы ставим ;

00:04:54.580 --> 00:04:57.620
Суммируя, при объявлении переменной
нужно определить тип данных,

00:04:57.621 --> 00:05:00.090
затем имя переменной,
поставить знак равенства,

00:05:00.090 --> 00:05:04.440
вписать исходное значение
и завершить все точкой с запятой.

00:05:05.510 --> 00:05:08.570
В нашем случае мы создаем
переменную под названием <i>numberOfCoffees</i>.

00:05:08.570 --> 00:05:12.770
Тип данных - <i>int</i>, так что в ней
могут храниться только целые числа.

00:05:12.770 --> 00:05:17.110
Назначаем 2 как исходное значение.

00:05:17.110 --> 00:05:19.910
Вы можете изменить имя переменной
согласно проговоренным правилам.

00:05:19.910 --> 00:05:24.070
Вы можете задать другое исходное значение,
лишь бы оно было того же типа данных.

00:05:24.070 --> 00:05:27.550
Вы не можете изменить тип данных,
он пишется как <i>int</i>, I-N-T.

00:05:27.550 --> 00:05:30.240
Мы также разберем другие типы данных,

00:05:30.240 --> 00:05:32.410
и они должны быть написаны особым образом.

00:05:33.530 --> 00:05:36.900
Теперь, каждый раз, когда будет
нужно использовать переменную,

00:05:36.900 --> 00:05:38.410
просто обратитесь к ней по имени,

00:05:38.410 --> 00:05:42.320
и будет выгружено последнее ее значение,
самое новое после загрузки приложения.

00:05:42.350 --> 00:05:43.490
Теперь добавьте

00:05:43.490 --> 00:05:47.080
эти строки кода в свое приложение,
но не делайте копипаст, пожалуйста,

00:05:47.080 --> 00:05:51.000
вам нужно практиковать печатание,
создание и использование переменной.

00:05:51.001 --> 00:05:52.800
Затем запустите приложение
на своем телефоне.

00:05:52.800 --> 00:05:55.390
Убедитесь, что при нажатии
кнопки ЗАКАЗ видите именно это.

00:05:56.499 --> 00:05:59.770
Затем поэкспериментируйте немного.

00:05:59.000 --> 00:06:01.940
Попробуйте назначить переменной
новое исходное значение.

00:06:03.160 --> 00:06:06.070
Вслед за этим попробуйте
присвоить ей другое имя.

00:06:06.070 --> 00:06:07.420
Вместо <i>numberOfCoffees</i>

00:06:07.420 --> 00:06:09.930
попробуйте что-нибудь еще.

00:06:11.290 --> 00:06:14.630
Общая ошибка начинающих - думать,
что напечатали все правильно,

00:06:14.630 --> 00:06:17.650
когда ваши глаза просматривают
все действительно быстро.

00:06:17.650 --> 00:06:20.140
Но если вы вглядитесь в каждый знак,

00:06:20.140 --> 00:06:21.950
то заметите, где может быть проблема.

00:06:23.020 --> 00:06:25.810
Это может занять некоторое время,
но не торопитесь,

00:06:25.810 --> 00:06:29.050
уделите достаточное внимание
каждому напечатанному знаку.

00:06:29.050 --> 00:06:32.650
Если при запуске происходит сбой,
попробуйте прочитать сообщение об ошибке.

00:06:32.650 --> 00:06:38.160
Например, это сообщение говорит,
что не может выполнить <i>numberOCoffees</i>

00:06:38.160 --> 00:06:41.160
Java не распознает <i>numberOCoffees</i>,

00:06:41.160 --> 00:06:44.950
потому что на самом деле
имя переменной - <i>numberOfCoffees</i>.

00:06:44.950 --> 00:06:48.370
Надеюсь, вы сможете разобраться с ошибкой,
если же нет - жмите "отмена",

00:06:48.370 --> 00:06:49.900
это тоже иногда помогает.

00:06:51.080 --> 00:06:55.299
Или можете вернуться к работающему коду,
как тот, который мы вам дали.

00:06:55.300 --> 00:06:57.780
Выполнив задание,
поставьте галочки здесь и продолжайте.

