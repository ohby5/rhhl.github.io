WEBVTT
Kind: captions
Language: zh-CN

00:00:00.008 --> 00:00:00.986
嘿 Katherine

00:00:00.986 --> 00:00:02.175
嗯 我们点击了 + 按钮

00:00:02.175 --> 00:00:05.209
咖啡的数量应该从2增加到3

00:00:05.209 --> 00:00:06.585
— 对 — 但是我们继续点击 + 按钮

00:00:06.585 --> 00:00:07.709
再一次

00:00:07.709 --> 00:00:08.669
又一次

00:00:08.669 --> 00:00:13.043
但是咖啡的数量还是2 它并没有增加

00:00:13.043 --> 00:00:16.554
我认为这是因为我们遗漏了一个概念

00:00:16.554 --> 00:00:18.260
就是变量作用域

00:00:18.260 --> 00:00:19.020
变量作用域

00:00:19.020 --> 00:00:19.520
是的

00:00:19.520 --> 00:00:20.640
能详细解释一下吗？

00:00:20.640 --> 00:00:23.230
变量作用域是指当在一个方法中声明了一个变量

00:00:23.230 --> 00:00:25.748
这个变量只能在该方法中使用

00:00:25.748 --> 00:00:27.220
集中注意力

00:00:27.220 --> 00:00:27.780
- Katherine

00:00:27.780 --> 00:00:29.480
— 嗯 — 这样的讨论没有什么作用

00:00:29.480 --> 00:00:31.880
如果学生能听懂这样的解释

00:00:31.880 --> 00:00:32.990
一定要给他颁发奖章

00:00:32.990 --> 00:00:35.140
— 好的 — 让我们解释得慢一点 清楚一点

00:00:35.140 --> 00:00:36.305
抱歉 我再解释一遍

00:00:36.305 --> 00:00:37.955
我们点击 + 按钮

00:00:37.955 --> 00:00:39.540
increment 方法中的

00:00:39.540 --> 00:00:40.450
代码被调用了

00:00:40.450 --> 00:00:41.480
— 是的 — 接下来会发生什么？

00:00:41.480 --> 00:00:43.300
我们创建 quantity 变量

00:00:43.300 --> 00:00:43.920
对的

00:00:43.920 --> 00:00:45.309
它的初始值是2

00:00:45.309 --> 00:00:46.150
并且我们

00:00:46.150 --> 00:00:47.980
把它更新到3杯咖啡

00:00:47.980 --> 00:00:51.470
当 increment 方法执行完毕 将会发生什么？

00:00:51.470 --> 00:00:53.165
这些变量将会销毁

00:00:53.165 --> 00:00:54.742
好吧

00:00:54.742 --> 00:00:58.169
当我再一次点击 + 按钮 increment 方法

00:00:58.169 --> 00:00:58.966
被调用

00:00:58.966 --> 00:01:01.450
接下来 我们创建一个 quantity 变量

00:01:01.450 --> 00:01:02.110
哦 哇

00:01:02.110 --> 00:01:03.220
另一个盒子神奇的出现了

00:01:03.220 --> 00:01:04.385
是的 一个全新的盒子

00:01:04.385 --> 00:01:06.160
它的初始值为2

00:01:06.160 --> 00:01:07.550
现在我们把它更新为3

00:01:07.550 --> 00:01:10.700
现在 increment 方法又结束了 将会发生什么呢？

00:01:10.700 --> 00:01:11.955
这个变量被销毁了

00:01:11.955 --> 00:01:15.462
我们需要一个全局变量

00:01:15.462 --> 00:01:16.250
哦 是的

00:01:16.250 --> 00:01:20.630
全局变量可以被应用中的任意一段代码调用

00:01:20.630 --> 00:01:22.650
对的 可以被任何方法调用 例如 increment 方法

00:01:22.650 --> 00:01:23.935
或者 decrement 方法

00:01:23.935 --> 00:01:24.730
所以我们创建

00:01:24.730 --> 00:01:26.580
一个这样的全局变量

00:01:26.580 --> 00:01:28.750
它还是 quantity 变量

00:01:28.750 --> 00:01:29.855
但是现在它是一个全局变量了

00:01:29.855 --> 00:01:33.020
当一个方法执行完毕

00:01:33.020 --> 00:01:34.590
它不会被销毁

00:01:34.590 --> 00:01:36.960
好的 在我们的代码中使用全局变量

00:01:36.960 --> 00:01:40.540
我们应用中存在的一个问题是 如果我多次点击+按钮

00:01:40.540 --> 00:01:43.010
咖啡的数量都不会超过3

00:01:43.010 --> 00:01:47.880
原因是 + 按钮触发了 increment 方法

00:01:47.880 --> 00:01:50.910
在这个方法中我们一直在创建一个新的 quantity 变量

00:01:50.910 --> 00:01:51.800
并且初始化它的值为2

00:01:51.800 --> 00:01:55.730
当我们更新 quantity 的值得时候 它永远是3

00:01:55.730 --> 00:01:59.650
这个方法对于我调用过它没有记忆

00:01:59.650 --> 00:02:04.050
通过点击 + 按钮 屏幕上已经显示有3杯咖啡

00:02:04.050 --> 00:02:06.310
没办法让屏幕显示4杯咖啡

00:02:06.310 --> 00:02:10.512
在原来的代码中 我们已经在 increment 方法中声明过一个局部变量 quantity

00:02:10.512 --> 00:02:14.890
也在 decrement 方法中声明过局部变量 quantity

00:02:14.890 --> 00:02:18.760
之所以我们可以声明一个同名变量两次

00:02:18.760 --> 00:02:20.690
是因为它们在不同的变量作用域

00:02:21.950 --> 00:02:24.920
这是 increment 方法中 quantity

00:02:24.920 --> 00:02:26.380
的作用范围

00:02:26.380 --> 00:02:30.100
在这个作用域内 我么可以引用和更新这个变量

00:02:30.100 --> 00:02:31.463
但是在作用域之外

00:02:31.463 --> 00:02:34.770
其他的方法不知道这个变量的存在

00:02:34.770 --> 00:02:37.790
你可能会得到一个无法识别的符号的错误

00:02:37.790 --> 00:02:40.170
因为其他的方法不知道这个变量的存在

00:02:41.190 --> 00:02:43.660
同样的 这是

00:02:43.660 --> 00:02:47.150
decrement 方法中局部变量 quantity 的作用域

00:02:47.150 --> 00:02:50.770
在这个方法中 你可以展示和更新这个变量

00:02:50.770 --> 00:02:54.690
但是在作用域之外 你不能引用它

00:02:54.690 --> 00:02:57.170
在代码中使用全局变量

00:02:57.170 --> 00:02:58.790
更新后的代码是这样的

00:02:58.790 --> 00:03:01.920
不是在 increment 方法中声明 quantity 变量

00:03:01.920 --> 00:03:05.820
而是在 MainActivity 的顶部声明它

00:03:05.820 --> 00:03:09.540
在 MainActivity 的起始大括号和结束大括号之间声明它

00:03:09.540 --> 00:03:14.150
所以 在 MainActivity 中的所有地方都可以调用 quantity 变量了

00:03:14.150 --> 00:03:18.055
这是全局变量 quantity 的作用范围

00:03:18.055 --> 00:03:20.700
MainActivity 中所有的方法

00:03:20.700 --> 00:03:24.430
都可以引用并且更新 quantity了

00:03:24.430 --> 00:03:28.300
所以 increment 方法可以更新 quantity 变量 并且可以显示它

00:03:28.300 --> 00:03:32.330
decrement 方法也可以更新和显示它

00:03:32.330 --> 00:03:35.950
而且 quantity 总是被全局变量引用

00:03:35.950 --> 00:03:39.860
把 quantity 单独作为一个全局变量的好处是

00:03:39.860 --> 00:03:44.130
现在我们有了一个可以存储咖啡数量的数据源

00:03:44.130 --> 00:03:47.100
即使我们多次增加咖啡的数量

00:03:47.100 --> 00:03:49.280
或是减少咖啡的数量

00:03:49.280 --> 00:03:52.520
它只保留最后的 quantity 的值

00:03:52.520 --> 00:03:55.890
在此之前 拥有两个 quantity 变量显得非常奇怪

00:03:55.890 --> 00:04:00.770
因为这两个变量可能不同步 并且用户只能看到一个值

00:04:00.770 --> 00:04:03.990
所以这使我们想到用单一数据源

00:04:03.990 --> 00:04:07.440
用一个全局变量来追踪咖啡的数量

00:04:07.440 --> 00:04:10.910
你可能会好奇 为什么我们不把所有的变量都设置为全局变量

00:04:10.910 --> 00:04:12.780
使得它可以解决所有的问题

00:04:12.780 --> 00:04:17.040
你不应该使用全局变量 除非

00:04:17.040 --> 00:04:21.060
MainActivity 中的其他代码真的要引用这个变量

00:04:21.060 --> 00:04:24.770
如果你只需要在方法的内部环境中使用一个方法

00:04:24.770 --> 00:04:26.750
你只需要设置局部变量

00:04:26.750 --> 00:04:28.600
这就像你有一个秘密一样

00:04:28.600 --> 00:04:31.705
你只会跟你的知心朋友讲

00:04:31.705 --> 00:04:34.475
同样 你必须把变量透露出去

00:04:34.475 --> 00:04:38.045
那一定是其他的人的确需要 不然应用就不能正常工作了

00:04:39.275 --> 00:04:41.615
在 MainActivity 的 increment 方法中

00:04:41.615 --> 00:04:44.879
我将要复制这行声明 quantity 变量的代码

00:04:46.270 --> 00:04:50.320
我只需要点击 Cmd+X 或者 Ctrl+X 进行剪切

00:04:50.320 --> 00:04:54.520
我将把它粘贴在 MainActivity 类的顶部

00:04:54.520 --> 00:04:58.610
粘贴在 MainActivity 起始大括号的右边

00:04:58.610 --> 00:05:01.880
注意到它是在其他方法的括号的外面

00:05:02.960 --> 00:05:05.310
不然 如果它在某个方法的内部

00:05:05.310 --> 00:05:07.890
它就被视为是局部变量

00:05:07.890 --> 00:05:11.580
现在 quantity 就是 MainActivity 类中的全局变量

00:05:11.580 --> 00:05:14.122
在下一课中 我们将学习更多关于类的知识

00:05:14.122 --> 00:05:18.800
MainActivity 是一个包含方法和变量的类

00:05:18.800 --> 00:05:23.130
现在 MainActivity 中任意一个方法都可以调用 quantity 变量了

00:05:23.130 --> 00:05:27.790
increment 方法只是更新和显示 quantity 变量

00:05:27.790 --> 00:05:31.240
注意到全局变量的名字是紫色的

00:05:32.350 --> 00:05:35.940
如果是局部变量名字是黑色的

00:05:35.940 --> 00:05:38.960
这可以用来区分局部变量

00:05:38.960 --> 00:05:40.330
和全局变量

00:05:40.330 --> 00:05:43.580
说到局部变量 我们不想在 increment 方法中使用局部变量了

00:05:43.580 --> 00:05:47.000
因为我们想要使用 quantity 全局变量

00:05:48.390 --> 00:05:53.120
这个方法中的变量名称必须与全局变量相匹配

00:05:53.120 --> 00:05:56.080
如果我在这写 quantities 系统将会报错

00:05:56.080 --> 00:05:59.530
因为 quantities 是一个没有被定义过的局部或全局变量

00:06:01.030 --> 00:06:02.670
我把代码改回去 使得它能重新工作

00:06:03.700 --> 00:06:06.150
如果我运行这个应用 我们看看将会发生什么

00:06:06.150 --> 00:06:08.470
应用的初始值是2

00:06:08.470 --> 00:06:11.800
如果我点击+按钮 它的确增加了

00:06:11.800 --> 00:06:14.470
如果我点击—按钮 它的确减少了

00:06:14.470 --> 00:06:15.540
这真是太棒了

00:06:15.540 --> 00:06:18.620
数量选择器已经创建成功

00:06:18.620 --> 00:06:23.000
我希望你能够在你的手机上创建数量选择器 使得你可以增加

00:06:23.000 --> 00:06:26.730
或者减少咖啡数量 按照你自己的意愿

00:06:26.730 --> 00:06:30.960
我们提供了一个 MainActivity 代码的链接供你参考

00:06:30.960 --> 00:06:34.170
我更希望你自己根据这个视频输入代码

00:06:34.170 --> 00:06:36.520
而不是复制粘贴

00:06:36.520 --> 00:06:39.470
那样 你就能够自己创建全局变量

00:06:39.470 --> 00:06:39.990
在以后的日子里

00:06:41.030 --> 00:06:42.290
我附加上调试

00:06:42.290 --> 00:06:45.120
这样我们可以清楚地看到 quantity 变量的变化

00:06:45.120 --> 00:06:48.705
我在 increment 方法和 decrement 方法中设置断点

00:06:48.705 --> 00:06:50.890
然后运行调试

00:06:50.890 --> 00:06:54.270
当我点击+按钮 就触发了这个断点

00:06:54.270 --> 00:06:56.720
在这行代码执行之前

00:06:56.720 --> 00:07:00.340
我们看到 全局变量 quantity 的值已经

00:07:00.340 --> 00:07:03.320
是2了 原因是这行代码

00:07:03.320 --> 00:07:06.910
如果我跳到下一行 那么这一行就执行完毕了

00:07:06.910 --> 00:07:09.640
现在 quantity 的值已经增加到3了

00:07:09.640 --> 00:07:12.910
我可以点击 resume 更新应用 使得 quantity 的值增加到3

00:07:12.910 --> 00:07:17.360
如果我再一次点击+按钮 在执行这一行代码之前

00:07:17.360 --> 00:07:21.310
全局变量 quantity 的值是3

00:07:21.310 --> 00:07:24.750
这保留了 quantity 之前的值

00:07:25.940 --> 00:07:27.770
如果我把 quantity 的值增加1

00:07:27.770 --> 00:07:30.610
那么全局变量的值就是4了

00:07:30.610 --> 00:07:32.755
我可以点击 resume 来更新屏幕 使得 quantity 的值为4

00:07:33.850 --> 00:07:37.390
可以看到每调用一次increment 方法

00:07:37.390 --> 00:07:41.990
都可以使用已存在的 quantity 的值

00:07:41.990 --> 00:07:44.840
让我们看看它是如何与 decrement 方法交互的

00:07:44.840 --> 00:07:48.160
如果我点击—按钮 这个断点将会被触发

00:07:48.160 --> 00:07:50.630
这个全局变量 quantity 的值是4

00:07:50.630 --> 00:07:52.970
这是之前留下的值

00:07:52.970 --> 00:07:57.950
如果我把 quantity 的值减少1 那么咖啡数量就减少为3

00:07:57.950 --> 00:08:01.720
我可以屏幕上展示它 它变为3了

00:08:01.720 --> 00:08:05.740
有了全局变量 quantity 、 increment 方法和

00:08:05.740 --> 00:08:07.990
decrement 方法可以增加或减少

00:08:07.990 --> 00:08:12.190
咖啡的数量 根据上一次 quantity 的保留值

00:08:13.560 --> 00:08:15.180
现在到你了

00:08:15.180 --> 00:08:18.420
将原来的2个局部变量换成1个全局变量

00:08:18.420 --> 00:08:21.560
然后 debugger 来证明 变量 quantity

00:08:21.560 --> 00:08:23.480
的确按照预期更新了

00:08:23.480 --> 00:08:27.420
一旦你的数量选择器工作正常 你可以庆祝一下

00:08:27.420 --> 00:08:30.640
然后进一步尝试一些东西

00:08:30.640 --> 00:08:33.445
如果初始值为0 将会发生什么呢？

00:08:34.480 --> 00:08:37.710
或者当你点击+按钮时 让 quantity 的值成倍增加

00:08:37.710 --> 00:08:41.460
或者当你点击—按钮时 让 quantity 的值减少一半

00:08:41.460 --> 00:08:44.760
只要是你感兴趣的问题 你都可以做实验来验证

00:08:44.760 --> 00:08:47.850
如果你对一件事情的结果非常好奇

00:08:47.850 --> 00:08:50.060
这将是你学习的最佳时刻

00:08:50.060 --> 00:08:51.120
因为这些都是无法预测的

00:08:52.530 --> 00:08:54.650
当你完成之后 勾选这些选项来继续

