WEBVTT
Kind: captions
Language: ru

00:00:00.430 --> 00:00:03.250
Сбой в работе приложения - это когда
оно неожиданно закрывается и

00:00:03.250 --> 00:00:05.880
и показывает сообщение о том,
что приложение было остановлено.

00:00:07.160 --> 00:00:10.320
У разработчиков Андроид это случается
много-много раз в день.

00:00:10.320 --> 00:00:11.990
Даже у самых опытных.

00:00:11.990 --> 00:00:16.400
Иногда причиной служит
опечатка в коде или глупая ошибка.

00:00:16.400 --> 00:00:20.250
В других случаях -
принципиальное непонимание того,

00:00:20.250 --> 00:00:23.010
как нужно писать код
для определенной функции.

00:00:23.010 --> 00:00:26.910
Первой реакцией может быть паника,
но голос разума в вашей голове

00:00:26.910 --> 00:00:30.200
должен подсказать,
что нужно двигаться и отладить приложение.

00:00:30.200 --> 00:00:33.900
В этом видео мы научимся
отлаживать сбои в приложениях Андроид.

00:00:33.900 --> 00:00:38.910
Отладка — выявление и устранение багов,
т.е. ошибок в приложении.

00:00:38.910 --> 00:00:42.050
Если ошибка очевидна, как, например,
ошибка в синтаксисе java,

00:00:42.050 --> 00:00:44.660
то DU-приложение для Андроид
найдет ее за вас и

00:00:44.660 --> 00:00:48.870
покажет красную ошибку
до установки приложения на телефон.

00:00:48.870 --> 00:00:52.480
Это называется ошибкой компиляции,
так как не удастся создать приложение,

00:00:52.480 --> 00:00:53.860
не удастся его даже установить.

00:00:55.170 --> 00:00:58.690
Если хотите попробовать создать
ошибку компиляции,

00:00:58.690 --> 00:01:02.140
просто удалите скобки или точку с запятой
и увидите, как выскочит ошибка.

00:01:03.370 --> 00:01:07.710
Это как на первом занятии, когда мы
пробовали намеренно создать ошибку XML.

00:01:07.710 --> 00:01:10.760
Прочитали сообщение
и затем исправили изменение.

00:01:11.810 --> 00:01:15.700
Также будет ошибка,
если я удалю эту открывающую скобку,

00:01:15.700 --> 00:01:20.220
или забуду эту закрывающую.

00:01:21.390 --> 00:01:25.140
Но иногда сбои происходят,
когда начинаешь использовать приложение.

00:01:25.140 --> 00:01:28.270
В таком случае они называются
ошибками выполнения программы.

00:01:29.370 --> 00:01:31.940
Давайте намеренно вызовем
сбой в приложении и

00:01:31.940 --> 00:01:35.390
определим шаги по его устранению,
чтобы в случае реального сбоя

00:01:35.390 --> 00:01:37.510
вы смогли справиться с ним самостоятельно.

00:01:37.510 --> 00:01:41.330
Эта ошибка основана на реальном случае,
он произошел на студенческом конкурсе.

00:01:41.330 --> 00:01:43.520
Так что это вполне может
случиться с новичками.

00:01:43.520 --> 00:01:45.410
Сперва я объясню вам шаги и

00:01:45.410 --> 00:01:46.849
затем вы сможете попробовать сами.

00:01:47.990 --> 00:01:50.450
Чтобы вызвать сбой приложения,

00:01:50.450 --> 00:01:52.500
я изменю файл MainActivity Java.

00:01:52.500 --> 00:01:58.090
Поменяю название этого метода
на <i>submitOrders</i> с "s".

00:01:58.090 --> 00:02:00.070
А затем запущу его на устройстве.

00:02:00.070 --> 00:02:02.130
Поначалу все выглядит нормально,

00:02:02.130 --> 00:02:04.800
но при нажатии кнопки ЗАКАЗ
происходит сбой.

00:02:06.000 --> 00:02:10.500
Выскакивает сообщение: "К сожалению,
приложение Just Java прекратило работу".

00:02:10.500 --> 00:02:13.110
И единственное возможное действие -
нажать ОК для выхода.

00:02:14.840 --> 00:02:18.190
К счастью, мы можем обратиться
к Android Studio и понять произошедшее.

00:02:19.660 --> 00:02:21.330
При запуске приложения на устройстве

00:02:21.330 --> 00:02:25.860
внизу экрана можно увидеть
выскакивающее окошко Android DDMS.

00:02:25.860 --> 00:02:28.990
Оно показывает информацию
для мониторинга вашего Андроид-устройства.

00:02:28.990 --> 00:02:32.980
Все, что происходит за сценой
и не видно пользователям.

00:02:32.980 --> 00:02:36.230
Если оно не открыто, можно кликнуть
вот здесь внизу, где написано Android,

00:02:36.230 --> 00:02:38.970
и тогда откроется Android DDMS.

00:02:38.970 --> 00:02:41.930
С помощью этой стрелки
можно настроить высоту окошка.

00:02:42.938 --> 00:02:44.480
Потянув стрелку вправо,

00:02:44.480 --> 00:02:47.450
вы увидите список устройств,
соединенных с компьютером.

00:02:47.450 --> 00:02:49.460
Сейчас у меня присоединен
только мой Nexus 6.

00:02:49.460 --> 00:02:53.940
Также я снова открыл приложение Just Java,
поэтому оно здесь указано.

00:02:55.190 --> 00:02:58.565
Потяну это обратно влево,
чтобы было больше места для логов.

00:02:58.565 --> 00:03:02.850
Здесь, на правой стороне,
отображаются сообщения о событиях.

00:03:02.850 --> 00:03:05.380
Если кликнуть по этому выпадающему меню
и выбрать "без фильтров",

00:03:05.380 --> 00:03:08.750
то будут показаны сообщения о событиях
для всей системы и других приложений.

00:03:10.440 --> 00:03:14.850
В них отображается информация об
<b>activity manager</b>, аудио, звуках,

00:03:14.850 --> 00:03:17.470
микрофоне и так далее.

00:03:17.470 --> 00:03:20.710
Системные логи это своего рода дневник,
который ваш телефон ведет о том,

00:03:20.710 --> 00:03:21.789
что происходит на устройстве.

00:03:22.850 --> 00:03:24.499
Мы также называем это <b>logcat</b>.

00:03:24.500 --> 00:03:25.779
Если вы загуглите это слово,

00:03:25.780 --> 00:03:30.840
то получите определение
на странице Android Developers.

00:03:30.840 --> 00:03:33.380
В нем говорится, что <b>logcat</b>
это система логирования для Андроид,

00:03:33.380 --> 00:03:36.200
в которой вы собираете и просматриваете
результаты отладки.

00:03:37.480 --> 00:03:42.170
Вернемся к логам. Недавние события
отображаются тут в самом низу.

00:03:42.170 --> 00:03:43.790
Так что если вы хотите заглянуть в прошлое,

00:03:43.790 --> 00:03:46.940
нужно будет прокрутить список,
чтобы найти искомое.

00:03:46.940 --> 00:03:51.660
Давайте отфильтруем список
по нашему приложению, Just Java.

00:03:51.660 --> 00:03:55.000
При этом количество сообщений логов
существенно снижается,

00:03:55.001 --> 00:03:56.950
остаются лишь релевантные
для нашего приложения.

00:03:56.951 --> 00:03:58.430
Так читается намного проще.

00:03:59.480 --> 00:04:01.260
Когда на устройстве происходит сбой,

00:04:01.260 --> 00:04:05.720
в логах останется описание того,
что телефон пытается сделать.

00:04:05.720 --> 00:04:07.410
А вот и наш сбой, текст красного цвета.

00:04:08.480 --> 00:04:10.140
Это становится ясно
при взгляде на <b>StackTrace</b>,

00:04:10.140 --> 00:04:13.840
который отслеживает,
откуда возникла ошибка.

00:04:13.840 --> 00:04:16.550
Мы знаем, что в данном случае
это наше приложение,

00:04:16.550 --> 00:04:19.560
так как процесс - <i>com.example.android.justjava</i>.

00:04:19.560 --> 00:04:22.730
Имя процесса при этом
совпадает с именем пакета,

00:04:22.730 --> 00:04:24.440
хотя так происходит не всегда.

00:04:24.440 --> 00:04:26.560
Мы не особо углублялись в процессы,
достаточно знать,

00:04:26.560 --> 00:04:30.730
что конкретно этот идентифицирует
наше приложение как источник ошибки.

00:04:30.730 --> 00:04:32.640
Сейчас в этом <b>StackTrace</b> много текста.

00:04:32.640 --> 00:04:34.488
И вам не обязательно читать все.

00:04:34.488 --> 00:04:36.999
Мы лишь хотим
бегло его проглядеть в поисках

00:04:37.000 --> 00:04:39.170
данных, которые помогут нам
решить проблему.

00:04:39.170 --> 00:04:42.410
Нам нужно искать в <b>StackTrace</b> все,
где говорится о методах или файлах,

00:04:42.410 --> 00:04:45.710
над которыми мы работаем.

00:04:45.710 --> 00:04:48.580
Так что будем искать имя файла.

00:04:49.660 --> 00:04:51.700
Начнем с чтения сообщения об ошибке.

00:04:51.700 --> 00:04:53.200
Я пропускаю эту часть и просто читаю

00:04:53.201 --> 00:04:57.120
<i>IllegalStateException,
Could not find the method submitOrder.</i>

00:04:58.490 --> 00:05:02.720
Дальше в сообщении говорится, почему
система пришла в неисправное состояние.

00:05:03.830 --> 00:05:06.942
И причина в том, что она не могла
найти метод <i>submitOrder</i>

00:05:06.942 --> 00:05:09.950
в MainActivity

00:05:09.950 --> 00:05:13.760
для обработчика onClick
на кнопке просмотра класса.

00:05:13.760 --> 00:05:17.830
В этом предложении много слов
и оно может быть не очень понятно.

00:05:17.830 --> 00:05:19.910
Однако, в нем есть пара хороших подсказок.

00:05:19.910 --> 00:05:22.920
Упоминается кнопка, а у нас в приложении
кнопка всего одна, так что

00:05:22.920 --> 00:05:26.610
можно сделать вывод, что,
вероятно, речь идет именно о ней.

00:05:26.610 --> 00:05:29.530
Затем, речь идет
о невозможности найти метод

00:05:29.530 --> 00:05:31.930
<i>submitOrder</i> в <i>activity</i>.

00:05:31.930 --> 00:05:36.500
Если вспомнить код нашей кнопки,
мы задали, чтобы при ее нажатии

00:05:36.500 --> 00:05:38.299
запускался метод <i>submitOrder</i>.

00:05:38.300 --> 00:05:39.710
Так что взглянем теперь сюда.

00:05:39.710 --> 00:05:43.415
Я перетащу окошко DDMS вниз

00:05:43.415 --> 00:05:46.315
и открою наш файл <i>activity_main.xml</i>.

00:05:46.315 --> 00:05:48.955
Здесь находится XML кнопки.

00:05:48.955 --> 00:05:54.215
И правда, мы сказали, что <i>android:onClick</i>
должен запускать метод <i>submitOrder</i>.

00:05:54.215 --> 00:05:56.395
Если я вернусь в <i>main activity</i>,

00:05:56.395 --> 00:06:00.090
то увижу, что метод тут уже
не <i>submitOrder</i>, а <i>submitOrders</i>,

00:06:00.090 --> 00:06:04.240
так как мы его поменяли,
отсюда и возникла проблема.

00:06:04.240 --> 00:06:08.330
Если я удалю лишнюю s,
то метод в <i>main activity</i>

00:06:08.330 --> 00:06:11.950
снова станет <i>submitOrder</i>
и приложение должно заработать.

00:06:11.950 --> 00:06:13.113
Я снова его запускаю,

00:06:13.113 --> 00:06:16.380
нажимаю кнопку заказа
и сбой не повторяется, юхууу.

00:06:16.380 --> 00:06:19.790
Вперед, попробуйте создать такой сбой
в своем приложении,

00:06:19.790 --> 00:06:21.800
путем изменения имени метода <i>submitOrder</i>.

00:06:23.000 --> 00:06:25.000
Затем проверьте логи в <b>StackTrace</b>

00:06:25.001 --> 00:06:26.950
и внимательно прочитайте
сообщение об ошибке.

00:06:28.000 --> 00:06:30.949
Затем исправьте ошибку,
чтобы приложение снова заработало.

00:06:30.950 --> 00:06:32.610
Когда выполните, поставьте здесь галочку.

