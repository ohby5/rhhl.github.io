WEBVTT
Kind: captions
Language: ko

00:00:00.240 --> 00:00:02.680
이 질문의 답이 한 가지만 
있는 게 아닙니다.

00:00:02.680 --> 00:00:06.151
잘못된 앱의 동작과
옳은 앱의 동작을 구분하는 데

00:00:06.151 --> 00:00:09.245
가장 유용한 방법이 
무엇이냐에 달려 있죠.

00:00:09.245 --> 00:00:12.640
제가 발견한 몇 가지가 있어요.

00:00:12.640 --> 00:00:15.990
잘못된 앱 동작엔
여러분이 주문 버튼을 누를 때

00:00:15.990 --> 00:00:19.990
수량이 매번 같은 값으로 바뀌는데,
이것은 바뀌어선 안 되죠.

00:00:19.990 --> 00:00:22.320
다음으로 알아낸 것은
이 수량 값에서는 가격이 맞지만

00:00:22.320 --> 00:00:25.010
수량 picker에 선택된
마지막 수량을 위한

00:00:25.010 --> 00:00:28.310
가격이 되어야 합니다.

00:00:28.310 --> 00:00:31.570
다시, 이것은 수량이 변해서는
안 된다는 것과 관련이 있습니다.

00:00:31.570 --> 00:00:34.230
이게 왜 발생하는지 보기 위해
기존 코드를 봅시다.

00:00:35.390 --> 00:00:39.320
activity_main 레이아웃 파일에
Order 버튼이 여기 선언되었죠.

00:00:39.320 --> 00:00:40.576
Order 버튼을 클릭하면

00:00:40.576 --> 00:00:43.102
우리는 submitOrder라는
메인 액티비티의 메소드를 호출합니다.

00:00:43.102 --> 00:00:47.890
MainActivity.java 파일에
submitOrder 메소드가 있습니다.

00:00:47.890 --> 00:00:51.030
이것은 우리가 아직 바꾸지 않은
오래된 코드입니다.

00:00:51.030 --> 00:00:54.570
우리는 interger 수량 변수를
만들고 5로 초기화 했어요.

00:00:54.570 --> 00:00:56.300
그것을 화면에 표시합니다.

00:00:56.300 --> 00:01:00.610
또한 커피 수 곱하기 $5를
가격으로 보여줍니다.

00:01:00.610 --> 00:01:03.700
이 코드는 이해가 안 되죠.
우리가 주문을 제출하려 할 때

00:01:03.700 --> 00:01:06.530
수량을 업데이트 했기 때문이죠.

00:01:06.530 --> 00:01:09.411
다른 문제는 우리가 이미
커피 잔 수를 추적하도록 된

00:01:09.411 --> 00:01:12.478
광역 변수를 갖고 있을 때

00:01:12.478 --> 00:01:13.747
interger 수량 변수를 만든 것입니다.

00:01:13.747 --> 00:01:18.026
MainActivity에
광역 수량 변수가 있죠.

00:01:18.026 --> 00:01:22.520
여기의 어떤 메소드도
수량 변수를 참조할 수 있어요.

00:01:22.520 --> 00:01:27.060
그러나 submitOrder 메소드에서
우리는 새 지역 수량 변수를 만들어요.

00:01:27.060 --> 00:01:30.410
기술적으로 당신은 광역 변수와
같은 이름으로 불리는

00:01:30.410 --> 00:01:32.200
지역 변수를 가진 겁니다.

00:01:32.200 --> 00:01:34.812
이건 단지 이 메소드의 
문맥에서 그걸 뜻합니다.

00:01:34.812 --> 00:01:38.581
이 변수가 선언되고 난 후,
수량을 참조할 때든

00:01:38.581 --> 00:01:41.985
값이 5인 지역 수량 변수를
참조할 때든요.

00:01:41.985 --> 00:01:44.396
광역 수량 변수 값 2가 아니라요.

00:01:44.396 --> 00:01:46.310
display(quantity)와

00:01:46.310 --> 00:01:51.500
displayPrice(quantity*5)는
모두 이 수량값을 참조해요.

00:01:51.500 --> 00:01:54.080
이것은 지역 변수의 범위죠.

00:01:54.080 --> 00:01:55.490
이 범위 밖에서는

00:01:55.490 --> 00:01:59.490
수량을 참조하면 그건
광역 수량 변수를 의미해요.

00:01:59.490 --> 00:02:00.330
이것에 대해 생각하면

00:02:00.330 --> 00:02:03.430
당신이 주문을 제출할 때
새로운 수량을 만들고

00:02:03.430 --> 00:02:07.040
그것을 화면에 보여준다는 게
이해가 잘 안될 겁니다.

00:02:07.040 --> 00:02:10.370
정말 해야 하는 것은
커피 잔 수를 증가하고 감소할 때

00:02:10.370 --> 00:02:14.900
우리가 추적하는
수량을 사용하는 겁니다.

00:02:14.900 --> 00:02:18.040
그것으로 우리가 가격을 계산해내죠.

00:02:18.040 --> 00:02:22.070
우리 코드를 고치기 위해
지역 수량 변수를 선언하면 안 됩니다.

00:02:22.070 --> 00:02:25.130
대신 광역 수량 변수를 사용해야 하죠.

00:02:25.130 --> 00:02:28.550
화면에 수량 변수를
업데이트 하는 것도 멈춰야 해요.

00:02:28.550 --> 00:02:31.270
더하기 빼기 버튼이 이미
적당한 수량 값으로

00:02:31.270 --> 00:02:33.520
화면을 업데이트합니다.

00:02:33.520 --> 00:02:37.570
하지만 우리는 submitOrder
버튼이 가격을 업데이트하길 바래요.

00:02:37.570 --> 00:02:44.000
하지만 이번엔 광역 수량 변수를 이용해
가격을 수량 곱하기 5로 만들 겁니다.

00:02:44.000 --> 00:02:47.720
코드를 업데이트해서 우리가 방금
말한 것을 반영하게 만들게요.

00:02:47.720 --> 00:02:50.860
수량 변수가 보라색 글꼴로
바뀐 것을 보세요.

00:02:50.860 --> 00:02:54.030
이것은 MainActivity에서 광역
수량 변수를 사용하고 있는 걸 뜻해요.

00:02:54.030 --> 00:02:57.940
이 버튼이 눌러졌을 떄 이것은
submitOrder 메소드를 실행하죠.

00:02:57.940 --> 00:02:59.580
이것은 화면에 가격을 표시하고

00:02:59.580 --> 00:03:03.934
가격은 광역 수량 변수X5가 됩니다.

00:03:04.970 --> 00:03:06.670
맞게 보이니 기기에서 실행해봅시다.

00:03:07.680 --> 00:03:09.530
좋아요, 이제 마지막 테스트네요.

00:03:09.530 --> 00:03:13.660
수량을 6으로 바꾸고
주문 버튼을 누를게요.

00:03:13.660 --> 00:03:14.510
네, $30입니다.

00:03:14.510 --> 00:03:17.630
우연이 아닌 걸 보도록
다른 값도 해볼게요.

00:03:17.630 --> 00:03:18.958
맞게 보이네요. 맞게 보이네요.

00:03:18.958 --> 00:03:22.600
좋아요, 작동해요!

00:03:22.600 --> 00:03:24.310
첫 버그를 고쳤네요.

00:03:24.310 --> 00:03:26.400
이 작업 정말 잘 했어요.

00:03:26.400 --> 00:03:28.970
우리 앱의 기능이 정말 잘 작동해요.

00:03:28.970 --> 00:03:32.280
하지만 인정하건대
UI는 조금 못생겼죠.

00:03:32.280 --> 00:03:35.800
특히, 수량 picker에
UI를 좀 사용해야 겠네요.

00:03:35.800 --> 00:03:36.740
다음으로 가서 해 보죠.

