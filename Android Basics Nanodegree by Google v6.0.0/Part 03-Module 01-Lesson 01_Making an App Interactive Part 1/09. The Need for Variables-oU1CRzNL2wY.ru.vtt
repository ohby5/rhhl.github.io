WEBVTT
Kind: captions
Language: ru

00:00:00.670 --> 00:00:04.780
ОК, Кэтрин, наше приложение продвигается,
но с ним есть одна большая проблема.

00:00:04.780 --> 00:00:06.150
Что за проблема?

00:00:06.150 --> 00:00:08.029
Ну, в нем можно заказать
лишь две чашки кофе.

00:00:08.029 --> 00:00:09.560
Что плохого в двух чашках кофе?

00:00:09.560 --> 00:00:11.630
Ну, три лучше, чем две,
а четыре лучше, чем три,

00:00:11.630 --> 00:00:12.720
иногда мне нужно больше.

00:00:12.720 --> 00:00:14.170
ОК, ясно, тебе нужно больше кофе.

00:00:14.170 --> 00:00:16.560
Для этого я могу лишь поменять код,

00:00:16.560 --> 00:00:18.230
чтобы вместо 2 было 3.

00:00:18.230 --> 00:00:21.470
ОК, значит нам нужно
поменять в коде здесь

00:00:21.470 --> 00:00:25.620
количество чашек кофе.
- Здесь и здесь.

00:00:25.620 --> 00:00:28.810
А что, если я потом захочу
10 чашек для меня и моих друзей?

00:00:28.810 --> 00:00:30.835
У тебя так много друзей?

00:00:30.835 --> 00:00:33.580
Что ж, в таком случае,
нам нужно придумать что-то еще.

00:00:33.580 --> 00:00:34.810
Да, нам нужно решение получше.

00:00:34.810 --> 00:00:37.770
А как насчет... знаю!
Мы можем использовать переменные.

00:00:37.770 --> 00:00:38.890
Переменные?

00:00:38.890 --> 00:00:40.460
То есть что-то, что изменяется?

00:00:40.460 --> 00:00:42.310
Да, у переменных
нет фиксированного значения.

00:00:42.310 --> 00:00:48.001
Можно представить переменную
как коробочку, вроде этой.

00:00:48.001 --> 00:00:48.760
ОК.

00:00:48.760 --> 00:00:50.220
Итак, это переменная.

00:00:50.220 --> 00:00:52.420
Это коробка, и мы можем
поместить внутрь нее значение.

00:00:52.420 --> 00:00:53.770
Тут написано "int".

00:00:53.770 --> 00:00:55.520
Да, это означает "целое"
(integer).

00:00:55.520 --> 00:00:58.490
Хорошо, можем поместить целое,
или число, внутрь этой коробочки.

00:00:58.490 --> 00:00:59.170
Точно!

00:00:59.170 --> 00:01:00.740
И даже можем дать ей название.

00:01:00.740 --> 00:01:04.910
Давайте назовем ее
количеством заказанных чашек кофе.

00:01:04.910 --> 00:01:05.410
ОК.

00:01:07.020 --> 00:01:10.086
Нужно выбрать длинное название.

00:01:10.086 --> 00:01:12.576
Просто "Заказанные" вряд ли подойдет.

00:01:12.576 --> 00:01:13.770
- Хорошо.
- Хорошо.

00:01:13.770 --> 00:01:17.260
Теперь мы можем обращаться к переменной,
используя в коде ее название,

00:01:17.260 --> 00:01:19.600
вместо того, чтобы писать значение "2".

00:01:19.600 --> 00:01:20.580
ОК.

00:01:20.580 --> 00:01:23.440
Позднее можно обновить ее, при желании.

00:01:23.440 --> 00:01:24.850
Поместим теперь внутрь значение.

00:01:24.850 --> 00:01:26.370
И как мы это сделаем?

00:01:26.370 --> 00:01:29.584
Ну, у меня есть несколько стикеров.

00:01:29.584 --> 00:01:31.440
Откуда они взялись?

00:01:31.440 --> 00:01:34.660
Пусть количество заказанных чашек кофе
будет равно 2.

00:01:34.660 --> 00:01:36.710
Почему только 2?

00:01:36.710 --> 00:01:40.834
Одна для меня и другая -
для моей подруги Кэтрин.

00:01:40.834 --> 00:01:41.750
Спасибо.

00:01:41.750 --> 00:01:46.620
Теперь у нас есть переменная
под названием <i>numberOfCoffeesOrdered</i>

00:01:46.620 --> 00:01:48.120
и она имеет значение 2.

00:01:48.120 --> 00:01:50.260
Давай добавим это в код.

00:01:50.260 --> 00:01:53.180
Ранее мы использовали
постоянные значения для

00:01:53.180 --> 00:01:55.840
выражения количества
заказанных чашек кофе.

00:01:55.840 --> 00:01:59.330
Постоянное означает
фиксированное значение, как число 2.

00:01:59.330 --> 00:02:02.822
Технически, 5 и 2 -
тоже постоянные значения,

00:02:02.822 --> 00:02:07.126
мы говорим об использовании постоянных
для выражения количества именно сейчас.

00:02:07.126 --> 00:02:10.470
Так что, если мы установим
количество заказанных чашек кофе как 2,

00:02:10.470 --> 00:02:15.000
то для расчета стоимости нужно взять
2 раза по 5, ведь каждая чашка стоит $5.

00:02:15.000 --> 00:02:19.550
Если нам нужно, чтобы покупатели
платили за бумажную чашку, так как

00:02:19.550 --> 00:02:23.540
не приносят свою и поэтому губят деревья,
то добавим $2 за каждую чашку.

00:02:23.540 --> 00:02:26.830
Итак, 2 чашки по $2.

00:02:26.830 --> 00:02:30.320
Очевидно, что постоянная при этом -
не идеальное решение,

00:02:30.320 --> 00:02:33.640
так как нам приходится
повторять количество снова и снова.

00:02:33.640 --> 00:02:34.560
С другой стороны,

00:02:34.560 --> 00:02:39.200
для выражения количества заказанных чашек
можно использовать переменную.

00:02:39.200 --> 00:02:43.250
Так что, если мы скажем, что количество -
это переменная по имени <i>numberOfCoffees</i>,

00:02:43.250 --> 00:02:46.755
то сможем рассчитать стоимость,
используя лишь название переменной,

00:02:46.755 --> 00:02:50.520
<i>numberOfCoffees</i>,
и умножая ее на $5 за чашку.

00:02:50.520 --> 00:02:54.315
Для расчета цены бумажной чашки
возьмем снова название переменной,

00:02:54.315 --> 00:02:58.190
<i>numberOfCoffees</i>, и умножим на 2,
что означает $2.

00:02:58.190 --> 00:03:01.590
Разница между этими способами в том,
что вместо постоянного значения

00:03:01.590 --> 00:03:03.780
мы используем переменное.

00:03:03.780 --> 00:03:06.500
А затем значение переменной

00:03:06.500 --> 00:03:10.490
будет заменяться
при вычислении этого выражения.

00:03:10.490 --> 00:03:12.330
Итак, при расчете цены

00:03:12.330 --> 00:03:15.740
нужно лишь проверить, чему равно значение,
прежде, чем умножить его на 5.

00:03:15.740 --> 00:03:19.900
При использовании переменной
также добавится еще одно действие

00:03:19.900 --> 00:03:20.570
в самом начале:

00:03:20.570 --> 00:03:25.370
задать переменной <i>numberOfCoffees</i>
исходное значение.

00:03:25.370 --> 00:03:29.760
В нашем случае установим его как 2,
что тоже является постоянным числом.

00:03:29.760 --> 00:03:33.970
Но в этот раз мы используем постоянную
лишь в одном месте вместо многих.

00:03:33.970 --> 00:03:36.010
Конечный результат будет тот же,

00:03:36.010 --> 00:03:38.730
так как <i>numberOfCoffees</i>
установится на значении 2.

00:03:38.730 --> 00:03:41.860
То есть количество по-прежнему 2,
стоимость будет снова 10,

00:03:41.860 --> 00:03:44.310
а бумажные чашки будут стоить 4.

00:03:44.310 --> 00:03:47.270
Настоящее преимущество такого подхода -
возможность в любой момент

00:03:47.270 --> 00:03:50.190
поменять значение переменной.

00:03:50.190 --> 00:03:53.300
Пусть значение <i>numberOfCoffees</i> будет 3.

00:03:53.300 --> 00:03:55.430
Мне нужно поменять его лишь в одном месте

00:03:55.430 --> 00:03:57.880
и дальше все расчеты будут верными.

00:03:57.880 --> 00:04:00.080
Количество - по-прежнему <i>numberOfCoffees</i>,

00:04:00.080 --> 00:04:02.080
которое сейчас равно 3.

00:04:02.080 --> 00:04:04.475
Цена теперь -
<i>numberOfCoffees</i> умножить на 5.

00:04:04.475 --> 00:04:06.653
Стоимость будет 3 умножить на 5,

00:04:06.653 --> 00:04:10.543
а надбавка за бумажные чашки -
<i>numberOfCoffees</i> умножить на 2.

00:04:10.543 --> 00:04:12.399
То есть 3 умножить на 2.

00:04:12.400 --> 00:04:14.069
Если бы мы использовали постоянную,

00:04:14.069 --> 00:04:16.555
то нам пришлось бы
поменять количество на 3 вот тут.

00:04:16.555 --> 00:04:19.625
Также пришлось бы обновить
расчет цены на 3 умножить на 5.

00:04:19.625 --> 00:04:22.105
И за бумажные чашки - 3 на 2.

00:04:22.105 --> 00:04:24.125
Когда мы используем переменную,

00:04:24.125 --> 00:04:27.390
нам не нужно обращаться каждый раз
к определенному значению.

00:04:27.390 --> 00:04:29.390
Достаточно обратиться к имени переменной

00:04:29.390 --> 00:04:32.520
и мы автоматически получим
ее последнее значение.

00:04:33.730 --> 00:04:37.120
Посмотрим поближе,
как будет выглядеть код

00:04:37.120 --> 00:04:39.370
для создания и использования переменной.

00:04:39.370 --> 00:04:43.720
Чтобы создать переменную,
напишем <i>int numberOfCoffees = 2.</i>

00:04:43.720 --> 00:04:48.410
Появится переменная
под названием <i>numberOfCoffees</i>,

00:04:48.410 --> 00:04:51.990
а внутрь коробочки с переменной
поместится значение 2.

00:04:51.990 --> 00:04:56.740
Следующие строки используют переменную,
которую мы создали в первой,

00:04:56.740 --> 00:04:59.000
для обновления этого экрана.

00:04:59.000 --> 00:05:03.040
Можем отобразить количество кофе,
для чего посмотрим на эту переменную

00:05:03.040 --> 00:05:05.720
и проверим значение внутри,
которое равно 2.

00:05:05.720 --> 00:05:07.650
Итак, здесь отобразится 2.

00:05:07.650 --> 00:05:09.330
Для отображения цены обратимся

00:05:09.330 --> 00:05:14.360
к значению переменной <i>numberOfCoffees</i>,
у которой указано 2 внутри.

00:05:14.360 --> 00:05:18.170
Итак, 2 x 5 равно 10,
то есть стоимость будет $10.

00:05:19.310 --> 00:05:20.947
Я могу с легкостью изменить этот код,

00:05:20.947 --> 00:05:23.650
чтобы число заказанных чашек
равнялось 3 вместо 2.

00:05:23.650 --> 00:05:27.570
Так что мы теперь
кладем в коробочку число 3

00:05:27.570 --> 00:05:31.300
как исходное значение переменной.

00:05:31.300 --> 00:05:33.160
Эти же две строки кода менять не нужно,

00:05:33.160 --> 00:05:34.710
так как мы используем имя переменной.

00:05:35.710 --> 00:05:38.460
Вызываем <i>display numberOfCoffees</i>.

00:05:38.460 --> 00:05:40.930
Значение переменной равно 3.

00:05:40.930 --> 00:05:42.325
Так что отображается 3.

00:05:43.600 --> 00:05:48.260
Для вывода стоимости смотрим
на значение <i>numberOfCoffees</i>, то есть 3.

00:05:48.260 --> 00:05:51.070
Умножаем его на 5 и получаем $15.

00:05:51.070 --> 00:05:55.480
Вот как это изменение кода
будет выглядеть в Android Studio.

00:05:56.700 --> 00:06:00.690
Сейчас в качестве количества
используется постоянное значение 2.

00:06:00.690 --> 00:06:06.608
Создадим вместо него переменную,
я печатаю <i>int numberOfCoffees 2.</i>

00:06:07.840 --> 00:06:10.740
Так, теперь у меня есть
переменная со значением 2.

00:06:10.740 --> 00:06:14.640
Кстати, этот текст затенен, чем сообщает,
что число чашек никогда не использовалось,

00:06:14.640 --> 00:06:19.580
так как мы к нему еще не обращались,
но я собираюсь сделать это сейчас.

00:06:19.580 --> 00:06:21.430
Вместо постоянного значения 2,

00:06:21.430 --> 00:06:24.140
я собираюсь поменять его
на использование переменной.

00:06:24.140 --> 00:06:28.140
Автозаполнение предлагает нам ее имя,
так что просто нажимаем <b>Enter</b>

00:06:28.140 --> 00:06:29.940
и оно будет добавлено.

00:06:29.940 --> 00:06:33.180
Имя переменной больше не затенено,
так как мы его использовали

00:06:33.180 --> 00:06:34.730
как минимум в одном месте.

00:06:34.730 --> 00:06:37.180
Я могу повторить то же самое
для <i>displayPrice</i>.

00:06:37.180 --> 00:06:40.140
Вместо использования
постоянного значения 2,

00:06:40.140 --> 00:06:44.820
сделаю его переменной <i>numberOfCoffees</i>,
просто нажав <b>Enter</b> для автозаполнения.

00:06:44.820 --> 00:06:48.630
Технически, можно также задать
переменную для значения цены ($5).

00:06:48.630 --> 00:06:50.880
Однако, она используется
только в одном месте, так что

00:06:50.880 --> 00:06:53.360
я могу просто оставить ее
в виде постоянного значения.

00:06:53.360 --> 00:06:56.100
Теперь сохраним код
и запустим его на устройстве.

00:06:56.100 --> 00:06:57.830
Вот, как это будет выглядеть.

00:06:57.830 --> 00:07:00.800
Нажимаем кнопку ЗАКАЗ при количестве 2,
цена получается $10.00.

00:07:00.800 --> 00:07:06.500
В точности то же самое, что было ранее,
но наш код стал более здоровым.

00:07:06.500 --> 00:07:10.620
Здоровый означает, что в будущем
он будет менее подвержен ошибкам.

00:07:10.620 --> 00:07:13.020
Например, если кто-либо
попытался бы поменять код,

00:07:13.020 --> 00:07:16.400
и попробовал использовать количество
во многих других местах,

00:07:16.400 --> 00:07:20.840
то ему пришлось бы изменить число 2
в слишком большом количестве мест.

00:07:20.840 --> 00:07:24.200
Вместо этого мы использовали переменную
numberOfCoffees, так что нам нужно лишь

00:07:24.200 --> 00:07:28.210
изменить ее в одном месте
и тогда все автоматически обновится.

00:07:28.210 --> 00:07:31.330
Таким образом, не будет пропущена
какая-нибудь строка кода,

00:07:31.330 --> 00:07:34.060
в которой должно быть указано
последнее значение количества чашек.

00:07:34.060 --> 00:07:36.040
Его нужно заменить всего в одном месте.

00:07:37.290 --> 00:07:39.280
Прежде, чем вы попробуете
сделать это в Android Studio,

00:07:39.280 --> 00:07:42.780
выполните этот короткий тест.

00:07:42.780 --> 00:07:46.620
Напечатайте тут вот эту строку кода.

00:07:46.620 --> 00:07:49.790
Она создаст новую
целочисленную переменную,

00:07:49.790 --> 00:07:53.330
а эти две строки будут ее использовать.

00:07:53.330 --> 00:07:56.110
Я хочу, чтобы вы это
попробовали сперва потому,

00:07:56.110 --> 00:07:59.220
что так вы уделите внимание
каждому печатаемому знаку.

00:07:59.220 --> 00:08:02.310
Иначе, пропустив какой-либо знак,
вы можете получить ошибку в Android Studio

00:08:02.310 --> 00:08:04.790
и прочитать сообщение об ошибке
может быть непросто.

00:08:04.790 --> 00:08:07.840
Так что вперед,
напечатайте в точности то, что видите.

00:08:07.840 --> 00:08:11.190
Это поможет осознавать каждую букву кода,
будь она заглавной или строчной,

00:08:11.190 --> 00:08:14.850
есть ли между знаками пробелы

00:08:14.850 --> 00:08:16.550
или нет.

00:08:16.550 --> 00:08:19.090
Вы уже начинаете привыкать
к правилам Java в терминах

00:08:19.090 --> 00:08:24.100
создания или использования переменной,
а, как вы уже узнали ранее,

00:08:24.100 --> 00:08:27.140
каждое выражение Java-кода
должно заканчиваться точкой с запятой.

00:08:27.140 --> 00:08:29.230
Например, если вы напечатаете неправильно

00:08:29.230 --> 00:08:32.200
имя переменной, то получите ошибку.

00:08:32.200 --> 00:08:35.580
Однако, есть и другие практики -
стандартные и лучшие.

00:08:35.580 --> 00:08:40.090
Например, добавление пробела
до и после операторов вроде этого.

00:08:40.090 --> 00:08:43.690
Не сделав это, вы не получите ошибку,
но все же, в соответствии с

00:08:43.690 --> 00:08:47.940
лучшими практиками программирования,
лучше следовать соглашениям о стиле кода.

00:08:47.940 --> 00:08:50.020
Способ сделать код легко читаемым
после написания

00:08:50.020 --> 00:08:53.020
будет описан в следующем видео.

