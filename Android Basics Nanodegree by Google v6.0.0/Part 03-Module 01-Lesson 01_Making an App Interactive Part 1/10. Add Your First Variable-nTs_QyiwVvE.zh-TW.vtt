WEBVTT
Kind: captions
Language: zh-TW

00:00:00.430 --> 00:00:03.390
这一行代码表示的是创建一个变量。

00:00:03.390 --> 00:00:06.510
记住变量就像盒子，咖啡的数量，

00:00:06.510 --> 00:00:08.290
这一数值在这个变量里。

00:00:08.290 --> 00:00:10.700
在这一节课程中，我们会讲解这行代码的每个部分，然后

00:00:10.700 --> 00:00:13.500
我们会来创建更多的变量。

00:00:13.500 --> 00:00:17.040
你们也许已经注意到，在发布变量时有特定的规则。

00:00:18.160 --> 00:00:22.080
但我说发布一个变量，它的意思和定义一个变量以及

00:00:22.080 --> 00:00:23.970
创建一个变量是一样的。

00:00:23.970 --> 00:00:26.560
这是目前我们已经看过的一行代码。

00:00:26.560 --> 00:00:30.420
它遵循了Java中发布变量的特定格式。

00:00:30.420 --> 00:00:32.490
你可以把它当做是一个公式。

00:00:32.490 --> 00:00:35.840
首先，我需要说明一下哪种类型的数据可以作为变量。

00:00:35.840 --> 00:00:39.350
在这个例子中，它是一个整形数据，我们简称int。

00:00:39.350 --> 00:00:41.400
接着是变量的名字。

00:00:41.400 --> 00:00:42.130
在我们的例子中，

00:00:42.130 --> 00:00:46.830
变量的名字是numberOfCoffees，接下来是初值。

00:00:46.830 --> 00:00:50.310
本例中是2；代表点了2杯咖啡，然后

00:00:50.310 --> 00:00:54.250
根据Java的规则这个代码语句以一个；结束。

00:00:54.250 --> 00:00:56.860
我们将这行代码一次拆分成一个片段来讲解。

00:00:56.860 --> 00:00:58.580
第一个字代表数据类型，

00:00:58.580 --> 00:01:02.070
这是能在这个变量里面使用的数据类型。

00:01:02.070 --> 00:01:04.250
本例中，我们只使用整型数字。

00:01:04.250 --> 00:01:06.450
存储在变量中。

00:01:06.450 --> 00:01:09.690
就像我之前提到的int是整型（integer）的缩写。

00:01:09.690 --> 00:01:11.440
一个整型就是一整个数。

00:01:11.440 --> 00:01:13.735
基本上任何数字，包括0和

00:01:13.735 --> 00:01:16.845
负数都是，分数和小数则不是。

00:01:16.845 --> 00:01:21.450
0，5，145这些都是整型的例子。

00:01:21.450 --> 00:01:24.900
点的咖啡数量只能是一个完整的数字，比如1，

00:01:24.900 --> 00:01:26.320
2，4等等。

00:01:26.320 --> 00:01:29.890
我们不会想要顾客来点1.5杯咖啡。

00:01:29.890 --> 00:01:31.780
如果他们想要不只一杯咖啡，那么他们只能点2杯，

00:01:31.780 --> 00:01:35.020
然后他们可以将剩余的半杯给朋友或者什么的。

00:01:35.020 --> 00:01:38.450
至于负数，在我们的例子中没有任何意思。

00:01:38.450 --> 00:01:42.160
在Java中没有数据类型是只允许使用正数的。

00:01:42.160 --> 00:01:45.020
所以在接下去的课程中，我们会学习怎样增加

00:01:45.020 --> 00:01:48.690
能防止负数到变量里的代码。

00:01:48.690 --> 00:01:52.250
下一部分要做说明的是变量的名字。

00:01:52.250 --> 00:01:54.570
本例中它是numberOfCoffees。

00:01:54.570 --> 00:01:56.890
请注意它的格式是驼峰式大小写。

00:01:56.890 --> 00:02:00.230
它用小写字母开始，而因为有很多字，

00:02:00.230 --> 00:02:02.250
以大小写来区别每个字。

00:02:02.250 --> 00:02:06.450
你可以认为是在变量中添加了一个名字标签。

00:02:06.450 --> 00:02:09.160
你们可以参考这个变量的名字。

00:02:09.160 --> 00:02:11.490
这里我也已经像这样写出来了。

00:02:11.490 --> 00:02:13.960
这个变量盒子有了名字。

00:02:13.960 --> 00:02:15.950
如果你们想知道里面的值是什么。

00:02:15.950 --> 00:02:18.690
或者想要改动它的值，那你就需要使用这个名字。

00:02:18.690 --> 00:02:22.340
选择合适的变量名字其实取决于你们和开发者

00:02:22.340 --> 00:02:25.050
想要将变量用来干什么。

00:02:25.050 --> 00:02:28.420
本例中，因为变量是用来储存点的咖啡数量（numberOfCoffees）的，

00:02:28.420 --> 00:02:30.310
所以我会选这个名字。

00:02:30.310 --> 00:02:33.610
你可以选择其他名字，比如coffee count或者

00:02:33.610 --> 00:02:37.250
Number of coffees ordered或者ordered coffees。

00:02:37.250 --> 00:02:40.050
它真的可以是任意的，只要对

00:02:40.050 --> 00:02:43.680
其他的人来说容易理解该变量代表的意思。

00:02:43.680 --> 00:02:45.960
当我说变量的名字可以是任意的时候，

00:02:45.960 --> 00:02:49.570
实际上Java还是有几条关于变量名字的规则的。

00:02:49.570 --> 00:02:50.720
现在我们来看一下这些规则。

00:02:50.720 --> 00:02:54.560
我来输入几个变量名字。

00:02:54.560 --> 00:02:55.680
第一个看起来还好。

00:02:57.090 --> 00:03:00.070
这是来自Oracle的一份官方Java文档。

00:03:00.070 --> 00:03:02.130
这上面的部分讲的是变量，

00:03:02.130 --> 00:03:03.990
你们可以在空闲的时候看一下。

00:03:03.990 --> 00:03:06.870
下面这里是我们感兴趣的东西。

00:03:06.870 --> 00:03:09.110
它讲的是变量的命名。

00:03:09.110 --> 00:03:13.770
长度可以任意，但是真正很长的名字并不实用。

00:03:13.770 --> 00:03:16.810
另一方面，非常短的名字很好，但是

00:03:16.810 --> 00:03:21.550
如果只有一个字母，比如N，你就不知道n到底代表什么了。

00:03:21.550 --> 00:03:24.260
所以你就试着找到一个平衡，既要是描述性的名字，

00:03:24.260 --> 00:03:26.660
每次输入的时候又不至于感到痛苦。

00:03:26.660 --> 00:03:30.770
这里还有很多细节，如果感兴趣的话可以看一看。

00:03:30.770 --> 00:03:34.580
但是主要的意思是如果你的名字仅由一个单词组成，那么

00:03:34.580 --> 00:03:37.360
都用小写字母来拼写。

00:03:37.360 --> 00:03:40.470
比如cadence，speed，gear这些。

00:03:40.470 --> 00:03:43.330
如果变量的名字不只由一个单词组成，那么

00:03:43.330 --> 00:03:45.940
你就要以大写字母作为后面每个单词的开头，但是

00:03:45.940 --> 00:03:48.500
最开始还是要小写字母。

00:03:48.500 --> 00:03:50.700
所以gear Ratio就是一个例子，或者current Gear。

00:03:51.710 --> 00:03:54.580
我们咖啡的数量也是遵循这个规则的。

00:03:55.630 --> 00:03:59.560
接下来说明的是赋值运算符，也就是=。

00:04:00.880 --> 00:04:04.440
在数学课中，你们经常看到一加一等于二这样的运算。

00:04:04.440 --> 00:04:07.070
但是在Java中，等于的意义是不一样的。

00:04:07.070 --> 00:04:10.270
等于指的是将一个值赋予一个变量。

00:04:10.270 --> 00:04:14.628
本例中，我们将2分配给变量numberOfCoffees。

00:04:14.628 --> 00:04:16.029
还是用盒子的比喻，

00:04:16.029 --> 00:04:20.550
我们将2放到变量盒子里，表示咖啡的数量是2。

00:04:20.550 --> 00:04:22.250
所以无论何时你看到等号，

00:04:22.250 --> 00:04:24.950
就想着将抓住右手边的东西，然后

00:04:24.950 --> 00:04:28.570
将它放到左手边的变量里面。

00:04:28.570 --> 00:04:30.540
我们已经讲了一部分了，但是

00:04:30.540 --> 00:04:33.790
这里的2仅仅是变量的初值。

00:04:33.790 --> 00:04:36.530
所以你将2放到变量里面。

00:04:36.530 --> 00:04:40.380
记住根据这种数据类型

00:04:40.380 --> 00:04:42.270
初值必须是一个有效的数值。

00:04:42.270 --> 00:04:44.800
本例中的变量只允许是整型。

00:04:44.800 --> 00:04:49.190
2是一个有效的整型，所以可以被放入变量中。

00:04:50.500 --> 00:04:54.580
最后但同样重要的是分号;，我们以它结尾。

00:04:54.580 --> 00:04:56.620
先总结以下，当创建一个变量的时候，

00:04:56.620 --> 00:05:00.090
你需要注意数据类型，接着是变量的名字，

00:05:00.090 --> 00:05:04.440
然后是等号，初值，最后就是分号。

00:05:05.510 --> 00:05:08.570
本例中，我们创建的是名叫numberOfCoffees的变量。

00:05:08.570 --> 00:05:12.770
数据类型是int，所以只有整型数据才能被储存在变量中。

00:05:12.770 --> 00:05:17.110
然后我们将2作为变量的初值。

00:05:17.110 --> 00:05:19.910
你也可以根据我们所讲的规则更改变量的名字。

00:05:19.910 --> 00:05:24.070
也可以改变初值，只要它的数据类型不变。

00:05:24.070 --> 00:05:27.550
数据类型不能改变，它必须是int，I-N-T。

00:05:27.550 --> 00:05:30.240
我们也会学习其他的数据类型，

00:05:30.240 --> 00:05:32.410
那些也有特殊的拼写方式。

00:05:33.530 --> 00:05:36.900
现在当你需要用到一个变量的时候，只要用它的名字，

00:05:36.900 --> 00:05:38.410
当程序正在运行的时候，

00:05:38.410 --> 00:05:41.320
它就会以真实的值被调用出来。

00:05:42.350 --> 00:05:43.490
现在我想让你们尝试一下

00:05:43.490 --> 00:05:47.080
将这些代码加到你们的app中，请不要直接复制粘贴，

00:05:47.080 --> 00:05:51.310
因为我想要你们练习输入、创建和使用变量。

00:05:51.310 --> 00:05:52.800
然后继续，在你们的手机上运行程序。

00:05:52.800 --> 00:05:55.390
确保当你们点击Order按钮时，看到的是这个。

00:05:56.760 --> 00:05:59.770
在那之后，我想要你们做一点点实验。

00:05:59.770 --> 00:06:01.940
试着指定一个新的初值给这个变量。

00:06:03.160 --> 00:06:06.070
然后继续，尝试分配一个新的变量名字。

00:06:06.070 --> 00:06:07.420
换掉numberOfCoffees，

00:06:07.420 --> 00:06:09.930
试一下其他的，比如说重量。

00:06:11.290 --> 00:06:14.630
初学者的一个错误是你认为输入的是正确的，

00:06:14.630 --> 00:06:17.650
因为你们的眼镜扫过整个是很快的。

00:06:17.650 --> 00:06:20.140
但是如果你们仔细一个字一个字看的话

00:06:20.140 --> 00:06:21.950
会发现可能有一个问题。

00:06:23.020 --> 00:06:25.810
这会花费你们一些时间，但是慢慢来，

00:06:25.810 --> 00:06:29.050
注意看你们输入的每一个字。

00:06:29.050 --> 00:06:32.650
如果你们有错误，试着看一下错误信息。

00:06:32.650 --> 00:06:38.160
比如，这条错误信息说不能解析符号numberOCoffees。

00:06:38.160 --> 00:06:41.160
Java没有识别出numberOCoffees是什么，

00:06:41.160 --> 00:06:44.950
因为变量的真正名字是numberOfCoffees。

00:06:44.950 --> 00:06:48.370
希望你们能找到错误的原因，或者也可以点击undo，

00:06:48.370 --> 00:06:49.900
这样也可以解决错误。

00:06:51.080 --> 00:06:54.370
或者你可以回顾那些你知道可以运行的代码，比如我们给你的代码。

00:06:55.720 --> 00:06:57.780
你们完成后，请检查这些盒子然后继续。

