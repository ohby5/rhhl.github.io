WEBVTT
Kind: captions
Language: zh-CN

00:00:00.008 --> 00:00:00.980
嗨 Katherine

00:00:00.980 --> 00:00:01.580
— 嗯？ — 所以

00:00:01.580 --> 00:00:03.620
当我在应用里点击 + 按钮

00:00:03.620 --> 00:00:05.380
咖啡的数目会增加

00:00:05.380 --> 00:00:07.320
它从2杯变成了3杯

00:00:07.320 --> 00:00:10.110
当我们再次点击 + 按钮时会发生什么呢？

00:00:10.110 --> 00:00:11.990
它仍然保持3不变

00:00:11.990 --> 00:00:12.590
对

00:00:12.590 --> 00:00:15.700
无论我们在应用中点击 + 按钮多少次

00:00:15.700 --> 00:00:18.360
咖啡的数目保持3不变

00:00:18.360 --> 00:00:19.930
— 对 — 为什么会这样？

00:00:19.930 --> 00:00:23.870
我相信原因在于我们的代码 我们只更新到3

00:00:23.870 --> 00:00:25.200
我们没有让它超出这个值

00:00:25.200 --> 00:00:27.720
这个数字是固定在里面的

00:00:27.720 --> 00:00:29.100
— 对 — 你知道这让我想起什么吗？

00:00:29.100 --> 00:00:30.040
什么？

00:00:30.040 --> 00:00:32.840
我大学的计算机科学的教授曾经说过

00:00:32.840 --> 00:00:33.340
什么？

00:00:34.410 --> 00:00:36.230
当你提交你最后的项目时

00:00:36.230 --> 00:00:37.100
然后呢？

00:00:37.100 --> 00:00:39.100
不要出现神奇的数字

00:00:39.100 --> 00:00:40.260
等等 什么是神奇的数字？

00:00:40.260 --> 00:00:41.730
3 是个神奇的数字

00:00:41.730 --> 00:00:43.930
— 好 — 它是神奇的数字 因为

00:00:43.930 --> 00:00:46.475
我们在大脑中做好了运算 但是要显示到电脑上

00:00:46.475 --> 00:00:48.115
我们要告诉它正确答案

00:00:48.115 --> 00:00:52.535
实际上如果计算机能自己计算就更好了

00:00:52.535 --> 00:00:53.105
等一下

00:00:53.105 --> 00:00:55.025
当你说到数学运算时

00:00:55.025 --> 00:00:56.515
— 嗯 — 我需要写点东西

00:00:56.515 --> 00:00:57.565
好

00:00:57.565 --> 00:00:58.515
我们写一些伪代码

00:00:59.555 --> 00:01:01.895
我们先写这个对应的伪代码

00:01:01.895 --> 00:01:04.595
假设我们已经创建了一个quantity 变量并设它的值为2

00:01:04.595 --> 00:01:07.575
当按下 + 按钮时

00:01:07.575 --> 00:01:10.450
我们将获取当前值为2的 quantity 变量

00:01:10.450 --> 00:01:12.480
加1使它变成3 并且

00:01:12.480 --> 00:01:16.550
将它作为新的值赋值给 quantity  进行存储

00:01:16.550 --> 00:01:19.510
如果我们再次点击 + 按钮 然后获取当前值为3的 quantity 

00:01:19.510 --> 00:01:23.840
加1使它变成4

00:01:23.840 --> 00:01:26.700
然后将它赋值给 quantity 变量

00:01:26.700 --> 00:01:30.200
这些就是 Java 代码

00:01:30.200 --> 00:01:32.310
首先我们对变量进行初始化

00:01:32.310 --> 00:01:33.980
如果再次按下 + 按钮

00:01:33.980 --> 00:01:36.890
然后就给已经存在的 quantity  值加1

00:01:36.890 --> 00:01:39.990
然后将它作为新值赋值给 quantity  变量

00:01:41.670 --> 00:01:45.160
当你阅读这些代码的时候 你可以在大脑中想像这些盒子

00:01:45.160 --> 00:01:47.850
虽然我们习惯从左到右阅读东西

00:01:47.850 --> 00:01:50.960
但是我通常都是先从等号的右边开始

00:01:51.970 --> 00:01:54.240
在这个例子里 我们获取 quantity 的当前值

00:01:54.240 --> 00:01:58.100
它的当前值是2 然后我们给它加1 使它变成3

00:01:58.100 --> 00:02:02.090
然后我们把3赋值给变量 像这样

00:02:02.090 --> 00:02:05.590
右手边是我们之前学习过的表达式

00:02:05.590 --> 00:02:08.850
一个表达式由变量 操作符和

00:02:08.850 --> 00:02:10.630
值等组成

00:02:10.630 --> 00:02:15.200
如果我们再次点击 + 按钮 我们可以说对 quantity 的操作是把它的值加1

00:02:15.200 --> 00:02:17.660
这时候 quantity  的值为3

00:02:17.660 --> 00:02:20.680
然后再加1就变成了4

00:02:20.680 --> 00:02:23.970
然后将4作为新的变量值进行存储 像这样

00:02:25.320 --> 00:02:27.660
事实上 我们可以简化一下这个模式

00:02:27.660 --> 00:02:31.290
点击 + 按钮时 计算机可以重复处理

00:02:31.290 --> 00:02:35.940
而不是写一个新的代码行来指定

00:02:35.940 --> 00:02:40.010
咖啡数目的确切值 我们只要执行 quantity = quantity + 1

00:02:40.010 --> 00:02:44.200
然后继续替换 quantity 的当前值

00:02:44.200 --> 00:02:46.060
这样的话会灵活很多

00:02:46.060 --> 00:02:48.395
如果你想让 quantity 的初始值为3

00:02:48.395 --> 00:02:51.595
代码的最后一行不需要修改

00:02:51.595 --> 00:02:55.675
因为我们一直使用 quantity 最近的值 无论它是什么

00:02:55.675 --> 00:02:59.535
在我们以前的方法里 如果我们想要将 quantity 的值变成3

00:02:59.535 --> 00:03:02.985
在你点击 + 按钮以后 你需要写一行新的代码

00:03:02.985 --> 00:03:07.360
也就是说 quantity 的值是4  然后将它更新成5

00:03:07.360 --> 00:03:10.960
当我们每次将 quantity 更新为一个新的值时

00:03:10.960 --> 00:03:13.870
计算机很难知道它们之间的模式是什么

00:03:14.870 --> 00:03:18.680
相反如果我们使用基于变量和方法

00:03:18.680 --> 00:03:21.750
都是可预测的方式更新 quantity 的值

00:03:21.750 --> 00:03:25.090
每次按下 + 按钮后

00:03:25.090 --> 00:03:27.929
在咖啡订购的应用里 这个方法效率提高很多

00:03:28.930 --> 00:03:30.440
每次我们点击 + 按钮

00:03:30.440 --> 00:03:33.590
我们可以只给 quantity 的值加1

00:03:33.590 --> 00:03:37.330
尝试将每一行代码写入我们提供的这些

00:03:37.330 --> 00:03:38.860
文本框里

00:03:38.860 --> 00:03:41.060
注意每个字符和符号

00:03:42.120 --> 00:03:45.900
这是你第一次更新一个变量 使用变量本身

00:03:45.900 --> 00:03:48.850
所以确保你正确输入变量名

00:03:48.850 --> 00:03:52.190
当你完成后 将对应每一行的代码的 quantity 的当前值

00:03:52.190 --> 00:03:54.720
写在每一个方框的后面

