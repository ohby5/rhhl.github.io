WEBVTT
Kind: captions
Language: zh-CN

00:00:01.400 --> 00:00:01.970
嘿

00:00:01.970 --> 00:00:02.950
— 嘿 — 这是怎么回事

00:00:02.950 --> 00:00:04.442
等一会儿

00:00:04.442 --> 00:00:05.920
— 好 — 好

00:00:05.920 --> 00:00:08.880
所以 我们的应用中有一个变量叫做咖啡数量

00:00:08.880 --> 00:00:09.840
你知道它是如何订购的吗

00:00:09.840 --> 00:00:10.840
这个盒子

00:00:10.840 --> 00:00:11.942
在里面有一个为2的值

00:00:11.942 --> 00:00:14.600
— 正确 — 如果我点击 + 按钮

00:00:14.600 --> 00:00:16.180
在应用里

00:00:16.180 --> 00:00:17.500
— 嘟 — 然后

00:00:17.500 --> 00:00:19.440
我们所拥有的咖啡杯数是多少呢？

00:00:19.440 --> 00:00:24.160
这样 通过加1新的值应该为3

00:00:24.160 --> 00:00:25.230
好 所以我将

00:00:25.230 --> 00:00:28.105
扔掉这个旧的值 并放入这个新的值

00:00:28.105 --> 00:00:29.720
— 好 — 如果我再次点击 + 按钮

00:00:29.720 --> 00:00:31.530
嘟

00:00:31.530 --> 00:00:33.420
那么我有多少杯呢？

00:00:33.420 --> 00:00:36.630
现在好了 我们将增加到4个

00:00:36.630 --> 00:00:38.888
— 是的 — 扔掉这个 把4放进去

00:00:38.888 --> 00:00:40.630
— 好 — 现在 如果我点击 – 按钮

00:00:40.630 --> 00:00:42.160
哔 哔 哔

00:00:42.160 --> 00:00:42.830
我现在有多少杯

00:00:42.830 --> 00:00:44.380
咖啡呢？

00:00:44.380 --> 00:00:46.476
但是 Catherine 我记得你说过不用算术吧

00:00:46.476 --> 00:00:47.848
它是1

00:00:47.848 --> 00:00:49.520
写下来

00:00:49.520 --> 00:00:50.240
谢谢 好

00:00:50.240 --> 00:00:50.820
这里

00:00:50.820 --> 00:00:51.560
— 1 — 是的

00:00:51.560 --> 00:00:52.740
我给你

00:00:52.740 --> 00:00:53.820
谢谢

00:00:53.820 --> 00:00:56.420
现在让我们添加所有的这些到应用中

00:00:56.420 --> 00:01:00.680
接下来我们将进行算数 让我们看一下伪代码

00:01:00.680 --> 00:01:05.000
对于怎样点击应用里 + 按钮能够增加订购咖啡的数量

00:01:05.000 --> 00:01:07.950
伪代码是一个高层次的描述

00:01:07.950 --> 00:01:10.180
它解释应用的每一步将会做什么

00:01:10.180 --> 00:01:12.650
我们可以把它写下来 好像给某个人描述它

00:01:12.650 --> 00:01:15.810
因为它的意义是给人阅读而不是给计算机

00:01:15.810 --> 00:01:19.270
这个可以帮助我们条理清晰的理清

00:01:19.270 --> 00:01:21.350
程序的下一步该做什么

00:01:21.350 --> 00:01:24.630
当我们写伪代码时 不必遵循任何的特殊结构或格式

00:01:24.630 --> 00:01:28.090
只需要包含有用的信息 这将帮助我们编写

00:01:28.090 --> 00:01:28.980
之后的代码

00:01:30.180 --> 00:01:33.450
对于我们的场景中 我们想要定义一个 quantity 变量来跟踪

00:01:33.450 --> 00:01:38.080
订购咖啡的数量 并且我们初始化为2

00:01:38.080 --> 00:01:41.550
如果按下 + 按钮 我们可以更新 quantity 值为3

00:01:42.550 --> 00:01:45.090
如果我多次点击 + 按钮

00:01:45.090 --> 00:01:46.850
我们可以增加 quantity 到4和5

00:01:48.090 --> 00:01:51.780
一旦我们头脑中有了代码应该做什么的概念性想法

00:01:51.780 --> 00:01:54.600
然后我们可以专注于编写真正的 Java 代码

00:01:54.600 --> 00:01:58.508
在这一点我们不必担心 Java 的语法 大小写

00:01:58.508 --> 00:02:00.100
符号 间距

00:02:00.100 --> 00:02:03.160
和关于如何编写 Java 代码的其他特定规则

00:02:03.160 --> 00:02:07.030
真正的代码看起来像这样 定义一个 quantity 变量

00:02:07.030 --> 00:02:10.633
设置为2 所以有 int quantity = 2；

00:02:10.633 --> 00:02:13.440
这是上一个视频中讲的东西

00:02:13.440 --> 00:02:16.487
更新 quantity 的值为3 我们只需要写 quantity = 3

00:02:16.487 --> 00:02:17.140
后边跟一个分号

00:02:17.140 --> 00:02:22.670
如果我们更新 quantity 为4和5 代码就是这样的

00:02:24.160 --> 00:02:27.570
对于这个测验 我希望你输入这几行代码

00:02:27.570 --> 00:02:29.590
在提供的文本框中

00:02:29.590 --> 00:02:32.440
这是练习如何在 Java中创建一个整型变量

00:02:32.440 --> 00:02:34.230
并在 Java 中更新它

00:02:34.230 --> 00:02:38.630
密切关注你输入的每个字符和符号

00:02:38.630 --> 00:02:41.540
当你做了 对于你输入的代码的格式

00:02:41.540 --> 00:02:43.360
有任何观察吗？

00:02:43.360 --> 00:02:45.950
例如 你认识的任何模式？

00:02:45.950 --> 00:02:48.190
在这个文本框中写下你的观察

