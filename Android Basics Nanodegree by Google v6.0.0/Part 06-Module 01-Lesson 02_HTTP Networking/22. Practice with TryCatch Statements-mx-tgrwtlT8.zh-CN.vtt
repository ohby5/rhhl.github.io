WEBVTT
Kind: captions
Language: zh-CN

00:00:00.140 --> 00:00:03.400
让我们先了解一下 makeHttpRequest 方法

00:00:03.400 --> 00:00:05.730
在以蓝色突出显示
的 try 区块中

00:00:05.730 --> 00:00:09.480
我们尝试发出 HTTP 请求
并读取响应

00:00:09.480 --> 00:00:13.042
然而 该代码中的某些行
可能引发 IO 例外

00:00:13.042 --> 00:00:16.100
因此 需使用 catch 区块
来捕获这些例外

00:00:16.100 --> 00:00:16.910
最后

00:00:16.910 --> 00:00:20.850
如果 URL 连接不为空
我们则会断开连接

00:00:20.850 --> 00:00:23.490
现在 如果你正在文档中查找
我们使用的这些方法

00:00:23.490 --> 00:00:27.320
你会发现其会将
IOException 声明为预期例外

00:00:27.320 --> 00:00:30.059
以 try 区块中的
第一行为例

00:00:30.059 --> 00:00:33.420
调用 URL 对象上的
openConnection

00:00:33.420 --> 00:00:36.595
该方法本应返回
一个 URL 连接实例 但是

00:00:36.595 --> 00:00:39.944
如果在打开连接时出现问题
则可能会引发 IO

00:00:39.944 --> 00:00:40.827
例外

00:00:40.827 --> 00:00:44.585
URL 连接类连接方法
同样可能引发几项

00:00:44.585 --> 00:00:48.491
例外 例如
SocketTimeoutException 和 IOException

00:00:49.980 --> 00:00:51.498
因此 回到我们的测验

00:00:51.498 --> 00:00:55.800
我们在 makeHTTPRequest 方法中捕获的是 IOException

00:00:55.800 --> 00:00:57.766
对于 extractFeatureFromJSON() 方法

00:00:57.766 --> 00:01:01.220
我们在所有 JSON 解析代码
的周围设有另一个 try catch 区块

00:01:01.220 --> 00:01:04.830
无论解析过程中任何步骤引发了
JSONException 我们都可将其捕获并

00:01:04.830 --> 00:01:05.379
记录错误

00:01:07.150 --> 00:01:10.290
如果检查文档 我们会发现
我们代码中的许多地方

00:01:10.290 --> 00:01:12.360
都可能
引发例外

00:01:12.360 --> 00:01:13.003
对于初学者

00:01:13.003 --> 00:01:16.460
仅在调用 JSONObject 构造函数时
可能会引发 JSONException

00:01:16.460 --> 00:01:20.485
如果输入字符串并不完全符合
JSON 格式要求 则会引发例外

00:01:20.485 --> 00:01:24.050
或者 当我们尝试提取 JSONArray 时
可能会引发相同例外

00:01:24.050 --> 00:01:27.810
提取特定字段同样会
引发 JSONException

00:01:27.810 --> 00:01:31.280
尤其是在我们尝试提取
名称不存在的字段时

00:01:31.280 --> 00:01:35.380
回到测验 因此
第二个问题的答案是

00:01:35.380 --> 00:01:39.697
在 extractFeatureFromJSON() 方法中捕获的是 JSONException 的实例

