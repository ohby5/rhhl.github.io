WEBVTT
Kind: captions
Language: zh-CN

00:00:00.720 --> 00:00:03.530
让我们回到 HTTP 请求

00:00:03.530 --> 00:00:07.070
在建立网络连接之前 我们 需要指定一些

00:00:07.070 --> 00:00:08.990
其他的必要 详细信息

00:00:10.160 --> 00:00:15.285
到目前为止 HttpUrlConnection 对象只 包含此请求的目标地址 

00:00:15.285 --> 00:00:19.025
我们仍需要定义服务器应在 请求中执行的

00:00:19.025 --> 00:00:21.275
操作

00:00:21.275 --> 00:00:25.865
此定义使用之前描述的其中一个 HTTP 动词 (例如 GET 或 POST)

00:00:25.865 --> 00:00:27.335
来表示

00:00:27.335 --> 00:00:32.220
下一步是确保设置所需的 HTTP 方法 通过此方法

00:00:32.220 --> 00:00:37.450
可以明确了解你到底要使用 HTTP 连接做什么

00:00:37.450 --> 00:00:43.370
你应注意一些常见的 HTTP 方法 类型或操作

00:00:43.370 --> 00:00:45.530
当我们获取要返回 给我们的信息时

00:00:45.530 --> 00:00:47.300
可以使用的最佳方法是 GET

00:00:47.300 --> 00:00:50.650
在 HTTP 中 有多个方法 可以使用

00:00:50.650 --> 00:00:55.880
GET 是最常用的选项 但当需要更新服务器上的

00:00:55.880 --> 00:00:59.950
一些信息时 (例如 更新博客 帖子或者输入账单信息或

00:00:59.950 --> 00:01:04.950
网上购物) 也经常使用 POST

00:01:06.590 --> 00:01:09.950
换言之  GET 请求通常从

00:01:09.950 --> 00:01:14.780
服务器读取信息并 将其发送回客户端

00:01:14.780 --> 00:01:18.390
而 POST 请求通常包含要 写入到服务器中的

00:01:18.390 --> 00:01:19.830
信息

00:01:19.830 --> 00:01:21.690
查看链接的列表和注释 以及在哪里可以详细了解

00:01:21.690 --> 00:01:25.079
各种其他的 HTTP 方法

00:01:26.170 --> 00:01:29.500
例如  当你在 web 浏览器中输入 URL 时

00:01:29.500 --> 00:01:34.230
将会生成包含目标 URL 的 GET 请求并将其发送至服务器

00:01:34.230 --> 00:01:37.730
此请求还包含一个头部分 该部分包含关于请求的

00:01:37.730 --> 00:01:39.040
元数据

00:01:39.040 --> 00:01:41.330
其中包含客户端可以 接受的语言类型、

00:01:41.330 --> 00:01:44.170
编码等事项 关于 客户端在屏幕

00:01:44.170 --> 00:01:47.418
维度中有操作 系统的信息

00:01:47.418 --> 00:01:50.380
移动应用从服务器请求

00:01:50.380 --> 00:01:53.410
信息时 也进行相同的 操作

00:01:53.410 --> 00:01:57.200
那么 尽管你可以查看用于 确认的给定 KPI 文档 

00:01:57.200 --> 00:02:00.860
但你如何能够确定要设置 哪个请求

00:02:01.960 --> 00:02:07.160
每个 API 端点应明确地与 所需的 HTTP 操作一同存档

00:02:07.160 --> 00:02:12.120
在没有操作指定 GET 为常用 选项的情况下 API 端点也应与

00:02:12.120 --> 00:02:17.000
我们先前说明的 GET 和 POST 行为保持一致

00:02:17.000 --> 00:02:20.460
例如 我们回到 Twitter 公共 API

00:02:20.460 --> 00:02:23.940
其中提供了许多端点 用于 提取有关用户、推文、朋友

00:02:23.940 --> 00:02:26.520
或帐户信息的信息

00:02:26.520 --> 00:02:30.150
Twitter 预先指定这些端点中的 任何端点是否为 GET 或 POST

00:02:30.150 --> 00:02:32.040
请求

00:02:32.040 --> 00:02:36.800
让我们单击此 API 端点 以获得用户发布的最新

00:02:36.800 --> 00:02:38.160
推文

00:02:39.380 --> 00:02:42.960
向下滚动一点就可以找到 资源 URL

00:02:42.960 --> 00:02:45.540
在此可以提出 HTTP 请求

00:02:45.540 --> 00:02:48.560
GET 是 HTTP 请求 方法类型 因为我们

00:02:48.560 --> 00:02:51.890
正在从 Twitter 服务器 读取现有推文

00:02:51.890 --> 00:02:55.770
还有许多通过提出 GET 请求 来获取用户的直接消息

00:02:55.770 --> 00:02:59.340
列表或朋友列表的 许多其他示例

00:02:59.340 --> 00:03:03.820
另一方面 如果想要向 Twitter 服务器写入新数据

00:03:03.820 --> 00:03:06.090
则需要使用 POST 请求

00:03:06.090 --> 00:03:09.560
通过 API 端点可以 指向新的推文

00:03:09.560 --> 00:03:15.150
仅需连接到新的 URL 并 指定 POST 方法类型

00:03:15.150 --> 00:03:18.360
切记 如果要提出 POST 请求

00:03:18.360 --> 00:03:21.580
需要一同发送新的 数据

00:03:21.580 --> 00:03:25.540
在这种情况下 新推文的消息文本

00:03:25.540 --> 00:03:29.450
写入到服务器时使用的是 POST 这意味着你正在创建、

00:03:29.450 --> 00:03:32.070
删除或更新实体

00:03:32.070 --> 00:03:35.220
这样可以使其他客户端 在为最新推文执行 GET

00:03:35.220 --> 00:03:38.570
请求时可以使用 新的信息

00:03:38.570 --> 00:03:42.080
下面是另一个简单的例子 Instagram API

00:03:42.080 --> 00:03:45.730
这些端点允许你获取有关 用户或者其最近发布或

00:03:45.730 --> 00:03:49.990
点赞的图片或视频 文件的信息

00:03:49.990 --> 00:03:53.050
所有这些请求都将从服务器 读取信息 因此这些请求

00:03:53.050 --> 00:03:55.130
都是 GET 请求

00:03:55.130 --> 00:03:59.420
另一方面 Instagram 注释 API 允许你获取

00:03:59.420 --> 00:04:01.710
或修改 POST 注释

00:04:01.710 --> 00:04:06.100
在这里可以看到的请求 方法类型为 GET、POST 或 DEL

00:04:06.100 --> 00:04:10.170
有时你会将 DEL 视为自己的操作

00:04:10.170 --> 00:04:13.165
而 POST 将用于 创建注释

00:04:13.165 --> 00:04:15.560
DEL 用于删除注释

00:04:15.560 --> 00:04:19.310
有时 所有行为会组合 成一个通用 POST 请求

00:04:19.310 --> 00:04:22.970
该请求将处理对服务器数据 进行的任何类型的修改

00:04:22.970 --> 00:04:25.400
这仅仅取决于 API 的 构建方法

00:04:25.400 --> 00:04:29.490
有关所有 API 请求方法的 列表 请参阅下面的链接

00:04:29.490 --> 00:04:31.090
但本课程的目的

00:04:31.090 --> 00:04:35.200
只是为了让你熟悉 GET 与 POST 之间的

00:04:35.200 --> 00:04:40.090
区别 或者从网页服务器读取 或向其写入的过程

