WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:02.520
Every piece of data,
whether it be text or images,

00:00:02.520 --> 00:00:05.810
is actually stored in byte-sized chunks.

00:00:05.810 --> 00:00:09.362
When an app receives the data,
it comes in as an input stream,

00:00:09.362 --> 00:00:11.850
i.e., a stream of these bytes.

00:00:11.850 --> 00:00:16.149
The input stream is an abstraction, that
is, it hides the details of whether or

00:00:16.149 --> 00:00:20.890
not the bytes represent a file or
a webpage or even media content.

00:00:20.890 --> 00:00:23.150
It's just a stream of information.

00:00:23.150 --> 00:00:26.360
Then when we've received this stream,
we need to reassemble the bytes

00:00:26.360 --> 00:00:29.090
into something meaningful
that our app can use.

00:00:29.090 --> 00:00:33.070
For text data, the bytes need to be
converted back into characters, so

00:00:33.070 --> 00:00:35.260
the Buffered Reader class
allows us to do that.

00:00:36.260 --> 00:00:38.580
We then build up a JSON response string,

00:00:38.580 --> 00:00:40.809
where the string is essentially
a stream of characters.

00:00:42.080 --> 00:00:45.070
Let's look at how this conversion
process is accomplished in code

00:00:45.070 --> 00:00:47.330
in the makeHttpRequest method.

00:00:47.330 --> 00:00:53.370
Notice that we start with two variables,
urlConnection of type HttpURLConnection,

00:00:53.370 --> 00:00:56.010
and inputStream of type InputStream.

00:00:56.010 --> 00:00:58.180
Now, instead of
returning a final result,

00:00:58.180 --> 00:01:02.302
like a string, sometimes a function
will return an inputStream.

00:01:02.302 --> 00:01:06.430
An inputStream allows you to retrieve
information one chunk of data at a time.

00:01:06.430 --> 00:01:09.700
This is useful if the stream will
be returning a ton of data, or

00:01:09.700 --> 00:01:13.434
if the stream represents some data
source that will deliver data over time.

00:01:13.434 --> 00:01:16.822
The HttpURLConnection class,
which we use to get our JSON data,

00:01:16.822 --> 00:01:19.479
returns the server's
response via inputStream.

00:01:21.000 --> 00:01:24.111
Next, we have a helper method
to read the data that comes from

00:01:24.111 --> 00:01:25.120
the inputStream.

00:01:25.120 --> 00:01:27.400
Let's jump to the readFromStream method.

00:01:27.400 --> 00:01:31.350
Remember that an inputStream doesn't
actually return characters we can read

00:01:31.350 --> 00:01:32.890
like numbers or letters.

00:01:32.890 --> 00:01:35.820
Instead it returns raw binary data,
ones and

00:01:35.820 --> 00:01:39.860
zeros, with no specific instructions
on what that data represents.

00:01:39.860 --> 00:01:44.930
That data might be an image, a sound or
some geoJSON data for us to parse.

00:01:44.930 --> 00:01:48.020
In this case, we know that the data
coming back from our inputStream

00:01:48.020 --> 00:01:51.340
is indeed just text, and
we can use the inputStreamReader

00:01:51.340 --> 00:01:56.120
to handle that translation process from
raw data to human readable characters.

00:01:56.120 --> 00:01:59.590
Now, the InputStreamReader only allows
you to read a single character at

00:01:59.590 --> 00:02:03.190
a time, which can have some very rough
performance implications, depending on

00:02:03.190 --> 00:02:06.760
how the underlying inputStream
is actually providing the data.

00:02:06.760 --> 00:02:09.520
For instance, retrieving data
from your computer's hard drive

00:02:09.520 --> 00:02:12.560
is quite fast if you're reading
large chunks of data at once.

00:02:12.560 --> 00:02:15.495
However, if you try to read data from a
hard drive a single character at a time,

00:02:15.495 --> 00:02:17.420
it'll take a very long time.

00:02:17.420 --> 00:02:21.988
This can be avoided by wrapping an
inputStreamReader in a BufferedReader.

00:02:21.988 --> 00:02:25.040
Now a BufferedReader will accept
your request for a character and

00:02:25.040 --> 00:02:28.460
will instead read and
save a larger chunk of data around it.

00:02:28.460 --> 00:02:30.230
When you go to request
another character,

00:02:30.230 --> 00:02:33.530
the BufferedReader will then be able
to satisfy your request from the data

00:02:33.530 --> 00:02:37.730
it read ahead of time instead of having
to go back to the inputStreamReader.

00:02:37.730 --> 00:02:41.380
So as you can see, in order to begin
reading data from our inputStream,

00:02:41.380 --> 00:02:45.040
we actually pass it in as a parameter
to our InputStreamReader instance

00:02:45.040 --> 00:02:46.210
via the constructor.

00:02:46.210 --> 00:02:50.257
We also supply a character set, or
Charset for short, to the constructor.

00:02:50.257 --> 00:02:54.680
A Charset specifies how to translate
the inputStream's raw data into readable

00:02:54.680 --> 00:02:56.405
characters one byte at a time.

00:02:56.405 --> 00:03:00.693
That is, it knows how to decode each
byte into a specific human readable

00:03:00.693 --> 00:03:03.347
character like a capital A or
an equal sign.

00:03:03.347 --> 00:03:05.900
UTF-8 is the Unicode
character encoding used for

00:03:05.900 --> 00:03:09.100
almost every piece of text
you'll find on the web.

00:03:09.100 --> 00:03:12.200
The last thing we do is we wrap the
InputStreamReader in a BufferedReader,

00:03:12.200 --> 00:03:14.810
and we're ready to start reading lines.

00:03:14.810 --> 00:03:19.709
Okay, I know, these wrappings and layers
can seem super confusing and roundabout.

00:03:19.709 --> 00:03:22.599
An inputStream,
wrapped in an inputStreamReader,

00:03:22.599 --> 00:03:24.300
wrapped in a BufferedReader?

00:03:24.300 --> 00:03:25.020
Surely there must be

00:03:25.020 --> 00:03:28.850
a simpler way to read data back
from an HttpURLConnection.

00:03:28.850 --> 00:03:29.890
And indeed,

00:03:29.890 --> 00:03:33.770
a read through the whole response's
text method would be pretty convenient.

00:03:33.770 --> 00:03:37.120
The problem though,
is that the method wouldn't be reusable.

00:03:37.120 --> 00:03:39.550
So instead of pre-built
end to end solutions,

00:03:39.550 --> 00:03:43.020
powerful programming frameworks and
libraries usually give you individual

00:03:43.020 --> 00:03:46.510
parts that could be combined
together in many different ways.

00:03:46.510 --> 00:03:50.610
So in this case, for example, the chain
of streams in readers is kind of long,

00:03:50.610 --> 00:03:53.470
but in the future you'll encounter
situations where you'll need to assemble

00:03:53.470 --> 00:03:55.960
these pieces in some kind
of different configuration.

00:03:55.960 --> 00:03:58.810
And the flexibility you gain is
absolutely worth the verbosity

00:03:58.810 --> 00:04:00.640
you need to endure right now.

00:04:00.640 --> 00:04:03.470
To test your understanding of why
these classes are needed, I'd

00:04:03.470 --> 00:04:08.040
like you to describe in your own words,
what's the purpose of an InputStream.

00:04:08.040 --> 00:04:09.766
And what's the purpose
of a BufferedReader?

00:04:09.766 --> 00:04:12.993
Feel free to check out the resources
linked below the quiz.

00:04:12.993 --> 00:04:15.778
Once we know that the HTTP
request was successful,

00:04:15.778 --> 00:04:19.730
we can read the result from the
inputStream using a BufferedReader, and

00:04:19.730 --> 00:04:23.640
then we can convert it into a string and
then parse the JSON.

00:04:23.640 --> 00:04:27.460
So what's the purpose of an InputStream?

00:04:27.460 --> 00:04:30.218
And similarly,
what's the purpose of a BufferedReader?

00:04:30.218 --> 00:04:32.259
[BLANK_AUDIO]

