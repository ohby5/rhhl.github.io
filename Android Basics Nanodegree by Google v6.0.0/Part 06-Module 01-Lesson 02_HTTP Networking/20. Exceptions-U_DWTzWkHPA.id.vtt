WEBVTT
Kind: captions
Language: id

00:00:00.360 --> 00:00:03.290
Dalam kode jaringan, mungkin Anda
perhatikan bahwa ada tipe exception

00:00:03.290 --> 00:00:06.750
yang berbeda, tapi Anda tidak tahu
untuk apa tipe itu.

00:00:06.750 --> 00:00:10.500
Kita belum berbicara secara resmi tentang
tipe-tipe itu, jadi mari kita bahas.

00:00:10.500 --> 00:00:14.080
Kali pertama Anda lihat exception
adalah di kursus pertama nano degree,

00:00:14.080 --> 00:00:17.670
saat kita membangun aplikasi
pemesanan kopi Just Java.

00:00:17.670 --> 00:00:20.740
Sekarang aplikasi menemui exception
dan macet.

00:00:20.740 --> 00:00:24.340
Untuk men-debug program, kita buka
log Android

00:00:24.340 --> 00:00:29.000
untuk menyingkap jejak tumpukan lalu
melihat IllegalStateException

00:00:29.000 --> 00:00:32.790
muncul saat metode submitOrder tidak
dapat ditemukan di main activity.

00:00:34.480 --> 00:00:36.700
Mari kita lihat dokumentasi
tentang exception.

00:00:37.760 --> 00:00:41.220
Saat metode Java gagal, atau
menjumpai status tak diperkirakan,

00:00:41.220 --> 00:00:45.570
ia dapat memasang exception,
singkatan dari "exceptional event".

00:00:45.570 --> 00:00:49.020
exception pada dasarnya merupakan
kesalahan, tapi juga ditangkap

00:00:49.020 --> 00:00:53.430
atau dibungkus dalam contoh aktual
kelas exception, yang memegang informasi

00:00:53.430 --> 00:00:57.090
tentang apa yang salah dan apa yang
terjadi dalam sistem pada saat tersebut.

00:00:57.090 --> 00:00:58.250
Jika Anda lihat di sisi kiri untuk contoh,

00:00:58.250 --> 00:01:02.130
Anda akan perhatikan juga bahwa ada
lebih banyak tipe exception spesifik

00:01:02.130 --> 00:01:05.209
yang merentang dari
super kelas Exceptions.

00:01:05.209 --> 00:01:08.760
Contoh bagus pewarisan yang
digunakan dalam framework Java.

00:01:08.760 --> 00:01:09.800
Dengan kata lain,

00:01:09.800 --> 00:01:14.380
semua kelas spesifik ini merupakan
subkelas dari kelas dasar Exception.

00:01:14.380 --> 00:01:17.820
Misalnya, di sini ada
IllegalStateException untuk

00:01:17.820 --> 00:01:19.780
NullPointException.

00:01:19.780 --> 00:01:22.710
Kita juga melihat SecurityException
lebih awal dalam pelajaran ini,

00:01:22.710 --> 00:01:24.970
saat izin internet hilang dari
aplikasi Soonami kita.

00:01:26.180 --> 00:01:28.959
Sekarang Anda dapat membuat kelas
exception baru untuk tujuan Anda sendiri.

00:01:30.050 --> 00:01:33.727
Misalnya, kita bisa membuat
InvalidEarthquakeException dan

00:01:33.727 --> 00:01:35.350
mendefinisikannya seperti biasa.

00:01:35.350 --> 00:01:36.720
Buatlah kelas kustom dan

00:01:36.720 --> 00:01:41.160
buat kelas kustom itu merentang dari
kelas Exception dasar.

00:01:41.160 --> 00:01:43.910
Dari sana, kita bisa mengustomisasi
Exception untuk memegang, misalnya,

00:01:43.910 --> 00:01:47.190
informasi sangat spesifik tentang skenario
gempa bumi yang tidak valid.

00:01:48.350 --> 00:01:51.900
Sebagai pengembang, Anda harus menulis
metode yang mendeklarasikan bahwa

00:01:51.900 --> 00:01:53.400
skenario ini akan memunculkan exception.

00:01:53.400 --> 00:01:57.220
Artinya, kode di dalam metode
akan satu, menghasilkan

00:01:57.220 --> 00:02:01.100
exception untuk kondisi unik,
atau dua,

00:02:01.100 --> 00:02:05.050
yang lebih lazim, memanggil metode
yang memunculkan exception.

00:02:05.050 --> 00:02:08.840
Artinya runtime Android mencoba mengeksekusi
kode, tapi menjumpai

00:02:08.840 --> 00:02:12.460
masalah dan karena itu memberi tahu
tentang masalah itu dengan exception.

00:02:13.750 --> 00:02:17.850
Penting juga untuk mengingat bahwa jika
exception muncul, juga berarti bahwa

00:02:17.850 --> 00:02:21.640
kode setelah baris yang menyebabkan
exception itu tak akan dieksekusi.

00:02:22.670 --> 00:02:25.000
Bagaimana melakukan ini dalam kode Java?

00:02:25.000 --> 00:02:27.890
Ada dua pemilahan yang saya ingin
Anda perhatikan.

00:02:27.890 --> 00:02:32.049
Pertama, di mana pun dalam kode Java
tempat Anda ingin menyebabkan atau

00:02:32.049 --> 00:02:35.294
membangkitkan exception, gunakan
keyword "throw".

00:02:35.294 --> 00:02:36.916
Seperti dalam contoh ini,

00:02:36.916 --> 00:02:41.010
di mana kita ingin memunculkan
InvalidPurchaseException(); karena kita

00:02:41.010 --> 00:02:45.760
mendeteksi ada yang salah dalam metode
completePurchase() kita.

00:02:45.760 --> 00:02:48.380
Kedua, dan yang ini
lebih halus,

00:02:48.380 --> 00:02:52.940
Kapan pun kode kita memunculkan
exception yang bukan turunan dari kesalahan

00:02:52.940 --> 00:02:56.920
atau kelas Exception runtime, kita harus
secara eksplisit mendeklarasikan dalam

00:02:56.920 --> 00:03:00.350
signature metode kita bahwa metode kita
dapat memunculkan exception semacam itu.

00:03:00.350 --> 00:03:04.120
Dalam bahasa pemrograman Java,
ini dikenal sebagai checked exception dan

00:03:04.120 --> 00:03:08.120
berimplikasi bahwa kode apa pun yang
memanggil atau memakai metode kita

00:03:08.120 --> 00:03:12.440
harus menangani exception, yaitu
memanggil metode kita ke dalam blok try.

00:03:12.440 --> 00:03:14.660
Ini diwajibkan oleh penyusun Java,

00:03:14.660 --> 00:03:18.740
dengan kata lain siapa pun yang memanggil
metode completePurchase harus punya

00:03:18.740 --> 00:03:23.480
rencana cadangan jika InvalidPurchase
Exception muncul atau terjadi.

00:03:23.480 --> 00:03:25.960
Kita akan bahas cara menangani
exception dalam video berikutnya.

00:03:27.290 --> 00:03:30.790
Jika Anda ingin belajar lebih banyak tentang
unchecked versus checked Exceptions,

00:03:30.790 --> 00:03:35.040
lebih terperinci, silakan lihat tautan tutorial
pada catatan di bawah video ini.

00:03:35.040 --> 00:03:36.790
Satu catatan penting lagi.

00:03:36.790 --> 00:03:38.700
Hanya karena ada framework
standar untuk

00:03:38.700 --> 00:03:42.000
cara menggunakan Exception di Java,
tidak berarti bahwa Anda harus memasang

00:03:42.000 --> 00:03:44.870
Exception tiap kali
ada yang salah.

00:03:44.870 --> 00:03:48.130
Di sinilah berperan
kebijaksanaan pengembang.

00:03:48.130 --> 00:03:52.260
Idealnya, jika kita menjumpai masalah
atau situasi unik, kita harus mencoba
68
menanganinya dengan baik dalam kode.
handle it gracefully in code.

00:03:54.190 --> 00:03:57.680
Misalnya, dengan hanya kembali ke perilaku
default yang masuk akal, lalu

00:03:57.680 --> 00:04:00.200
lanjut dengan mengeksekusinya jika mungkin.

00:04:00.200 --> 00:04:02.810
Kita sebut ini failing silently (gagal diam-diam).

00:04:02.810 --> 00:04:06.680
Tapi, jika kita anggap lebih menguntungkan
jika terus berlanjut dengan status kesalahan

00:04:06.680 --> 00:04:11.030
itu, maka kita putuskan lebih baik untuk
memberi tahu kode pemanggil kesalahan

00:04:11.030 --> 00:04:12.770
dengan memasang exception.

00:04:12.770 --> 00:04:15.050
Kita sudah melihat ini bekerja.

00:04:15.050 --> 00:04:18.459
Dalam hal aplikasi Soonami, saat kita coba
meminta data gempa bumi dari

00:04:18.459 --> 00:04:23.040
internet, kode framework Android
memunculkan SecurityException.

00:04:23.040 --> 00:04:25.660
Inilah saat di mana lebih baik memasang
exception dan

00:04:25.660 --> 00:04:29.860
memacetkan aplikasi daripada berlanjut
tanpa izin internet.

00:04:29.860 --> 00:04:32.610
Sekarang, jika kode framework Android
telah gagal diam-diam,

00:04:32.610 --> 00:04:35.560
maka kita sebagai pengembang mungkin
akan sangat bingung

00:04:35.560 --> 00:04:38.600
mengapa kita menerima respons tersebut
dari server.

00:04:38.600 --> 00:04:42.010
Dalam hal aplikasi Soonami dan Laporan
Gempa, kita tidak benar-benar

00:04:42.010 --> 00:04:46.210
membuat exception kustom sendiri atau
memasang exception secara sengaja.

00:04:46.210 --> 00:04:50.620
Tapi kita akan memanggil kode framework
Android yang menyebabkan exception

00:04:50.620 --> 00:04:53.330
dan kita harus menangani exception
itu dengan benar.

00:04:53.330 --> 00:04:54.340
Selanjutnya mari kita bahas hal itu.

