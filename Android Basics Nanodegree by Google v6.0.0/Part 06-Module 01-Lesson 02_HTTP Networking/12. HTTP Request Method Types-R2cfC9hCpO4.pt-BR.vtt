WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.400
Vamos voltar a falar
de requisição HTTP.

00:00:03.434 --> 00:00:06.701
Temos que especificar
detalhes que são essenciais

00:00:06.734 --> 00:00:09.400
antes de estabelecer
uma conexão de rede.

00:00:10.000 --> 00:00:12.801
Por enquanto, o objeto
HttpURLConnection

00:00:12.834 --> 00:00:16.300
apenas contém o destino
desta requisição.

00:00:16.334 --> 00:00:20.834
Resta definir a ação do servidor
quanto à requisição.

00:00:20.868 --> 00:00:25.234
A ação é expressada através
dos verbos HTTP que citamos antes,

00:00:25.267 --> 00:00:27.133
como GET ou POST.

00:00:27.167 --> 00:00:31.901
O próximo passo é garantir
que você pôs o método HTTP certo

00:00:31.934 --> 00:00:37.133
que lhe permite especificar
sua intenção para a conexão.

00:00:37.167 --> 00:00:40.434
Há tipos de métodos
ou ações HTTP comuns

00:00:40.467 --> 00:00:43.267
que você deve conhecer.

00:00:43.300 --> 00:00:47.667
Quando queremos receber dados,
o melhor método é GET.

00:00:47.701 --> 00:00:53.133
Há outros métodos HTTP
e apesar de GET ser o mais usado,

00:00:53.167 --> 00:00:58.667
POST é frequentemente empregado
para atualizar dados num servidor,

00:00:58.701 --> 00:01:01.300
por exemplo,
quando você atualiza um blog,

00:01:01.334 --> 00:01:05.434
preenche dados de cobrança
ou faz uma compra online.

00:01:06.467 --> 00:01:12.234
Resumindo, uma requisição GET
lê dados de um servidor

00:01:12.267 --> 00:01:14.400
e os retorna para o cliente.

00:01:14.434 --> 00:01:19.334
Já uma requisição POST contém dados
a serem inseridos no servidor.

00:01:19.868 --> 00:01:21.534
Confira os links
nas notas da lição

00:01:21.567 --> 00:01:25.400
para aprender mais
sobre os outros métodos HTTP.

00:01:25.968 --> 00:01:29.501
Por exemplo, quando você insere
um URL no navegador,

00:01:29.534 --> 00:01:32.467
uma requisição GET que contém
o URL de destino

00:01:32.501 --> 00:01:34.434
é gerada e enviada
para o servidor.

00:01:34.467 --> 00:01:36.767
Esta requisição também
contém um cabeçalho

00:01:36.801 --> 00:01:39.133
que carrega metadados
da requisição.

00:01:39.167 --> 00:01:42.934
Inclui as linguagens
que o cliente pode aceitar

00:01:42.968 --> 00:01:47.100
e informações sobre o cliente,
como o OS e o tamanho da tela dele.

00:01:47.133 --> 00:01:52.701
App móveis fazem a mesma coisa
quando pedem dados de um servidor.

00:01:53.200 --> 00:01:56.234
Como sabemos qual método
de requisição devemos usar?

00:01:56.267 --> 00:02:01.367
Você pode checar a documentação
do API do servidor para confirmar.

00:02:01.901 --> 00:02:05.167
Cada endpoint deve ter
uma definição clara

00:02:05.200 --> 00:02:07.767
da ação HTTP necessária.

00:02:07.801 --> 00:02:11.968
O comportamento é consistente
com os métodos GET e POST.

00:02:12.000 --> 00:02:16.567
Se nenhuma ação é especificada,
presumimos o método GET.

00:02:16.601 --> 00:02:20.267
Por exemplo, vamos rever
ao API público do Twitter.

00:02:20.300 --> 00:02:23.868
Vários endpoints são fornecidos
para saber mais de usuários,

00:02:23.901 --> 00:02:26.300
tweets, amigos
ou dados de conta.

00:02:26.334 --> 00:02:29.334
O Twitter detalha
se estes endpoints

00:02:29.367 --> 00:02:31.834
recebem requisições GET ou POST.

00:02:31.868 --> 00:02:34.200
Vamos clicar neste endpoint

00:02:34.734 --> 00:02:38.834
que traz os posts mais recentes
de um usuário.

00:02:39.367 --> 00:02:42.834
Descendo, achamos
o URL deste recurso

00:02:42.868 --> 00:02:45.300
para onde podemos mandar
a requisição.

00:02:45.334 --> 00:02:48.100
GET é o método
de requisição HTTP

00:02:48.133 --> 00:02:51.834
porque vamos ler
tweets existentes no servidor.

00:02:51.868 --> 00:02:55.133
Há vários exemplos
onde usamos o método GET

00:02:55.167 --> 00:02:59.100
para pegar listas de mensagens
ou de amigos de um usuário.

00:02:59.133 --> 00:03:03.334
Por outro lado, se quisermos
inserir dados novos no servidor,

00:03:03.367 --> 00:03:05.767
temos que usar
uma requisição POST.

00:03:05.801 --> 00:03:09.434
O endpoint nos aponta
para um novo tweet.

00:03:09.467 --> 00:03:12.067
Fazemos a conexão
com outro URL

00:03:12.100 --> 00:03:15.100
e especificamos o método POST.

00:03:15.133 --> 00:03:18.467
Lembre-se
de que numa requisição POST

00:03:18.501 --> 00:03:21.367
você tem que enviar
os novos dados também.

00:03:21.400 --> 00:03:25.300
Neste caso, é o texto
de num novo tweet.

00:03:25.334 --> 00:03:28.100
Usamos POST
quando escrevemos no servidor,

00:03:28.133 --> 00:03:31.968
ou seja, quando criamos, deletemos
ou atualizamos um elemento.

00:03:32.000 --> 00:03:35.200
Os novos dados ficam disponíveis
para os demais clientes

00:03:35.234 --> 00:03:38.434
quando fizerem uma requisição GET
por novos tweets.

00:03:38.467 --> 00:03:41.934
Outro exemplo
é o API do Instagram.

00:03:41.968 --> 00:03:45.334
Estes endpoints permitem
pegar dados de um usuário

00:03:45.367 --> 00:03:49.767
ou as imagens e vídeos
que postaram ou curtiram.

00:03:49.801 --> 00:03:55.033
Todos estas requisições são GET
porque estão lendo o servidor.

00:03:55.067 --> 00:03:59.901
Por outro lado, o API Comments
permite que você modifique

00:03:59.934 --> 00:04:01.601
comentários num post.

00:04:01.634 --> 00:04:05.934
O método das requisições
são GET, POST ou DELETE.

00:04:05.968 --> 00:04:10.200
Às vezes vemos DELETE
como uma ação separada

00:04:10.234 --> 00:04:12.968
onde POST é reservado
para criar um comentário

00:04:13.000 --> 00:04:15.400
e DELETE é para deletar
um comentário.

00:04:15.434 --> 00:04:19.167
Às vezes, esses comportamentos
são combinados numa requisição POST

00:04:19.200 --> 00:04:22.901
que lida com todas as modificações
nos dados do servidor.

00:04:22.934 --> 00:04:25.334
Depende da estruturação
do API.

00:04:25.367 --> 00:04:27.767
Para uma lista de todos
os métodos de requisição

00:04:27.801 --> 00:04:29.434
veja o link abaixo.

00:04:29.467 --> 00:04:32.801
Mas para este curso,
queremos que você entenda

00:04:32.834 --> 00:04:36.100
a distinção entre GET e POST,

00:04:36.133 --> 00:04:40.267
ou seja, lê dados
ou postar dados no servidor.

