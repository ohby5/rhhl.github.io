WEBVTT
Kind: captions
Language: ar

00:00:00.300 --> 00:00:02.967
‫كل جزء من البيانات،
‫سواء نصية أو رسومية..

00:00:03.067 --> 00:00:05.334
‫تخزن في مقاطع بحجم البايت Byte

00:00:05.834 --> 00:00:08.967
‫عندما يتلقى التطبيق البيانات،
‫ترده كدفق مدخلات..

00:00:09.334 --> 00:00:11.235
‫بمعنى دفقاً من هذه البايتات

00:00:11.834 --> 00:00:13.601
‫دفق المدخلات تجريدي..

00:00:13.834 --> 00:00:17.867
‫أي أنه يخفي تفاصيل ما تمثله البايتات
‫مثل ملف..

00:00:17.968 --> 00:00:20.168
‫أو صفحة ويب، أو حتى وسائط متعددة

00:00:20.834 --> 00:00:22.435
‫إنها فقط دفق معلوماتي

00:00:23.133 --> 00:00:24.867
‫ثم عندما نتلقى هذا الدفق..

00:00:25.033 --> 00:00:28.500
‫نحتاج لإعادة تجميع البايتات في شيء
‫يمكن لتطبيقنا فهمه

00:00:29.100 --> 00:00:30.233
‫للبيانات النصية..

00:00:30.267 --> 00:00:32.534
‫يجب تحويل البايتات إلى محارف

00:00:32.868 --> 00:00:35.402
‫وفئة BufferReader تسمح لنا بهذا

00:00:36.234 --> 00:00:38.168
‫ثم نبني عبارة استجابة JSON..

00:00:38.567 --> 00:00:40.934
‫حيث العبارة أساساً دفق من المحارف

00:00:42.033 --> 00:00:46.834
‫لنر كيف تتم عملية التحويل في الكود
‫في وظيفة makeHttpRequest

00:00:47.267 --> 00:00:49.201
‫لاحظ أننا نبدأ بمتغيرين..

00:00:49.601 --> 00:00:52.935
‫urlConnection من النوع
‫HttpURLConnection

00:00:53.300 --> 00:00:55.567
‫وinputStream من النوع InputStream

00:00:55.968 --> 00:00:59.168
‫الآن وبدلاً من الإجابة بنتيجة
‫نهائية كسلسلة حرفية..

00:00:59.334 --> 00:01:01.835
‫في بعض الأحيان ستجيب
‫الدالة بـinputStream

00:01:02.200 --> 00:01:06.101
‫وتسمح لك InputStream بتلقي
‫المعلومات جزءاً تلو الآخر

00:01:06.434 --> 00:01:09.068
‫يفيد هذا عند تلقي بيانات كثيرة جداً

00:01:09.501 --> 00:01:13.102
‫أو إذا كان الدفق يمثل مصدر بيانات
‫سيوصل البيانات خلال فترة ما

00:01:13.400 --> 00:01:17.134
‫فئة HttpURLConnection
‫والتي نستخدمها لجلب بيانات JSON..

00:01:17.300 --> 00:01:19.700
‫تُرجع استجابة الملقم
‫عبر inputStream

00:01:20.934 --> 00:01:24.468
‫ثم لدينا وظيفة مساعدة
‫لقراءة البيانات من inputStream

00:01:25.067 --> 00:01:26.868
‫لنقفز إلى وظيفة
‫readFromStream

00:01:27.367 --> 00:01:30.968
‫تذكر أن inputStream لا يُرجع
‫بيانات يمكننا قراءتها حقاً

00:01:31.334 --> 00:01:32.601
‫مثل الأرقام والحروف

00:01:32.834 --> 00:01:36.335
‫بل ترجع بيانات ثنائية خام،
‫من الآحاد والأصفار

00:01:36.534 --> 00:01:39.368
‫بدون أي تعليمات محددة
‫عما تمثله البيانات

00:01:39.868 --> 00:01:44.268
‫قد تكون البيانات صورة، أو صوتاً
‫GeoJSON يمكننا تفسيرها

00:01:44.901 --> 00:01:49.235
‫في حالتنا هذه، فإننا نعرف
‫أن البيانات الواردة نصية فقط

00:01:49.501 --> 00:01:54.035
‫ويمكننا استخدام inputStreamReader
‫ليتولى ترجمة البيانات الخام..

00:01:54.167 --> 00:01:55.768
‫إلى محارف قابلة للقراءة

00:01:56.067 --> 00:02:00.035
‫تسمح inputStreamReader
‫بقراءة محرف وحيد في المرة

00:02:00.567 --> 00:02:05.967
‫والذي قد يؤثر بشكل متفاوت على الأداء
‫بناءً على inputStream المزود بالبيانات

00:02:06.767 --> 00:02:09.434
‫جلب البيانات مثلاً من قرصك الصلب..

00:02:09.501 --> 00:02:12.302
‫سيكون سريعاً إذا كنت تقرأ أجزاء
‫كبيرة دفعة واحدة

00:02:12.467 --> 00:02:15.667
‫لكنك إذا حاولت قراءة البيانات
‫مَحَرَفاً تلو الآخر..

00:02:15.767 --> 00:02:17.167
‫سيستغرق وقتاً طويلاً

00:02:17.400 --> 00:02:21.368
‫يمكن تجنب هذا بتغليف inputStreamReader
‫في BufferedReader

00:02:21.934 --> 00:02:24.568
‫سيقبل BufferedReader
‫طلباً بمَحَرَف واحد

00:02:24.901 --> 00:02:28.168
‫ولكنه سيحفظ ويقرأ أجزاء أكبر من حوله

00:02:28.434 --> 00:02:30.101
‫وعندما تطلب محرفاً آخر..

00:02:30.234 --> 00:02:34.501
‫سيوفي BufferedReader باحتياجاتك من
‫البيانات التي قرأها مُسبقاً

00:02:34.968 --> 00:02:37.435
‫بدلاً من العودة إلى inputStreamReader

00:02:37.701 --> 00:02:41.168
‫كما ترى، ولبدء قراءة البيانات
‫من inputStream..

00:02:41.367 --> 00:02:46.068
‫ينبغي علينا تمريرها كباراميتر إلى نسخة
‫InputStreamReader عبر الدالة الإنشائية

00:02:46.234 --> 00:02:49.968
‫كما نوفر مجموعة محارف، أو Charset
‫اختصاراً للدالة الإنشائية

00:02:50.567 --> 00:02:54.201
‫تحدد مجموعة المحارف كيفية ترجمة
‫بيانات inputStream الخام..

00:02:54.267 --> 00:02:56.467
‫إلى محارف مقروءة بايت تلو الآخر

00:02:56.667 --> 00:03:00.467
‫بحيث يعرف كيف يفك تشفير كل بايت
‫إلى محرف محدد يمكن للبشر قراءته

00:03:00.934 --> 00:03:03.134
‫مثل حرف A كبير أو علامة (يساوي)

00:03:03.634 --> 00:03:08.568
‫ترميز UTF-8 هو ترميز محارف (يونيكود)
‫والذي يستخدم لكل نص تقريباً في الويب

00:03:09.067 --> 00:03:12.501
‫آخر ما نفعله هو تغليف InputStreamReader
‫في BufferedReader

00:03:12.634 --> 00:03:14.435
‫وسنكون جاهزين لقراءة السطور

00:03:14.767 --> 00:03:15.967
‫حسناً.. أنا أعلم..

00:03:16.334 --> 00:03:19.768
‫هذه التغليفات والطبقات تبدو
‫مربكة جداً وتدور حول نفسها

00:03:20.334 --> 00:03:23.801
‫inputStream داخل inputStreamReader
‫داخل BufferedReader؟

00:03:24.234 --> 00:03:28.168
‫لابد من وجود طريقة أسهل لقراءة
‫البيانات من HttpURLConnection..

00:03:28.767 --> 00:03:29.767
‫وهذا حقيقي..

00:03:29.868 --> 00:03:33.068
‫قراءة عبر كامل نص الاستجابة
‫سيكون مريحاً جداً

00:03:33.767 --> 00:03:36.468
‫إلا أن الوظيفة لن تكون قابلة
‫لإعادة الاستخدام

00:03:37.100 --> 00:03:41.400
‫لذا بدلاً من حلول مسبقة البناء منتهية
‫الأطراف، فإن مكتبات وأطر عمل قوية..

00:03:41.701 --> 00:03:45.801
‫عادة ما يمنحك أجزاء منفردة يمكن
‫جمعها بطرق متنوعة متباينة

00:03:46.434 --> 00:03:50.335
‫لذا وفي هذه الحالة مثلاً، فإن سلسلة
‫التدفقات في القراء طويلة نسبياً

00:03:50.601 --> 00:03:55.668
‫ولكن مستقبلاً قد تقابل حالات تحتاج
‫إلى جمع هذه الأجزاء بطريقة مختلفة

00:03:55.901 --> 00:04:00.402
‫والمرونة التي ستملكها تجعل من المفيد
‫حقاً أن تمر بالإطناب الذي تتحمله الآن

00:04:00.634 --> 00:04:03.168
‫لاختبار فهمك لسبب حاجتك لهذه الفئات..

00:04:03.367 --> 00:04:05.235
‫أريد منك أن تصف بتعبيراتك..

00:04:05.601 --> 00:04:07.335
‫ما الغرض من InputStream؟

00:04:08.000 --> 00:04:09.968
‫وما الغرض من BufferedReader؟

00:04:10.467 --> 00:04:13.201
‫لك حرية مراجعة روابط الموارد
‫أسفل الاختبار

00:04:13.434 --> 00:04:15.734
‫ما أن نعرف أن طلب HTTP ناجح..

00:04:15.934 --> 00:04:19.802
‫يمكننا قراءة النتيجة من inputStream
‫باستخدام BufferedReader

00:04:20.234 --> 00:04:23.301
‫ثم يمكننا تحويلها إلى سلسلة
‫محارف ثم تفسير JSON

00:04:23.601 --> 00:04:24.601
‫لذا..

00:04:24.934 --> 00:04:26.868
‫ما الغرض من InputStream؟

00:04:27.367 --> 00:04:28.367
‫وشبيه به..

00:04:28.701 --> 00:04:30.502
‫ما الغرض من BufferedReader

