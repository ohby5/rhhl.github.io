WEBVTT
Kind: captions
Language: en-US

00:00:00.410 --> 00:00:03.650
Yeah, so when an error occurs,
and an exception is thrown,

00:00:03.650 --> 00:00:08.530
it's our job as developers to handle
it by providing a backup plan.

00:00:08.530 --> 00:00:09.980
We catch the exception and

00:00:09.980 --> 00:00:14.680
fall back to some reasonable default
behavior, otherwise the app may crash.

00:00:14.680 --> 00:00:15.594
In other words,

00:00:15.594 --> 00:00:19.854
some application crashes are simply
the result of the uncaught exceptions.

00:00:19.854 --> 00:00:23.698
&gt;&gt; Yeah, so in order to do this, we're
going to have to learn about something

00:00:23.698 --> 00:00:25.598
called the try catch block in Java.

00:00:25.598 --> 00:00:28.699
&gt;&gt; Try means you try to
execute a group of statements,

00:00:28.699 --> 00:00:33.254
that includes calling a method that
could potentially thow an exception.

00:00:33.254 --> 00:00:36.216
&gt;&gt; And when an exception is thrown,
you catch it.

00:00:36.216 --> 00:00:40.367
If no one catches the exception,
well your app will crash.

00:00:40.367 --> 00:00:41.377
You okay, Joe?

00:00:41.377 --> 00:00:42.010
&gt;&gt; I'm fine.

00:00:42.010 --> 00:00:45.570
And regardless of whether
an exception was thrown or not,

00:00:45.570 --> 00:00:49.250
we can finish executing
code in the finally block.

00:00:49.250 --> 00:00:52.848
&gt;&gt; So the full flow is try to do
something that may throw an exception,

00:00:52.848 --> 00:00:54.918
catch the exception if it's thrown.

00:00:54.918 --> 00:00:57.009
And finally, execute some
code regardless of whether or

00:00:57.009 --> 00:00:58.990
not that exception occurred.

00:00:58.990 --> 00:01:00.880
&gt;&gt; We should show them some code for
this.

00:01:00.880 --> 00:01:02.210
&gt;&gt; Yeah, for sure.

00:01:02.210 --> 00:01:04.917
Let's do it.
&gt;&gt; In the Tsunami App there are multiple

00:01:04.917 --> 00:01:07.560
examples of try catch blocks.

00:01:07.560 --> 00:01:10.540
Let's look at one in
the create your own method.

00:01:10.540 --> 00:01:13.770
The goal of this method is
to return a URL object for

00:01:13.770 --> 00:01:16.570
the provided input string URL.

00:01:16.570 --> 00:01:21.385
Ideally, we would just call a URL
constructor and pass in the string URL,

00:01:21.385 --> 00:01:25.502
but via this red squiggly line
Android Studio is notifying us of

00:01:25.502 --> 00:01:28.002
an error situation that is detected.

00:01:28.002 --> 00:01:31.638
That is, it says that we have
an unhandled exception of

00:01:31.638 --> 00:01:34.500
type malformed URL exception.

00:01:34.500 --> 00:01:38.800
This means that the URL constructor
throws a malformed URL exception, and

00:01:38.800 --> 00:01:41.040
we need to catch and handle the error.

00:01:41.040 --> 00:01:43.810
Otherwise, our app won't build and
we can't run it on our device.

00:01:44.890 --> 00:01:47.000
For any constructor or method call,

00:01:47.000 --> 00:01:50.760
you can check if it will throw an
exception by checking the documentation.

00:01:50.760 --> 00:01:53.961
For example, if we visit the URL
reference documentation,

00:01:53.961 --> 00:01:57.789
we can see that the URL constructor
that accepts a string as input through

00:01:57.789 --> 00:01:59.250
MalformedURLException.

00:01:59.250 --> 00:02:03.719
If the input parameter can't
be converted into a URL,

00:02:03.719 --> 00:02:06.062
that is it is MalformedURL.

00:02:06.062 --> 00:02:10.880
To fix our code, we can use
the shortcut Alt+Enter for a quick fix.

00:02:10.880 --> 00:02:14.060
We can select the option,
surround with try catch, and

00:02:14.060 --> 00:02:16.790
Android Studio will
automatically update the code.

00:02:16.790 --> 00:02:18.163
Pretty neat, right?

00:02:18.163 --> 00:02:23.156
Now we have the key word try
followed by an opening curly brace.

00:02:23.156 --> 00:02:25.750
Inside the try block we put
all of our code in here

00:02:25.750 --> 00:02:27.330
that could throw an exception.

00:02:27.330 --> 00:02:31.268
Now in general, it's good practice
to keep code inside this block lean.

00:02:31.268 --> 00:02:33.368
You don't want full method by this here,

00:02:33.368 --> 00:02:36.220
then we close the block
with the curly brace.

00:02:36.220 --> 00:02:40.310
Next, we have the keyword catch
followed a set of parenthesis

00:02:40.310 --> 00:02:43.905
containing the exact data type
of the excephamore catching.

00:02:43.905 --> 00:02:47.555
In this case, MalformedURLException and
the variable name for

00:02:47.555 --> 00:02:49.725
the exception object e.

00:02:49.725 --> 00:02:52.400
Then we have an opening brace where
we will handle the exception,

00:02:52.400 --> 00:02:57.835
e.printStackTrace will print
the error stack in detailed format.

00:02:57.835 --> 00:03:01.505
Another option is to log areas
using Androids log methods and

00:03:01.505 --> 00:03:04.937
include our own log tag and
our own custom message.

00:03:04.937 --> 00:03:08.305
The log.e method can take
an exception as it's third argument.

00:03:09.480 --> 00:03:12.540
To recap,
if all went well on the URL constructor,

00:03:12.540 --> 00:03:16.570
then no exception is thrown and
nothing on the catch block ever runs.

00:03:16.570 --> 00:03:19.800
But if the code within the try block
throws an exception, then we immediately

00:03:19.800 --> 00:03:24.120
jump to the cash block with the
exception and execute the code there.

00:03:24.120 --> 00:03:25.980
Then we exit the try catch statement and

00:03:25.980 --> 00:03:28.679
continue executing the code
line by line after that.

00:03:29.870 --> 00:03:34.182
Notice that the URL variable is
initialized before the try catch block.

00:03:34.182 --> 00:03:36.680
We have to consider variable scope here.

00:03:36.680 --> 00:03:39.720
If we define the URL variable
inside the try block,

00:03:39.720 --> 00:03:43.600
we won't be able to access the URL
variable after the statement is done.

00:03:43.600 --> 00:03:47.060
So since we want to reference the URL
variable at the end of the method

00:03:47.060 --> 00:03:48.930
outside of the try catch statement.

00:03:48.930 --> 00:03:53.050
We need to initialize the URL
variable outside of it as well.

00:03:53.050 --> 00:03:57.130
In this case, we can just set it to
null, which means an empty value.

00:03:57.130 --> 00:04:01.162
So now we've seen how Android Studio
will notify you if you need to wrap your

00:04:01.162 --> 00:04:02.840
code in a try catch statement.

00:04:02.840 --> 00:04:04.360
If you want more information,

00:04:04.360 --> 00:04:06.289
you can check out the official
Java documentation.

00:04:07.290 --> 00:04:10.260
This next example is
a little bit more complex.

00:04:10.260 --> 00:04:13.870
It shows that you can have as many lines
of code in the try block as you want.

00:04:13.870 --> 00:04:17.459
If any line of that code throws
an exception, then we stop executing

00:04:17.459 --> 00:04:21.300
the statements in the try block and
jump directly to the catch block.

00:04:21.300 --> 00:04:23.870
As you can see here you can and
should have

00:04:23.870 --> 00:04:27.860
multiple catch blocks to handle
different types of errors if necessary.

00:04:27.860 --> 00:04:31.320
Here, the code catches an index
out of bound exception and

00:04:31.320 --> 00:04:33.030
prints a system log message.

00:04:33.030 --> 00:04:37.330
The code also catches an IO exception
and prints a different log message.

00:04:37.330 --> 00:04:39.450
Now depending on what
exception gets thrown,

00:04:39.450 --> 00:04:42.690
we will fall into one of these
catch blocks, but not both.

00:04:44.430 --> 00:04:47.490
So you can see how there's
no guarantee of executing

00:04:47.490 --> 00:04:49.260
all of the code in the try block.

00:04:49.260 --> 00:04:52.360
Sometimes you have clean up that
needs to be done even if there was

00:04:52.360 --> 00:04:53.950
an exception thrown.

00:04:53.950 --> 00:04:57.340
So the finally block will always be
executed regardless of whether or

00:04:57.340 --> 00:04:58.440
not an exception was thrown.

00:04:59.730 --> 00:05:01.900
Before we wrap up this discussion,

00:05:01.900 --> 00:05:06.180
I want to point out one final method
of dealing with a check exception.

00:05:06.180 --> 00:05:10.910
Now as you can see here by modifying the
createURL methods, methods signature.

00:05:10.910 --> 00:05:15.160
You do have the option to defer
the exception handling up the call chain

00:05:15.160 --> 00:05:17.710
by declaring that your method
may throw the exception

00:05:17.710 --> 00:05:20.390
which in turn requires that
the calling methods handle it.

00:05:21.430 --> 00:05:24.940
This is common if the exception is
thrown from inside helper method.

00:05:24.940 --> 00:05:27.840
And you want to handle it in
a try catch somewhere else.

00:05:27.840 --> 00:05:32.480
For example, whoever calls the createUrl
method will now need a try catch block

00:05:32.480 --> 00:05:37.650
around this method call, and
have to catch the MalformedURLException.

00:05:37.650 --> 00:05:40.570
We can see this here in
the doInBackground method.

00:05:40.570 --> 00:05:44.030
For the purposes of the Tsunami App,
if you call some Android framework code

00:05:44.030 --> 00:05:47.960
that throws an exception, you should
catch it and handle it at the moment

00:05:47.960 --> 00:05:50.700
it happens instead of deferring
it to be handled later.

