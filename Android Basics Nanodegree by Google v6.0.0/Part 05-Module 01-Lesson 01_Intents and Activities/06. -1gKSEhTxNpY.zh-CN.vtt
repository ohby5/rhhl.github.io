WEBVTT
Kind: captions
Language: zh-CN

00:00:00.430 --> 00:00:04.375
我们打开 MainActivity.java 文件 看看里面都有哪些内容

00:00:04.375 --> 00:00:07.170
在任何 Java 文件的顶部都是文件包名称

00:00:07.170 --> 00:00:08.820
显示 package 一词

00:00:08.820 --> 00:00:11.638
它是一个 Java 关键字 后面跟着文件包名称

00:00:11.638 --> 00:00:16.830
即 com.example.android.miwok

00:00:16.830 --> 00:00:20.280
这是我们在新建项目向导中指定的文件包名称

00:00:20.280 --> 00:00:23.770
以便在 Android 设备上唯一地标识我们的应用

00:00:23.770 --> 00:00:26.870
Google Play 商店中的每个应用都有一个与众不同的文件包名称

00:00:26.870 --> 00:00:30.770
应用的所有代码都会位于此文件包名称下

00:00:30.770 --> 00:00:33.880
所以在测试题中 A 对应的是文件包名称

00:00:33.880 --> 00:00:38.100
接着是 import 语句 这些语句会导入 Java 类

00:00:38.100 --> 00:00:41.020
我们不用编写这些类 但是仍然可以在我们的代码中用到这些类

00:00:41.020 --> 00:00:44.535
这些文件属于 Android 框架中的其他代码文件包下的内容

00:00:44.535 --> 00:00:45.878
并且由 Android 团队编写而成

00:00:45.878 --> 00:00:50.633
例如 我们要从 android.support.v7.app 文件包

00:00:50.633 --> 00:00:54.857
导入 AppCompatActivity 类

00:00:54.857 --> 00:00:57.423
我们不需要了解 AppCompatActivity 或 Bundle 的

00:00:57.423 --> 00:00:59.840
内部工作原理

00:00:59.840 --> 00:01:02.690
我们可以直接在我们的代码中免费使用这些类

00:01:02.690 --> 00:01:04.819
任何时候我们想要添加其他文件包中的代码

00:01:04.819 --> 00:01:07.110
我们只需在这里添加更多 import 语句即可

00:01:07.110 --> 00:01:10.730
因此在测试题中 B 对应的是 import 语句

00:01:10.730 --> 00:01:12.920
接着是类声明

00:01:12.920 --> 00:01:16.435
这个公共类代码行位于类声明中

00:01:16.435 --> 00:01:19.575
声明该文件包含 MainActivity 类的

00:01:19.575 --> 00:01:21.055
定义

00:01:21.055 --> 00:01:24.015
该类从超级类 AppCompatActivity 继承而来

00:01:24.015 --> 00:01:27.935
也就是它继承了 AppCompatActivity 类的所有行为

00:01:27.935 --> 00:01:31.700
包括在设备上显示窗口和显示应用栏

00:01:31.700 --> 00:01:35.180
我们也可以通过重写某些方法来自定义一些行为

00:01:35.180 --> 00:01:39.500
仅在我们想更改类的名称或更改继承对象时

00:01:39.500 --> 00:01:41.420
我们才会修改这一类声明语句

00:01:41.420 --> 00:01:44.620
在测试题中 C 对应的是类声明

00:01:45.650 --> 00:01:47.600
接着是重写方法

00:01:47.600 --> 00:01:49.990
这里我们重写了 onCreate 方法

00:01:49.990 --> 00:01:53.390
该方法本身在 AppCompatActivity 类中进行了定义

00:01:53.390 --> 00:01:56.620
提醒下 当 Android 第一次创建 MainActivity 的实例时

00:01:56.620 --> 00:01:59.080
会调用该方法

00:01:59.080 --> 00:02:01.480
也就是当你在设备上打开应用的时候会调用该方法

00:02:01.480 --> 00:02:05.630
这里当应用被创建时 我们为其提供了自定义步骤

00:02:05.630 --> 00:02:08.970
在测试题中 D 对应的是重写方法

00:02:08.970 --> 00:02:10.977
最后一项是 setContentView

00:02:10.977 --> 00:02:15.708
在 onCreate 方法中 有一行代码是用来创建 setContentView 方法的

00:02:15.708 --> 00:02:20.630
并将 activity_main 布局当做输入变量传入进来

00:02:20.630 --> 00:02:24.230
我们指示 Android 将在此布局 XML 文件中定义的 UI

00:02:24.230 --> 00:02:25.990
放入这个 Activity 屏幕上

00:02:25.990 --> 00:02:31.159
对于测试题中的最后一项 E 对应的是将内容视图设为 XML 布局资源

