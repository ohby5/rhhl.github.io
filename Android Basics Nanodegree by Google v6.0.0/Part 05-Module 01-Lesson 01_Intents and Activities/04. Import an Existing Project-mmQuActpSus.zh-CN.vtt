WEBVTT
Kind: captions
Language: zh-CN

00:00:00.610 --> 00:00:02.560
作为 Android 开发者 查看现有应用的代码

00:00:02.560 --> 00:00:05.000
是一项非常重要的技能

00:00:05.000 --> 00:00:06.430
如果未来你加入了一个团队

00:00:06.430 --> 00:00:09.090
很有可能就会继续完善现有的应用 而不是从头创建

00:00:09.090 --> 00:00:09.950
一个新的应用

00:00:09.950 --> 00:00:12.450
有些大型项目可能有数百个文件

00:00:12.450 --> 00:00:14.350
你可能没有时间阅读所有的文件

00:00:14.350 --> 00:00:18.030
但是 你仍然可以通过查看文件名 大概了解下内容

00:00:18.030 --> 00:00:21.520
然后再仔细查看与你的工作相关的文件

00:00:21.520 --> 00:00:24.080
在此示例中 我们目前拥有一个小项目

00:00:24.080 --> 00:00:26.680
在测试题中 我们请你查看每个文件

00:00:26.680 --> 00:00:27.470
现在我们一起来看看

00:00:27.470 --> 00:00:31.620
先点击“Project (项目)” 转到项目视图下

00:00:31.620 --> 00:00:35.370
当我第一次查看仓库的时候

00:00:35.370 --> 00:00:38.970
我展开了 Java 文件夹 里面列出了所有的应用逻辑模块

00:00:38.970 --> 00:00:41.640
然后展开资源文件夹

00:00:41.640 --> 00:00:44.290
里面列出了关于应用外观的所有内容

00:00:44.290 --> 00:00:48.050
在 Java 文件夹中 有一个 Java 文件叫做 MainActivity

00:00:48.050 --> 00:00:51.050
实际上  MainActivity 就是应用的主屏幕

00:00:51.050 --> 00:00:55.108
现在转到应用资源文件

00:00:55.108 --> 00:00:58.540
位于 app/src/main/res 目录下

00:00:58.540 --> 00:01:01.460
这些文件控制了应用在不同设备上的外观

00:01:01.460 --> 00:01:06.760
资源文件可以包括 xml 文件 图片和其他媒体文件

00:01:06.760 --> 00:01:09.250
我们先展开 layout 文件夹

00:01:09.250 --> 00:01:13.090
这是 activity_main.xml 文件

00:01:13.090 --> 00:01:15.770
该文件定义了应用主屏幕的布局

00:01:15.770 --> 00:01:18.920
其中包含一个垂直线性布局 并具有四个 TextView

00:01:18.920 --> 00:01:21.990
然后是 mipmap 文件夹 这是一个特殊文件夹

00:01:21.990 --> 00:01:23.330
用来放置应用图标

00:01:23.330 --> 00:01:26.670
应用中的其他图片应该位于 Java 文件夹中

00:01:26.670 --> 00:01:28.720
这是 values 文件夹

00:01:28.720 --> 00:01:33.240
其中包含 colors.xml 文件 该文件定义了应用的颜色

00:01:33.240 --> 00:01:36.810
包括应用主题背景颜色 以及与每个单词类别相关的颜色

00:01:36.810 --> 00:01:40.020
这个是 dimensions.xml 文件 其中包含各种维度

00:01:40.020 --> 00:01:42.270
例如应用的宽度和高度值

00:01:42.270 --> 00:01:47.470
同时还包含 list_item_height 这里我们设为 88dp

00:01:47.470 --> 00:01:50.080
往下移动 这里是 strings.xml 文件

00:01:50.080 --> 00:01:53.610
这些是会在应用中向用户展示的所有文本字符串

00:01:53.610 --> 00:01:54.900
我们将它们放在了一个文件中

00:01:54.900 --> 00:01:57.700
这样我们可以轻松地将应用翻译成其他语言

00:01:57.700 --> 00:02:00.270
最后这个是 styles.xml 文件

00:02:00.270 --> 00:02:03.380
这个文件负责定义应用主题背景 并指定主题背景颜色

00:02:03.380 --> 00:02:06.290
同时还规定了每个类别的外观样式

00:02:06.290 --> 00:02:09.110
因此主屏幕上的每个类别

00:02:09.110 --> 00:02:12.670
在高度 内边距 字体大小等方面都很相似

00:02:12.670 --> 00:02:15.170
现在讨论下测试题的第三个任务

00:02:15.170 --> 00:02:18.730
即为应用的不同部分创建一个图表

00:02:18.730 --> 00:02:22.030
每个人的图表都会不相同 这是好现象

00:02:22.030 --> 00:02:25.050
下面这个示例表示了 Miwok 应用仓库的

00:02:25.050 --> 00:02:27.240
大体外观

00:02:27.240 --> 00:02:30.400
在阅读了所有这些文件后 你可能会觉得

00:02:30.400 --> 00:02:34.030
有好多的资源来定义应用的外观

00:02:34.030 --> 00:02:37.300
只有一个 Java 文件来定义背后的逻辑

00:02:37.300 --> 00:02:40.240
这是另一个可能的图表示例

00:02:40.240 --> 00:02:44.010
这是应用的外观图片 包括四个类别

00:02:44.010 --> 00:02:46.900
你将其标记为 MainActivity.java 文件

00:02:46.900 --> 00:02:48.760
并备注：该 Activity 的布局

00:02:48.760 --> 00:02:54.240
在 activity_main.xml 布局文件中进行了定义

00:02:54.240 --> 00:02:57.410
应用的主题背景在 styles.xml 文件中进行了定义

00:02:58.540 --> 00:03:02.090
类别项的外观样式也在

00:03:02.090 --> 00:03:04.650
styles.xml 文件中进行了定义

00:03:04.650 --> 00:03:08.700
类别的背景颜色在 colors.xml 文件中进行了定义

00:03:08.700 --> 00:03:11.287
类别名称在 strings.xml 文件中进行了定义

00:03:12.300 --> 00:03:16.570
最后 列表项高度在 dimensions.xml 文件中进行了定义

00:03:16.570 --> 00:03:19.440
所以 无论你选择以何种方式来创建应用图表

00:03:19.440 --> 00:03:23.530
你都能像专业开发者一样思考 当我们开始

00:03:23.530 --> 00:03:27.580
添加更多功能的时候 在脑中有个应用图表可以帮助我们

00:03:27.580 --> 00:03:31.580
判断应该修改应用的哪部分内容 从而使新功能能够正常运转

00:03:31.580 --> 00:03:34.810
例如 如果我们收到设计师的功能请求

00:03:34.810 --> 00:03:36.790
要求我们更改主屏幕的布局

00:03:36.790 --> 00:03:41.093
我们应该打开 activity_main.xml 布局文件

00:03:41.093 --> 00:03:44.140
但是如果功能请求是关于更改应用名称的

00:03:44.140 --> 00:03:46.570
那么我们应该打开 styles.xml 文件

00:03:46.570 --> 00:03:50.050
如果我们需要更改应用在用户点击视图时的响应方式

00:03:50.050 --> 00:03:53.130
那么我们应该打开 MainActivity.java 文件 看看其中的逻辑内容

