WEBVTT
Kind: captions
Language: zh-CN

00:00:00.320 --> 00:00:02.190
你刚刚在 Miwok 应用的 MainActivity 中

00:00:02.190 --> 00:00:04.310
创建了一个 intent

00:00:04.310 --> 00:00:06.750
但是我们在 Miwok 应用中创建 intent 用到的代码

00:00:06.750 --> 00:00:10.850
和我们在 Just Java 应用中创建 intent 用到的代码不太一样

00:00:10.850 --> 00:00:14.074
在上一门课程中 我们开始学习 intent

00:00:14.074 --> 00:00:16.699
但是我们并未详细讨论各种类型的 intent

00:00:16.699 --> 00:00:20.580
实际上有两种类型的 intent 分别是隐式 intent 和显式 intent

00:00:20.580 --> 00:00:23.820
当你不知道哪个组件甚至哪个应用将处理你的 intent 时

00:00:23.820 --> 00:00:25.980
使用隐式 intent

00:00:25.980 --> 00:00:28.180
例如 在社交媒体应用中

00:00:28.180 --> 00:00:30.600
你可以发送一个 intent 来允许用户拍摄照片

00:00:30.600 --> 00:00:32.980
我们不用管哪个相机应用会收到该 intent

00:00:32.980 --> 00:00:34.790
只要该应用能拍照就行了

00:00:34.790 --> 00:00:38.980
另一方面 当你完全知道哪个组件或 Activity

00:00:38.980 --> 00:00:42.030
应该处理相关 intent 时 则创建显式 intent

00:00:42.030 --> 00:00:44.920
例如 在 Miwok 应用中 当你在主屏幕上

00:00:44.920 --> 00:00:48.490
点击某个类别时 我们想要向应用中的 Numbers Activity

00:00:48.490 --> 00:00:51.650
发送显式 intent 来打开该屏幕

00:00:51.650 --> 00:00:54.810
如果让任何其他 Activity 来处理这一 intent 则是不合理的

00:00:54.810 --> 00:00:57.210
我们再来详细介绍下每种情形

00:00:57.210 --> 00:01:00.030
你可以在 Just Java 应用中使用隐式 intent

00:01:00.030 --> 00:01:02.470
来打开电子邮件应用并发送订单摘要

00:01:02.470 --> 00:01:05.180
无论哪个电子邮件应用收到该 intent 都没关系

00:01:05.180 --> 00:01:08.350
只要是能够阅读我们的邮件主题和正文内容

00:01:08.350 --> 00:01:10.300
并将其当做电子邮件发送出去的电子邮件应用即可

00:01:11.310 --> 00:01:15.260
注意 通过在 Android Manifest 文件中指定 intent 过滤器

00:01:15.260 --> 00:01:19.360
类似于这个电子邮件应用的应用就可以宣告它们能够接收和处理哪种 intent

00:01:19.360 --> 00:01:21.730
关于隐式 intent 的另一个示例是

00:01:21.730 --> 00:01:23.810
当你想要在你的应用中打开一个网站

00:01:23.810 --> 00:01:26.900
你可以向浏览器应用发送一个 intent 来显示相关网站

00:01:26.900 --> 00:01:29.310
无论哪个浏览器处理该 intent 都没关系

00:01:29.310 --> 00:01:31.650
它们都可以显示网站

00:01:31.650 --> 00:01:35.080
当你不知道用户在设备上都安装了哪些应用时

00:01:35.080 --> 00:01:37.260
隐式 intent 带来的这种灵活性就非常的便利

00:01:37.260 --> 00:01:39.310
记得之前我们打了个比方 我们扔出去一个球

00:01:39.310 --> 00:01:40.750
这里的球表示的是 intent

00:01:40.750 --> 00:01:42.860
我们不用管向谁扔这个球

00:01:42.860 --> 00:01:46.850
只要有人能接住球就行 这里表示的就是隐式 intent

00:01:46.850 --> 00:01:50.840
有时候我们需要完全确定当我们发送一个 intent 时

00:01:50.840 --> 00:01:52.870
特定的组件会收到该 intent

00:01:52.870 --> 00:01:56.820
例如 在 Miwok 应用中 点击某个类别会发送一个显式 intent

00:01:56.820 --> 00:02:01.560
要求打开新的 Activity 并显示该类别中的词汇

00:02:01.560 --> 00:02:04.370
另一个示例是 Google Play 音乐应用

00:02:04.370 --> 00:02:07.840
在顶级 Activity 中 你看到的是音乐概览

00:02:07.840 --> 00:02:10.729
点击某张专辑会启动专辑容器 Activity

00:02:10.729 --> 00:02:13.800
其中包含特定音乐人的曲目列表

00:02:13.800 --> 00:02:16.420
这个 Activity 位于同一音乐应用中

00:02:16.420 --> 00:02:21.350
在这些情形下 我们使用的是显式 intent 明确地说明

00:02:21.350 --> 00:02:24.980
向 Android 系统发出 intent 时要具体打开哪个 Activity

00:02:24.980 --> 00:02:26.970
再回到之前的扔球比喻

00:02:26.970 --> 00:02:30.220
对于显式 intent 来说 就如同我们叫出对面某个人的名字

00:02:30.220 --> 00:02:33.860
我们知道此人可以接住球

00:02:33.860 --> 00:02:37.710
一定要注意 请尽量少用显式 intent

00:02:37.710 --> 00:02:41.320
来打开第三方应用 因为我们无法保证我们打算调用的

00:02:41.320 --> 00:02:45.460
特定第三方应用实际上安装在了设备上

00:02:45.460 --> 00:02:49.240
因此 显式 intent 通常用在同一应用中

00:02:49.240 --> 00:02:53.170
因为开发者知道哪些 Activity 可用

00:02:53.170 --> 00:02:55.440
现在我们已经知道有两种类型的 intent

00:02:55.440 --> 00:02:58.450
再来看看球里面是什么内容 球在这里表示的是 intent

00:02:58.450 --> 00:03:02.600
隐式 intent 通常需要一个操作和一个数据 URI

00:03:02.600 --> 00:03:06.330
我们还可以添加类别 组件和 Extra 信息

00:03:06.330 --> 00:03:09.500
帮助 Android 系统判断哪个应用最适合处理该请求

00:03:09.500 --> 00:03:12.410
隐式 intent 已经知道需要朝哪里发送请求

00:03:12.410 --> 00:03:14.470
所以提供了非常具体的信息

00:03:14.470 --> 00:03:16.720
我们通常只需要传递上下文和组件

00:03:16.720 --> 00:03:19.610
组件通常是我们要导航到的类

00:03:19.610 --> 00:03:23.430
但是 在某些情况下 我们可能需要设置数据 URI

00:03:23.430 --> 00:03:26.490
以便其他 Activity 能够接收某些信息

00:03:26.490 --> 00:03:29.370
我们来看看这两种类型的 intent 的代码

00:03:29.370 --> 00:03:31.729
这是隐式 intent 的示例

00:03:31.729 --> 00:03:33.536
这是显式 intent 的示例

00:03:33.536 --> 00:03:35.555
你发现了哪些相似之处和不同之处？

00:03:35.555 --> 00:03:39.957
对于相似之处 在两个示例中 我们都创建了 intent 类的对象实例

00:03:39.957 --> 00:03:44.358
然后最终将该 intent 当做输入值传递给 startActivity 方法

00:03:44.358 --> 00:03:49.470
两大不同之处在于不同的构造函数输入值

00:03:49.470 --> 00:03:53.667
隐式 intent 需要操作字符串 例如 action_view 或

00:03:53.667 --> 00:03:57.380
action_send 来宣布应用需要哪种普通操作

00:03:57.380 --> 00:04:00.900
显式 intent 可以直接列出需要打开的类组件的名称

00:04:00.900 --> 00:04:01.690
其次

00:04:01.690 --> 00:04:05.400
对隐式 intent 来说 这里有个 resolveActivity if 语句块

00:04:05.400 --> 00:04:08.940
其中列出了设备上没有任何应用可以处理该 intent 请求的情形

00:04:08.940 --> 00:04:10.954
总结下 对于隐式 intent 来说

00:04:10.954 --> 00:04:15.043
我们需要创建一个 intent 类的对象实例

00:04:15.043 --> 00:04:18.353
并在构造函数中传入操作字符串 在这种情形下是操作 SENTTO

00:04:18.353 --> 00:04:21.612
隐式 intent 还具有这个 resolveActivity if 语句块

00:04:21.612 --> 00:04:24.248
另一方面 要构建和发送显式 intent

00:04:24.248 --> 00:04:27.133
我们创建了 intent 类的新实例 传入上下文

00:04:27.133 --> 00:04:28.760
和要打开的 Activity

00:04:28.760 --> 00:04:32.800
然后调用 startActivity 传入我们刚刚构建的 intent 实例

00:04:32.800 --> 00:04:36.960
最后 这个特定的隐式 intent 示例

00:04:36.960 --> 00:04:40.800
使用了 intent Extra 而这个显式 intent 示例却没有

00:04:40.800 --> 00:04:45.160
但请注意 两种类型的 intent 都可以处理 intent Extra

00:04:45.160 --> 00:04:46.910
现在练习下刚刚所学的内容

00:04:46.910 --> 00:04:50.500
在以下案例中 请判断我们是使用隐式 intent

00:04:50.500 --> 00:04:51.850
还是显式 intent

00:04:51.850 --> 00:04:55.970
对于每个案例 我们是创建显式 intent 还是隐式 intent？

00:04:55.970 --> 00:04:58.840
在第 1 个案例中 热门群组短信应用允许用户

00:04:58.840 --> 00:05:02.040
打开在聊天消息中收到的视频链接

00:05:02.040 --> 00:05:05.740
打开视频播放器使用隐式还是显式 intent？

00:05:05.740 --> 00:05:09.802
在第 2 个案例中 在订餐应用中 用户选择想要订的几道菜

00:05:09.802 --> 00:05:12.360
然后点击提交订单按钮

00:05:12.360 --> 00:05:16.010
应用然后从订单 Activity 转到订单摘要 Activity

00:05:16.010 --> 00:05:19.154
转到订单摘要 Activity 使用隐式还是

00:05:19.154 --> 00:05:20.126
显式 intent？

00:05:20.126 --> 00:05:21.437
在第 3 个案例中

00:05:21.437 --> 00:05:25.262
用户可以借助拼车应用通过发短信联系司机

00:05:25.262 --> 00:05:29.002
访问手机上的短信应用应该使用隐式还是

00:05:29.002 --> 00:05:30.060
显式 intent？

