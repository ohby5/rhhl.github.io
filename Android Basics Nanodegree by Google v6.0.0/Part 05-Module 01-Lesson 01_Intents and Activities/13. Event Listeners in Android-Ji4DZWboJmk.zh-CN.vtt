WEBVTT
Kind: captions
Language: zh-CN

00:00:00.560 --> 00:00:02.132
现在再回到我们的应用

00:00:02.132 --> 00:00:05.040
我要讲解下当 Android 中出现点击操作时

00:00:05.040 --> 00:00:06.700
后台发生的情况

00:00:06.700 --> 00:00:08.860
如果我们在应用中点击 Numbers 类别

00:00:08.860 --> 00:00:12.670
为何系统就会执行 openNumbersList 方法？

00:00:12.670 --> 00:00:16.329
我们在 activity_main.xml 文件中的这里可以看到

00:00:16.329 --> 00:00:18.770
我们可以通过向 XML 布局中的视图添加 android:onClick 属性

00:00:18.770 --> 00:00:23.540
定义按钮点击行为

00:00:23.540 --> 00:00:27.606
实际上这是 Android 在 XML 中为我们提供的非常便利的快捷方式

00:00:27.606 --> 00:00:30.070
但是 我们想讲解的是专业开发者

00:00:30.070 --> 00:00:32.780
通常如何在他们的应用中运用到按钮代码逻辑

00:00:32.780 --> 00:00:34.030
在这节课快结束时

00:00:34.030 --> 00:00:37.900
我们将在 Miwok 应用中实现相同的按钮点击行为

00:00:37.900 --> 00:00:41.520
但是这次仅使用 Java 代码 不对 XML 做出任何更改

00:00:42.560 --> 00:00:44.466
当用户与 Android 设备互动时

00:00:44.466 --> 00:00:48.080
他们通过触摸屏幕与应用互动

00:00:48.080 --> 00:00:51.530
这些对应的是 Android 中的用户输入事件

00:00:51.530 --> 00:00:54.920
例如 按下视图时 会发生点击事件

00:00:54.920 --> 00:01:00.140
其他类型的事件包括长按 拖动事件 按键事件

00:01:00.140 --> 00:01:04.480
即按下键盘上的某个键 还有其他各种事件

00:01:04.480 --> 00:01:06.510
假设用户点击了屏幕上的某个按钮

00:01:06.510 --> 00:01:08.550
屏幕硬件将检测到该触摸操作

00:01:08.550 --> 00:01:10.590
并通知 Android 发生了点击行为

00:01:10.590 --> 00:01:13.227
Android 然后将识别屏幕触摸位置的

00:01:13.227 --> 00:01:14.540
视图

00:01:14.540 --> 00:01:17.460
真正神奇的是你可以选择当特定视图上

00:01:17.460 --> 00:01:20.500
发生特定的事件时 你会获得通知

00:01:20.500 --> 00:01:25.040
你可以在代码中说 当这个特定事件发生时 我想知道

00:01:25.040 --> 00:01:28.440
开发者通常将这一图表看成监听

00:01:28.440 --> 00:01:29.770
某个特定事件

00:01:29.770 --> 00:01:33.180
在某种程度上 你可以将你的应用看成有一只耳朵

00:01:33.180 --> 00:01:37.730
可以监听某些你感兴趣的信号 这些信号表示的就是特定的用户事件

00:01:37.730 --> 00:01:40.940
一旦你知道该事件发生了 你就可以编写当用户

00:01:40.940 --> 00:01:44.730
与 UI 的特定部分互动时 应该发生的情况

00:01:44.730 --> 00:01:47.380
那么你应该如何在你的应用中设置这一流程呢？

00:01:47.380 --> 00:01:51.510
你可以为该视图创建一个事件监听器对象

00:01:51.510 --> 00:01:54.990
指定该事件发生时应该出现什么情况

00:01:54.990 --> 00:01:58.200
在这个图表中 我们关心的是点击事件

00:01:58.200 --> 00:02:00.880
我们创建一个 OnClickListener

00:02:00.880 --> 00:02:04.550
并填写调用 onClick 方法时应该发生的情况说明

00:02:04.550 --> 00:02:06.960
这些说明可以是任何你想要的内容

00:02:06.960 --> 00:02:09.880
当用户点击该视图时 你可以打开新的屏幕

00:02:09.880 --> 00:02:11.540
更改该视图的外观

00:02:11.540 --> 00:02:15.430
更改整个屏幕的背景颜色或任何其他内容

00:02:15.430 --> 00:02:19.050
创建 OnClickListener 后 最后一步是

00:02:19.050 --> 00:02:22.870
将其附到我们想监听点击操作的视图上

00:02:22.870 --> 00:02:25.150
这样 当点击事件发生时

00:02:25.150 --> 00:02:28.290
如果该视图具有与其相关联的点击监听器

00:02:28.290 --> 00:02:31.690
Android 将执行你在这里指明的代码 

00:02:31.690 --> 00:02:35.320
这一过程发生的非常快

00:02:35.320 --> 00:02:38.170
你不需要记住每步的具体细节

00:02:38.170 --> 00:02:42.150
作为开发者 你的关键角色是为应用中

00:02:42.150 --> 00:02:45.700
你关心的输入事件设置事件监听器

00:02:45.700 --> 00:02:49.260
Android 将负责运行你指定的代码

00:02:49.260 --> 00:02:51.930
这是 Android 中的一些事件监听器列表

00:02:51.930 --> 00:02:54.540
每个事件监听器都提供了单个回调方法

00:02:54.540 --> 00:02:56.400
你可以为该方法编写代码

00:02:56.400 --> 00:02:59.830
称为回调方法是因为事件发生时

00:02:59.830 --> 00:03:01.010
你将回调该方法

00:03:01.010 --> 00:03:04.120
现在再看看文章的这部分内容

00:03:04.120 --> 00:03:08.020
上面提到 如果你对某个点击事件感兴趣 则必须创建 OnClickListener

00:03:08.020 --> 00:03:11.747
我们转到该部分 这里包含了 onClick 方法

00:03:11.747 --> 00:03:14.440
你为该 onClick 方法填写了相关说明

00:03:14.440 --> 00:03:17.060
每当用户点击某个视图时 Android 都将负责

00:03:17.060 --> 00:03:18.200
调用该方法

00:03:18.200 --> 00:03:18.780
说句题外话

00:03:18.780 --> 00:03:22.820
我们将屏幕上的点按操作当做点击行为 是因为一些历史原因

00:03:22.820 --> 00:03:26.810
台式电脑使用鼠标来浏览屏幕

00:03:26.810 --> 00:03:31.220
当你按下鼠标按钮来选择屏幕上的某些内容时 鼠标就被点击了一下

00:03:31.220 --> 00:03:33.250
这是首款鼠标的图片

