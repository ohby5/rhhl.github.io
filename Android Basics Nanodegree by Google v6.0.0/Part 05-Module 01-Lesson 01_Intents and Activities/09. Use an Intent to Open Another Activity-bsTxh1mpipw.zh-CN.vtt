WEBVTT
Kind: captions
Language: zh-CN

00:00:00.220 --> 00:00:02.020
打开这个教程网站

00:00:02.020 --> 00:00:04.150
会发现上面有关于 intent 的大量信息

00:00:04.150 --> 00:00:07.870
提示下 请查看“1.3 启动 Activity”部分

00:00:07.870 --> 00:00:11.930
下面的图表形象地展示了某个 Activity 会如何打开另一个 Activity

00:00:11.930 --> 00:00:14.290
这段示例代码也很有趣

00:00:14.290 --> 00:00:18.010
假设某个 Activity 文件调用了这段代码

00:00:18.010 --> 00:00:21.902
我们使用构造函数创建一个新的 intent 并传入两个输入值

00:00:23.160 --> 00:00:25.700
这是 Android intent 文档页面

00:00:25.700 --> 00:00:27.270
这是我们要调用的构造函数

00:00:27.270 --> 00:00:30.140
我们需要传入一个 Context 和一个 Class 组件

00:00:30.140 --> 00:00:32.080
回到示例代码

00:00:32.080 --> 00:00:36.110
第一个输入值必须是 Context 所以我们传入 this

00:00:36.110 --> 00:00:38.050
指的是当前的 Activity

00:00:38.050 --> 00:00:41.410
通常 Context 将帮助 intent 更详细地了解应用的

00:00:41.410 --> 00:00:42.370
当前状态

00:00:42.370 --> 00:00:45.980
这样我可以将第二个 Activity 放在当前 Activity 前面

00:00:45.980 --> 00:00:48.020
稍后 设备上的返回按钮就能工作了

00:00:48.020 --> 00:00:51.800
该构造函数的第二个输入值是传入一个类组件

00:00:51.800 --> 00:00:56.210
这是我们要打开的 Activity 的名称 即 ActivityTwo

00:00:56.210 --> 00:00:58.100
最后要加上 .class 扩展内容

00:00:58.100 --> 00:01:00.810
以便标明这一特定的 Java 类

00:01:00.810 --> 00:01:04.050
新的 intent 创建完毕 并存储在叫做 I 的变量中

00:01:04.050 --> 00:01:07.700
在下一行代码中 我们调用 startActivity 方法

00:01:07.700 --> 00:01:09.930
并将 intent I 当做输入值

00:01:09.930 --> 00:01:14.420
这样 Android 便会启动新的 Activity 叫做 ActivityTwo

00:01:14.420 --> 00:01:17.300
我们复制下这段代码 看看能不能用在我们的应用中

00:01:17.300 --> 00:01:18.950
似乎 Android studio 出现了错误

00:01:18.950 --> 00:01:21.730
显示系统无法解析符号 ActivityTwo

00:01:21.730 --> 00:01:25.890
这是因为我们的应用中没有叫做 ActivityTwo 的 Activity

00:01:25.890 --> 00:01:28.710
我们将其重命名为 NumbersActivity 我们的应用中的确有这个 Activity

00:01:28.710 --> 00:01:30.730
似乎所有错误都解决了

00:01:30.730 --> 00:01:33.470
我们在设备上运行下代码

00:01:35.280 --> 00:01:36.570
不错 成功了

00:01:36.570 --> 00:01:39.780
我们并没有认真解释刚刚的操作

00:01:39.780 --> 00:01:42.480
我们再逐步讲解下到底发生了什么

