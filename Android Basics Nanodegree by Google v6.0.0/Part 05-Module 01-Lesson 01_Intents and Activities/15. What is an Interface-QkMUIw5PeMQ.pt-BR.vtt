WEBVTT
Kind: captions
Language: pt-BR

00:00:00.667 --> 00:00:03.534
Vamos voltar à documentação
do OnClickListener.

00:00:03.567 --> 00:00:06.634
Como estamos percebendo, o Android
é bem específico quando aos detalhes

00:00:06.667 --> 00:00:09.067
sobre como observar
um evento de entrada.

00:00:09.100 --> 00:00:11.067
O método não pode
ter outro nome.

00:00:11.100 --> 00:00:14.100
Precisa ser exatamente "onClick"
e ter exatamente

00:00:14.133 --> 00:00:18.601
uma entrada que é a view sendo clicada
e não ter valor de retorno.

00:00:18.634 --> 00:00:21.834
Então você pode pensar
nessa descrição do OnClickListener

00:00:21.868 --> 00:00:26.067
em que se fala da classe e métodos
como um contrato que você, desenvolvedor,

00:00:26.100 --> 00:00:29.300
precisa seguir para ser notificado
dos eventos de clique.

00:00:29.334 --> 00:00:33.334
Em termos mais formais de Java,
esta é a definição de uma interface.

00:00:33.367 --> 00:00:37.701
No topo desta página da documentação,
em fontes pequenas, está "interface".

00:00:37.734 --> 00:00:40.634
No futuro, é bem possível
que você encontre

00:00:40.667 --> 00:00:43.901
outro componente no Android
que também seja uma interface.

00:00:43.934 --> 00:00:46.300
Então neste ponto
você pode estar pensando:

00:00:46.334 --> 00:00:49.267
"Espere, como uma
interface é diferente de uma classe?

00:00:49.300 --> 00:00:51.467
As páginas do documento
são bem parecidas."

00:00:51.501 --> 00:00:55.467
Bom, no curso passado aprendemos
sobre classes como text view,

00:00:55.501 --> 00:00:59.801
que contém estado e métodos
totalmente implementados, ou seja,

00:00:59.834 --> 00:01:02.400
há instruções
em cada método.

00:01:02.434 --> 00:01:06.501
Agora estamos vendo interfaces
que não contém estados,

00:01:06.534 --> 00:01:09.067
mas sim assinaturas
de métodos.

00:01:09.100 --> 00:01:13.367
Lembre-se, uma assinatura de método
significa o valor de retorno, nome do método

00:01:13.400 --> 00:01:14.534
e parâmetros de entrada.

00:01:14.567 --> 00:01:17.367
Termina com ponto e vírgula
e não há chaves

00:01:17.400 --> 00:01:20.467
com o código no meio
para implementação do método.

00:01:20.501 --> 00:01:22.868
Isso significa que é um método
abstrato.

00:01:22.901 --> 00:01:27.033
A implementação de um método abstrato
é intencionalmente deixada em branco

00:01:27.067 --> 00:01:30.133
para um desenvolvedor como você,
que quer usar a interface

00:01:30.167 --> 00:01:32.767
e pode preencher suas próprias
instruções.

00:01:32.801 --> 00:01:34.834
É como dizer
"preencha o espaço

00:01:34.868 --> 00:01:37.133
para o que quer que aconteça
quando esta view for clicada".

00:01:38.234 --> 00:01:41.968
Pode haver vários métodos abstratos
em uma interface, mas este exemplo

00:01:42.000 --> 00:01:46.701
da interface do onClickListener só tem
um método abstrato, o onClick.

00:01:46.734 --> 00:01:49.501
No futuro, também veremos
classes abstratas.

00:01:49.534 --> 00:01:53.501
Esta é uma classe parcialmente
implementada e contém estado

00:01:53.534 --> 00:01:57.767
e alguns métodos são totalmente implementados,
enquanto outros são deixados abstratos

00:01:57.801 --> 00:01:59.734
para que outra pessoa defina
seu comportamento.

00:01:59.767 --> 00:02:02.701
Então pode ver isso
como um continuum onde uma interface

00:02:02.734 --> 00:02:05.968
não é implementada, e uma classe abstrata
é parcialmente implementada,

00:02:06.000 --> 00:02:08.200
e uma classe concreta
é totalmente implementada.

00:02:08.234 --> 00:02:11.334
então como um onClickListener
não é uma classe concreta?

00:02:11.367 --> 00:02:13.300
E por que uma text view não é
uma interface?

00:02:13.334 --> 00:02:16.501
A mesma coisa ocorre com o grupo de views
sendo uma classe abstrata.

00:02:16.534 --> 00:02:18.968
A equipe do Android tomou
essas decisões

00:02:19.000 --> 00:02:22.701
baseadas no que seria mais fácil
para desenvolvedores ao fazer um app.

00:02:22.734 --> 00:02:25.267
Todo desenvolvedor precisará
mostrar texto na tela.

00:02:25.300 --> 00:02:28.767
Então criaram uma classe concreta
de text views que realiza isso.

00:02:28.801 --> 00:02:31.934
Podemos simplesmente acionar métodos
para mudar o texto na view.

00:02:31.968 --> 00:02:36.033
Neste caso da classe abstrata,
queremos padronizar o comportamento

00:02:36.067 --> 00:02:38.934
de grupos de views sendo contêineres
de várias views filhas.

00:02:38.968 --> 00:02:42.100
Porém, os detalhes de como
dispor as views

00:02:42.133 --> 00:02:45.567
na tela são deixados indefinidos
para a subclasse determinar.

00:02:45.601 --> 00:02:47.467
Neste caso,
quando seu layout

00:02:47.501 --> 00:02:50.767
e layout relativo são subclasses
da classeViewGroup,

00:02:50.801 --> 00:02:55.000
cada um define suas regras
para como as views devem ficar dispostas.

00:02:55.033 --> 00:02:58.801
Por outro lado, a equipe Android sabe
que muitos desenvolvedores

00:02:58.834 --> 00:03:00.734
provavelmente vão querer customizar
o comportamento ao clique.

00:03:00.767 --> 00:03:03.300
Não faria sentido fornecer
um comportamento padrão

00:03:03.334 --> 00:03:04.734
para o que acontece
quando um botão é clicado.

00:03:04.767 --> 00:03:08.067
Mas a equipe Android quis
padronizar a ação do método

00:03:08.100 --> 00:03:10.667
e qual a classe
do onClickListener.

00:03:10.701 --> 00:03:12.968
Depois deixaram a lógica
dentro do método

00:03:13.000 --> 00:03:14.667
para os desenvolvedores
escreverem.

00:03:14.701 --> 00:03:15.667
Então, resumindo,

00:03:15.701 --> 00:03:19.434
se vir uma classe concreta no Android,
pode usá-la imediatamente.

00:03:19.467 --> 00:03:22.467
Se vir uma classe abstrata,
precisa fazer uma subclasse

00:03:22.501 --> 00:03:25.267
e fornecer seu próprio código
para os métodos abstratos.

00:03:25.300 --> 00:03:28.234
Se vir uma interface,
precisa fornecer

00:03:28.267 --> 00:03:29.467
todos os métodos abstratos.

