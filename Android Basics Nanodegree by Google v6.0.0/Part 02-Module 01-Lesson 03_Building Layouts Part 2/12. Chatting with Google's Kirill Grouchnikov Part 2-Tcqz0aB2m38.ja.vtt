WEBVTT
Kind: captions
Language: ja

00:00:01.884 --> 00:00:04.763
あなたのアプリで
リニアレイアウト使用例はありますか?

00:00:04.763 --> 00:00:10.611
この並んだ３つのカードも
水平リニアレイアウトで

00:00:10.611 --> 00:00:16.463
ここには子ビューを
３つのカードの様に加えただけです

00:00:16.463 --> 00:00:23.810
そして レイアウトの幅を 0dp に
比率を１に設定しました

00:00:23.810 --> 00:00:29.569
これは従来 リニアレイアウトに対して
実行時にどの比率を取って

00:00:29.569 --> 00:00:35.523
他の相対的な比率に基づいて

00:00:35.523 --> 00:00:42.100
グループ内の全ての子ビュー間で
均一に配置するように指示するものです

00:00:42.100 --> 00:00:43.160
なので これが１つの例です

00:00:43.160 --> 00:00:47.420
そして もう１つの例はこちらでしょう
新しいゲームとアップデートされたゲームです

00:00:47.420 --> 00:00:50.110
ヘッダー集団のボタンは

00:00:50.110 --> 00:00:52.910
シンプルな水平リニアレイアウトでもあります

00:00:52.910 --> 00:00:54.980
物事がシンプルであれば

00:00:54.980 --> 00:00:57.740
必ずしもカスタムレイアウトを
書き始めなくても良いです

00:00:57.740 --> 00:01:01.310
リニアレイアウトより多機能だからといって

00:01:01.310 --> 00:01:05.980
相対レイアウトを
あらゆる場所に使ってはいけません

00:01:05.980 --> 00:01:08.700
もっと単純でよいのに
やりすぎてしまいますから

00:01:09.800 --> 00:01:11.748
では デザイナーが試作品を持ってきたら

00:01:11.748 --> 00:01:15.660
どうやってアプリ製作を始めますか？

00:01:15.660 --> 00:01:19.660
その時点で できれば試作品は１つではなく

00:01:19.660 --> 00:01:23.640
少なくとも２～３個のものが
大小のスクリーンへの

00:01:25.200 --> 00:01:29.880
デザインの対応具合が
示されているのが良いです

00:01:29.880 --> 00:01:33.560
それから組み立てる部分を
見極めたいですね

00:01:33.560 --> 00:01:37.680
アプリの至る所に表示される
カードの様なものについて話すなら

00:01:37.680 --> 00:01:41.000
私は同じカードで
多くのバリエーションを

00:01:41.000 --> 00:01:45.740
実行し始めたいと思わないでしょう

00:01:45.740 --> 00:01:49.240
小さい画像か大きい画像の
いずれが必要であるかによって

00:01:49.240 --> 00:01:52.930
タイトルを２行ではなく
１行にしたりします

00:01:52.930 --> 00:01:57.258
私はこれらのブロックを見極めて
独立したクラスや

00:01:57.258 --> 00:02:02.580
単独のレイアウトにしてから
その上に構築し始めます

00:02:02.580 --> 00:02:07.484
テキストビューやイメージビュー
スピナーなどから始めて

00:02:07.484 --> 00:02:11.055
小さなブロックを組み立てます

00:02:11.055 --> 00:02:16.771
それから上手くいけば
同じブロックの基本セットを再利用しながら

00:02:16.771 --> 00:02:22.450
これら小さなブロックから
より大きなブロックを作れます

00:02:22.450 --> 00:02:26.390
この利点は その時点では
準備に時間を取られはしますが

00:02:26.390 --> 00:02:32.440
作業が簡単になることです
特にアプリの進化と

00:02:32.440 --> 00:02:37.280
新機能追加のための言語適応方法において
デザインに一貫性がある時はそうです

00:02:37.280 --> 00:02:41.472
もし デザインに一貫性があるなら
異なる環境設定で使われていても

00:02:41.472 --> 00:02:44.751
同じブロックを何度も
見続けることになります

00:02:44.751 --> 00:02:49.419
ここで当初の投資が返ってきます

00:02:49.419 --> 00:02:55.430
新しく実装するスクリーンを
まったく新しい物として扱わないことです

00:02:55.430 --> 00:03:00.880
しかし 多分 50～70%か
それよりも高い確率で

00:03:00.880 --> 00:03:05.450
色やフォントなどの
ちょっとした手直しが必要なだけです

00:03:05.450 --> 00:03:10.272
しかし デザインに一貫性があると
準備ができているので

00:03:10.272 --> 00:03:14.098
進めるのがより簡単でもあります

00:03:14.098 --> 00:03:19.903
また 見た目レベルでは　
デザインの直しも より簡単になるでしょう

00:03:19.903 --> 00:03:24.099
色やフォントを直したり

00:03:24.099 --> 00:03:28.941
私たちが Lollipop で行ったように

00:03:28.941 --> 00:03:31.880
何かを押した時に
さざ波が立つ効果を加えたりなどです

00:03:31.880 --> 00:03:36.870
スタイルやレイアウトなどに
再利用し続ける要素がいくつかあるなら

00:03:36.870 --> 00:03:42.250
数か所を視覚的に手直しをして

00:03:42.250 --> 00:03:48.030
色々な所に一貫して適用したいですね

00:03:48.030 --> 00:03:51.550
私は 始めのうちは
確かなデータ獲得に焦点を置きたいです

00:03:51.550 --> 00:03:57.918
データを外部ソースから
獲得したアプリは特にです

00:03:57.918 --> 00:04:02.512
それから ピクセルレベルにズームして
得たデータのピクセルを

00:04:02.512 --> 00:04:08.842
グリッドやフォント
色やアニメーション 効果などを

00:04:08.842 --> 00:04:12.575
直すのに必要な時間を費やします

00:04:12.575 --> 00:04:16.338
もし Twitter クライアントを持っていても
同じことだと思います

00:04:16.338 --> 00:04:21.991
仮データを使ってレイアウトを
ピクセルレベルで完成させ始められます

00:04:21.991 --> 00:04:27.122
すると Twitter からのデータ取得について
何も知らないことに気が付いて

00:04:27.122 --> 00:04:32.920
データ取得だけに
あと３か月はかかるでしょう

00:04:32.920 --> 00:04:37.240
単なる例ですが
私はデータから始めるのを好みます

00:04:37.240 --> 00:04:41.880
思うに これは氷山の様なものです
あなたが見ている小さなピクセルは

00:04:41.880 --> 00:04:47.640
表面の 5%～10%にすぎず
その下では多くの仕事が進んでいる―

00:04:47.640 --> 00:04:50.800
いうなれば それを支えるためのね

00:04:50.800 --> 00:04:53.820
氷山の一角しか人々には見えないと
おっしゃいましたが

00:04:53.820 --> 00:04:57.210
実際に何が水面下で起こっていますか？

00:04:57.210 --> 00:05:00.620
Google Play App についての見解は？

00:05:00.620 --> 00:05:05.940
水面下で起こっていることは
まず ネットワークからのデータ取得です

00:05:05.940 --> 00:05:11.643
サーバーからデータ取得する権限を
得られるようにすることです

00:05:11.643 --> 00:05:13.969
手元でキャッシュできるようにします

00:05:13.969 --> 00:05:18.152
そうすれば 次にストリームから
詳細ページへ移動したり

00:05:18.152 --> 00:05:22.820
またストリームに戻ったりした時に
キャッシュのデータや画像を使うのです

00:05:22.820 --> 00:05:26.616
そうすれば バッテリーに
過剰な負担をかける必要がありません

00:05:26.616 --> 00:05:30.284
また アプリは
すでに持っている情報を表示します

00:05:30.284 --> 00:05:33.830
それから複数のアカウントから
サポートを得て

00:05:33.830 --> 00:05:37.660
データベースのあちこちに
持続するものをわずかに保持します

00:05:38.670 --> 00:05:44.380
また こちらには課金フローもあります
課金フローとは 主に

00:05:44.380 --> 00:05:48.840
異なった支払方法を統合するために
サーバー上で行われる仕事です

00:05:48.840 --> 00:05:51.200
同様にクライアントのための仕事もあります

00:05:51.200 --> 00:05:57.050
Play ストアのもう１つの大きな役目は
アプリとゲームをダウンロードすることと

00:05:57.050 --> 00:05:59.660
インストールすることです

00:05:59.660 --> 00:06:04.530
私たち Play ストア側の人間は
アプリのダウンロードとインストール

00:06:04.530 --> 00:06:06.840
アップデートを担当しています

00:06:06.840 --> 00:06:11.556
それがもう１つの大きな役目なのです
もう一度言いますが

00:06:11.556 --> 00:06:16.052
大量にある仕事のうち スクリーン上に
ピクセルとして見えるのはわずかです

00:06:16.052 --> 00:06:21.425
水面下には
情報を合致したアカウントへ運んだり

00:06:21.425 --> 00:06:27.668
スクリーンに配置したりするための
多くの作業があります

00:06:27.668 --> 00:06:32.610
あなたが Google Play App の様々な
イテレーションをしてきたのは明らかですね

00:06:32.610 --> 00:06:37.385
どうやって Android の最新情報を
得ているのですか？

00:06:37.385 --> 00:06:42.657
沢山の情報がGoogle+ 上にあり

00:06:42.657 --> 00:06:47.295
とても活動的なAndroid 開発者の
チュートリアルがあります

00:06:47.295 --> 00:06:52.322
単純に―

00:06:52.322 --> 00:06:57.575
様々なブログからや
時には 特にそれとなく

00:06:57.575 --> 00:07:02.732
RecyclerView や ViewPage 
ツールバーやアクションバーの

00:07:02.732 --> 00:07:07.430
環境設定について読んだりもします

00:07:07.430 --> 00:07:09.200
つまり―

00:07:10.270 --> 00:07:12.810
そこに多くの情報があることを
知るためという感じです

00:07:12.810 --> 00:07:17.340
それから私が
深い情報を必要とする時は

00:07:17.340 --> 00:07:20.130
それらのリソースに行くのです

00:07:20.130 --> 00:07:21.960
お時間をいただき
どうもありがとうございました

00:07:21.960 --> 00:07:25.110
Android アプリのエンジニアの仕事が
どんなものか

00:07:25.110 --> 00:07:27.010
生徒たちがあなたの見解を
楽しんで拝聴したと思います

