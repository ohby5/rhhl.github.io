WEBVTT
Kind: captions
Language: ja

00:00:00.420 --> 00:00:03.469
子ビューを他の兄弟ビューに
関連付けて配置する際

00:00:03.469 --> 00:00:06.190
配置に制約を加えることができます

00:00:06.190 --> 00:00:09.885
例えば あるTextViewは絶対に
あるTextViewの上に配置するとか

00:00:09.885 --> 00:00:14.090
あるImageViewはあるTextViewの
必ず左に配置するなどです

00:00:14.090 --> 00:00:18.340
この制約はパーティーの席決めに似ています

00:00:18.910 --> 00:00:21.380
誕生日パーティーが そろそろあるので

00:00:21.380 --> 00:00:23.540
その座席表を見てみましょう

00:00:23.540 --> 00:00:27.660
これが招待客のリストですが
席の配置には制約があります

00:00:28.330 --> 00:00:30.550
絶対に親友の隣に座りたい人や

00:00:30.550 --> 00:00:33.490
敵対している友人たちもいますから

00:00:33.490 --> 00:00:36.120
隣に座るのは避けたい人もいるでしょう

00:00:36.120 --> 00:00:39.860
それらを考慮した上で
この配置を考えました

00:00:39.860 --> 00:00:41.880
KunalとBenとKagureの３人はここに

00:00:41.880 --> 00:00:45.900
NatalieとLylaと私は左下
AmyとOmojuとJennieは右下です

00:00:45.900 --> 00:00:50.410
TextViewと相対レイアウトを使ったXMLで
このような座席配置を作れるでしょうか

00:00:51.040 --> 00:00:53.270
角に配置するのは知っていますね

00:00:53.270 --> 00:00:57.398
LylaのTextViewは親の左と
下の端に沿って整列します

00:00:57.398 --> 00:01:01.390
Jennieは親の右と下の端に沿って整列します

00:01:01.390 --> 00:01:04.510
Benは親の上の端に沿って整列します

00:01:04.510 --> 00:01:08.390
ここでは親ビューは画面の全横幅と高さを
想定していますので

00:01:08.390 --> 00:01:11.360
幅と高さはmatch parentに設定します

00:01:11.360 --> 00:01:12.430
Benに戻ります

00:01:12.430 --> 00:01:14.550
Benは親の上の端に整列します

00:01:14.550 --> 00:01:16.970
水平方向で真ん中に配置します

00:01:16.970 --> 00:01:20.320
一般的にこの３つのビューを
アンカービューと呼びます

00:01:20.320 --> 00:01:23.750
この３人から相対的に
他の人は配置されていくからです

00:01:23.750 --> 00:01:27.670
この３人は他の人がどこへ座ろうと
動くことはありません

00:01:27.670 --> 00:01:29.360
他の人を足していきましょう

00:01:29.360 --> 00:01:32.810
KunalはBenの左に配置します

00:01:32.810 --> 00:01:35.259
どのようにXMLで書くでしょうか？

00:01:35.259 --> 00:01:40.662
“Benという名のビューの左隣に配置する”
という具体的な属性はありません

00:01:40.662 --> 00:01:43.363
Androidの属性名は
一般的に作られているので

00:01:43.363 --> 00:01:46.940
どんなケースにも対応できるようになっています

00:01:46.940 --> 00:01:49.410
KunalをBenの左側に配置したいのですが

00:01:49.410 --> 00:01:52.580
そうするための属性名は分かりません

00:01:52.580 --> 00:01:53.768
そこで使えるのが

00:01:53.768 --> 00:01:58.780
相対レイアウトの
android: layout_toLeftof です

00:01:58.780 --> 00:02:03.520
これはKunalのtextviewを
あるTextViewの左側に配置するという意味です

00:02:03.520 --> 00:02:08.020
そのViewを特定するには view IDを使います

00:02:08.020 --> 00:02:10.000
どのviewでもview IDをアサインできます

00:02:10.000 --> 00:02:13.110
相対レイアウトに
指定されている必要はありません

00:02:13.110 --> 00:02:16.275
相対レイアウトやリニアレイアウト
または他のviewグループに―

00:02:16.275 --> 00:02:18.200
配置されていても構いません

00:02:18.200 --> 00:02:21.710
BenのTextViewに
android:idという属性を足します

00:02:21.710 --> 00:02:23.860
その値が IDネームになります

00:02:23.860 --> 00:02:29.500
書式は Androidのアプリでリソースを意味する
@ 記号から始まります

00:02:29.500 --> 00:02:34.263
＠記号はイメージを意味する際にも使いましたね

00:02:34.263 --> 00:02:36.516
例えば ＠Drawableです

00:02:36.516 --> 00:02:38.950
リソースのタイプを特定します

00:02:38.950 --> 00:02:41.017
この場合は id がリソースタイプです

00:02:41.017 --> 00:02:45.117
このidを使うのは初めてなので
＋記号もつけます

00:02:46.019 --> 00:02:50.120
スラッシュの後にビューの名前を書きます

00:02:50.120 --> 00:02:53.190
BenのTextViewにつけた名前です

00:02:53.190 --> 00:02:55.240
ben_text_view です

00:02:56.320 --> 00:02:59.470
名前の基本ルールは
スペースを入れないこと

00:02:59.470 --> 00:03:00.937
なのでアンダーバーを使っています

00:03:01.777 --> 00:03:03.723
英文字から始まり

00:03:03.723 --> 00:03:06.489
変な句読文字は使えません

00:03:07.250 --> 00:03:08.990
数字は使えます

00:03:08.990 --> 00:03:13.900
ここではBenのIDとして
ben_text_viewを使います

00:03:13.900 --> 00:03:16.130
後から見てもわかります

00:03:16.130 --> 00:03:20.460
KunalのTextViewには
layout_toLeftofの属性を足し

00:03:20.460 --> 00:03:22.920
BenのTextViewの左と指定できます

00:03:24.190 --> 00:03:28.390
＠idを使って BenのTextViewの
IDを参照します

00:03:28.390 --> 00:03:32.322
一度使ったので ＋記号は必要ありません

00:03:32.322 --> 00:03:34.692
このIDを使うのは２度目だからです

00:03:34.692 --> 00:03:38.910
View IDネームを考えるとき
ユニークな名前になるようにしましょう

00:03:38.910 --> 00:03:42.550
内容に関係したものをつければ
分かりやすいですね

00:03:42.550 --> 00:03:45.920
これでKunalをBenの左に配置できました

00:03:45.920 --> 00:03:49.740
では次に OmojuをJennieの上に
配置します

00:03:49.740 --> 00:03:51.760
Jennieを参照したいので

00:03:51.760 --> 00:03:53.980
JennieのIDも作りましょう

00:03:53.980 --> 00:03:58.240
JennieのTextViewに
この属性値をつけます

00:03:58.240 --> 00:04:01.880
IDネームは Jennie_text_viewとします

00:04:01.880 --> 00:04:04.550
OmojuのTextViewに
この属性を足します

00:04:04.550 --> 00:04:09.680
これはJennie_text_viewの上に
Omojuを配置するという意味です

00:04:09.680 --> 00:04:11.380
このIDは 先ほど作ったIDです

00:04:12.570 --> 00:04:13.850
XMLのレイアウトを見てみましょう

00:04:13.850 --> 00:04:18.010
幅と高さがmatch_parentと設定された
相対レイアウトがあります

00:04:18.010 --> 00:04:19.870
lyla_text_viewがここにあります

00:04:19.870 --> 00:04:22.267
親の左下角に整列されます

00:04:22.267 --> 00:04:23.600
ここに見えますね

00:04:24.770 --> 00:04:26.314
jennie_text_viewがここにあります

00:04:26.314 --> 00:04:29.010
親の右下角に整列されます

00:04:29.010 --> 00:04:29.720
それが ここに

00:04:31.300 --> 00:04:32.876
そしてben_text_viewがあります

00:04:32.876 --> 00:04:35.900
親の上に沿って整列されます

00:04:35.900 --> 00:04:38.290
横向き中央に配置されています

00:04:38.290 --> 00:04:39.880
これがアンカービューとなり

00:04:39.880 --> 00:04:42.460
これらを中心に他のビューを配置できます

00:04:42.460 --> 00:04:45.720
それぞれのビューにはIDをすでに足してあります

00:04:45.720 --> 00:04:48.040
これがBenの TextView IDです

00:04:48.040 --> 00:04:50.970
KunalのTextViewをBenの左に配置できます

00:04:51.640 --> 00:04:56.930
Kunalは親の上部分で
Benの左に配置しました

00:04:56.930 --> 00:04:58.525
BenのIDをここで使っています

00:04:58.525 --> 00:05:02.025
OmojuのTextViewをJennieの上に配置します

00:05:02.025 --> 00:05:04.915
Omojuは親の右端に並び

00:05:04.915 --> 00:05:06.435
Jennieの上になります

00:05:07.505 --> 00:05:08.245
できました

00:05:08.245 --> 00:05:11.465
レイアウトに配置する友人たちが
まだいますね

00:05:12.925 --> 00:05:15.475
基本のコードが書かれた
XMLVisualizerへの

00:05:15.475 --> 00:05:19.270
リンクがインストラクターノートに
書かれています

00:05:19.270 --> 00:05:20.910
そこでXMLを書き直してみましょう

00:05:20.910 --> 00:05:24.200
座席表をこのように完成させてください

00:05:24.200 --> 00:05:26.840
いくつかのviewは間違って配置されていますので

00:05:26.840 --> 00:05:28.060
それも修正してください

00:05:29.310 --> 00:05:32.490
新しい属性を
たくさん紹介しましたが

00:05:32.490 --> 00:05:34.680
全部を覚えようとは思わないでください

00:05:34.680 --> 00:05:36.446
いつでも探すことができます

00:05:36.446 --> 00:05:40.460
relativelayout　layout paramsと検索します

00:05:40.460 --> 00:05:45.260
最初のリンクをクリックすると
このドキュメントに飛びます

00:05:45.260 --> 00:05:48.870
RelativeLayoutの中の子ビューに書ける
XML属性ですので

00:05:48.870 --> 00:05:53.290
どう並べるのか RelativeLayoutは分かっています

00:05:53.290 --> 00:05:54.755
見たことがありますよね

00:05:54.755 --> 00:06:00.350
Layout_aboveや alignParentbottom
alignParentrightなど

00:06:00.350 --> 00:06:05.510
教育目的のためXMLVisualizerは全てを
サポートしていないかもしれませんが

00:06:05.510 --> 00:06:08.399
Android Studioでアプリを開発する際は

00:06:08.399 --> 00:06:10.553
全てを利用できます

