WEBVTT
Kind: captions
Language: ko

00:00:00.920 --> 00:00:03.550
이 레이아웃을 만들기 위해 
먼저 코드 쓰기 전에 개념적으로

00:00:03.550 --> 00:00:08.850
내가 무엇을 할 것인지에 대한
아이디어를 갖고 있는지 생각해 보세요.

00:00:08.850 --> 00:00:11.120
먼저 우리는 이것이 수직
linear layout이라는 것을 알아요

00:00:11.120 --> 00:00:13.010
요소들이 수직 열에 있으니까요.

00:00:13.010 --> 00:00:14.680
세 child 뷰를 갖고 있어요.

00:00:14.680 --> 00:00:17.910
이미지 뷰, 텍스트 뷰,
또 하나의 텍스트 뷰가 있죠.

00:00:17.910 --> 00:00:22.170
당신에게 드릴 첫 힌트는
각 뷰의 너비를 알아내라는 것입니다.

00:00:22.680 --> 00:00:26.130
전체 레이아웃이 기기의
전체 너비와 높이를 차지하기 때문에

00:00:26.130 --> 00:00:30.270
Vertical Linear Layout은
match_parent의 높이, 너비를 가지죠.

00:00:30.270 --> 00:00:35.920
이미지 뷰도 기기와 연결되는
parent만큼 넓어지길 바라요.

00:00:35.920 --> 00:00:38.170
그래서 그것을
match_parent로 설정합니다.

00:00:38.170 --> 00:00:39.670
두 텍스트뷰에도 똑같이 설정해요.

00:00:39.670 --> 00:00:43.190
그들이 기기의 가로 전체에
맞춰지길 바라므로 match_parent죠.

00:00:43.190 --> 00:00:45.330
다음에 각 뷰의 높이를 다룹시다.

00:00:45.330 --> 00:00:49.430
이 두 텍스트 뷰는 안의 요소를
감싸고 있기 때문에 쉬워요.

00:00:49.430 --> 00:00:53.080
각 텍스트 뷰의 높이에는
wrap_content를 설정합시다.

00:00:53.080 --> 00:00:56.540
parent에 빈 공간이 있어도
이 값들이 변하지 않기 때문에

00:00:56.540 --> 00:01:00.400
무게 (weight) 값 또한
0으로 설정하게 됩니다.

00:01:00.400 --> 00:01:02.800
이제 이미지 뷰가
가장 어려운 부분인데요.

00:01:02.800 --> 00:01:06.290
기기 화면 사이즈에 따라 달라지는
parent에 남은 공간에 맞춰서

00:01:06.290 --> 00:01:10.779
이미지의 높이가
늘어나거나 작아지길 원합니다.

00:01:11.250 --> 00:01:13.190
이렇게 하는 걸 달성하기 위해
높이를 사용합니다.

00:01:13.190 --> 00:01:16.180
이미지 뷰의 높이가
0dp에서 시작되게 하지만

00:01:16.180 --> 00:01:18.160
1의 무게를 줍니다.

00:01:18.160 --> 00:01:20.720
다른 children 뷰는
무게 값을 갖고 있지 않기 때문에

00:01:20.720 --> 00:01:25.280
parent에 남은 부분은
이 이미지 뷰에 주어질 것입니다.

00:01:25.280 --> 00:01:27.610
높이를 0dp로 설정한 것은

00:01:27.610 --> 00:01:29.840
이것이 수직 linear layout이어서

00:01:29.840 --> 00:01:32.040
이것은 수직을 
스스로 다 채우기 때문입니다.

00:01:32.040 --> 00:01:36.040
무게 값이 높이를 결정하기 전까지
우리는 높이를 모릅니다.

00:01:36.530 --> 00:01:38.280
instructor note에
이미 코드를 담고 있는

00:01:38.280 --> 00:01:39.940
이 링크를 드렸습니다.

00:01:39.940 --> 00:01:43.590
뷰 자리가 바르지 않으니까
그것을 고치기로 합시다.

00:01:43.590 --> 00:01:46.200
먼저 텍스트 뷰가 쉬우니
그것부터 시작해보죠.

00:01:46.200 --> 00:01:49.290
이 텍스트 뷰들이 화면의 너비 전체로
넓어지지 않으므로

00:01:49.290 --> 00:01:50.810
그걸 바꿔야 합니다.

00:01:50.810 --> 00:01:53.280
너비는 match_parent가
되어야 합니다.

00:01:53.280 --> 00:01:54.180
더 낫네요.

00:01:54.180 --> 00:01:56.780
이제 녹청색 배경은

00:01:56.780 --> 00:01:59.300
화면 전체의 너비로 갔습니다.

00:01:59.300 --> 00:02:02.700
Bonfire at the beach
텍스트 뷰도 똑같아요.

00:02:02.710 --> 00:02:05.860
좋아요. 
높이는 제대로 된 요소네요.

00:02:05.860 --> 00:02:10.380
이제 수직 linear layout에
이 여분 공간이 있어요

00:02:10.519 --> 00:02:12.140
그런데, linear layout의

00:02:12.140 --> 00:02:14.900
너비와 높이는 match_parent로
설정되어 있어서

00:02:14.900 --> 00:02:18.780
레이아웃이 결국 화면의 높이,
너비 전체로 늘어나게 합니다.

00:02:18.780 --> 00:02:21.880
parent의 여분 높이를 사용하려면

00:02:21.880 --> 00:02:24.880
이를 무게 값을 가진
child로 주는 게 낫죠.

00:02:24.880 --> 00:02:28.820
이미지 뷰를 바꿔서
무게 값을 갖도록 만듭시다.

00:02:28.820 --> 00:02:31.300
먼저 너비를
match_parent로 설정해요.

00:02:31.300 --> 00:02:34.090
그럼 이것은 화면의
너비에서 확장됩니다.

00:02:34.430 --> 00:02:40.140
그리고 높이를 0dp로,
무게를 1로 설정합니다.

00:02:40.140 --> 00:02:42.200
이게 원했던 화면이네요.

00:02:42.200 --> 00:02:43.330
잘 했어요.

00:02:43.330 --> 00:02:48.270
무게 값을 7, 10 같은
정말 높은 숫자로 바꾼다면

00:02:48.270 --> 00:02:51.380
기기 미리보기를 그렇게
변화시키지 않는다는 걸 알아두세요.

00:02:51.500 --> 00:02:54.720
이것만이 무게를 가진
child이기 때문이고,

00:02:54.720 --> 00:02:57.760
그것이 정말 높은 무게인지,
낮은 무게인지는 상관 없어요.

00:02:57.760 --> 00:03:02.150
parent의 여분 높이는
이 child에게 주어질 것입니다.

00:03:02.680 --> 00:03:04.790
그러니 이것을 1이 되도록 바꿉시다.

00:03:05.120 --> 00:03:06.270
좋아요, 잘 했어요.

