WEBVTT
Kind: captions
Language: zh-CN

00:00:00.390 --> 00:00:03.980
我们已经学过 LinearLayout 包含垂直方向

00:00:03.980 --> 00:00:06.140
或者水平方向

00:00:06.140 --> 00:00:09.380
我们也学过单个视图可以有权重值  

00:00:09.380 --> 00:00:11.350
用来填充父视图的额外空间

00:00:12.710 --> 00:00:14.520
我们花一些时间来学习以下内容

00:00:14.520 --> 00:00:16.450
RelativeLayout 组

00:00:16.450 --> 00:00:19.910
这将使你可以建立更灵活的布局

00:00:19.910 --> 00:00:22.140
请记住 Ray 这个RelativeLayout

00:00:22.140 --> 00:00:25.590
它是父视图 它是被这些 ViewGroup 所表示的 

00:00:25.590 --> 00:00:29.250
在这个集合里 子视图可以通过它来布局

00:00:29.250 --> 00:00:32.360
在相对视图中 你可以通过子视图与父视图的相对位置来布局

00:00:32.360 --> 00:00:34.840
比如你可以用父视图的顶部或者父视图的下部

00:00:35.850 --> 00:00:39.680
另一个选择就是你可以用子视图与其他子视图 的相对位置来布局

00:00:39.680 --> 00:00:40.920
比如这样

00:00:40.920 --> 00:00:44.520
首先让我们来关注用子视图与父视图的相对位置来

00:00:44.520 --> 00:00:45.780
布局的情况

00:00:45.780 --> 00:00:50.220
对于这个例子 这个父 RelativeLayout 的宽度

00:00:50.220 --> 00:00:53.550
和高度均匹配父视图 所以它与设备的尺寸相同

00:00:53.550 --> 00:00:56.660
在 RelativeLayout 中的子视图可以通过以下方式来布局

00:00:56.660 --> 00:01:00.880
在父视图的左侧边缘 上部边缘 右侧边缘 下部边缘

00:01:00.880 --> 00:01:04.519
这是以上布局的代码 在子视图 x 数量的元素上面

00:01:04.519 --> 00:01:08.540
例如对于图片视图或者文本视图你得加上这些属性

00:01:08.540 --> 00:01:14.440
这些属性必须用这样的格式 android:layout_alignParentTop

00:01:14.440 --> 00:01:17.120
这个属性决定了这些子视图

00:01:17.120 --> 00:01:19.400
是否与父视图的上部边缘对齐

00:01:19.400 --> 00:01:22.640
所以这些值可能是 true 或者 false

00:01:22.640 --> 00:01:25.780
如果它的值是 true 这个视图就会与父视图的上部边缘对齐

00:01:25.780 --> 00:01:28.540
如果它的值是 false 子视图就不与父视图的上部边缘对齐

00:01:28.540 --> 00:01:30.990
对于其它的边缘也有这样的属性

00:01:30.990 --> 00:01:34.800
例如 alignParentBottom 是与父视图的下部边缘对齐

00:01:34.800 --> 00:01:37.460
alignParentLeft 表示与父视图的左侧边缘对齐

00:01:37.460 --> 00:01:41.000
alignParentRight 表示与父视图的右侧边缘对齐

00:01:42.050 --> 00:01:44.970
你可以同时混合 搭配使用这些属性 也可以一次用多个属性

00:01:45.980 --> 00:01:47.680
以这个 ImageView 为例

00:01:47.680 --> 00:01:52.370
我们设置属性 alignParentTop 为 true

00:01:52.370 --> 00:01:54.850
因为它与父视图的上边缘对齐

00:01:54.850 --> 00:01:57.510
它也与父视图的左、右边缘对齐

00:01:57.510 --> 00:02:00.220
所以我们把 alignParentLeft 和 alignParentLeft 设置为 true

00:02:01.270 --> 00:02:04.896
它不与父视图的底部对齐 所以我们把 alignParentBottom 设置为 false

00:02:04.896 --> 00:02:08.410
对于这个底部的TextView

00:02:08.410 --> 00:02:11.430
它与父视图的底部边缘 右边缘 左边缘对齐

00:02:12.580 --> 00:02:15.910
所以我们把 alignParentBottom 设为 true 把 alignParentLeft 设为 true

00:02:15.910 --> 00:02:19.809
把 alignParentRight 设置为 true 但是把 alignParentTop 设置为 false

00:02:21.280 --> 00:02:24.640
除了把子视图布局在

00:02:24.640 --> 00:02:28.440
屏幕的上方或者下方 你可以设置具体靠近哪个角

00:02:28.440 --> 00:02:31.850
如果我们想把这个 Birthday TextView 放在左上角

00:02:31.850 --> 00:02:36.190
我们把 alignParentTop 设置为 true 把alignParentLeft 设置为 true

00:02:37.350 --> 00:02:39.560
为了将一个视图放在右上角 

00:02:39.560 --> 00:02:43.450
我们应该把它与父视图的上部边缘与右部边缘对齐

00:02:43.450 --> 00:02:46.280
所以 alignParentTop 等于 true  alignParentTop 等于true 

00:02:46.280 --> 00:02:50.850
对于左下角 我们需要与父视图的左边缘与

00:02:50.850 --> 00:02:51.430
下边缘对齐

00:02:52.780 --> 00:02:54.490
所以 alignParentBottom 等于 true

00:02:54.490 --> 00:02:56.210
alignParentLeft 等于 true

00:02:57.240 --> 00:03:00.480
这些值都是 false 并且它们的缺省值是 false 因此

00:03:00.480 --> 00:03:02.240
你不需要在 XML 的代码中写入它们

00:03:02.240 --> 00:03:06.170
对于最后一个角 它需要与父视图的右边缘

00:03:06.170 --> 00:03:07.030
和底部边缘对齐

00:03:07.030 --> 00:03:10.940
所以 alignParentBottom 和 alignParentRight 都等于 true

00:03:10.940 --> 00:03:12.210
其他两个为 false

00:03:12.210 --> 00:03:14.180
所以我们可以不把它们写入代码中

00:03:14.180 --> 00:03:17.140
不管你信不信 还有更多的属性需要你来设置

00:03:17.140 --> 00:03:20.190
你也可以对视图进行水平居中

00:03:20.190 --> 00:03:23.030
即把 android layout_ horizontal 设置为 true

00:03:23.030 --> 00:03:27.530
你也可以把它加入到我们已经学过的现有的属性中去

00:03:27.530 --> 00:03:30.550
如果这表示与底部边缘对齐 这个表示水平居中 

00:03:30.550 --> 00:03:32.220
它看起来就是这个样子的

00:03:32.220 --> 00:03:34.870
最后 我将给你展示 layout_centerVertical

00:03:34.870 --> 00:03:39.445
如果这个值被设置为 true 这个视图就垂直的放在父视图的中心

00:03:39.445 --> 00:03:43.015
这个 TextView 与父视图的左侧边缘对齐的原因是 尽管

00:03:43.015 --> 00:03:47.085
我们没有把这些属性设置为 true 但是因为这些被加进相对视图的视图

00:03:47.085 --> 00:03:51.550
被默认的布局在 ViewGroup 的左上角

00:03:51.550 --> 00:03:54.300
这些属性都被称为 ViewGroup 的布局参数

00:03:54.300 --> 00:03:58.100
尽管它们都已经在子视图的 XML 元素中声明过了 

00:03:58.100 --> 00:04:02.440
父 ViewGroup 用它们来布局子视图

00:04:02.440 --> 00:04:05.098
它们都是以 “layout_” 开头的

00:04:05.098 --> 00:04:08.050
它们效仿了 “layout_width“ 的格式  

00:04:08.050 --> 00:04:10.960
和 “layout_height“ 的格式 这些你都已经非常熟悉了

00:04:10.960 --> 00:04:14.810
这两个属性是 ViewGroup 的布局参数 因为

00:04:14.810 --> 00:04:17.920
父视图用它们来布局子视图

00:04:17.920 --> 00:04:22.089
这是 RelativeLayout 及其子布局的 XML 代码   

00:04:22.089 --> 00:04:24.450
你可以跟随上面的链接

00:04:24.450 --> 00:04:28.110
这有一个 RelativeLayout 的起始标签 下面还有一个结束标签

00:04:28.110 --> 00:04:30.740
所有的子视图都在这两个标签之间

00:04:30.740 --> 00:04:31.250
这个 RelativeLayout 的宽度

00:04:31.250 --> 00:04:34.490
和高度都被设置为 match_parent

00:04:34.490 --> 00:04:35.620
因为这个布局是为了

00:04:35.620 --> 00:04:39.070
我们整个的应用 我们应该用它占满整个屏幕

00:04:39.070 --> 00:04:42.310
在这个 RelativeLayout 中有三个子文本视图

00:04:42.310 --> 00:04:45.380
第一个是 TextView 上面写着 “Happy”

00:04:45.380 --> 00:04:49.090
它的宽度和高度都为 wrap_content 并且我们加进这些属性

00:04:49.090 --> 00:04:53.520
来帮助 RelativeLayout 定位它的子文本视图

00:04:53.520 --> 00:04:56.060
我们把它放在父视图的右边缘 

00:04:56.060 --> 00:04:58.290
和上边缘

00:04:58.290 --> 00:05:01.900
那么这个 “Happy” TextView就在屏幕的右上角

00:05:01.900 --> 00:05:05.670
对于这个 “Birthday” TextView 它的 layout_width 和 layout_height 的值都为 wrap_content

00:05:05.670 --> 00:05:09.100
我们想要它与父视图的下边缘和左边缘对齐

00:05:09.100 --> 00:05:12.750
因此 与底部和左边缘对齐是在下面这个角

00:05:12.750 --> 00:05:16.690
最后一个上面写着“To You”的 TextView 没有任何详细的

00:05:16.690 --> 00:05:19.750
属性用来确定它与父视图的相对位置

00:05:19.750 --> 00:05:22.410
我们所知道的就是它的 layout_width 和 layout_height 的值都是 wrap_content

00:05:22.410 --> 00:05:25.703
就像我前面提到的 如果你不想确定一个子视图应该在哪

00:05:25.703 --> 00:05:29.267
通过默认值 RelativeLayout 将会把他定位在屏幕的左上角

