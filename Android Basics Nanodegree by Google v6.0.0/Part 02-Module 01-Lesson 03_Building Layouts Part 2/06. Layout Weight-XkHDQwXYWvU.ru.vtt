WEBVTT
Kind: captions
Language: ru

00:00:00.970 --> 00:00:05.250
В прошлом занятии мы пытались
выделить <i>TextView</i>-элементам

00:00:05.250 --> 00:00:08.240
<i>Tom</i>, <i>Tim</i> и <i>Todd</i>
больше пространства,

00:00:08.240 --> 00:00:12.010
расставив их на равном расстоянии
друг от друга по всей высоте устройства.

00:00:13.380 --> 00:00:15.740
Мы попробовали установить
фиксированное значение в <i>dp</i>,

00:00:15.740 --> 00:00:19.900
но такой подход не сработает для более
длинного устройства, например планшета.

00:00:19.900 --> 00:00:24.300
Мы попробовали значение <i>match_parent</i>,
но элемент <i>Tom</i> становился слишком большим,

00:00:24.300 --> 00:00:27.390
и остальные два <i>TextView</i> больше
не помещались на экране.

00:00:27.390 --> 00:00:31.440
Тогда мы начали изучать
атрибут <i>weight</i> для <i>LinearLayout</i>.

00:00:31.440 --> 00:00:34.660
В документации говорится, что
в вертикальном <i>LinearLayout</i>

00:00:34.660 --> 00:00:37.820
равномерно удалить дочерние элементы
друг от друга можно, если

00:00:37.820 --> 00:00:42.320
задать для <i>height</i> значение 0 <i>dp</i>,
а для <i>weight</i> каждого из них - единицу.

00:00:43.590 --> 00:00:46.480
Задание веса дочернему элементу

00:00:46.480 --> 00:00:49.490
похоже на описание его значимости.

00:00:49.490 --> 00:00:50.930
Чем больше вес,

00:00:50.930 --> 00:00:55.040
тем больше элемент получит пространства,
если таковое осталось в родителе.

00:00:56.280 --> 00:00:57.510
Например,

00:00:57.510 --> 00:01:01.920
в вертикальном <i>LinearLayout</i> элементы
располагаются столбиком сверху вниз.

00:01:01.920 --> 00:01:04.590
Оказывается, что в этом <i>LinearLayout</i>
много свободного места,

00:01:04.590 --> 00:01:08.900
которое будет распределено между
дочерними элементами с ненулевым весом.

00:01:08.900 --> 00:01:11.020
Чем больше значение <i>weight</i>
у дочернего элемента,

00:01:11.020 --> 00:01:14.450
тем больше высоты будет
ему выделено.

00:01:14.450 --> 00:01:16.890
Дочернему элементу
с маленьким весом

00:01:16.890 --> 00:01:19.900
достанется меньше
свободного пространства.

00:01:19.900 --> 00:01:21.340
Я покажу, как это работает.

00:01:21.340 --> 00:01:24.130
Я задам для <i>height</i>
этого элемента значение 0 <i>dp</i>,

00:01:24.130 --> 00:01:26.020
а для <i>weight</i> - единицу.

00:01:26.020 --> 00:01:29.642
<i>LinearLayout</i> сначала выравнивает
TextView-элементы <i>Tim</i> и <i>Todd</i>,

00:01:29.642 --> 00:01:33.880
потому что их высота фиксирована
и задана их содержимым.

00:01:33.880 --> 00:01:38.019
А у <i>TextView</i>-элемента <i>Tom</i>
исходная высота составляет 0 <i>dp</i>, но

00:01:38.019 --> 00:01:38.880
значение <i>weight</i> - 1.

00:01:38.880 --> 00:01:41.266
У остальных дочерних элементов
значение <i>weight</i> отсутствует,

00:01:41.266 --> 00:01:45.000
поскольку по умолчанию оно
равно нулю, если не указано иное.

00:01:45.000 --> 00:01:47.150
Так что это единственный
дочерний элемент с весом.

00:01:47.150 --> 00:01:50.480
И всю нераспределенную высоту экрана
родительский элемент отдает

00:01:50.480 --> 00:01:51.900
<i>TextView</i>-элементу <i>Tom</i>.

00:01:51.900 --> 00:01:55.610
Поэтому он
такой огромный.

00:01:55.610 --> 00:01:58.810
Теперь я задам значения <i>weight</i>
и для других дочерних элементов.

00:01:58.810 --> 00:02:02.660
Высота каждого из них равна 0 <i>dp</i>,
а вес - единице.

00:02:02.660 --> 00:02:04.980
Разметка <i>LinearLayout</i> будет
проходить следующим образом.

00:02:04.980 --> 00:02:08.250
Сначала она попробует определить
высоту каждого элемента.

00:02:08.250 --> 00:02:10.889
Высота каждого элемента
равно 0 <i>dp</i>.

00:02:10.889 --> 00:02:13.950
Это значит, что оставшаяся
высота родительского элемента

00:02:13.950 --> 00:02:16.410
по сути равна высоте
всего экрана.

00:02:16.410 --> 00:02:19.500
Дальше вся высота экрана
делится на сумму весов,

00:02:19.500 --> 00:02:20.280
которая равна трем.

00:02:20.280 --> 00:02:24.215
<i>TextView</i>-элемент <i>Tom</i> получает
треть имеющейся в распоряжении высоты,

00:02:24.215 --> 00:02:27.220
<i>TextView</i>-элемент <i>Tim</i>
еще одну треть,

00:02:27.220 --> 00:02:29.680
и последняя треть достается
<i>TextView</i>-элементу <i>Todd</i>.

00:02:29.680 --> 00:02:32.840
Они будут равномерно распределены
по высоте устройства

00:02:32.840 --> 00:02:37.250
даже на больших экранах
из-за заданного веса.

00:02:37.250 --> 00:02:40.130
Если я поменяю значение <i>weight</i>
в большую сторону,

00:02:40.130 --> 00:02:44.920
родительский элемент предоставит
<i>TextView</i>-элементу <i>Tim</i> больше высоты.

00:02:44.920 --> 00:02:47.310
Я могу сделать значение веса еще выше,

00:02:47.310 --> 00:02:51.380
и вы увидите, как элемент
занимает все больше места.

00:02:51.380 --> 00:02:54.240
В данном случае вес
<i>TextView</i>-элемента <i>Tim</i> составляет 8.

00:02:54.240 --> 00:02:56.910
У элементов <i>Tom</i> и <i>Todd</i>
вес равен единице.

00:02:56.910 --> 00:03:00.340
Таким образом, сумма весов
составляет десять.

00:03:00.340 --> 00:03:03.930
Родительский элемент
делит всю высоту на десять

00:03:03.930 --> 00:03:06.710
и отдает одну десятую - элементу <i>Tom</i>,
восемь десятых - элементу <i>Tim</i>,

00:03:06.710 --> 00:03:08.170
и одну десятую - элементу <i>Todd</i>.

00:03:09.450 --> 00:03:13.020
Допустим, что в вертикальном <i>LinearLayout</i>
есть 3 дочерних <i>TextView</i>-элемента.

00:03:13.020 --> 00:03:15.410
Задаем изначальную высоту равной 0 <i>dp</i>.

00:03:15.410 --> 00:03:19.400
Все элементы с нулевой высотой
собраны в верхнейчасти экрана.

00:03:19.400 --> 00:03:23.290
Это значит, что родительский
элемент располагает всей высотой.

00:03:23.290 --> 00:03:27.810
Если я задам вес равным единице
для каждого дочернего <i>TextView</i>,

00:03:27.810 --> 00:03:31.420
тогда вся высота родительского элемента
равномерно распределится между дочерними.

00:03:32.810 --> 00:03:35.400
То же самое будет происходить
и в горизонтальной <i>LinearLayout</i>.

00:03:35.400 --> 00:03:37.550
Допустим, у нас 3 дочерних <i>TextView</i>.

00:03:37.550 --> 00:03:39.820
Начнем с ширины равной 0 <i>dp</i>.

00:03:39.820 --> 00:03:43.300
Это значит, что вся доступная ширина
принадлежит родительскому элементу.

00:03:43.300 --> 00:03:46.960
Если я задам для каждого <i>TextView</i>
вес равный единице,

00:03:46.960 --> 00:03:50.110
тогда вся имеющая в родительском
элементе ширина будет

00:03:50.110 --> 00:03:52.740
равномерно распределена
между дочерними.

00:03:52.740 --> 00:03:54.910
Вес не обязательно
должен быть равен единице.

00:03:54.910 --> 00:03:57.740
Мы можем установить 3
или любое другое значение.

00:03:57.740 --> 00:03:59.960
Вес может быть даже нулевым.

00:03:59.960 --> 00:04:04.440
Если вес элемента равен нулю, это значит,
что его размер не зависит

00:04:04.440 --> 00:04:06.290
от доступного места
в родительском элементе.

00:04:06.290 --> 00:04:09.560
Его высота и ширина останутся
такими, какими вы их назначите.

00:04:09.560 --> 00:04:12.710
Особенно хочу отметить случаи,
когда следует задать нулевую высоту

00:04:12.710 --> 00:04:14.370
или нулевую ширину.

00:04:14.370 --> 00:04:15.700
Если <i>LinearLayout</i> - вертикальный,

00:04:15.700 --> 00:04:18.950
вы заполняете экран
вертикально по направлению вниз.

00:04:18.950 --> 00:04:20.390
Вы не знаете, какой
должна быть высота,

00:04:20.390 --> 00:04:23.510
поэтому задаете для <i>height</i> значение 0 <i>dp</i>,
и назначаете элементу вес.

00:04:24.620 --> 00:04:28.760
Аналогично при горизонтальной <i>LinearLayout</i>
пространство заполняется горизонтально.

00:04:28.760 --> 00:04:31.920
И вы пока не знаете ширину
дочерних элементов.

00:04:31.920 --> 00:04:34.930
Вы можете назначить ширину равной 0<i> dp</i>,
и присвоить элементам вес.

00:04:36.660 --> 00:04:39.820
По сути присвоение элементу веса -

00:04:39.820 --> 00:04:44.840
это возможность растягивать его
в соответствии с размером родителя.

00:04:44.840 --> 00:04:48.540
Так удобно заполнять доступное
пространство, будь устройство маленьким

00:04:48.540 --> 00:04:49.259
или большим.

00:04:50.620 --> 00:04:53.730
Я покажу пару реальных примеров,
где атрибут веса приходится очень кстати.

00:04:54.980 --> 00:04:57.210
Это приложение <i>Google Hangouts</i>, где

00:04:57.210 --> 00:05:01.750
вы можете общаться со своими друзьями
или посылать им сонных пингвинов.

00:05:01.750 --> 00:05:05.620
Нижняя часть экрана - это место,
где вы набираете свое сообщение.

00:05:05.620 --> 00:05:08.950
Давайте рассмотрим поближе
эту нижнюю часть разметки.

00:05:08.950 --> 00:05:13.490
Это горизонтальный <i>LinearLayout</i>,
поскольку перед нами горизонтальный ряд.

00:05:13.490 --> 00:05:14.827
В него входит <i>ImageView</i>-элемент,

00:05:14.827 --> 00:05:19.090
поле <i>EditText</i>, куда можно вводить текст,
и еще один <i>ImageView</i>-элемент.

00:05:19.090 --> 00:05:22.520
Высота каждого из элементов
задана как <i>wrap_content</i>,

00:05:22.520 --> 00:05:25.410
поскольку его контур
проходит по границе содержимого.

00:05:25.410 --> 00:05:28.480
Ширина этих двух <i>ImageView</i>-элементов
задана как <i>wrap_content</i>, поскольку

00:05:28.480 --> 00:05:30.350
они не шире содержимого.

00:05:31.460 --> 00:05:33.980
Мы назначаем их вес равным 0
потому что нам не нужно,

00:05:33.980 --> 00:05:37.890
чтобы они были больше, даже если
в родителе есть свободное место.

00:05:37.890 --> 00:05:41.100
Нулевой вес позволяет добиться
чтобы ширина и высота

00:05:41.100 --> 00:05:43.280
были равны <i>wrap_content</i> и не менялись.

00:05:43.280 --> 00:05:46.110
Нам нужно, чтобы поле немного
растягивалось на устройствах

00:05:46.110 --> 00:05:50.640
с большим экраном и уменьшалось
на устройствах с маленьким экраном,

00:05:50.640 --> 00:05:54.250
поэтому мы задаем его ширину равной 0 <i>dp</i>,
а вес равным единице.

00:05:54.250 --> 00:05:58.404
Это значит, что в родителе сначала
будет выделено место для этого изображения,

00:05:58.404 --> 00:05:59.340
потом для этого,

00:05:59.340 --> 00:06:05.050
а оставшаяся ширина устройства
достанется этому элементу.

00:06:05.050 --> 00:06:07.000
А вот пример в приложении <i>Maps</i>.

00:06:07.000 --> 00:06:09.570
Это страница с подробностями
о местоположении.

00:06:09.570 --> 00:06:12.480
Здесь есть три кнопки:
<i>Call, Save</i> и <i>Website</i>.

00:06:12.480 --> 00:06:14.450
Давайте рассмотрим их поближе.

00:06:14.450 --> 00:06:18.660
Их можно создать как <i>TextView</i>
и затем прикрепить к ним иконки

00:06:18.660 --> 00:06:21.370
(одробности вы можете
посмотреть в методичке),

00:06:21.370 --> 00:06:23.540
но сейчас это не так важно.

00:06:23.540 --> 00:06:26.520
Для этого упражнения допустим,
что это <i>TextView</i>-элементы.

00:06:26.520 --> 00:06:29.710
Высота каждого <i>TextView</i>
задана как <i>wrap_content</i>,

00:06:29.710 --> 00:06:33.000
поскольку границы проходят
четко вокруг содержимого.

00:06:33.000 --> 00:06:34.980
С шириной все немножко сложнее.

00:06:34.980 --> 00:06:38.485
Нам нужно, чтобы все элементы <i>TextView</i>
равномерно отстояли друг от друга по всей

00:06:38.485 --> 00:06:42.470
ширине экрана, будь это
маленькое устройство или большое.

00:06:42.470 --> 00:06:44.980
Нам не нужно, чтобы все
три элемента скучковались

00:06:44.980 --> 00:06:46.240
в левом углу устройства.

00:06:47.450 --> 00:06:50.640
И чтобы распределить дочерние элементы
равномерно, мы задаем им одинаковый вес.

00:06:50.640 --> 00:06:53.050
Устанавливаем для каждого
ширину равной 0, а вес - равным 1.

00:06:54.058 --> 00:06:57.790
Так все свободное пространство родителя
будет равномерно разделено между

00:06:57.790 --> 00:06:58.490
тремя элементами.

00:06:59.790 --> 00:07:02.170
И последний пример - это почтовый клиент.

00:07:02.170 --> 00:07:05.420
Это экран в <i>Gmail</i> для
составления нового письма.

00:07:06.460 --> 00:07:09.160
Здесь мы видим вертикальный <i>LinearLayout</i>:
элементы расположены столбиком.

00:07:10.230 --> 00:07:13.380
Разметка состоит из
из четырех полей <i>EditText</i>.

00:07:13.380 --> 00:07:16.546
Ширина каждого дочернего элемента задана
как <i>match_parent</i>, поскольку нам нужно,

00:07:16.546 --> 00:07:18.760
чтобы они растягивались
на всю ширину устройства.

00:07:18.760 --> 00:07:22.845
Высота этих трех полей
установлена на <i>wrap_content</i>, чтобы

00:07:22.845 --> 00:07:25.475
они ограничивались текстовым содержимым.

00:07:25.475 --> 00:07:28.185
Вес элементов оставляем нулевым,
потому что нам не нужно,

00:07:28.185 --> 00:07:32.620
чтобы их размер увеличивался даже,
когда в родителе есть лишнее место.

00:07:32.620 --> 00:07:35.870
Но в последнем поле <i>EditText</i>
вводится текст сообщения, и мы хотим,

00:07:35.870 --> 00:07:40.710
чтобы пользователь мог написать
очень длинное письмо своей бабушке.

00:07:40.710 --> 00:07:44.870
Поэтому задаем его высоту равной 0 <i>dp</i>
и назначаем вес равным 1.

00:07:44.870 --> 00:07:46.700
Так что если в родителе есть
свободная высота,

00:07:46.700 --> 00:07:50.070
она будет отдана этому
дочернему полю <i>EditText</i>.

00:07:50.070 --> 00:07:54.120
На устройстве с большим экраном
поле для текста письма будет чуть больше,

00:07:54.120 --> 00:07:56.880
а на маленьком устройство -
чуть меньше.

00:07:58.620 --> 00:08:00.150
Теперь ваша очередь.

00:08:00.150 --> 00:08:03.840
Вам нужно создать эту разметку
в XML-визуализаторе.

00:08:03.840 --> 00:08:06.550
Вы можете начать с XML-файла,
который мы для вас подготовили.

00:08:06.550 --> 00:08:08.140
Парочка советов.

00:08:08.140 --> 00:08:11.517
Пытаясь разобраться с такой задачей,
сначала определите ширину

00:08:11.517 --> 00:08:15.500
каждого элемента, а потом попробуйте
определить высоту каждого элемента.

00:08:15.500 --> 00:08:18.430
Убедитесь, что изображению
отводится вся оставшаяся

00:08:18.430 --> 00:08:19.730
высота родительского элемента.

00:08:19.730 --> 00:08:22.550
так чтобы на маленьких устройствах
высота изображения была меньше,

00:08:22.550 --> 00:08:25.110
а на больших экранах - больше.

00:08:25.110 --> 00:08:26.390
Можете приступать.

00:08:26.390 --> 00:08:27.610
В конце поставьте здесь галочку.

