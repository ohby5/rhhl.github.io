WEBVTT
Kind: captions
Language: zh-CN

00:00:00.490 --> 00:00:01.260
我们复习一下

00:00:01.260 --> 00:00:04.080
目前我们学习了线性布局的方向属性

00:00:04.080 --> 00:00:05.650
分别是水平 竖直

00:00:06.890 --> 00:00:09.610
但我们可以思考的是这些视图是否充分利用了

00:00:09.610 --> 00:00:11.240
屏幕的实际空间

00:00:11.240 --> 00:00:13.750
我所说的 real estate 意思是屏幕中的可用空间

00:00:14.930 --> 00:00:16.490
对于我的 Nexus 6 手机

00:00:16.490 --> 00:00:20.740
假设是垂直线性布局 里面有三个 TextView

00:00:20.740 --> 00:00:22.420
Tom、Tim 和 Todd 

00:00:22.420 --> 00:00:25.500
当我们的设备是竖向模式 就像这个一样

00:00:25.500 --> 00:00:28.380
所有的 TextView 集中在屏幕左上角

00:00:29.380 --> 00:00:32.320
这些空白的空间都没被使用

00:00:32.320 --> 00:00:35.480
类似 如果旋转设备到横向模式

00:00:35.480 --> 00:00:40.120
文字在左上角 这边是剩下没使用的空间

00:00:40.120 --> 00:00:42.110
在平板设备上更显而易见

00:00:42.110 --> 00:00:44.260
因为屏幕更大

00:00:44.260 --> 00:00:47.280
我们只使用可用空间的一小部分

00:00:47.280 --> 00:00:48.252
剩下的都是空着的

00:00:48.252 --> 00:00:51.680
接下来我们要学习如何将这些视图铺开

00:00:51.680 --> 00:00:55.190
在整个屏幕上占据更多空间

00:00:55.190 --> 00:00:56.560
这同样适用于其它设备

00:00:56.560 --> 00:00:59.500
你可以使用大一点的图片布满屏幕

00:00:59.500 --> 00:01:03.460
来获得更好的视觉体验 而不是在左上角的那么小

00:01:04.489 --> 00:01:05.180
按钮也一样

00:01:05.180 --> 00:01:09.785
你可以设置大按钮 这样方便你点击

00:01:09.785 --> 00:01:13.155
出于这样的目的 我们将继续学习 TextView

00:01:13.155 --> 00:01:16.325
那让我们去 XML 可视化工具学习如何扩展

00:01:16.325 --> 00:01:17.005
这些视图

00:01:18.115 --> 00:01:20.545
这是Tom、Tim 和 Todd 的代码

00:01:20.545 --> 00:01:23.975
现在三个 TextView 是垂直布局的

00:01:23.975 --> 00:01:25.389
这就是它们在设备上的样子

00:01:26.570 --> 00:01:29.810
现在我想告诉你如何扩展这三个 TextView

00:01:29.810 --> 00:01:31.060
Tom 在最上面

00:01:31.060 --> 00:01:31.980
Tim 在这

00:01:31.980 --> 00:01:33.910
Todd 在最下面

00:01:33.910 --> 00:01:37.950
很明显 设置高度为 wrap_content 的并不起作用

00:01:37.950 --> 00:01:41.350
我们还要学习将高度设置为一个固定的dp值

00:01:41.350 --> 00:01:44.510
例如 我把高度设置为 200dp

00:01:45.760 --> 00:01:48.340
这样就给Tom 留下了更多的空间

00:01:48.340 --> 00:01:51.320
如果我对其它 TextView 做同样操作

00:01:51.320 --> 00:01:54.570
它们就会扩展很多 甚至充分利用整个屏幕

00:01:54.570 --> 00:01:57.920
但是这种方法只对这个设备起作用

00:01:57.920 --> 00:02:01.510
如果换成平板电脑 这些视图就还是会保持原样

00:02:01.510 --> 00:02:04.640
聚集在左上角

00:02:04.640 --> 00:02:08.880
设置高度的另一个选择就是之前学到的 match_parent 

00:02:08.880 --> 00:02:11.750
当你对 Tom 的 Text View 设置 match_parent 

00:02:11.750 --> 00:02:15.540
这时候高度跟整个屏幕一样

00:02:15.540 --> 00:02:19.230
这就使其它 TextView 被挤出屏幕 看不到了

00:02:19.230 --> 00:02:20.930
最好不要这样

00:02:20.930 --> 00:02:23.870
现在好像没办法了 因为我们已经尝试了 wrap_content 

00:02:23.870 --> 00:02:25.490
这时的高度是固定值

00:02:25.490 --> 00:02:27.300
也尝试了match_parent 

00:02:27.300 --> 00:02:32.930
这些方法并没有解决在所有设备上显示的问题

00:02:32.930 --> 00:02:36.420
在 Google 上搜索一下这个问题的解决方法

00:02:36.420 --> 00:02:38.360
我们正使用 LinearLayout 的 ViewGroup

00:02:38.360 --> 00:02:40.580
想得到等分空间的子视图 

00:02:40.580 --> 00:02:42.260
让我们找找看

00:02:42.260 --> 00:02:44.680
这有一堆搜索答案

00:02:44.680 --> 00:02:46.920
我们选第一个

00:02:46.920 --> 00:02:49.358
这是 Stack overflow 网站的链接

00:02:49.358 --> 00:02:51.780
在网站的问答板块你可以提问

00:02:51.780 --> 00:02:53.785
获得其他 Android 开发者的回答

00:02:53.785 --> 00:02:58.005
我遇到问题需要帮助时经常用它

00:02:58.005 --> 00:03:00.515
一般情况下是已经有人问过和我

00:03:00.515 --> 00:03:01.975
同样的问题了

00:03:01.975 --> 00:03:05.425
这个问题问的是如何在 LinearLayout 水平方向上

00:03:05.425 --> 00:03:07.657
均等的分布按钮

00:03:07.657 --> 00:03:09.677
这和我们要找的类似

00:03:09.677 --> 00:03:12.627
除了提问中针对是按钮而我们的是TextView

00:03:12.627 --> 00:03:15.877
还有就是在Linear Layout中均分宽度 
而我们是想扩展

00:03:15.877 --> 00:03:17.767
LinearLayout 的高度

00:03:17.767 --> 00:03:20.710
我们可以仔细阅读也可以略读

00:03:20.710 --> 00:03:23.070
通常我只是略读这些问题

00:03:23.070 --> 00:03:27.590
这个方法有88个赞而且已经被采纳

00:03:27.590 --> 00:03:30.840
这个是说如何设置 layout_width 为 0dp

00:03:30.840 --> 00:03:33.240
每个按钮的 layout_weight 为1

00:03:33.240 --> 00:03:36.899
这条问题可用 都是均分按钮空间

00:03:37.910 --> 00:03:41.170
也许现在你不是很明白 没关系

00:03:41.170 --> 00:03:44.620
关键短语是 linear layout_weight 

00:03:44.620 --> 00:03:47.950
之前我们没听过 不过对这个问题很重要

00:03:47.950 --> 00:03:49.640
复制然后在 Google 搜索

00:03:49.640 --> 00:03:52.005
更多有关 layout_weight 的信息

00:03:52.005 --> 00:03:55.205
搜索 linear layout layout_weight 

00:03:55.205 --> 00:03:57.605
第一条结果是 Linear Layout 的一篇文章

00:03:57.605 --> 00:04:00.085
是在 developer.android.com 这个网站上的 点进去

00:04:01.285 --> 00:04:03.845
这是有 关Linear Layout 的文章

00:04:03.845 --> 00:04:08.015
我们之前已经学了大量有关 Android 方向属性的知识

00:04:08.015 --> 00:04:11.230
现在又出现了新的知识 Layout Weight（布局权重） 

00:04:11.230 --> 00:04:14.270
屏幕下方还有一个例子 有代码

00:04:14.270 --> 00:04:15.650
和屏幕截图

00:04:15.650 --> 00:04:17.149
我可以概括的告诉你

00:04:17.149 --> 00:04:21.260
但是我想让你自己读一下这些文件

00:04:21.260 --> 00:04:23.710
尝试自己解决这个问题

00:04:23.710 --> 00:04:26.180
这和你以后自己解决问题一样

00:04:26.180 --> 00:04:28.220
学习完课程之后

00:04:28.220 --> 00:04:30.510
你将在网上寻求信息

00:04:30.510 --> 00:04:33.350
尝试怎样才能解决问题

00:04:34.500 --> 00:04:37.340
这是现在设备上的布局

00:04:37.340 --> 00:04:39.120
这个是我们想达到的最终效果

00:04:39.120 --> 00:04:42.780
三个控件在设备竖直高度上平均分布

00:04:42.780 --> 00:04:43.720
为了解决这个问题

00:04:43.720 --> 00:04:46.760
我需要你阅读后面链接的文章

00:04:47.830 --> 00:04:48.980
那将非常完美

00:04:48.980 --> 00:04:52.490
如果你能明白全文

00:04:52.490 --> 00:04:55.390
很多时候你只是大概理解

00:04:55.390 --> 00:04:59.250
文章中的概念是怎样帮你解决问题

00:05:00.320 --> 00:05:03.390
我希望你能提供几种解决办法

00:05:03.390 --> 00:05:05.100
关于在 XML 中构建想要的布局

00:05:05.100 --> 00:05:07.550
你不需要提供整个 XML layout 的代码

00:05:07.550 --> 00:05:10.420
因为在下一个视频中我们将一起继续学习

00:05:10.420 --> 00:05:12.350
但你可以写一两句话

00:05:12.350 --> 00:05:16.920
或者一些关于文章中有关我们问题的要点

