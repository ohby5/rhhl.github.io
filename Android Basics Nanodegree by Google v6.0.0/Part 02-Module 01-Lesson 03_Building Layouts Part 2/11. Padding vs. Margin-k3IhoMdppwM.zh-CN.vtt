WEBVTT
Kind: captions
Language: zh-CN

00:00:00.360 --> 00:00:01.630
目前做得不错

00:00:01.630 --> 00:00:04.580
你自己创建了一个非常好的布局

00:00:04.580 --> 00:00:09.360
然而 到目前为止 我发现在我们创建的所有布局中 都存在一个问题

00:00:09.360 --> 00:00:12.740
视图紧贴着 ViewGroup 的边缘或

00:00:12.740 --> 00:00:14.300
设备的边缘

00:00:14.300 --> 00:00:16.490
对于目前我们创建的所有布局

00:00:16.490 --> 00:00:19.990
我们可以给它们添加一些视觉修饰

00:00:19.990 --> 00:00:23.840
所以可以加一点空白使它们看起来更美观

00:00:23.840 --> 00:00:26.240
我们会用到 padding（内边距）和 margin（外边距）的概念

00:00:26.240 --> 00:00:28.580
在这个视频中会讲到

00:00:28.580 --> 00:00:31.240
我们可以在这里和这里加一点空白

00:00:31.240 --> 00:00:33.780
或者在顶部 所以视图不会

00:00:33.780 --> 00:00:37.780
紧贴着父视图或设备的边缘

00:00:37.780 --> 00:00:39.350
虽然它只是一个设计决定

00:00:39.350 --> 00:00:41.550
因为有时候你想让它紧贴着边缘 像这样

00:00:41.550 --> 00:00:45.140
以前我谈论的无边框图像效果

00:00:45.140 --> 00:00:49.109
但是在其他例子中 你可以使用空白来增加多余的空间

00:00:49.109 --> 00:00:53.130
这样的话 阅读和浏览内容会更方便

00:00:53.130 --> 00:00:56.840
我将给你展示视图添加内边距或外边距的效果

00:00:56.840 --> 00:00:59.480
我们以一个 Hello 的 TextView 开始

00:00:59.480 --> 00:01:01.880
如果我们给视图的内边距增加 8dips

00:01:01.880 --> 00:01:05.450
在每个方向上添加 8dips 会使它看起来更大

00:01:05.450 --> 00:01:08.081
如果我们给 TextView 添加 8dips 的外边距

00:01:08.081 --> 00:01:10.850
这就是它的样子

00:01:10.850 --> 00:01:13.470
为了加入外边距 你需要把视图放到一个 ViewGroup 中

00:01:13.470 --> 00:01:16.360
这就是我为什么把它放在这个 linearlayout 里

00:01:16.360 --> 00:01:19.350
linearlayout 是一个需要原始 TextView 并

00:01:19.350 --> 00:01:21.260
把它向内推 8dips

00:01:21.260 --> 00:01:23.330
从左边还有上边

00:01:23.330 --> 00:01:25.510
还有这些边

00:01:25.510 --> 00:01:27.860
即使你在子视图中声明外边距或

00:01:27.860 --> 00:01:32.780
内边距也得由 TextView 本身操作

00:01:32.780 --> 00:01:35.900
然而内边距是由父 ViewGroup 操作

00:01:35.900 --> 00:01:39.685
如果这两种都在真实设备上 你没有给 TextView 设置背景

00:01:39.685 --> 00:01:42.820
严格地说 它们都是一样的

00:01:42.820 --> 00:01:46.030
这个文本在距离设备左边 8dips 和

00:01:46.030 --> 00:01:48.390
设备顶部 8dips 处开始

00:01:48.390 --> 00:01:51.780
然而 如果 TextView 有一个背景颜色

00:01:51.780 --> 00:01:54.990
用户看到的 TextView 是这么大

00:01:54.990 --> 00:01:58.660
然而 在其他设备上 TextView 看起来只有这么大

00:01:58.660 --> 00:02:00.700
这是在视图中显示内边距的代码

00:02:02.040 --> 00:02:06.576
在 TextView XML 元素中 你要声明一个新的属性

00:02:06.576 --> 00:02:10.800
指定 Android: padding = "8dp"

00:02:10.800 --> 00:02:12.320
你可以选择任何你想要的内边距的大小

00:02:12.320 --> 00:02:15.330
只要它是 dip 值

00:02:15.330 --> 00:02:19.080
当我们指定内边距为 8dips 时 它会在

00:02:19.080 --> 00:02:21.410
TextView 的上 下 左 右 都添加 8dips

00:02:22.460 --> 00:02:25.100
除了使用一般的 android 内边距属性

00:02:25.100 --> 00:02:28.970
你也能够分开写成上 下 左 右

00:02:28.970 --> 00:02:32.550
实质上 这四行代码和这一行代码实现的效果是相同的

00:02:32.550 --> 00:02:35.820
然而 这些细节的控制允许你设置不同的内边距值

00:02:35.820 --> 00:02:39.420
给上 下 左 右

00:02:39.420 --> 00:02:43.390
在四个方向上 你不用必须使用同一个padding值

00:02:43.390 --> 00:02:47.280
padding的默认值为零 如果你设定左、右、上的内边距值

00:02:47.280 --> 00:02:52.110
但是没有设置底部 那么底部的内边距值就是零

00:02:52.110 --> 00:02:55.990
为了指定外边距 你需要在 TextView 中再添加一个属性

00:02:55.990 --> 00:03:00.206
这个属性的名字是 android:layout_margin

00:03:00.206 --> 00:03:02.750
我们给它设一个值 例如 8dips

00:03:02.750 --> 00:03:07.440
子 TextView 远离父视图的所有边缘 8dips

00:03:07.440 --> 00:03:11.770
如果在顶部有另一个子TextView 那么外边距

00:03:11.770 --> 00:03:15.000
会使这个 TextView 在第一个 TextView 的下面8 dips 处

00:03:16.060 --> 00:03:18.820
你可以认为有了外边距就像有了防护区域

00:03:18.820 --> 00:03:20.050
在视图周围

00:03:20.050 --> 00:03:23.750
没有其他的视图能进入它周围的8 dips 区域

00:03:23.750 --> 00:03:27.621
或者你也可以将 Layout margin 在四个方向上分开写

00:03:27.621 --> 00:03:31.750
分别是 layout_marginLeft layout_marginRight layout_marginTop layout_marginBottom

00:03:31.750 --> 00:03:35.780
如果你没有指定值的话 默认值是零

00:03:35.780 --> 00:03:38.730
记住 ViewGroup 决定这些基于外边距的子视图的位置

00:03:38.730 --> 00:03:41.930
你能看到这些属性

00:03:41.930 --> 00:03:45.130
它们以 layout_margin 开始

00:03:45.130 --> 00:03:48.340
你了解的 ViewGroup 能决定这些视图

00:03:48.340 --> 00:03:48.929
的位置

00:03:50.160 --> 00:03:52.790
内边距和外边距可以应用于所有视图

00:03:52.790 --> 00:03:55.960
我们把学到的属性实际操作一下

00:03:55.960 --> 00:03:58.500
在 LinearLayout 中 我有3个 TextView

00:03:58.500 --> 00:04:01.000
它们都紧挨着屏幕的左边缘

00:04:01.000 --> 00:04:02.259
我想添加一些空间

00:04:03.390 --> 00:04:04.910
我们先从添加外边距开始尝试

00:04:05.910 --> 00:04:08.235
在 TextView 周围有更多空间

00:04:09.420 --> 00:04:11.155
我对其他两个 TextViews 做相同的操作

00:04:12.250 --> 00:04:17.029
有趣 在这里是16 dips 但是实际上是32 dips

00:04:17.029 --> 00:04:20.260
在第一个 TextView 的底部有8 dips 的外边距

00:04:20.260 --> 00:04:22.960
在第二个 TextView 的上部有8 dips 的外边距

00:04:22.960 --> 00:04:24.780
如果我们想要间距一致

00:04:24.780 --> 00:04:30.250
视图之间总是16 dips 我们必须改变这里的外边距

00:04:30.250 --> 00:04:33.100
我可以将它分成独立的外边距值

00:04:33.100 --> 00:04:37.980
用代码 我有 16dips 的左侧外边距和 16dips 的顶部外边距

00:04:37.980 --> 00:04:40.750
第一个 TextView 没有底部外边距

00:04:40.750 --> 00:04:43.290
所以它们之间的空间正好是 16dips

00:04:43.290 --> 00:04:46.970
对最后一个 TextView 做同样的操作

00:04:46.970 --> 00:04:48.780
现在所有的垂直间距都是相等的

00:04:49.900 --> 00:04:53.420
在我们给这些视图的边缘添加空白之前

00:04:53.420 --> 00:04:56.240
技术上说 这些空间是透明的

00:04:56.240 --> 00:04:58.690
你可以通过它之后的事物来看到它

00:04:58.690 --> 00:05:02.100
在这个例子中 我们给 ViewGroup 设置了灰色背景

00:05:02.100 --> 00:05:05.390
这个布局在设备上的显示效果是一样的 不管我们是否使用

00:05:05.390 --> 00:05:08.785
外边距或内边距 因为在 TextView 中我们没有设置背景颜色

00:05:09.820 --> 00:05:12.090
将背景颜色添加进去 看看每个视图的边界在哪里

00:05:13.330 --> 00:05:16.180
在第一个 TextView 中有背景颜色

00:05:16.180 --> 00:05:20.178
我们添加左侧和顶部的外边距 可以看到 ViewGroup 将

00:05:20.178 --> 00:05:22.600
TextView 向右 向下推了 8 dips

00:05:22.600 --> 00:05:26.950
现在我们将它改成内边距 可以看到 TextView

00:05:26.950 --> 00:05:29.580
占据左边和上边的 8dips 的空间后变大了

00:05:30.700 --> 00:05:33.210
从视觉上来说 事物在设备上显示的效果不同

00:05:33.210 --> 00:05:35.120
无论你使用内边距还是外边距

00:05:35.120 --> 00:05:38.000
如果在 TextView 中有背景颜色

00:05:38.000 --> 00:05:40.570
我们可以给其他视图做相同的操作 那么视觉效果会很好

00:05:41.830 --> 00:05:45.400
添加内边距和外边距不仅仅局限于子视图

00:05:45.400 --> 00:05:47.840
你也可以将它添加到 ViewGroup 中

00:05:47.840 --> 00:05:50.520
如果我给 linearlayout 添加内边距值

00:05:50.520 --> 00:05:55.680
你会看到它在所有方向上使这些视图都改变了 16dips

00:05:55.680 --> 00:05:59.390
我提到过你可以设置任意的内边距和外边距

00:05:59.390 --> 00:06:01.380
但是你怎样知道应该使用哪个值呢？

00:06:01.380 --> 00:06:04.740
Material Design 指南中建议你可以使用

00:06:04.740 --> 00:06:05.750
8dips 的增量

00:06:05.750 --> 00:06:09.190
这些知识有些超前 但是本质上我们想让我们的组件

00:06:09.190 --> 00:06:13.000
在屏幕上沿着 8dip 方格线网络排列

00:06:13.000 --> 00:06:15.870
这个方格并不会显示在屏幕上

00:06:15.870 --> 00:06:17.710
但是如果你想在这写文本的话

00:06:17.710 --> 00:06:21.090
你也许会想要向左移动2个小方格

00:06:21.090 --> 00:06:25.280
网格上的2个小方格就是 16dips

00:06:25.280 --> 00:06:28.980
在邮件界面中 所有的图标是沿着这条线排列的

00:06:28.980 --> 00:06:33.120
它们的位置距离屏幕的左边缘是16 dips

00:06:33.120 --> 00:06:38.020
并且所有的文本距离屏幕的左边缘是 72dips

00:06:38.020 --> 00:06:41.280
所以你可以想象这些内容是跟随

00:06:41.280 --> 00:06:42.250
某条线开始的

00:06:42.250 --> 00:06:44.440
有另一种方法将它可视化

00:06:44.440 --> 00:06:47.160
在Google I/O应用的截图中

00:06:47.160 --> 00:06:53.920
我们能看到内容是沿着 16dips 和 72dips 这两条线排列的

00:06:53.920 --> 00:06:57.395
实质上 它是距离屏幕的左边缘 72dips

00:06:57.395 --> 00:06:58.855
在这边

00:06:58.855 --> 00:07:03.303
内容在距离屏幕右边缘 16dips 处停止

00:07:03.303 --> 00:07:05.485
在平板上 屏幕更大 所以

00:07:05.485 --> 00:07:07.495
你会看到更多内边距

00:07:07.495 --> 00:07:10.635
它距离屏幕左边缘会变为 24dips 

00:07:10.635 --> 00:07:12.175
对于其他值也是如此

00:07:12.175 --> 00:07:16.645
我们这样建议是为了让你的内容更容易阅读

00:07:16.645 --> 00:07:20.250
例如 如果这个标题向这边偏移一些像素 并且

00:07:20.250 --> 00:07:23.660
副文本向右偏移一些像素

00:07:23.660 --> 00:07:25.560
这样就会成为锯齿边缘

00:07:25.560 --> 00:07:29.780
用户在实际阅读过程中会分散注意力

00:07:29.780 --> 00:07:34.540
所以排列有序 会使你的应用更容易阅读和使用

00:07:34.540 --> 00:07:38.120
这是两个在外边距中使用内边距的例子

00:07:38.120 --> 00:07:40.190
在 Google Calendar 应用截图中

00:07:40.190 --> 00:07:43.680
我们能够看到有些文本向这边移动了一点点

00:07:43.680 --> 00:07:46.680
在这些日历事件之间也有一些空白

00:07:46.680 --> 00:07:48.180
如果我们用内边距实现

00:07:48.180 --> 00:07:52.360
那么背景有可能延伸到空白部分

00:07:52.360 --> 00:07:55.920
相反如果我们使用外边距 在视图周围会增加缓冲空间

00:07:55.920 --> 00:07:57.820
它是外边距

00:07:57.820 --> 00:08:01.890
这是日历详细页面的另一个截图

00:08:01.890 --> 00:08:06.160
这有一些文本 而且它们看起来间距更大

00:08:06.160 --> 00:08:08.700
我们可以通过添加内边距来扩大间隔

00:08:08.700 --> 00:08:13.370
为了增加间隔 你可以给这个 TextView 增加底部内边距 或者

00:08:13.370 --> 00:08:15.130
给这个 TextView 增加顶部padding

00:08:16.140 --> 00:08:17.600
或者两个都做

00:08:17.600 --> 00:08:20.680
或者你使用 layout_margin 来实现

00:08:20.680 --> 00:08:23.910
在这个例子中 你并不能区分布 layout_margin 和内边距之间的区别

00:08:23.910 --> 00:08:28.050
因为 TextView 的背景是透明的

00:08:28.050 --> 00:08:30.574
现在 该你练习设置不同的内边距和

00:08:30.574 --> 00:08:32.169
外边距值

00:08:32.169 --> 00:08:35.090
使用下面这个链接 我们给出了一些初始代码 你可以从这开始

00:08:35.090 --> 00:08:38.940
一旦你熟练掌握内边距和外边距值 继续

00:08:38.940 --> 00:08:40.169
并且试着建立布局

00:08:41.210 --> 00:08:45.780
顺便一提 文本距离边缘 16dips

00:08:45.780 --> 00:08:49.410
但是在两个 TextViews 之间只有 8dips

00:08:49.410 --> 00:08:50.530
当你做完后 勾选这个框 

