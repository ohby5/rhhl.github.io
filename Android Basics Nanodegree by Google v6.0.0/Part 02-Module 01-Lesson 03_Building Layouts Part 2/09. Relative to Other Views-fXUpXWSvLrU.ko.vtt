WEBVTT
Kind: captions
Language: ko

00:00:00.420 --> 00:00:03.469
children을 sibling[형제] 뷰들과
관련되게 위치시킬 때

00:00:03.469 --> 00:00:06.190
당신은 그들에게 제한을 둘 수 있어요.

00:00:06.190 --> 00:00:09.885
예를 들어, 하나의 텍스트 뷰가
다른 텍스트 뷰 아래에 와야 한다거나

00:00:09.885 --> 00:00:14.090
한 이미지 뷰는 반드시 텍스트 뷰의
오른쪽에 와야 해요.

00:00:14.090 --> 00:00:17.130
이 모든 제한은 저녁 파티를 위한
좌석 배치도를 만드는 것을

00:00:17.130 --> 00:00:18.790
생각나게 하네요.

00:00:18.910 --> 00:00:21.380
우리 생일 파티 축하가
다가오고 있으니

00:00:21.380 --> 00:00:23.540
그 좌석 배치를 봅시다.

00:00:23.540 --> 00:00:25.510
우리는 이 사람들을
저녁 식사에 초대했지만

00:00:25.510 --> 00:00:28.330
사람들이 앉고 싶어하는
자리에는 제한이 있어요.

00:00:28.330 --> 00:00:30.550
몇 사람들은 그들의
제일 친한 친구 옆에 앉아야 해요.

00:00:30.550 --> 00:00:33.490
다른 사람들은 친한 적군이라
불리는 이들을 갖고 있죠.

00:00:33.490 --> 00:00:36.120
그래서 그들은 특정 사람들 옆에
앉고 싶지 않아 해요.

00:00:36.120 --> 00:00:39.860
그래서 이 모든 것을 고려할 때
이 제안된 레이아웃이 떠오릅니다.

00:00:39.860 --> 00:00:41.880
Kunal, Ben, Kagure가 여기 있죠.

00:00:41.880 --> 00:00:45.900
Natalie, Lyla와 제가 여기 있고
Amy, Omoju, Jennie는 여기 있어요.

00:00:45.900 --> 00:00:49.400
텍스트 뷰와 relative layout을 이용해
이 자리 배치를 XML에서

00:00:49.400 --> 00:00:51.040
만들 수 있을까요?

00:00:51.040 --> 00:00:53.270
우리는 구석에 뷰를
위치시키는 법을 알아요.

00:00:53.270 --> 00:00:57.398
Lyla 텍스트 뷰는 parent의
왼쪽 아래 모서리에 정렬이 됩니다.

00:00:57.398 --> 00:01:01.390
Jennie 텍스트 뷰는 parent의
오른쪽 아래 모서리에 위치해요.

00:01:01.390 --> 00:01:04.510
Ben을 parent의
위쪽에 위치시키고 싶어요.

00:01:04.510 --> 00:01:08.610
그런데 parent가 화면의 전체 높이와
너비를 차지한다고 가정해요.

00:01:08.610 --> 00:01:11.360
그래서 match_parent를
너비와 높이에 설정합니다.

00:01:11.360 --> 00:01:12.540
Ben으로 돌아와서,

00:01:12.540 --> 00:01:14.550
그는 parent의 최상단에 있어요.

00:01:14.550 --> 00:01:16.970
그를 수평에서 
가운데로 정렬하고 싶어요.

00:01:16.970 --> 00:01:20.320
이전에 당신은 이 세 뷰를
anchor 뷰라고 불렀어요.

00:01:20.320 --> 00:01:23.750
다른 모든 것은 다른 사람들과
연관되어 위치해있기 때문입니다.

00:01:23.750 --> 00:01:27.670
다른 모든이들이 어디 앉건
이 사람들은 움직이지 않아요.

00:01:27.670 --> 00:01:29.360
다른 사람을 하나 더 추가합시다.

00:01:29.360 --> 00:01:32.810
여기 Kunal이 Ben의 왼쪽에
위치해 있어요.

00:01:32.810 --> 00:01:35.259
그것을 XML에서 어떻게 표현할까요?

00:01:35.259 --> 00:01:41.272
Ben 뷰의 왼쪽에 뷰가 와야한다는
특정한 속성은 없어요.

00:01:41.275 --> 00:01:43.363
모든 Android 속성 이름은
일반적입니다.

00:01:43.363 --> 00:01:46.940
그래서 당신이 원하는
모든 사용 유형에서 작동하죠.

00:01:46.940 --> 00:01:49.410
우리는 Kunal을 Ben의 왼쪽에
위치시키고 싶어요.

00:01:49.410 --> 00:01:52.580
하지만 그것을 할 수 있는
기존 속성 이름을 모르죠.

00:01:52.580 --> 00:01:53.768
하지만 운 좋게도

00:01:53.768 --> 00:01:58.780
RelativeLayout의 속성은,
android:layout_toLeftOf,

00:01:58.780 --> 00:02:03.520
이것은 Kunal 텍스트 뷰가
어떤 뷰의 왼쪽에 온다는 것을 뜻해요.

00:02:03.520 --> 00:02:08.020
어떤 뷰를 특정짓는 방법은
뷰 ID를 사용하는 겁니다.

00:02:08.020 --> 00:02:10.250
어떤 뷰에든
뷰 ID를 할당할 수 있죠.

00:02:10.250 --> 00:02:13.110
그것들은 RelativeLayout을
위해 특별히 사용될 필요 없어요.

00:02:13.110 --> 00:02:16.275
그것들은 RelativeLayout,
LinearLayout, 다른 뷰 그룹

00:02:16.275 --> 00:02:18.200
안에 존재할 수 있어요.

00:02:18.200 --> 00:02:21.710
Ben 텍스트 뷰에서
android:id 속성을 추가해요.

00:02:21.710 --> 00:02:23.860
값은 이것의 ID 이름입니다.

00:02:23.860 --> 00:02:29.500
형식은 @로 시작하고 @는
안드로이드 앱의 자료를 참조하죠.

00:02:29.500 --> 00:02:34.263
우리 앱의 이미지를 참조할 때
@ 기호를 보았죠.

00:02:34.263 --> 00:02:36.516
@drawable이 그 예였죠.

00:02:36.516 --> 00:02:38.950
그리고 자료 종류를 특정지어요.

00:02:38.950 --> 00:02:41.507
이 경우에
자료 종류는 ID입니다.

00:02:41.897 --> 00:02:45.737
ID를 처음 선언하기 때문에
+ 부호를 추가해야 합니다.

00:02:45.737 --> 00:02:50.120
그리고 /를 가지고
그 다음 뷰의 이름을 넣어요.

00:02:50.120 --> 00:02:53.190
이것은 우리가 선택한
Ben 텍스트 뷰의 이름입니다.

00:02:53.190 --> 00:02:55.820
이것은 ben_text_view라 불리죠.

00:02:56.320 --> 00:02:59.470
기본 조건에 따르면 이름이
공백을 가지면 안 됩니다.

00:02:59.470 --> 00:03:01.697
여기 _ 기호를 사용한 이유죠.

00:03:01.887 --> 00:03:03.473
이것은 문자로 시작해야 하고

00:03:03.473 --> 00:03:06.849
이상한 문장 부호를 가지면 안됩니다.

00:03:07.250 --> 00:03:08.990
숫자는 괜찮아요.

00:03:08.990 --> 00:03:14.500
이 경우 ben_text_view라는
아이디를 Ben에게 줬어요.

00:03:14.500 --> 00:03:16.130
그러면 나중에 이를 참조해도 됩니다.

00:03:16.130 --> 00:03:20.460
Kunal 텍스트 뷰에 속성
layout_toLeftOf를 추가해요.

00:03:20.460 --> 00:03:23.600
이것은 Ben 텍스트 뷰의 왼쪽에
있다고 말할 수 있죠.

00:03:24.190 --> 00:03:28.390
@id를 사용하여 Ben 텍스트 뷰의
ID를 참조합시다.

00:03:28.390 --> 00:03:32.322
이미 그 ID를 정의했으니
+ 기호는 사용하지 않습니다.

00:03:32.322 --> 00:03:34.692
이 ID를 두 번째로 사용하는 거죠.

00:03:34.692 --> 00:03:38.910
뷰 ID 이름을 생각해냈다면
그게 모두 특정한 이름이 되게 하세요.

00:03:38.910 --> 00:03:42.550
보통 안의 요소와 관련된
것을 고르는 것이 도움됩니다.

00:03:42.550 --> 00:03:45.920
좋아요, 그렇게 Kunal을
Ben의 왼쪽에 놓습니다.

00:03:45.920 --> 00:03:49.740
예를 들어, 이제 Omoju를
Jennie의 위에 두고 싶어요.

00:03:49.740 --> 00:03:51.760
Jennie를 참조해야 하기 때문에

00:03:51.760 --> 00:03:53.980
우리는 Jennie의 ID를
만들어야 해요.

00:03:53.980 --> 00:03:58.240
Jennie 텍스트 뷰에서
속성을 특정짓고 이에 값을 줘요.

00:03:58.240 --> 00:04:01.880
ID 이름은 
jennie_text_view입니다.

00:04:01.880 --> 00:04:04.550
Omoju 텍스트 뷰에
이 속성을 추가합니다.

00:04:04.550 --> 00:04:09.680
이것은 Omoju가 jennie_text_view의
위에 와야 한다고 말합니다.

00:04:09.680 --> 00:04:12.130
이것은 우리가 여기서 만든 ID예요.

00:04:12.570 --> 00:04:13.850
XML 레이아웃을 봅시다.

00:04:13.850 --> 00:04:18.010
너비와 높이가 match_parent인
RelativeLayout이 있어요.

00:04:18.010 --> 00:04:19.870
그래고 Lyla 텍스트 뷰가 있고

00:04:19.870 --> 00:04:22.267
이것은 parent의 아래 왼쪽에
정렬되어 있어서

00:04:22.267 --> 00:04:24.350
여기 아래에 이렇게 보입니다.

00:04:24.770 --> 00:04:26.314
또 Jennie 텍스트 뷰가 있어요.

00:04:26.314 --> 00:04:29.010
이것은 parent의
아래 오른쪽에 있어요.

00:04:29.010 --> 00:04:30.320
그건 여기 있네요.

00:04:31.300 --> 00:04:32.876
그리고 Ben 텍스트 뷰가 있어요.

00:04:32.876 --> 00:04:35.900
이것은 parent의 위쪽 모서리에
정렬되어 있죠.

00:04:35.900 --> 00:04:38.290
또한 수평에서 가운데에 있죠.

00:04:38.290 --> 00:04:39.880
이것들은 anchor 뷰들이고

00:04:39.880 --> 00:04:42.460
우리는 다른 뷰들을
이것 주변에 놓을 수 있어요.

00:04:42.460 --> 00:04:45.720
각 뷰들은 이미 지나왔고
ID를 추가했어요.

00:04:45.720 --> 00:04:48.040
이것은 Ben 텍스트 뷰의 ID예요.

00:04:48.040 --> 00:04:51.740
우리는 Kunal 텍스트 뷰를
Ben의 왼쪽에 둘 수 있어요.

00:04:51.740 --> 00:04:56.930
Kunal을 parent의 위쪽에,
Ben 텍스트 뷰의 왼쪽에 정렬해요.

00:04:56.930 --> 00:04:58.655
여기에 Ben의 뷰 ID를 사용해요.

00:04:58.655 --> 00:05:02.025
그리고 Omoju 텍스트 뷰를
Jennie의 위에 위치시켜요.

00:05:02.025 --> 00:05:04.915
Omoju는 parent의
오른쪽에 정렬되었고

00:05:04.915 --> 00:05:07.145
Jennie 텍스트 뷰의
위에 정렬되었죠.

00:05:07.325 --> 00:05:08.245
좋아요.

00:05:08.245 --> 00:05:12.225
이 레이아웃에서 바르게
배치시킬 친구들이 더 많아요.

00:05:12.925 --> 00:05:15.475
아래 instructor notes에
초기 코드가 쓰여진

00:05:15.475 --> 00:05:19.270
XML 비주얼라이저로 가는
링크를 제공하겠습니다.

00:05:19.270 --> 00:05:20.910
가서 XML을 수정하세요.

00:05:20.910 --> 00:05:24.200
모두를 위해
원하는 레이아웃을 만드세요.

00:05:24.200 --> 00:05:26.840
어떤 뷰는 이미 잘못된 위치에
정렬되어 있으므로

00:05:26.840 --> 00:05:28.870
그것들을 고쳐야 합니다.

00:05:29.310 --> 00:05:32.490
그런데 우리는 많은
새로운 속성을 소개해드렸어요.

00:05:32.490 --> 00:05:34.680
하지만 그것 모두를 기억해야
한다고 생각하지 마세요.

00:05:34.680 --> 00:05:36.446
언제든 그것들을 찾아볼 수 있어요.

00:05:36.446 --> 00:05:40.460
RelativeLayout.LayoutParams를
검색해볼 수 있어요.

00:05:40.460 --> 00:05:45.260
첫 링크를 클릭하면
이를 위한 문서로 연결됩니다.

00:05:45.260 --> 00:05:48.870
이것들은 RelativeLayout 안의
child 뷰에 넣을 수 있는

00:05:48.870 --> 00:05:53.290
XML 속성들이고, RelativeLayout이
어떻게 정렬할지 알려줍니다.

00:05:53.290 --> 00:05:54.945
이미 친숙할 법한 것들이 있는데,

00:05:54.945 --> 00:06:00.370
layout_above, alignParentBottom,
alignParentRight 등등

00:06:00.370 --> 00:06:01.290
알려두건대

00:06:01.290 --> 00:06:05.510
XML 비주얼라이저는 이 모든
속성들을 지원하지 않습니다.

00:06:05.510 --> 00:06:08.630
하지만 Android Studio에서
당신의 앱을 개발할 때

00:06:08.630 --> 00:06:10.770
이 모든 것들을 사용할 수 있죠.

