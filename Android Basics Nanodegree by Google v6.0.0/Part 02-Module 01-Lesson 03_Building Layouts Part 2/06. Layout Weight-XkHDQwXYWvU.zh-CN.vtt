WEBVTT
Kind: captions
Language: zh-CN

00:00:00.970 --> 00:00:05.250
上次测试中我们尝试让 Tom、Tim 和

00:00:05.250 --> 00:00:08.240
Tod 三个视图有更多个人空间

00:00:08.240 --> 00:00:12.010
通过在设备整个高度上垂直均分间隔来实现

00:00:13.380 --> 00:00:15.740
我们尝试设置固定dp 值

00:00:15.740 --> 00:00:19.900
但是当使用设备换成平板后便不起作用了

00:00:19.900 --> 00:00:24.300
然后我们尝试了 match_parent 但是 Tom 的 TextView 太大了

00:00:24.300 --> 00:00:27.390
其它两个子视图都被挤出屏幕

00:00:27.390 --> 00:00:31.440
所以我们研究了 LinearLayout weights

00:00:31.440 --> 00:00:34.660
文档中说 他介绍的是竖直 LinearLayout

00:00:34.660 --> 00:00:37.820
如果要想为子视图均分空间 我们需要

00:00:37.820 --> 00:00:42.320
将每个子视图的高度设置成0dp 权重值设为1

00:00:43.590 --> 00:00:46.480
为 子视图设定一个权重

00:00:46.480 --> 00:00:49.490
就像为他们设定一个重要度

00:00:49.490 --> 00:00:50.930
权重值越大

00:00:50.930 --> 00:00:55.040
分配到父视图中可用的空间就越大

00:00:56.280 --> 00:00:57.510
例如

00:00:57.510 --> 00:01:01.920
这个竖直 LinearLayout 中像这样垂直分布

00:01:01.920 --> 00:01:04.590
这个 LinearLayout 有很多空余空间

00:01:04.590 --> 00:01:08.900
空间会分配给有权重的子视图

00:01:08.900 --> 00:01:11.020
如果一个子视图有很大的权重

00:01:11.020 --> 00:01:14.450
那大部分可用高度都会分配给这个子视图

00:01:14.450 --> 00:01:16.890
如果一个子视图有很小的权重

00:01:16.890 --> 00:01:19.900
只有很小一部分可用高度会分配给这个子视图

00:01:19.900 --> 00:01:21.340
就看起来像这样

00:01:21.340 --> 00:01:24.130
我将这个子视图的高度设为0dp

00:01:24.130 --> 00:01:26.020
权重设为1

00:01:26.020 --> 00:01:29.642
LinearLayout 中首先列出了 Tim 和 Todd TextView

00:01:29.642 --> 00:01:33.880
因为根据内容它们有固定的高度

00:01:33.880 --> 00:01:38.019
这时Tom TextView 它是最初的高度0dp

00:01:38.019 --> 00:01:38.880
但它的权重是1

00:01:38.880 --> 00:01:41.266
其它子视图没有权重

00:01:41.266 --> 00:01:45.000
因为如果未声明的话默认权重是0

00:01:45.000 --> 00:01:47.150
所以只有一个子视图有权重

00:01:47.150 --> 00:01:50.480
所以父视图将整个屏幕高度都赋给

00:01:50.480 --> 00:01:51.900
这个 Tom 的 TextView

00:01:51.900 --> 00:01:55.610
这就是为什么 Tom的 TextView 看起来如此巨大

00:01:55.610 --> 00:01:58.810
现在给其它子视图设置权重

00:01:58.810 --> 00:02:02.660
每个子视图高度为0 权重为1

00:02:02.660 --> 00:02:04.980
这是 LinearLayout 的变化过程

00:02:04.980 --> 00:02:08.250
下面要理解每个子视图的高度

00:02:08.250 --> 00:02:10.889
这些视图的初始高度是0

00:02:10.889 --> 00:02:13.950
这意味着父视图中剩余的可用高度

00:02:13.950 --> 00:02:16.410
是屏幕的整个高度

00:02:16.410 --> 00:02:19.500
根据权重总数划分整个屏幕高度

00:02:19.500 --> 00:02:20.280
总数是3

00:02:20.280 --> 00:02:24.215
Tom 的 TextView 的分配的高度是整个高度的三分之一

00:02:24.215 --> 00:02:27.220
三分之一给 Tim 的 TextTiew

00:02:27.220 --> 00:02:29.680
三分之一给 Todd 的 TextvView

00:02:29.680 --> 00:02:32.840
这样设备中的高度仍然是三等分的

00:02:32.840 --> 00:02:37.250
因为有了这些权重 甚至在更大的设备上

00:02:37.250 --> 00:02:40.130
如果我让某个的权重更大一些

00:02:40.130 --> 00:02:44.920
那么 Tim TextView 会被分配更大的空间

00:02:44.920 --> 00:02:47.310
如果我继续增大权重

00:02:47.310 --> 00:02:51.380
可以看到它会继续被分配给更大的空间

00:02:51.380 --> 00:02:54.240
在这个例子中 Tim 的 TextView 的权重是8

00:02:54.240 --> 00:02:56.910
Tom 和Todd 权重是1

00:02:56.910 --> 00:03:00.340
总的权重是8、9、10

00:03:00.340 --> 00:03:03.930
因此父视图中可用空间分为十份

00:03:03.930 --> 00:03:06.710
Tom 分得十分之一空间 Tim 分得十分之八空间

00:03:06.710 --> 00:03:08.170
Todd 分得十分之一空间

00:03:09.450 --> 00:03:13.020
目前竖直 LinearLayout 有三个 子 TextView

00:03:13.020 --> 00:03:15.410
我们设初始高度为0dp

00:03:15.410 --> 00:03:19.400
因此它们都聚集在屏幕上方高度为0

00:03:19.400 --> 00:03:23.290
这就意味着剩下所有的空间都是可用的

00:03:23.290 --> 00:03:27.810
如果我给子 TextView 设置权重为1

00:03:27.810 --> 00:03:31.420
父视图的高度会被平均分给每个子视图

00:03:32.810 --> 00:03:35.400
水平 LinearLayout 中情况也一样

00:03:35.400 --> 00:03:37.550
假设我们有三个子视图

00:03:37.550 --> 00:03:39.820
设置初始宽度为0dp

00:03:39.820 --> 00:03:43.300
这意味着父视图中有全部剩余的可用空间

00:03:43.300 --> 00:03:46.960
如果我设置每个子视图权重值为1

00:03:46.960 --> 00:03:50.110
那么我们将父视图中剩下的可用宽度

00:03:50.110 --> 00:03:52.740
均分给几个子视图

00:03:52.740 --> 00:03:54.910
当然权重也没必要一定是1

00:03:54.910 --> 00:03:57.740
可以是3或其它更大的值

00:03:57.740 --> 00:03:59.960
甚至可以是0

00:03:59.960 --> 00:04:04.440
如果一个视图的权重是0 就意味着它不会随着

00:04:04.440 --> 00:04:06.290
父视图中剩余可用空间大小而变化

00:04:06.290 --> 00:04:09.560
它会保持你赋值的宽度

00:04:09.560 --> 00:04:12.710
我还要指出的是 当我设置高度为0

00:04:12.710 --> 00:04:14.370
或者宽度为0时

00:04:14.370 --> 00:04:15.700
如果是竖直 LinearLayout

00:04:15.700 --> 00:04:18.950
你将以垂直方式填充 LinearLayout

00:04:18.950 --> 00:04:20.390
所以你不知道高度应该是多少

00:04:20.390 --> 00:04:23.510
你设置初始高度为0dp 也设置了权重值

00:04:24.620 --> 00:04:28.760
类似 对于水平 LinearLayout 你填充方式是水平的

00:04:28.760 --> 00:04:31.920
你也不知道 子视图 的宽度

00:04:31.920 --> 00:04:34.930
因此你设置宽度的初始值为 0dp 也设置了权重值

00:04:36.660 --> 00:04:39.820
本来 你能给视图设置一个权重值

00:04:39.820 --> 00:04:44.840
根据父视图的大小来决定子视图伸展的大小

00:04:44.840 --> 00:04:48.540
这很有利于在小设备或者大设备

00:04:48.540 --> 00:04:49.259
上填充可用空间

00:04:50.620 --> 00:04:53.730
这些是布局权重在实际生活中很好用的例子

00:04:54.980 --> 00:04:57.210
这是 Google Hangouts 应用

00:04:57.210 --> 00:05:01.750
你能用它和朋友聊天和发送犯困企鹅的表情

00:05:01.750 --> 00:05:05.620
屏幕底部可以发送消息

00:05:05.620 --> 00:05:08.950
我们一起更详细的看一下底部的布局

00:05:08.950 --> 00:05:13.490
它是 水平 LinearLayout 因为它在一个水平行上

00:05:13.490 --> 00:05:14.827
它由一个 ImageView

00:05:14.827 --> 00:05:19.090
一个你可以输入文本的 Edit Text 和另一个 Image View

00:05:19.090 --> 00:05:22.520
现在这些子视图的高度实际上是 wrap_content

00:05:22.520 --> 00:05:25.410
因为它是根据里面的内容分配的宽度

00:05:25.410 --> 00:05:28.480
两个 Image View 的宽度是 wrap_content 的 因为

00:05:28.480 --> 00:05:30.350
它恰好是里面内容的宽度

00:05:31.460 --> 00:05:33.980
我们设置它的权重为0 因为我们不想让它

00:05:33.980 --> 00:05:37.890
比现在更大 尽管现在父视图这里还有大量剩余空间

00:05:37.890 --> 00:05:41.100
设置权重为0 确保它会在宽度和高度上 wrap_content

00:05:41.100 --> 00:05:43.280
并且不会变化

00:05:43.280 --> 00:05:46.110
我们想让它伸展 以便于在更大设备上大一些

00:05:46.110 --> 00:05:50.640
也能缩小 以便于在更小设备上小一些

00:05:50.640 --> 00:05:54.250
所以我们设置宽度初始为0dp 权重为1

00:05:54.250 --> 00:05:58.404
这意味着父 LinearLayout 将首先布局这个图片

00:05:58.404 --> 00:05:59.340
然后是这个图

00:05:59.340 --> 00:06:05.050
设备剩下的宽度将被赋予这个子视图

00:06:05.050 --> 00:06:07.000
这是一个地图应用的例子

00:06:07.000 --> 00:06:09.570
这是一个关于位置的详细页面

00:06:09.570 --> 00:06:12.480
有三个按钮 Call 、Save 和 Website

00:06:12.480 --> 00:06:14.450
我们再详细的看一看

00:06:14.450 --> 00:06:18.660
你可以这些 TextView 设计成可点击的图片

00:06:18.660 --> 00:06:21.370
可以看到更详细的说明

00:06:21.370 --> 00:06:23.540
但这真的是一个切入点

00:06:23.540 --> 00:06:26.520
这次练习 我们假设这些都是 TextView

00:06:26.520 --> 00:06:29.710
每个 Text View 的高度是 wrap_content

00:06:29.710 --> 00:06:33.000
因为它的高度是根据里面内容分配的

00:06:33.000 --> 00:06:34.980
现在宽度有点棘手

00:06:34.980 --> 00:06:38.485
我们希望每个 TextView 能在整个屏幕上等量的扩展

00:06:38.485 --> 00:06:42.470
随着屏幕变大或变小

00:06:42.470 --> 00:06:44.980
我们不希望三个 TextView 聚集到一起

00:06:44.980 --> 00:06:46.240
到屏幕的左上角

00:06:47.450 --> 00:06:50.640
为了把子视图均等的隔开 我们赋予它们相等的权重

00:06:50.640 --> 00:06:53.050
我们把它们每一个都设置为宽度为0 权重为1

00:06:54.058 --> 00:06:57.790
这样 父视图中的可用宽度就会被均等的分配

00:06:57.790 --> 00:06:58.490
给三个子视图

00:06:59.790 --> 00:07:02.170
最后一个例子是一个邮件应用

00:07:02.170 --> 00:07:05.420
这是 Gmail 的一个组合界面 可以用这个写信息

00:07:06.460 --> 00:07:09.160
它是竖直 LinearLayout 因为项目在一列

00:07:10.230 --> 00:07:13.380
由四个不同的 EditText 区域组成

00:07:13.380 --> 00:07:16.546
每个子视图 的宽度都是 match_parent

00:07:16.546 --> 00:07:18.760
因为我们想让它的宽度占据整个设备

00:07:18.760 --> 00:07:22.845
对于高度 我们设置这三个 EditText 为 wrap_content

00:07:22.845 --> 00:07:25.475
根据它们里面的内容分配高度

00:07:25.475 --> 00:07:28.185
权重设置为0 因为我们并不想

00:07:28.185 --> 00:07:32.620
在 父视图中有可用空间时增加它们的大小

00:07:32.620 --> 00:07:35.870
但是最后一个EditText 区域 这是你写信息的地方

00:07:35.870 --> 00:07:40.710
我们想给予它更大的空间 以便于写一封很长的信给祖母

00:07:40.710 --> 00:07:44.870
因此我们设置高度为0dp 权重为1

00:07:44.870 --> 00:07:46.700
所以如果 父视图 有任何剩余可用空间

00:07:46.700 --> 00:07:50.070
就会被赋予给这个子视图 EditText 区域

00:07:50.070 --> 00:07:54.120
在更大的设备上 组合邮件区域会变的更大

00:07:54.120 --> 00:07:56.880
小设备会变得更小

00:07:58.620 --> 00:08:00.150
现在该你练习了

00:08:00.150 --> 00:08:03.840
我们打算继续在 XML可视化工具中建立这个布局

00:08:03.840 --> 00:08:06.550
你可以在我们下面给出的 XML 中开始

00:08:06.550 --> 00:08:08.140
这有几条注意事项

00:08:08.140 --> 00:08:11.517
当你处理类似于这种情况时 首先先决定好每个视图的宽度

00:08:11.517 --> 00:08:15.500
然后在设置每个视图 的高度

00:08:15.500 --> 00:08:18.430
确保图片占据任何剩下的高度

00:08:18.430 --> 00:08:19.730
在父 LinearLayout 中

00:08:19.730 --> 00:08:22.550
在更小的屏幕占据更小的高度

00:08:22.550 --> 00:08:25.110
更大的屏幕占据更大的高度

00:08:25.110 --> 00:08:26.390
加油吧

00:08:26.390 --> 00:08:27.610
当你做完了别忘记打勾

