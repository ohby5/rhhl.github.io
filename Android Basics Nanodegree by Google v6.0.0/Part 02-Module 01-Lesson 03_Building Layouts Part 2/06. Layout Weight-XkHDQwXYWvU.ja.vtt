WEBVTT
Kind: captions
Language: ja

00:00:00.970 --> 00:00:05.250
先のクイズは　
Tom と Tim と Todd のテキストビューに

00:00:05.250 --> 00:00:08.240
どうやってもう少し場所を
与えるかを考え

00:00:08.240 --> 00:00:12.010
それぞれをデバイスの高さに応じて
等分に垂直に分けようとしました

00:00:13.380 --> 00:00:15.740
固定の dp 数を設定しようとすると

00:00:15.740 --> 00:00:19.900
タブレットのような背の高い
デバイスに変更するとうまくいきません

00:00:19.900 --> 00:00:24.300
それから match_parent を使ってみましたが
これは Tom のテキストビューを大きくし

00:00:24.300 --> 00:00:27.390
他の２つを画面から押し出してしまいました

00:00:27.390 --> 00:00:31.440
ですから リニアレイアウトの重さについて
検討し始めました

00:00:31.440 --> 00:00:34.660
ドキュメントでは
垂直のリニアレイアウトでは

00:00:34.660 --> 00:00:37.820
子を同じ間隔で置きたい場合は

00:00:37.820 --> 00:00:42.320
子の高さを０dp に weight 値を１に
設定するようにされています

00:00:43.590 --> 00:00:46.480
子ビューの weight 値を指定することは

00:00:46.480 --> 00:00:49.490
それに重要さの値を与えるようなものです

00:00:49.490 --> 00:00:50.930
重さの weight 値が高いほど

00:00:50.930 --> 00:00:55.040
親の残りの利用可能なスペースで
より多くの場所を得られます

00:00:56.280 --> 00:00:57.510
例えば

00:00:57.510 --> 00:01:01.920
垂直リニアレイアウトの場合は
このように垂直に満たします

00:01:01.920 --> 00:01:04.590
このリニアレイアウトには
余分のスペースがあったので

00:01:04.590 --> 00:01:08.900
weight 値を持った子に分配します

00:01:08.900 --> 00:01:11.020
もし とても高い weight 値を
持った子があれば

00:01:11.020 --> 00:01:14.450
与えられる高さは増えます

00:01:14.450 --> 00:01:16.890
weight 値が小さな子に対しては

00:01:16.890 --> 00:01:19.900
与えられる高さは減ります

00:01:19.900 --> 00:01:21.340
どのように見えるかお見せしましょう

00:01:21.340 --> 00:01:24.130
この子の高さを０dpとして

00:01:24.130 --> 00:01:26.020
weight 値の１を与えます

00:01:26.020 --> 00:01:29.642
リニアレイアウトは
まず Tim とTodd のテキストビューを配置します

00:01:29.642 --> 00:01:33.880
これらはその中身に応じて
固定の高さを持っているからです

00:01:33.880 --> 00:01:38.019
そして Tom のテキストビューは
初期の高さの設定が０ dp ですが

00:01:38.019 --> 00:01:38.880
重さが１とされています

00:01:38.880 --> 00:01:41.266
他の子には重さが与えられていません

00:01:41.266 --> 00:01:45.000
重さが指定されなければ
既定の weight 値０です

00:01:45.000 --> 00:01:47.150
これが weight 値を持っている唯一の子です

00:01:47.150 --> 00:01:50.480
だから親は残りの画面すべての高さを

00:01:50.480 --> 00:01:51.900
この Tom のテキストビューに与えます

00:01:51.900 --> 00:01:55.610
だから Tom のテキストビューが非常に
大きくなります

00:01:55.610 --> 00:01:58.810
では他の子にも weight 値を与えましょう

00:01:58.810 --> 00:02:02.660
それぞれの子が高さが０dpで
weight 値が１を持っています

00:02:02.660 --> 00:02:04.980
これがリニアレイアウトが行う作業行程です

00:02:04.980 --> 00:02:08.250
それぞれのビューの高さを見つけようとします

00:02:08.250 --> 00:02:10.889
これらのビューの高さは最初は０dpです

00:02:10.889 --> 00:02:13.950
ですから 使うことのできる
親の残りの高さは

00:02:13.950 --> 00:02:16.410
基本的に画面すべての高さです

00:02:16.410 --> 00:02:19.500
この全ての画面の高さを

00:02:19.500 --> 00:02:20.960
重さの合計
ここでは３で割ります

00:02:20.960 --> 00:02:24.215
そしてその３分の１の高さを
Tom のテキストビューに与え

00:02:24.215 --> 00:02:27.220
３分の１の高さを 
Tim のテキストビューに与え

00:02:27.220 --> 00:02:29.680
３分の１の高さを 
Todd のテキストビューに与えます

00:02:29.680 --> 00:02:32.840
これらはデバイスの高さを等分に分けていて

00:02:32.840 --> 00:02:37.250
大きな画面でも weight 値のおかげで
同じになります

00:02:37.250 --> 00:02:40.130
weight 値を大きい数に変えると

00:02:40.130 --> 00:02:44.920
親はより多くの高さを
Tim のテキストビューに与えます

00:02:44.920 --> 00:02:47.310
もっと大きい数にもできます

00:02:47.310 --> 00:02:51.380
するとより多くの高さを取ることが分かります

00:02:51.380 --> 00:02:54.240
この場合は Tim テキストビューは
８の重さを持ち

00:02:54.240 --> 00:02:56.910
Tom は１の重さ
Todd は１の重さです

00:02:56.910 --> 00:03:00.340
だから重さの合計は８、９、１０

00:03:00.340 --> 00:03:03.930
親の利用可能な高さは10で割られます

00:03:03.930 --> 00:03:06.710
そして 10 分の１が Tomに
10 分の８が Timに

00:03:06.710 --> 00:03:08.170
10 分の１が Todd にいきます

00:03:09.450 --> 00:03:13.020
だから垂直リニアレイアウトでは
３つの子テキストビューがあると

00:03:13.020 --> 00:03:15.410
まず初期の高さを０dpに指定します

00:03:15.410 --> 00:03:19.400
するとすべて高さ０で上に重ねられます

00:03:19.400 --> 00:03:23.290
つまり親にはすべての高さが残っています

00:03:23.290 --> 00:03:27.810
それぞれの子テキストビューの重さを１とすると

00:03:27.810 --> 00:03:31.420
残りの親の高さは
等分に子に分けられます

00:03:32.810 --> 00:03:35.400
同じことが水平リニアレイアウトでもできます

00:03:35.400 --> 00:03:37.550
３つの子のテキストビューがあるとして

00:03:37.550 --> 00:03:39.820
それらの幅を初期０dpとします

00:03:39.820 --> 00:03:43.300
これは親はすべての幅が残っています

00:03:43.300 --> 00:03:46.960
それぞれの子ビューの重さを１とすると

00:03:46.960 --> 00:03:50.110
利用できる親のすべての幅が

00:03:50.110 --> 00:03:52.740
等分に子に分けられます

00:03:52.740 --> 00:03:54.910
ここで weight 値は
１でなくてもいいです

00:03:54.910 --> 00:03:57.740
２や３でも何でもいいのです

00:03:57.740 --> 00:03:59.960
０でもいいです

00:03:59.960 --> 00:04:02.800
ビューの weight 値が０の場合は

00:04:02.800 --> 00:04:06.290
親の残りの空間によって変わらないことを
意味します

00:04:06.290 --> 00:04:09.560
基本的に与えられた高さと幅になります

00:04:09.560 --> 00:04:12.010
ここで言っておきたいことは

00:04:12.010 --> 00:04:14.370
どのような場合に高さを０
幅を０にするかです

00:04:14.370 --> 00:04:15.700
垂直リニアレイアウトの場合は

00:04:15.700 --> 00:04:18.950
このようにそのレイアウトを満たします

00:04:18.950 --> 00:04:20.980
だからどの高さにするべきか分かりません

00:04:20.980 --> 00:04:23.510
だから初期の高さを０と設定し
重さを与えます

00:04:24.620 --> 00:04:28.760
同様に水平リニアレイアウトでは
水平に満たしていきます

00:04:28.760 --> 00:04:31.920
だから子ビューの幅がまだ分かりません

00:04:31.920 --> 00:04:34.930
だから 幅を０dpにして重さを与えます

00:04:36.660 --> 00:04:39.820
重さを与えることは

00:04:39.820 --> 00:04:44.840
親のビューの大きさによって
伸ばせると考えることができます

00:04:44.840 --> 00:04:47.460
これは小さいデバイスでも
大きなデバイスでも

00:04:47.460 --> 00:04:49.259
残りの空間を満たすのに便利です

00:04:50.620 --> 00:04:53.730
これらは実際にレイアウトの重さが有益な例です

00:04:54.980 --> 00:04:57.210
これは Google Hangouts アプリです

00:04:57.210 --> 00:05:01.750
友人とおしゃべりしたり
眠たげなペンギンを送ったりできます

00:05:01.750 --> 00:05:05.620
この画面の下の部分でメッセージを送ります

00:05:05.620 --> 00:05:08.950
この下のレイアウトを
もっと詳しく見てみましょう

00:05:08.950 --> 00:05:13.490
これは水平リニアレイアウトで
水平に置かれていますね

00:05:13.490 --> 00:05:16.197
イメージビューとテキストが入れられる
EditText のフィールドと

00:05:16.197 --> 00:05:19.090
もう１つのイメージビューで構成されています

00:05:19.090 --> 00:05:22.520
これらのビューの高さは実際は
wrap_content で

00:05:22.520 --> 00:05:25.410
中身を包み込みます

00:05:25.410 --> 00:05:28.480
これらの２つのイメージビューの幅は
wrap_content で

00:05:28.480 --> 00:05:30.350
中身の幅に合っています

00:05:31.460 --> 00:05:33.980
重さの０を与えます

00:05:33.980 --> 00:05:37.890
これで親に空白が残っていても
大きくはなりません

00:05:37.890 --> 00:05:41.100
重さを０に設定することで
高さと幅が wrap_content で決まり

00:05:41.100 --> 00:05:43.280
それは変わりません

00:05:43.280 --> 00:05:46.110
大きな画面では
少し大きくなるように伸ばし

00:05:46.110 --> 00:05:50.640
小さい画面では縮めたいですね

00:05:50.640 --> 00:05:54.250
だから幅を０dpで重さを１とします

00:05:54.250 --> 00:05:57.334
つまり親リニアレイアウトは

00:05:57.334 --> 00:05:59.340
まずこのイメージとこのイメージを
レイアウトに合うようにします

00:05:59.340 --> 00:06:05.050
そして残りの幅をこのビューに与えます

00:06:05.050 --> 00:06:07.000
これは MAPS アプリの例です

00:06:07.000 --> 00:06:09.570
これは場所の詳細です

00:06:09.570 --> 00:06:12.480
ここに３つのボタンがあります
Call, Save, Websiteです

00:06:12.480 --> 00:06:14.450
これらを詳しく見てみましょう

00:06:14.450 --> 00:06:18.660
これらを実際アイコンが付いた
テキストビューとして作れます

00:06:18.660 --> 00:06:21.370
インストラクターノートで
より詳しく参照できます

00:06:21.370 --> 00:06:23.540
ちょっと脱線しましたね

00:06:23.540 --> 00:06:26.520
この練習では
これらがテキストビューだとしましょう

00:06:26.520 --> 00:06:29.710
それぞれのテキストビューの高さは
wrap_content で

00:06:29.710 --> 00:06:33.000
中身の高さを包むからです

00:06:33.000 --> 00:06:34.980
幅がすこし難しいです

00:06:34.980 --> 00:06:38.485
これらのテキストビューが等分の幅で
画面に広がるようにしたいので

00:06:38.485 --> 00:06:42.470
画面の大きさに依存します

00:06:42.470 --> 00:06:44.980
すべてのテキストビューが画面の左に

00:06:44.980 --> 00:06:46.240
くっついてしまうのは困ります

00:06:47.450 --> 00:06:50.640
子を等間隔で置くには
同じ重さを与えます

00:06:50.640 --> 00:06:53.050
それぞれの幅を０にし 重さを１にします

00:06:54.058 --> 00:06:57.790
そうすると利用可能な親の幅が
３つの子に

00:06:57.790 --> 00:06:58.490
等分に与えられます

00:06:59.790 --> 00:07:02.170
最後の例は電子メールの例です

00:07:02.170 --> 00:07:05.420
これは Gmail で新規メッセージが
書ける作成画面です

00:07:06.460 --> 00:07:09.160
これは垂直リニアレイアウトですね
アイテムが列になっています

00:07:10.230 --> 00:07:13.380
４つの異なる
EditText フィールドからなります

00:07:13.380 --> 00:07:16.546
それぞれの子は match_parent で

00:07:16.546 --> 00:07:18.760
デバイスの幅に伸ばされます

00:07:18.760 --> 00:07:22.845
高さは３つの EditText フィールドを
wrap_content とし

00:07:22.845 --> 00:07:25.475
内部のテキストを包みます

00:07:25.475 --> 00:07:27.585
重さを０とし

00:07:27.585 --> 00:07:32.620
親の残りの高さのせいで
サイズが増えないようにします

00:07:32.620 --> 00:07:35.870
でも最後の EditText フィールドは
メッセージを書く場所なので

00:07:35.870 --> 00:07:40.710
おばあさんに長い手紙が書けるように
多くの場所を与えたいです

00:07:40.710 --> 00:07:44.870
だから高さを０dpで重さ１を与えます

00:07:44.870 --> 00:07:46.700
すると親に利用可能な高さが残っていると

00:07:46.700 --> 00:07:50.070
それはこの子 EditText フィールドに
与えられます

00:07:50.070 --> 00:07:54.120
大きな画面のデバイスでは
この電子メール作成枠は少し高くなります

00:07:54.120 --> 00:07:56.880
小さいデバイスでは少し小さくなります

00:07:58.620 --> 00:08:00.150
では あなたが練習する番です

00:08:00.150 --> 00:08:03.840
XML visualizer の中に
このレイアウトを作ってください

00:08:03.840 --> 00:08:06.550
以下に提供された XML で
始めることができます

00:08:06.550 --> 00:08:08.140
ヒントをあげます

00:08:08.140 --> 00:08:11.517
このようなものを作る際は
それぞれのビューの幅をまず決めましょう

00:08:11.517 --> 00:08:15.500
そして 各ビューでの高さを決めます

00:08:15.500 --> 00:08:17.750
そして 残りの親のレイアウトの空白が

00:08:17.750 --> 00:08:19.730
イメージに与えられるようにします

00:08:19.730 --> 00:08:22.550
小さい画面のデバイスでは
少ない高さを取り

00:08:22.550 --> 00:08:25.110
大きい画面のデバイスでは
より多くの高さを取ります

00:08:25.110 --> 00:08:26.390
ではやってみてください

00:08:26.390 --> 00:08:27.610
出来上がったら
このボックスをチェックしてください

