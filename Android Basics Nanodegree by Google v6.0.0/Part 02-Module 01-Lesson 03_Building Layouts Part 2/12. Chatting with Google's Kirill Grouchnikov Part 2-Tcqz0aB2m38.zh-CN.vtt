WEBVTT
Kind: captions
Language: zh-CN

00:00:01.884 --> 00:00:04.763
在你的应用中有使用 linearlayout 的例子吗？

00:00:04.763 --> 00:00:10.611
这里 这三个卡片的集群是一个水平的

00:00:10.611 --> 00:00:16.463
线性布局 我们只是增加了类似于这三个卡片的子视图

00:00:16.463 --> 00:00:23.810
我们设置布局宽度为 0dp 和布局权重为1

00:00:23.810 --> 00:00:29.569
本质上 它指示运行时线性布局

00:00:29.569 --> 00:00:35.523
设置多大的权重 它最终是基于该组中所有子视图之间

00:00:35.523 --> 00:00:42.100
相对权重的分布均匀分配的

00:00:42.100 --> 00:00:43.160
这是一个例子

00:00:43.160 --> 00:00:47.420
另一个例子在这里 有新的和更新的游戏

00:00:47.420 --> 00:00:50.110
很多的按钮是一个头节点

00:00:50.110 --> 00:00:52.910
它是一个简单的水平线性布局

00:00:52.910 --> 00:00:54.980
当布局简单时

00:00:54.980 --> 00:00:57.740
你不必去编写自定义布局

00:00:57.740 --> 00:01:01.310
不要每个地方只使用 RelativeLayout

00:01:01.310 --> 00:01:05.980
因为它比 LinearLayout 更灵活

00:01:05.980 --> 00:01:08.700
那只是矫枉过正简单布局

00:01:09.800 --> 00:01:11.748
当一个设计者给你一个虚拟模块时

00:01:11.748 --> 00:01:15.660
你会怎样开始构建你的应用呢？

00:01:15.660 --> 00:01:19.660
希望在这一点上 像我们之前谈过的 我们做的不只是一个虚拟模块

00:01:19.660 --> 00:01:23.640
而是 至少两到三个显示

00:01:25.200 --> 00:01:29.880
在小屏幕和大屏幕之间是如何进行设计的

00:01:29.880 --> 00:01:33.560
然后 我想要确定组件模块

00:01:33.560 --> 00:01:37.680
如果我们有时谈论在应用许多地方都出现的一个插件

00:01:37.680 --> 00:01:41.000
我没有必要

00:01:41.000 --> 00:01:45.740
去实现相同卡片的不同形式

00:01:45.740 --> 00:01:49.240
基于它是否需要显示一个或小或大的图片

00:01:49.240 --> 00:01:52.930
也许显示一个行标题 而不是两个行标题

00:01:52.930 --> 00:01:57.258
所以我试图确定这些模块 

00:01:57.258 --> 00:02:02.580
然后作为独立的类和独立的布局来实现 接着在这些块上开始构建

00:02:02.580 --> 00:02:07.484
所以你从 TextView、ImageView、Spinner

00:02:07.484 --> 00:02:11.055
以及诸如此类的东西来构建更小的模块

00:02:11.055 --> 00:02:16.771
然后 希望你能继续采用这些小模块

00:02:16.771 --> 00:02:22.450
并建立更大的模块 当反复利用相同的基本模块时

00:02:22.450 --> 00:02:26.390
即使你前边花费了一点时间

00:02:26.390 --> 00:02:32.440
它就会变得容易 特别地如果在设计

00:02:32.440 --> 00:02:37.280
如何使它的语言应用到app上 和添加一项新的功能方面是一致的

00:02:37.280 --> 00:02:41.472
如果设计是连贯的 那么你会继续看到相同的模块

00:02:41.472 --> 00:02:44.461
在不同的配置中被反复地使用

00:02:44.461 --> 00:02:49.789
这就是你初始的投入开始获得回报 

00:02:49.789 --> 00:02:55.430
你不把实现一个新的屏幕作为一个全新的事情

00:02:55.430 --> 00:03:01.190
反倒是 也许 50 60 70 但是 百分之多少是已经存在的

00:03:01.190 --> 00:03:05.450
也许它需要一点颜色的调整也许是排版或者类似的东西

00:03:05.450 --> 00:03:10.272
但是我希望 如果设计是连贯的实现

00:03:10.272 --> 00:03:14.098
也会更容易 如果你已经为这个目标做出前进

00:03:14.098 --> 00:03:19.903
它在重新设计应用上也会变得更容易 这只是在视觉层面上

00:03:19.903 --> 00:03:24.099
如果你想调整颜色、排版

00:03:24.099 --> 00:03:28.941
如果你想要添加像我们在 Lollipop 里做的那样

00:03:28.941 --> 00:03:31.880
当你按下东西时就会有连锁反应的功能

00:03:31.880 --> 00:03:36.870
如果你继续使用你的设计样式、布局

00:03:36.870 --> 00:03:42.250
那么这样做在少数的地方视觉会更新

00:03:42.250 --> 00:03:48.030
然后希望它们能连贯地应用到每个地方

00:03:48.030 --> 00:03:51.550
所以对于我来说我想将焦点放在一开始就得到准确的数据

00:03:51.550 --> 00:03:57.918
尤其是对于一个数据来源于外部的应用来说

00:03:57.918 --> 00:04:02.512
然后使像素变得紧密并重新定义像素 

00:04:02.512 --> 00:04:07.532
一旦你的数据去做网格、排版、颜色、动画

00:04:07.532 --> 00:04:12.575
过渡以及诸如此类时 你得在这些方面花很多的时间

00:04:12.575 --> 00:04:16.338
我认为这将是一样的 如果你有一个类似的 Twitter 客户端

00:04:16.338 --> 00:04:21.991
你可以通过完善你带有假数据的布局里的像素开始

00:04:21.991 --> 00:04:27.122
然后你会发现关于从 Twitter 中筛选的数据你一无所知

00:04:27.122 --> 00:04:32.920
只是为了筛选数据它需要花费你未来三个月的时间

00:04:32.920 --> 00:04:37.240
或者 这只是一个例子 我想要从数据开始

00:04:37.240 --> 00:04:41.880
我想这个只是冰山一角 你可以把 能够获取到的数据看作

00:04:41.880 --> 00:04:47.640
露在水面上的5%到10%  然后如果你愿意会有很多深入之下的工作

00:04:47.640 --> 00:04:50.800
来支持你的工作

00:04:50.800 --> 00:04:53.820
你提到的是人们看到的冰山一角

00:04:53.820 --> 00:04:57.210
那么在表面之下是如何准确的运行的

00:04:57.210 --> 00:05:00.620
你如何看待 Google Play 应用？

00:05:00.620 --> 00:05:05.940
所以深入之下会发生的事情首先是通过网络

00:05:05.940 --> 00:05:11.643
从在服务器上验证并获得数据

00:05:11.643 --> 00:05:13.969
然后可以在本地缓存它 

00:05:13.969 --> 00:05:18.152
这样下次你能从字符串流到详情页面

00:05:18.152 --> 00:05:22.820
并返回字符串流 我们应该使用缓存的数据和图像

00:05:22.820 --> 00:05:26.616
这样我们不会给电池太大的压力

00:05:26.616 --> 00:05:30.284
而且这个应用已经显示了它所具有的信息

00:05:30.284 --> 00:05:33.830
那么你可以从多个账户获得支持

00:05:33.830 --> 00:05:37.660
然后你可以在数据库的各处保存一些数据

00:05:38.670 --> 00:05:44.380
然后我们用流量计费 大部分的

00:05:44.380 --> 00:05:48.840
工作是在服务器上集成不同的支付方式来完成的

00:05:48.840 --> 00:05:51.200
还有就是客户端上的工作也是如此

00:05:51.200 --> 00:05:57.050
Play商店的另一个重要的部分就是下载和

00:05:57.050 --> 00:05:59.660
安装应用和游戏

00:05:59.660 --> 00:06:04.530
在Play商店里 我们负责下载

00:06:04.530 --> 00:06:06.840
安装和更新应用

00:06:06.840 --> 00:06:11.556
其中的另外的一大数据块就是 

00:06:11.556 --> 00:06:16.052
几乎所有的这些表面的数据  在屏幕上以像素的形式存在的

00:06:16.052 --> 00:06:21.425
还有很多深入之下的工作给出了正确账户的信息

00:06:21.425 --> 00:06:27.668
并显示在屏幕上

00:06:27.668 --> 00:06:32.610
很明显你曾经历过 Google Play 应用的许多不同迭代

00:06:32.610 --> 00:06:37.385
你如何保持更新 Android 的最新消息呢？

00:06:37.385 --> 00:06:42.657
在 Google+ 上有很多的信息 

00:06:42.657 --> 00:06:47.295
其来自于非常活跃的 Android 开发人员出版了大量的教程

00:06:47.295 --> 00:06:52.322
而且 

00:06:52.322 --> 00:06:57.575
它们只是来自不同的博客 有时我没有必要去

00:06:57.575 --> 00:07:02.732
深入了解一系列关于 recycler view 或 view page

00:07:02.732 --> 00:07:07.430
或诸如此类的东西或如何配置工具栏和操作栏

00:07:07.430 --> 00:07:09.200
我试着把它变成像

00:07:10.270 --> 00:07:12.810
我这里已经知道的大量的信息

00:07:12.810 --> 00:07:17.340
然后当我需要深层次的信息时

00:07:17.340 --> 00:07:20.130
我就会去找这些资源

00:07:20.130 --> 00:07:21.960
非常感谢你 Cyril

00:07:21.960 --> 00:07:25.110
我想我们的学生会很喜欢听你讲

00:07:25.110 --> 00:07:27.010
怎样成为一个 Android 应用工程师的观点

