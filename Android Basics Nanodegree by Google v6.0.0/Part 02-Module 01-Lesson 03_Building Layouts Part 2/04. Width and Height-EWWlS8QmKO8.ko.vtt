WEBVTT
Kind: captions
Language: ko

00:00:00.300 --> 00:00:02.670
파티용 게스트 리스트를 
만들어 봤습니다

00:00:02.670 --> 00:00:05.300
&gt;&gt;잠시만요, 이게 생일파티용 
게스트 리스트인가요, 캐서린?

00:00:05.300 --> 00:00:06.390
&gt;&gt;그런데요

00:00:06.390 --> 00:00:08.109
&gt;&gt;제가 그 리스트에 있으면 좋겠네요

00:00:09.140 --> 00:00:10.450
&gt;&gt;한 번 봐야겠네요

00:00:10.450 --> 00:00:13.540
&gt;&gt;와, 제가 정말 작게 느껴지네요

00:00:13.540 --> 00:00:14.860
&gt;&gt;작다고 하니까 말인데요

00:00:14.860 --> 00:00:18.010
화면의 View 크기를 이야기 해볼까요

00:00:18.010 --> 00:00:20.790
&gt;&gt;고정 높이인 DP를 써 왔죠?

00:00:20.790 --> 00:00:23.390
&gt;&gt;네, 넓이와 높이죠

00:00:23.390 --> 00:00:25.640
View로 내용을 설정하고 
감쌀 수도 있습니다

00:00:25.640 --> 00:00:29.065
&gt;&gt;네, View가 스스로 콘텐츠을 
감싼다니 신기하네요

00:00:29.065 --> 00:00:30.349
콘텐츠가 커지면 View가 커지고

00:00:30.349 --> 00:00:32.510
콘텐츠가 작아지만 
View가 작아집니다

00:00:32.510 --> 00:00:36.030
&gt;&gt;네, match_parent라는 
세 번째가 있습니다

00:00:36.030 --> 00:00:37.930
&gt;&gt;좀 이상하게 들리네요

00:00:37.930 --> 00:00:41.410
마치 한 부모를 위한 
데이트 사이트처럼 들려요

00:00:41.410 --> 00:00:42.600
&gt;&gt;그렇지는 않아요

00:00:42.600 --> 00:00:47.040
match_parent는 View가 Parent만큼 
넓어지거나 커지는 것을 말합니다

00:00:47.040 --> 00:00:48.216
&gt;&gt;아, 그렇네요

00:00:48.216 --> 00:00:51.400
제가 View이고 Parent가 있으면

00:00:51.400 --> 00:00:53.580
제 넓이와 높이는 저의 
Parent와 같아지는 거군요.

00:00:53.580 --> 00:00:54.530
&gt;&gt;바로 그거에요

00:00:54.530 --> 00:00:59.800
요약하면, View의 크기로 
설정하는 값이 넓이입니다

00:00:59.800 --> 00:01:01.090
넓이와 높이의 고정 DP이죠

00:01:01.090 --> 00:01:02.910
&gt;&gt;맞아요. wrap_content를 해도 되죠

00:01:02.910 --> 00:01:04.986
다음에 해 볼 것은

00:01:04.986 --> 00:01:06.610
&gt;&gt;match_parent이죠

00:01:06.610 --> 00:01:10.160
아이 View를 리니어 레이아웃에서 
다른 넓이로 설정하는 것이

00:01:10.160 --> 00:01:13.770
최종 사용자 인터페이스에 어떻게 
영향을 주는지에 관한 예시를 보여드릴게요

00:01:13.770 --> 00:01:18.120
이 예시에서 각 아이 View는 
200DP 고정 넓이로 설정했습니다

00:01:18.860 --> 00:01:22.590
각 View 안의 콘텐츠가 
200DP보다 크면

00:01:22.590 --> 00:01:26.330
이렇게 콘텐츠가 잘릴
우려가 있습니다

00:01:26.330 --> 00:01:30.460
이 예에서는 아이 View를 
wrap_content 넓이로 설정했습니다

00:01:31.600 --> 00:01:33.500
이제 모든 콘텐츠가 보이지만

00:01:33.500 --> 00:01:36.930
각 View의 넓이가 어디에 
들어 있느냐에 따라 다르게 나옵니다

00:01:37.770 --> 00:01:42.020
이 예에서는 각 아이 View를 
match_parent로 설정했습니다

00:01:42.020 --> 00:01:46.220
이제 각 아이의 넓이가 Parent ViewGroup과 
같은 넓이로 보일 겁니다

00:01:46.220 --> 00:01:48.540
그 안의 콘텐츠와 관계 없이 말이죠

00:01:49.310 --> 00:01:53.660
같은 값이 각 View의 높이에도 
적용될 수 있습니다

00:01:53.660 --> 00:01:58.960
이 예에서는 아이 TextView 높이를 
200DP로 설정했습니다

00:01:58.960 --> 00:02:01.570
콘텐츠가 그 보다 크면

00:02:01.570 --> 00:02:04.250
컨텐츠가 잘릴 우려가 있죠

00:02:05.400 --> 00:02:09.529
이 예에서는 아이 TextView 높이를 
wrap_content로 설정했습니다

00:02:09.529 --> 00:02:12.040
그럼 화면에 모든 콘텐츠가 나오고

00:02:12.040 --> 00:02:17.000
TextView가 그 안의 콘텐츠에 연동되기
때문에 아무것도 잘리지 않습니다

00:02:17.940 --> 00:02:22.790
이 예에서는 아이 TextView 높이를 
match_parent로 설정했습니다

00:02:22.790 --> 00:02:25.300
그럼 아이 TextView가 Parent와 
같은 높이로 나옵니다

00:02:25.300 --> 00:02:26.720
그 안의 콘텐츠와 상관없이요

00:02:27.470 --> 00:02:29.750
이제 XML비쥬얼라이저를 열어서

00:02:29.750 --> 00:02:32.980
코드에서 parent와 같이 해 봅시다

00:02:32.980 --> 00:02:36.150
아래 강의 노트에 
초보자용 코드와 함께

00:02:36.150 --> 00:02:37.910
XML비쥬얼라이저 링크를 
제공해 드립니다

00:02:38.830 --> 00:02:41.570
여기에서 리니어 레이아웃은 
기본 View가 되는데

00:02:41.570 --> 00:02:44.460
그것이 가장 처음이자 
중요한 View이기 때문입니다

00:02:45.580 --> 00:02:49.390
이 기본 View의 넓이와 높이를 
match_parent로 설정하고

00:02:49.390 --> 00:02:51.870
이것은 우리 앱의 
주요 레이아웃으로 설정하면

00:02:51.870 --> 00:02:55.400
이 리니어 레이아웃은 기기화면에
맞는 넓이와 높이가 될 겁니다

00:02:56.510 --> 00:03:01.060
리니어 레이아웃을 
불투명 색 배경으로 설정해서

00:03:01.060 --> 00:03:04.400
보여드릴 수 있습니다

00:03:04.400 --> 00:03:07.100
리니어 레이아웃에 
회색 배경을 설정하면

00:03:07.100 --> 00:03:11.660
기기에 넓이와 높이에 꽉 차게 
회색이 되는 걸 볼 수 있습니다

00:03:11.660 --> 00:03:14.280
이제 이 TextView의 넓이와 높이를 
match_parent로 바꾸면

00:03:14.280 --> 00:03:15.980
어떻게 될까요?

00:03:15.980 --> 00:03:18.450
각 View의 주변을 분명히 하기 위해

00:03:18.450 --> 00:03:21.510
각 View의 배경색을 설정하겠습니다

00:03:21.510 --> 00:03:25.660
이 TextView의 높이를 
match_parent로 바꾸겠습니다

00:03:25.660 --> 00:03:28.270
그런데, 이건 
match_parent로 써야 합니다

00:03:28.270 --> 00:03:32.530
이 TextView가 parent의 
총 높이에 맞게 나옵니다

00:03:32.530 --> 00:03:35.080
안타깝게도 이것은 모든 것을 
화면에 꽉 차게 만듭니다

00:03:35.080 --> 00:03:36.580
그런 것은 원치 않죠

00:03:36.580 --> 00:03:38.320
그러니 wrap_content로 
다시 바꿉시다

00:03:38.950 --> 00:03:39.600
좋아요

00:03:39.600 --> 00:03:42.539
넓이를 match_parent로 바꾸고 
어떻게 되나 보겠습니다

00:03:43.750 --> 00:03:47.710
TextView의 넓이가 parent와 
같은 넓이가 되었는데

00:03:47.710 --> 00:03:50.260
그것이 다음에 
기기 화면과 같은 넓이입니다

00:03:51.400 --> 00:03:54.940
다른 TextView를 
match_parent로 바꾸면

00:03:54.940 --> 00:03:59.390
이것도 parent와 같은 
넓이로 꽉 차기 시작합니다

00:03:59.390 --> 00:04:01.740
한 가지 더 말씀드리고 싶은데요

00:04:01.740 --> 00:04:04.860
layout_로 생긴 계수를 보시면

00:04:04.860 --> 00:04:06.820
layout_height나 layout_width같은 이것은

00:04:06.820 --> 00:04:10.080
실제로 이것은 ViewGroup 레이아웃 변수를 말합니다

00:04:10.080 --> 00:04:14.740
이는 View의 배치와 크기를 결정하는 
parent ViewGroup에 의해 사용됩니다

00:04:15.920 --> 00:04:19.110
그 동안, 배경, 텍스트 크기, 
텍스트 같은 다른 계수들은

00:04:19.110 --> 00:04:23.630
View의 스타일의 관점에서 
TextView가 다룹니다

00:04:23.630 --> 00:04:27.360
이 ViewGroup 레이아웃 
변수는 parent가 다룹니다

00:04:27.360 --> 00:04:30.460
이제 여러분이 다른 넓이와 
높이 값을 써 볼 차례입니다

00:04:30.460 --> 00:04:33.890
초보자용 코드가 있는 
XML비쥬얼라이저 링크는

00:04:33.890 --> 00:04:35.820
아래의 강의노트를 보세요

00:04:35.820 --> 00:04:38.970
각 TextView의 넓이와 
높이 값을 바꿔 보세요

00:04:38.970 --> 00:04:43.270
고정 값, wrap_content, 
match_parent를 설정할 수 있습니다

00:04:43.270 --> 00:04:46.730
각 View, 넓이와 높이 값은 
같을 필요는 없습니다

00:04:46.730 --> 00:04:48.600
다 마치시고 다음으로 가려면 
이 네모를 클릭하세요

