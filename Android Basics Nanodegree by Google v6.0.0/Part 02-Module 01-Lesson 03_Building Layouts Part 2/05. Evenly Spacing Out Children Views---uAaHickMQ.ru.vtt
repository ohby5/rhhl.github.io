WEBVTT
Kind: captions
Language: ru

00:00:00.490 --> 00:00:01.260
Давайте повторим.

00:00:01.260 --> 00:00:04.080
На текущий момент мы узнали, что линейный
макет может иметь ориентацию, которая

00:00:04.080 --> 00:00:05.650
может быть горизонтальной или вертикальной

00:00:06.890 --> 00:00:09.610
Однако, давайте подумаем, используют ли
данные элементы всю площадь экрана

00:00:09.610 --> 00:00:11.240
в полном объеме.

00:00:11.240 --> 00:00:13.750
Когда я говорю площадь, я имею
ввиду доступное место на экране.

00:00:14.930 --> 00:00:16.490
Для нашего смартфона Nexus 6, скажем,

00:00:16.490 --> 00:00:20.740
у нас есть вертикальный линейный макет
с тремя дочерними текстовыми элементами.

00:00:20.740 --> 00:00:22.420
Томом, Тимом и Тодом.

00:00:22.420 --> 00:00:25.500
Когда мы держим устройство в портретном
режиме, вот так, в руке,

00:00:25.500 --> 00:00:28.380
то все текстовые элементы группируются
в левом верхнем углу экрана.

00:00:29.380 --> 00:00:32.320
И все это пустое
пространство остается незадействованным.

00:00:32.320 --> 00:00:35.480
Аналогично, если мы повернем
устройство в альбомный вид,

00:00:35.480 --> 00:00:40.120
то текст также будет в левом верхнем углу,
оставляя много пустого пространства.

00:00:40.120 --> 00:00:42.110
И это будет еще более заметно
на планшете,

00:00:42.110 --> 00:00:44.260
где экран намного больше.

00:00:44.260 --> 00:00:47.280
Мы используем только малую часть
площади экрана, и

00:00:47.280 --> 00:00:48.252
остальная часть остается пустой.

00:00:48.252 --> 00:00:51.680
Мы рассмотрим, как можно равномерно
распределить эти элементы

00:00:51.680 --> 00:00:55.190
по экрану, используя доступное
пространство по максимуму.

00:00:55.190 --> 00:00:56.560
Это также относится и к другим элементам.

00:00:56.560 --> 00:00:59.500
Можно вывести изображения в большом
формате на весь экран, чтобы было

00:00:59.500 --> 00:01:03.460
привлекательнее, вместо того, чтобы
помещать маленькие копии в углу экрана.

00:01:04.489 --> 00:01:05.180
То же самое и про кнопки.

00:01:05.180 --> 00:01:09.785
Можно сделать кнопки больше, чтобы
было проще на них нажимать.

00:01:09.785 --> 00:01:13.155
Но для нашего примера
мы остановимся на элементах TextView.

00:01:13.155 --> 00:01:16.325
Давайте перейдем к XML Visualizer,
чтобы понять, как можно распределить

00:01:16.325 --> 00:01:17.005
данные элементы.

00:01:18.115 --> 00:01:20.545
Это код для
Тома, Тима и Тода.

00:01:20.545 --> 00:01:23.975
Три текстовых элемента находится
в вертикальном линейном макете, и

00:01:23.975 --> 00:01:25.389
вот как они выглядят
на устройстве.

00:01:26.570 --> 00:01:29.810
Сейчас я покажу вам, как можно
распределить эти три поля.

00:01:29.810 --> 00:01:31.060
Например, Том вверху.

00:01:31.060 --> 00:01:31.980
Тим здесь.

00:01:31.980 --> 00:01:33.910
И Тод в самом низу.

00:01:33.910 --> 00:01:37.950
Ясно, что настройка высоты атрибута
wrap_content не поможет.

00:01:37.950 --> 00:01:41.350
Мы узнали, как установить статическое
значение dp для высоты.

00:01:41.350 --> 00:01:44.510
Поэтому я установлю высоту,
например, в 200dp.

00:01:45.760 --> 00:01:48.340
Здорово!
Это дало намного больше места для Тома.

00:01:48.340 --> 00:01:51.320
Если я сделаю то же самое для
других элементов TextView,

00:01:51.320 --> 00:01:54.570
то они также распределятся по экрану
более равномерно.

00:01:54.570 --> 00:01:57.920
Однако такое решение сработает
только для устройства такого размера.

00:01:57.920 --> 00:02:01.510
Если мы возьмем планшет, как я показывала
ранее, то эти элементы все еще будут

00:02:01.510 --> 00:02:04.640
сгруппированы где-то в
левом верхнем углу.

00:02:04.640 --> 00:02:08.880
Другим способом установки высоты является
атрибут match_parent, изученный нами ранее

00:02:08.880 --> 00:02:11.750
Когда вы задаете значение match_parent
для элемента TextView по имени Том,

00:02:11.750 --> 00:02:15.540
берется высота всего родительского
элемента, т.е. всего экрана.

00:02:15.540 --> 00:02:19.230
Это выталкивает другие тестовые элементы
за экран так, что мы их даже не видим.

00:02:19.230 --> 00:02:20.930
Поэтому, не будем так делать.

00:02:20.930 --> 00:02:23.870
Значит пока у нас нет идей, ведь мы
попробовали wrap_content для высоты,

00:02:23.870 --> 00:02:25.490
которая имела фиксированное значение в dp.

00:02:25.490 --> 00:02:27.300
И попробовали match_parent.

00:02:27.300 --> 00:02:32.930
И ни один из этих способов не дал нам
нужный интервал для всех устройств.

00:02:32.930 --> 00:02:36.420
Давайте спросим Google о
возможном решении этой проблемы.

00:02:36.420 --> 00:02:38.360
Мы используем группу линейного макета.

00:02:38.360 --> 00:02:40.580
И хотим равномерно распределить
дочерние элементы.

00:02:40.580 --> 00:02:42.260
Поэтому давайте поищем ответ.

00:02:42.260 --> 00:02:44.680
Так, у нас
есть набор результатов поиска, но

00:02:44.680 --> 00:02:46.920
давайте нажмем на первый.

00:02:46.920 --> 00:02:49.358
Это ссылка на
сайт Stackoverflow.

00:02:49.358 --> 00:02:51.780
Это сайт вопросов и ответов, где
вы можете разместить вопросы и

00:02:51.780 --> 00:02:53.785
получить ответы от других
разработчиков Android.

00:02:53.785 --> 00:02:58.005
Я всегда им пользуюсь, если захожу
в тупик и нуждаюсь в помощи.

00:02:58.005 --> 00:03:00.515
Часто случается, что другие пользователи
уже задавали такой вопрос,

00:03:00.515 --> 00:03:01.975
который возникает у вас.

00:03:01.975 --> 00:03:05.425
Итак, здесь есть вопрос о том, как
равномерно распределить кнопки

00:03:05.425 --> 00:03:07.657
по ширине линейного макета.

00:03:07.657 --> 00:03:09.677
Это очень похоже на то,
что мы ищем,

00:03:09.677 --> 00:03:12.627
за исключением того, что мы работаем
с текстовыми элементами, а не с кнопками.

00:03:12.627 --> 00:03:15.877
И вместо ширины линейного макета
мы пытаемся распределить элементы по

00:03:15.877 --> 00:03:17.767
высоте такого линейного макета.

00:03:17.767 --> 00:03:20.710
Можно прочитать вопрос или
пропустить.

00:03:20.710 --> 00:03:23.070
Обычно я перехожу сразу к ответу.

00:03:23.070 --> 00:03:27.590
Это решение получило 88 голосов и
отмечено зеленым флажком.

00:03:27.590 --> 00:03:30.840
Здесь говорится о том, как
вы можете установить layout_width в 0dp и

00:03:30.840 --> 00:03:33.240
установить значение layout_weight
для каждой кнопки в 1.

00:03:33.240 --> 00:03:36.899
И это разделяет доступную
ширину поровну между кнопками.

00:03:37.910 --> 00:03:41.170
Вы можете не понять ответ полностью
на данном этапе, но это нормально.

00:03:41.170 --> 00:03:44.620
Ключевая фраза, которую мы поняли
из ответа, это линейный layout_weight.

00:03:44.620 --> 00:03:47.950
Мы не встречались с этим параметром ранее,
но это звучит важно в ответе.

00:03:47.950 --> 00:03:49.640
Поэтому давайте скопируем это и поищем

00:03:49.640 --> 00:03:52.005
в Google больше информации
о layout_weight.

00:03:52.005 --> 00:03:55.205
Давайте выполним поиск по
линейному макету layout_weight.

00:03:55.205 --> 00:03:57.605
Первый результат — это статья
про линейный макет

00:03:57.605 --> 00:04:00.085
на сайте developer.android.com,
так что давайте нажмем сюда.

00:04:01.285 --> 00:04:03.845
Это статья про
линейный макет.

00:04:03.845 --> 00:04:08.015
Мы уже изучили эту информацию сверху
об атрибуте ориентации Android,

00:04:08.015 --> 00:04:11.230
но здесь есть новая информация
о понятии Вес макета.

00:04:11.230 --> 00:04:14.270
Здесь также приведен пример внизу
экрана с кодом и

00:04:14.270 --> 00:04:15.650
снимком экрана.

00:04:15.650 --> 00:04:17.149
Я могла бы коротко рассказать вам о чем

00:04:17.149 --> 00:04:21.260
тут говорится, но вначале хочу дать вам
шанс прочитать этот документ.

00:04:21.260 --> 00:04:23.710
И попробовать это понять самим.

00:04:23.710 --> 00:04:26.180
Это будет очень похоже на то,
как вы будете решать проблемы

00:04:26.180 --> 00:04:28.220
после завершения данного курса.

00:04:28.220 --> 00:04:30.510
Вам предстоит искать
информацию в сети и

00:04:30.510 --> 00:04:33.350
пытаться понять, как эта информация может
быть использована для решения проблемы.

00:04:34.500 --> 00:04:37.340
Хорошо, это вид макета,
который есть у нас сейчас на устройстве.

00:04:37.340 --> 00:04:39.120
А это то, что мы хотим получить.

00:04:39.120 --> 00:04:42.780
Три текстовых элемента равномерно
распределены по высоте устройства.

00:04:42.780 --> 00:04:43.720
Чтобы этого добиться,

00:04:43.720 --> 00:04:46.760
прочтите статью о Линейном макете,
ссылку на которую мы приводим далее.

00:04:47.830 --> 00:04:48.980
Будет абсолютно нормально,

00:04:48.980 --> 00:04:52.490
если вы не поймете всего
в этой статье.

00:04:52.490 --> 00:04:55.390
Часто вам будет достаточно лишь
поверхностного понимания того,

00:04:55.390 --> 00:04:59.250
как концепции, приведенные в статье,
могут помочь вам в вашей работе.

00:05:00.320 --> 00:05:03.390
Затем от вас требуется представить
несколько идей, как можно создать

00:05:03.390 --> 00:05:05.100
желаемый макет в XML.

00:05:05.100 --> 00:05:07.550
Вам не нужно предоставлять
полный XML-код макета,

00:05:07.550 --> 00:05:10.420
потому что мы рассмотрим это вместе
в следующем видео.

00:05:10.420 --> 00:05:12.350
Однако здесь вы могли бы
написать пару предложений или

00:05:12.350 --> 00:05:16.920
пунктов о том, как информация в
статье может помочь в вашей проблеме.

