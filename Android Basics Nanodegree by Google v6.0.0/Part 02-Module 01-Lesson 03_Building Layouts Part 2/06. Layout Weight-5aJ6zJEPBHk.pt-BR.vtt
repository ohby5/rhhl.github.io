WEBVTT
Kind: captions
Language: pt-BR

00:00:00.929 --> 00:00:04.024
Para construir este layout,
primeiro pensaria nele conceitualmente,

00:00:04.264 --> 00:00:06.664
para ter uma idéia do que eu vou fazer

00:00:06.941 --> 00:00:08.246
antes de começar a programar.

00:00:08.873 --> 00:00:10.849
Primeiro, vemos que é
um <i>LinearLayout</i> vertical,

00:00:11.033 --> 00:00:13.089
porque os itens estão em uma coluna vertical.

00:00:13.606 --> 00:00:14.680
Temos três <i>views</i> filhas.

00:00:14.701 --> 00:00:17.003
Temos uma <i>ImageView</i>,
uma <i>TextView</i> e uma <i>TextView</i>.

00:00:17.920 --> 00:00:21.630
A primeira dica que eu dei foi para primeiro
determinar a largura de cada <i>view</i>.

00:00:22.658 --> 00:00:25.901
Como o layout ocupa toda
a largura e altura do dispositivo,

00:00:26.130 --> 00:00:29.206
este <i>LinearLayout</i> vertical tem uma
largura e altura de <i>match_parent</i>.

00:00:30.295 --> 00:00:33.550
Em seguida, para a <i>ImageView</i>, queremos
que ela seja tão larga quanto o pai,

00:00:33.821 --> 00:00:35.587
que é tão&nbsp;largo quanto o dispositivo.

00:00:35.920 --> 00:00:37.655
Então definimos como <i>match_parent</i>.

00:00:38.170 --> 00:00:39.446
O mesmo para as duas <i>TextViews</i>.

00:00:39.667 --> 00:00:42.455
Para terem a largura&nbsp;total do dispositivo,
definimos <i>match_parent</i>.

00:00:43.203 --> 00:00:45.027
Depois trabalhamos na altura de cada <i>view</i>.

00:00:45.330 --> 00:00:48.867
Estas duas <i>TextViews</i> são fáceis,
pois elas se modelam ao seu conteúdo.

00:00:49.446 --> 00:00:52.356
Então definimos <i>wrap_content</i>
para a altura de cada <i>TextView</i>.

00:00:53.089 --> 00:00:54.916
Também definimos os valores de&nbsp;peso&nbsp;para 0,

00:00:55.101 --> 00:00:57.113
pois não queremos que esses valores mudem,

00:00:57.372 --> 00:00:59.341
mesmo se houver espaço disponível no pai.

00:01:00.400 --> 00:01:01.840
A <i>ImageView</i> foi a parte mais difícil.

00:01:02.800 --> 00:01:05.144
Queremos que a altura
da imagem aumente ou&nbsp;diminua

00:01:05.187 --> 00:01:07.384
dependendo do espaço disponível no pai,

00:01:07.938 --> 00:01:10.406
que depende do tamanho da tela
disponível no dispositivo.

00:01:11.250 --> 00:01:12.824
Nós usamos pesos para solucionar isso.

00:01:13.200 --> 00:01:15.846
Ajustamos a altura da <i>ImageView</i>
para começar em 0 dp,

00:01:16.086 --> 00:01:17.450
mas damos um peso de 1.

00:01:18.153 --> 00:01:20.410
Como nenhuma das outras <i>views</i>
filhas têm valores de peso,

00:01:20.720 --> 00:01:24.467
então qualquer espaço disponível no pai
será dado a esta <i>ImageView</i>.

00:01:25.190 --> 00:01:27.618
E a razão para termos
definido a altura para 0 dp,

00:01:27.901 --> 00:01:29.575
é o fato de ser um
<i>LinearLayout</i> vertical.

00:01:29.827 --> 00:01:31.476
Ele é preenchido verticalmente.

00:01:32.018 --> 00:01:35.415
Não sabemos a altura ainda,
até que o valor de peso o determine.

00:01:36.547 --> 00:01:38.153
Fornecemos o link nas notas do instrutor

00:01:38.180 --> 00:01:39.581
e já vem com algum código.

00:01:39.969 --> 00:01:43.590
O posicionamento das <i>views</i> é incorreto,
então&nbsp;vamos solucionar isso.

00:01:43.590 --> 00:01:45.735
Vamos começar com <i>TextViews</i>,
pois elas são fáceis.

00:01:46.178 --> 00:01:49.353
Pode ver como essas <i>TextViews</i>
não acompanham a largura do dispositivo.

00:01:49.378 --> 00:01:50.381
Precisamos mudar isso.

00:01:50.810 --> 00:01:52.104
A largura deve ser <i>match_parent</i>.

00:01:53.261 --> 00:01:56.615
Assim ficou bem melhor,
agora o fundo esverdeado-azulado

00:01:56.793 --> 00:01:58.540
se estende por toda a largura do dispositivo.

00:01:59.286 --> 00:02:02.036
O mesmo com a <i>TextView</i> 
da fogueira na praia.

00:02:02.695 --> 00:02:05.329
Legal, a altura é <i>wrap_content</i>,
o que está correto.

00:02:05.821 --> 00:02:09.752
Agora temos todo esse espaço vertical
extra no <i>LinearLayout</i> vertical.

00:02:10.639 --> 00:02:13.366
A propósito, a largura e
altura do <i>LinearLayout</i>

00:02:13.384 --> 00:02:14.516
estão como <i>match_parent</i>,

00:02:14.726 --> 00:02:18.160
para que o layout acabe por se estender
a toda a altura e largura da tela.

00:02:18.780 --> 00:02:21.692
Para usar a altura extra no pai,

00:02:21.880 --> 00:02:24.098
vamos dá-la para uma <i>view</i> filha
com um valor de peso.

00:02:24.867 --> 00:02:28.203
Então vamos mudar a <i>ImageView</i>
para ela ter um valor de peso.

00:02:28.820 --> 00:02:31.120
Primeiro podemos definir a&nbsp;largura
para ser <i>match_parent</i>

00:02:31.200 --> 00:02:33.433
para que ela se estenda a toda
a largura do dispositivo.

00:02:34.430 --> 00:02:39.427
Então definimos a altura para&nbsp;0 dp e o peso para 1.

00:02:40.220 --> 00:02:42.633
E esta é a imagem desejada,
bom trabalho!

00:02:43.316 --> 00:02:44.935
Note que, se eu mudar os valores de peso

00:02:44.953 --> 00:02:47.920
para ser um número muito alto
como sete ou dez,

00:02:48.393 --> 00:02:50.356
realmente não muda a
visualização do dispositivo.

00:02:51.500 --> 00:02:54.141
Isso é porque ela é a única <i>view</i> filha com peso.

00:02:54.566 --> 00:02:57.240
Não importa se é um peso grande ou pequeno.

00:02:57.580 --> 00:03:01.686
Toda a altura extra no pai
será dada a esta <i>view</i> filha.

00:03:02.676 --> 00:03:06.332
Então vamos mudar isso para 1,
perfeito, bom trabalho!

