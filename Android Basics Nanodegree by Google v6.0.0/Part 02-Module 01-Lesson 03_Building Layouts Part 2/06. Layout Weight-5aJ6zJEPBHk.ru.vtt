WEBVTT
Kind: captions
Language: ru

00:00:00.920 --> 00:00:04.230
Итак, чтобы построить этот layout,
я хочу разобрать его теоретически,

00:00:04.230 --> 00:00:08.350
чтобы знать точно свою задачу
перед началом написания кода.

00:00:08.850 --> 00:00:11.890
Во-первых, сразу понятно, что это
линейный layout, так как элементы

00:00:11.890 --> 00:00:13.210
находятся в вертикальном столбце.

00:00:13.710 --> 00:00:14.880
У нас три дочерних view.

00:00:14.880 --> 00:00:17.110
Это imageview, textview 
и еще один textview.

00:00:17.910 --> 00:00:21.590
Первой моей подсказкой был совет
сначала определить ширину каждого view.

00:00:22.680 --> 00:00:26.130
Поскольку разметка занимает всю
ширину и высоту устройства,

00:00:26.130 --> 00:00:30.270
этот вертикальный линейный Layout имеет
ширину и высоту, равную match_parent.

00:00:30.270 --> 00:00:33.510
Imageview тоже должен быть равен
по ширине родительскому элементу,

00:00:33.510 --> 00:00:35.620
ширина которого равняется
ширине устройства.

00:00:35.920 --> 00:00:37.870
Поэтому мы установили
значение match_parent.

00:00:38.170 --> 00:00:39.670
Аналогично в случае с textview.

00:00:39.670 --> 00:00:41.768
Мы хотим, чтобы они соответствовали
ширине устройства

00:00:41.780 --> 00:00:43.390
поэтому их значение тоже match_parent.

00:00:43.390 --> 00:00:45.330
Теперь определим высоту
каждого элемента view.

00:00:45.330 --> 00:00:49.430
С этими двумя textview просто, потому что
их высота определена содержимым.

00:00:49.430 --> 00:00:53.080
Устанавливаем wrap_content для
высоты каждого textview.

00:00:53.080 --> 00:00:54.998
Значения веса устанавливаем
на ноль, так как

00:00:55.010 --> 00:00:56.740
мы не хотим, чтобы эти
значения не менялись,

00:00:56.740 --> 00:01:00.000
даже если в родительском элементе
есть доступное пространство.

00:01:00.400 --> 00:01:02.800
Самая сложная часть — настройка imageview.

00:01:02.800 --> 00:01:04.759
Нам нужно, чтобы высота изображения
увеличивалась

00:01:04.771 --> 00:01:06.891
или уменьшалась в зависимости
от доступного места

00:01:06.990 --> 00:01:10.129
в родительском элементе, что обусловлено
размером экрана устройства.

00:01:11.250 --> 00:01:13.190
Для этого мы используем значения веса.

00:01:13.190 --> 00:01:16.180
Задаем высоту imageview,
которая будет начинаться с 0 dp,

00:01:16.180 --> 00:01:18.160
но значение веса устанавливаем на один.

00:01:18.160 --> 00:01:20.720
Поскольку у остальных дочерних
элементов нет значения веса,

00:01:20.720 --> 00:01:24.350
все свободное пространство в родительском
элементе будет отдано imageview.

00:01:24.350 --> 00:01:27.920
А высоту мы задаем равной 0 dp
по той причине, что

00:01:27.920 --> 00:01:29.840
используем вертикальную линейную разметку.

00:01:29.840 --> 00:01:32.040
Заполнение происходит по вертикали.

00:01:32.040 --> 00:01:35.700
Высота элемента нам неизвестна,
пока она не определена значением веса.

00:01:36.530 --> 00:01:38.480
В инструкциях мы предоставили
вам эту ссылку,

00:01:38.480 --> 00:01:39.940
и в ней уже был некоторый код.

00:01:39.940 --> 00:01:43.590
Однако view расположены неправильно,
давайте исправим это.

00:01:43.590 --> 00:01:45.900
Предлагаю начать с textview,
потому что они проще.

00:01:45.900 --> 00:01:49.000
Как видите, данные textview не подогнаны
по общей ширине нашего устройства,

00:01:49.000 --> 00:01:50.510
поэтому нам необходимо это изменить.

00:01:50.810 --> 00:01:52.510
Ширина должна равняться match_parent.

00:01:53.010 --> 00:01:54.080
Так-то лучше.

00:01:54.480 --> 00:01:58.600
Теперь зеленовато-голубой фон
растянут по всей ширине устройства.

00:01:59.300 --> 00:02:02.170
Аналогично с textview
bonfire at the beach.

00:02:02.170 --> 00:02:03.180
Прекрасно.

00:02:03.180 --> 00:02:05.360
А высота равна wrap_content,
это правильно.

00:02:05.860 --> 00:02:09.650
Теперь у нас появилось все это лишнее
пространство в вертикальном linearlayout.

00:02:10.669 --> 00:02:13.340
А, между прочим, значение ширины
и высоты вертикальной разметки

00:02:13.340 --> 00:02:16.470
установлено как match parent для того,
чтобы она растянулась

00:02:16.470 --> 00:02:18.780
по всей высоте и ширине экрана.

00:02:18.780 --> 00:02:21.880
Для использования лишнего пространства
в родительском элементе

00:02:21.880 --> 00:02:24.880
мы отдадим его дочернему
со значением веса.

00:02:24.880 --> 00:02:28.820
Поэтому давайте изменим imageview так,
чтобы у него было значение веса.

00:02:28.820 --> 00:02:31.300
Сначала установим ширину равной
match_parent,

00:02:31.300 --> 00:02:33.390
чтобы она также расширялась
по ширине устройства.

00:02:34.430 --> 00:02:38.940
Затем зададим высоту в 0dp и ширину — 1.

00:02:38.940 --> 00:02:42.200
То, что мы и хотели.

00:02:42.200 --> 00:02:43.330
Отлично.

00:02:43.330 --> 00:02:45.556
Обратите внимание, что, если установить
значение веса

00:02:45.568 --> 00:02:47.400
на большое значение,
например семь или десять,

00:02:47.400 --> 00:02:50.410
вид устройства сильно не изменится.

00:02:51.500 --> 00:02:54.720
Потому что это единственный дочерний
элемент со значением веса, поэтому

00:02:54.720 --> 00:02:57.980
не имеет никакого значения, будь то
большая цифра или совсем маленькая.

00:02:57.980 --> 00:03:01.530
Вся лишняя высота в родительском элементе
перейдет к этому дочернему.

00:03:02.680 --> 00:03:04.290
Итак, давайте изменим значение на один.

00:03:05.500 --> 00:03:06.570
Отлично поработали.

