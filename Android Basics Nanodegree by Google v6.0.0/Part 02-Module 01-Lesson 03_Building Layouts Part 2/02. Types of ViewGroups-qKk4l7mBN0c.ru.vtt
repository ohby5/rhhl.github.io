WEBVTT
Kind: captions
Language: ru

00:00:00.430 --> 00:00:04.712
Итак, теперь мы знаем, что в группах
ViewGroup могут содержаться view.

00:00:04.712 --> 00:00:06.550
В каждой ViewGroup есть
определенные правила,

00:00:06.550 --> 00:00:09.070
по которым дочерние элементы
располагаются внутри группы.

00:00:09.070 --> 00:00:10.792
Для начала давайте обратимся
к LinearLayout.

00:00:11.292 --> 00:00:13.390
В этой ViewGroup дочерние элементы могут

00:00:13.402 --> 00:00:15.820
располагаться в вертикальной колонке.
Вот так.

00:00:17.310 --> 00:00:20.990
Обратите внимание, что нет ограничений
по количеству TextView и ImageView.

00:00:20.990 --> 00:00:25.200
Мы можем добавлять их столько,
сколько захотим, как и другие типы view.

00:00:25.200 --> 00:00:27.220
Итак, это Томми, а это его брат Тимми.

00:00:27.720 --> 00:00:30.426
А это Айви и ее сестра-близнец Айрин.

00:00:30.926 --> 00:00:35.780
При LinearLayout дочерние элементы также
могут располагаться в горизонтальном ряду,

00:00:35.780 --> 00:00:37.210
вот так.

00:00:38.400 --> 00:00:41.140
А если вы хотите устроить девичник,
я только за.

00:00:42.240 --> 00:00:45.140
Это Айви, Айрин и Изабелла.

00:00:45.140 --> 00:00:47.630
Окей, вот и все про LinearLayout.

00:00:47.630 --> 00:00:48.880
Довольно просто, так ведь?

00:00:48.880 --> 00:00:52.525
Можно выстроить вертикальный
столбец или горизонтальный ряд.

00:00:52.525 --> 00:00:54.847
А теперь у нас появился папа,
RelativeLayout.

00:00:54.847 --> 00:00:57.085
При RelativeLayout точно так же
применяются свои правила

00:00:57.085 --> 00:00:59.475
расположения дочерних элементов на экране.

00:00:59.575 --> 00:01:03.545
К примеру, их можно расположить
относительно родительского.

00:01:03.545 --> 00:01:05.455
Итак, если это родительский ViewGroup,

00:01:05.455 --> 00:01:09.040
мы можем выровнять дочерний TextView
относительно родителя внизу,

00:01:09.040 --> 00:01:12.270
а дочерний ImageView сверху
над родителем на экране.

00:01:12.270 --> 00:01:14.680
С помощью этого метода
можно также расположить view

00:01:14.680 --> 00:01:16.360
относительно краев и центра родителя.

00:01:17.330 --> 00:01:19.870
Еще одна полезная функция RelativeLayout —

00:01:19.870 --> 00:01:23.531
возможность расположить одни
дочерние элементы относительно других.

00:01:24.031 --> 00:01:25.960
Итак, если это родительская ViewGroup,

00:01:25.960 --> 00:01:30.310
то ImageView можно поместить
слева от родителя,

00:01:30.310 --> 00:01:33.760
а затем расположить дочерний TextView
справа от этого изображения.

00:01:33.760 --> 00:01:37.780
После этого этот TextView
располагается справа от ImageView

00:01:37.780 --> 00:01:40.180
и одновременно ниже первого TextView.

00:01:40.180 --> 00:01:42.490
Теперь вы понимаете, как поместить
некоторые дочерние view

00:01:42.490 --> 00:01:46.200
относительно родительских
или относительно друг друга.

00:01:47.010 --> 00:01:50.590
Мы провели быстрый обзор функций
LinearLayout и RelativeLayout.

00:01:50.590 --> 00:01:54.170
Теперь вы можете решить, какой вариант
подходит вам в зависимости от типа layout,

00:01:54.170 --> 00:01:55.920
который вы хотите использовать
в приложении.

00:01:56.640 --> 00:01:58.290
А теперь давайте с помощью XML посмотрим,

00:01:58.290 --> 00:02:00.310
как группа ViewGroup
может включать другие view.

00:02:01.150 --> 00:02:05.960
В данном примере мы начнем с ViewGroup,
в которой есть два дочерних TextView.

00:02:06.700 --> 00:02:09.100
Это немного более длинный фрагмент,
чем мы привыкли видеть,

00:02:09.100 --> 00:02:11.850
но я бы хотела, чтобы вы кое-что
увидели на примере этого кода.

00:02:12.350 --> 00:02:16.870
Подскажу: родительский код выделен
красным, а код дочернего TextView — синим.

00:02:17.370 --> 00:02:20.030
Мы собрали вместе эти фрагменты,
чтобы вы изучили код

00:02:20.030 --> 00:02:21.740
и записали свои наблюдения в этом поле.

