WEBVTT
Kind: captions
Language: en-US

00:00:00.300 --> 00:00:02.670
We've been making a guest list so
far for the party.

00:00:02.670 --> 00:00:05.660
&gt;&gt; Wait, this is the guest list for
the birthday party, right, Catherine?

00:00:05.660 --> 00:00:06.700
&gt;&gt; Yeah.

00:00:06.700 --> 00:00:08.109
&gt;&gt; I really hope I'm on this list.

00:00:09.140 --> 00:00:10.470
&gt;&gt; Well, we'll have to see about that.

00:00:11.930 --> 00:00:14.010
&gt;&gt; Wow, I feel really small about that.

00:00:14.010 --> 00:00:15.160
&gt;&gt; Well, speaking about small,

00:00:15.160 --> 00:00:18.010
let's talk about the size
of views on a screen.

00:00:18.010 --> 00:00:21.180
&gt;&gt; Oh, we've used the fixed written
height, which is the dp, right?

00:00:21.180 --> 00:00:23.720
&gt;&gt; Yeah, the width and height.

00:00:23.720 --> 00:00:25.640
And we could also set,
wrap content, with view.

00:00:25.640 --> 00:00:28.275
&gt;&gt; Right, which is a strange way of
saying that the view is going to

00:00:28.275 --> 00:00:29.684
wrap itself around the content.

00:00:29.684 --> 00:00:30.549
So the content grows large,

00:00:30.549 --> 00:00:32.880
the view grows large, the content
is small and the view grows small.

00:00:32.880 --> 00:00:35.300
&gt;&gt; Yeah, and there's actually a third
one which is called, match parent.

00:00:35.300 --> 00:00:37.930
&gt;&gt; That seems a little strange.

00:00:37.930 --> 00:00:41.840
That sounds like a dating website for
single parents.

00:00:41.840 --> 00:00:42.600
&gt;&gt; Not quite.

00:00:42.600 --> 00:00:47.370
Match parent means that the view will
be As wide or as tall as the parent.

00:00:47.370 --> 00:00:48.446
&gt;&gt; Oh, so that makes sense.

00:00:48.446 --> 00:00:51.400
I am a view, I have a parent and
my width and

00:00:51.400 --> 00:00:53.840
height is going to be
the same as my parent.

00:00:53.840 --> 00:00:55.920
Okay.
&gt;&gt; Exactly, so that's to summarize,

00:00:55.920 --> 00:00:59.800
the different values that you can
set for a size of a view is width.

00:00:59.800 --> 00:01:01.090
Fixed dp for width and height.

00:01:01.090 --> 00:01:02.910
&gt;&gt; Correct,
you can also do wrap_content.

00:01:02.910 --> 00:01:04.986
And the next one we're
going to try out is

00:01:04.986 --> 00:01:06.780
&gt;&gt; match_parent.

00:01:06.780 --> 00:01:10.160
Here are some examples of how setting
different widths on the child views

00:01:10.160 --> 00:01:13.770
in a linear layout can affect
the final user interface.

00:01:13.770 --> 00:01:17.780
In this example we set each child
view to have a fixed width of 200 dp.

00:01:19.070 --> 00:01:22.590
If the content inside each
view is greater than 200 DP

00:01:22.590 --> 00:01:26.330
then you run risk of cutting
some content off like this.

00:01:26.330 --> 00:01:30.460
In this example we set each child
view to have a width a wrap content.

00:01:31.600 --> 00:01:33.500
Now all the content content is shown,
but

00:01:33.500 --> 00:01:36.930
the width of each view really varies
based on what's inside each view.

00:01:38.090 --> 00:01:42.020
In this example, we set the width of
each child view to be match parent.

00:01:42.020 --> 00:01:46.650
Now you see that the width of each child
is as wide as the parent view group.

00:01:46.650 --> 00:01:48.540
Regardless of the content inside of it.

00:01:49.680 --> 00:01:54.070
Now those same values can also be
applied for the height of each view.

00:01:54.070 --> 00:01:59.240
In this example we set the height of
this child text view to be 200 dp.

00:01:59.240 --> 00:02:01.570
If the content inside
it is taller than that.

00:02:01.570 --> 00:02:04.250
Then you run the risk of cutting
off some of the content.

00:02:05.400 --> 00:02:09.919
In this example, we set the height of
the child text view to be wrap content.

00:02:09.919 --> 00:02:12.040
That way all the content will
be displayed on screen and

00:02:12.040 --> 00:02:15.650
nothing will be cut off because
the size of the text view is dependent

00:02:15.650 --> 00:02:16.920
on the content inside of it.

00:02:17.940 --> 00:02:22.790
In this example, we set the height of
the child text view to be match parent.

00:02:22.790 --> 00:02:25.300
That way the child view is as
tall as the parent itself,

00:02:25.300 --> 00:02:26.720
regardless of the content inside it.

00:02:27.730 --> 00:02:29.980
Let's open the XML visualizer now and

00:02:29.980 --> 00:02:32.980
try to be more like our
parents in the code.

00:02:32.980 --> 00:02:36.670
We're providing you a link to the XML
visualizer with some starter code

00:02:36.670 --> 00:02:37.910
in the instructor notes below.

00:02:39.050 --> 00:02:41.570
In this case,
the LinearLayout is the root view

00:02:41.570 --> 00:02:44.460
of this layout because it's
the first and outermost view.

00:02:45.580 --> 00:02:49.390
If we set match_parent for the width and
height of this root view, and

00:02:49.390 --> 00:02:51.870
we set this as the main
layout of our app,

00:02:51.870 --> 00:02:55.400
then this linear layout will be as
tall and wide as the device screen.

00:02:56.840 --> 00:03:00.300
I can show you by setting
the background of this linear layout

00:03:00.300 --> 00:03:04.400
to be a non-transparent color.

00:03:04.400 --> 00:03:07.100
If I set a gray background color
on this linear layout Then,

00:03:07.100 --> 00:03:11.660
you can see how the gray extends
the full width and height of the device.

00:03:11.660 --> 00:03:13.370
Now, what happens if I try
to change the width or

00:03:13.370 --> 00:03:15.980
height of these text
views to be match parent?

00:03:15.980 --> 00:03:18.450
To make it clear where
the bounds of each view are,

00:03:18.450 --> 00:03:21.510
I'm going to set a background
color on each of the views.

00:03:21.510 --> 00:03:25.660
Now I'm going to change the height of
this text view to be match parent.

00:03:25.660 --> 00:03:28.270
By the way, you spell it match_parent.

00:03:28.270 --> 00:03:32.530
And now you see that this text view
takes up the full height of the parent.

00:03:32.530 --> 00:03:35.550
Unfortunately, it pushes
everything else off the screen, so

00:03:35.550 --> 00:03:36.580
we don't really want that.

00:03:36.580 --> 00:03:38.320
So let's change it back to wrap content.

00:03:39.330 --> 00:03:39.950
Okay.

00:03:39.950 --> 00:03:42.539
So let's change the width now to be
match parent and see what it does.

00:03:43.750 --> 00:03:48.580
Now the width of the TextView is as
wide as the parent, which in turn,

00:03:48.580 --> 00:03:50.260
is as wide as the device screen.

00:03:51.750 --> 00:03:54.940
If I change the other TextViews
to also be match_parent

00:03:54.940 --> 00:03:58.610
You can see that it also starts to
take up the full width of the parent.

00:03:58.610 --> 00:04:01.740
I also want to point out one more thing.

00:04:01.740 --> 00:04:04.860
Every time you see an attribute that
starts with layout underscore, like

00:04:04.860 --> 00:04:10.080
layout height or layout width, these are
actually view group layout parameters.

00:04:10.080 --> 00:04:13.480
These are used by the parent view
group to determine the size and

00:04:13.480 --> 00:04:14.849
the position of these views.

00:04:16.190 --> 00:04:19.110
Meanwhile, the other attributes
like background, text size, and

00:04:19.110 --> 00:04:23.630
text are handled by the TextView
in terms of styling its own view.

00:04:23.630 --> 00:04:27.360
But these view group layout
parameters are handled by the parent.

00:04:27.360 --> 00:04:30.460
Now it's your turn to try
different width and height values.

00:04:30.460 --> 00:04:33.890
For the link to the XML visualizer
with some starter code,

00:04:33.890 --> 00:04:35.820
see the instructor notes below.

00:04:35.820 --> 00:04:38.970
Try to change the width and
height values of each TextView.

00:04:38.970 --> 00:04:43.270
You can set a fixed dp value,
wrap-content, or match_parent.

00:04:43.270 --> 00:04:46.730
Remember that for each view, the width
and height values don't have to match.

00:04:46.730 --> 00:04:48.600
When you're done,
check this box to continue.

