WEBVTT
Kind: captions
Language: ru

00:00:00.300 --> 00:00:02.670
Я составляла список гостей для вечеринки.

00:00:02.670 --> 00:00:05.660
— Это список гостей на день рождения,
не так ли, Катерина?

00:00:05.660 --> 00:00:06.700
— Да.

00:00:06.700 --> 00:00:08.109
— Надеюсь, я есть в этом списке.

00:00:09.140 --> 00:00:10.470
— Ну, надо подумать.

00:00:11.930 --> 00:00:14.010
— Я чувствую себя неловко.

00:00:14.010 --> 00:00:15.160
— Хорошо.

00:00:15.160 --> 00:00:18.010
Давайте поговорим о размере
представлений на экране.

00:00:18.010 --> 00:00:21.180
— Мы использовали фиксированную
высоту в dp, правильно?

00:00:21.180 --> 00:00:22.820
— Да, ширину и высоту.

00:00:23.320 --> 00:00:25.640
Мы также можем задать
обтекание контента для представления.

00:00:25.640 --> 00:00:28.475
— Да, странный способ
сказать, что представление должно

00:00:28.475 --> 00:00:29.684
охватывать весь контент.

00:00:29.684 --> 00:00:32.149
Контент растет — растет и представление,
контент маленький —

00:00:32.149 --> 00:00:33.249
представление уменьшается.

00:00:33.249 --> 00:00:36.069
— Да, есть и третий вариант:
соответствие родительскому представлению.

00:00:36.200 --> 00:00:37.330
— Кажется немного странным.

00:00:37.330 --> 00:00:41.240
Звучит как сайт знакомств для
одиноких родителей.

00:00:41.840 --> 00:00:42.900
— Не совсем.

00:00:42.900 --> 00:00:45.282
Это означает, что
представление будет совпадать

00:00:45.294 --> 00:00:47.270
по ширине или высоте с родительским.

00:00:47.370 --> 00:00:48.446
— Да, это имеет смысл.

00:00:48.646 --> 00:00:51.800
Я представление, у меня есть родитель,
и моя ширина и высота будут такими же,

00:00:51.800 --> 00:00:53.840
как у родительского представления.

00:00:53.840 --> 00:00:55.920
— Точно. Давайте обобщим.

00:00:55.920 --> 00:00:59.800
Различные значения, которые можно
задать для ширины представления,

00:00:59.800 --> 00:01:01.490
фиксированные в dp для ширины и высоты.

00:01:01.490 --> 00:01:03.710
— Правильно.
Также можно использовать wrap_content.

00:01:03.710 --> 00:01:05.385
А еще мы собираемся попробовать значение

00:01:05.385 --> 00:01:06.480
match_parent.

00:01:06.780 --> 00:01:10.160
Вот несколько примеров, как различные
настройки ширины дочерних представлений

00:01:10.160 --> 00:01:13.270
в линейной разметке могут влиять
на конечный интерфейс пользователя.

00:01:13.770 --> 00:01:15.852
В этом примере мы задаем
для каждого дочернего

00:01:15.864 --> 00:01:18.180
представления фиксированную ширину 200 dp.

00:01:19.070 --> 00:01:22.590
Если контент в каждом
представлении больше 200 dp,

00:01:22.590 --> 00:01:25.830
вы рискуете обрезать его часть, как здесь.

00:01:26.330 --> 00:01:28.882
В этом примере мы задаем
для каждого дочернего представления

00:01:28.894 --> 00:01:30.860
ширину wrap content.

00:01:31.600 --> 00:01:34.000
Теперь показан весь контент,
но ширина каждого представления

00:01:34.000 --> 00:01:37.430
изменяется в зависимости от его контента.

00:01:38.090 --> 00:01:42.020
В этом примере мы задаем для ширины
значение match parent.

00:01:42.020 --> 00:01:46.650
Теперь ширина дочерних представлений
равна ширине родительской группы.

00:01:46.650 --> 00:01:48.540
Независимо от контента внутри них.

00:01:49.680 --> 00:01:54.070
Такие же значения можно применить
и для высоты представлений.

00:01:54.070 --> 00:01:58.740
В этом примере мы задаем для высоты
дочернего представления значение 200 dp.

00:01:59.240 --> 00:02:01.570
Если контент в представлении
выше этого значения,

00:02:01.570 --> 00:02:04.250
вы рискуете обрезать часть контента.

00:02:05.400 --> 00:02:07.893
В этом примере мы задаем
для высоты дочернего

00:02:07.905 --> 00:02:09.919
представления значение wrap content.

00:02:10.019 --> 00:02:12.140
Таким образом, весь контент будет
показан на экране,

00:02:12.140 --> 00:02:15.650
и никакая часть не обрезается, поскольку
размер текстового представления зависит

00:02:15.650 --> 00:02:16.920
от контента внутри него.

00:02:17.940 --> 00:02:20.616
В этом примере мы задаем
для высоты дочернего представления

00:02:20.628 --> 00:02:22.790
значение match parent.

00:02:22.990 --> 00:02:25.300
Дочернее представление совпадает
по высоте с родительским,

00:02:25.300 --> 00:02:26.720
независимо от контента внутри него.

00:02:27.730 --> 00:02:29.980
Давайте откроем XML Visualizer

00:02:29.980 --> 00:02:32.980
и попробуем больше походить на наших
родителей в этом коде.

00:02:32.980 --> 00:02:36.670
Мы предоставили ссылку на XML Visualizer
с начальным кодом

00:02:36.670 --> 00:02:37.910
в примечаниях инструктора ниже.

00:02:39.050 --> 00:02:41.770
В данном случае LinearLayout —
это корневое представление разметки,

00:02:41.770 --> 00:02:44.660
потому что оно первое и внешнее.

00:02:45.580 --> 00:02:47.762
Если задать значение
match_parent для ширины и высоты

00:02:47.774 --> 00:02:49.690
этого корневого представления и задать его

00:02:49.790 --> 00:02:52.270
как основную разметку для приложения,
то эта линейная разметка

00:02:52.270 --> 00:02:55.800
будет соответствовать высоте
и ширине экрана устройства.

00:02:56.840 --> 00:03:00.300
Чтобы показать это, я задам
для фона этой разметки

00:03:00.300 --> 00:03:04.400
непрозрачный цвет.

00:03:04.400 --> 00:03:07.100
Если я задам серый цвет фона
для этой разметки,

00:03:07.100 --> 00:03:11.660
вы увидите, как серый цвет занимает
всю ширину и высоту экрана.

00:03:11.660 --> 00:03:13.370
Что произойдет, если я изменю ширину или

00:03:13.370 --> 00:03:15.980
высоту этих текстовых
представлений на значение match parent?

00:03:15.980 --> 00:03:18.450
Чтобы ясно видеть
границы каждого представления,

00:03:18.450 --> 00:03:21.510
я задам цвет фона для каждого из них.

00:03:21.510 --> 00:03:25.660
Теперь изменяю высоту этого
текстового представления на match parent.

00:03:25.660 --> 00:03:28.270
Пишется как match_parent.

00:03:28.270 --> 00:03:32.530
Видим, что теперь это представление
соответствует по высоте родительскому.

00:03:32.530 --> 00:03:35.550
К сожалению, оно вытолкнуло
с экрана все остальное,

00:03:35.550 --> 00:03:36.580
так что нам это не нужно.

00:03:36.580 --> 00:03:38.320
Давайте вернемся к значению wrap content.

00:03:39.330 --> 00:03:40.350
Хорошо.

00:03:40.350 --> 00:03:43.339
Теперь изменим значение ширины на
match parent и посмотрим на результат.

00:03:43.750 --> 00:03:46.153
Теперь ширина текстового
представления равна

00:03:46.165 --> 00:03:48.580
ширине родительского,
которое в свою очередь

00:03:48.580 --> 00:03:50.260
совпадает по ширине с экраном устройства.

00:03:51.750 --> 00:03:54.940
Если я изменю для других представлений
значения на match_parent,

00:03:54.940 --> 00:03:58.610
они тоже будут соответствовать
по ширине родительскому.

00:03:59.110 --> 00:04:01.740
Хочу обратить внимание еще на один момент.

00:04:01.740 --> 00:04:04.860
Когда вы видите атрибут, который
начинается с layout и подчеркивания,

00:04:04.860 --> 00:04:07.612
например layout_height или layout_width,
это атрибуты разметки

00:04:07.624 --> 00:04:10.080
группы представлений.

00:04:10.180 --> 00:04:13.480
Они используются родительской группой
представлений для определения размера

00:04:13.480 --> 00:04:14.849
и расположения этих представлений.

00:04:16.190 --> 00:04:19.110
А другие атрибуты,
такие как фон, размер шрифта и текст,

00:04:19.110 --> 00:04:23.630
определяют вид отдельного представления.

00:04:23.630 --> 00:04:26.960
Но эти параметры разметки группы
представлений обрабатываются родительским.

00:04:27.360 --> 00:04:30.460
Теперь ваш черед поэкспериментировать
с различными значениями ширины и высоты.

00:04:30.460 --> 00:04:33.890
Ссылка на XML Visualizer
с начальным кодом приведена

00:04:33.890 --> 00:04:35.220
в примечаниях инструктора ниже.

00:04:35.320 --> 00:04:38.970
Попробуйте изменить значения ширины и
высоты каждого из текстовых представлений.

00:04:38.970 --> 00:04:43.270
Можно задать фиксированное значение в dp,
значение wrap_content или match_parent.

00:04:43.270 --> 00:04:46.730
Помните, что значения ширины и
высоты не обязательно должны совпадать.

00:04:46.730 --> 00:04:49.100
После завершения
установите этот флажок, чтобы продолжить.

