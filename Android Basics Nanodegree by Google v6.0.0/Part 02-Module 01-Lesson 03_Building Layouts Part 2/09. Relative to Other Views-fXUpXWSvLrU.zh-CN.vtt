WEBVTT
Kind: captions
Language: zh-CN

00:00:00.420 --> 00:00:03.469
当用相对于兄弟视图的相对位置来定位子视图时

00:00:03.469 --> 00:00:06.190
你可以对它们的位置添加约束条件

00:00:06.190 --> 00:00:09.885
例如 一个 TextView 必须高于另一个 TextView

00:00:09.885 --> 00:00:14.090
或一个 ImageView 必须在另一个 TextView 的左边

00:00:14.090 --> 00:00:17.280
所有这些约束条件让我想起了建立一个座位图表

00:00:17.280 --> 00:00:17.900
为了一个晚宴

00:00:18.910 --> 00:00:21.380
我们要举办一个生日庆祝聚会

00:00:21.380 --> 00:00:23.540
让我们看一下座位图表

00:00:23.540 --> 00:00:25.140
我们邀请这些人

00:00:25.140 --> 00:00:28.330
过来吃晚饭 但是人们的座位要有限制条件

00:00:28.330 --> 00:00:30.550
有些人必须坐在他们的最好的朋友旁边

00:00:30.550 --> 00:00:33.490
还有一些称之为半敌半友的人

00:00:33.490 --> 00:00:36.120
他们可能不希望坐在某些人旁边

00:00:36.120 --> 00:00:39.860
考虑到这些 我想出了这个布局

00:00:39.860 --> 00:00:41.880
Kunal Ben 和 Kagure 坐在这边

00:00:41.880 --> 00:00:45.900
Natalie Lyla 和 我坐在这下面 Amy Omoju 和 Jenny 坐在这个角落里

00:00:45.900 --> 00:00:49.400
那么我们可以在XML中使用多个TextView 

00:00:49.400 --> 00:00:51.040
来建立这个相对座位安排吗？

00:00:51.040 --> 00:00:53.270
我们知道如何把一个视图放在角落

00:00:53.270 --> 00:00:57.398
所以 Lyla TextView 可以与父视图的左边缘和下边缘对齐

00:00:57.398 --> 00:01:01.390
Jennie TextView 可以与父视图的右边缘和下边缘对齐

00:01:01.390 --> 00:01:04.510
对于 Ben 我们将它与父视图的上部边缘对齐

00:01:04.510 --> 00:01:07.280
顺便说一下 我们假设父视图是占满整个屏幕的

00:01:07.280 --> 00:01:11.360
所以我们设置宽度和高度为 match_parent

00:01:11.360 --> 00:01:12.430
回到 Ben

00:01:12.430 --> 00:01:14.550
他在父视图的上部

00:01:14.550 --> 00:01:16.970
我们要把他水平居中

00:01:16.970 --> 00:01:20.320
正式的说 可以称这三个视图为锚定视图

00:01:20.320 --> 00:01:23.750
因为每个人都是根据与这些人的相对位置来定位的

00:01:23.750 --> 00:01:27.670
这些人不会移动 不管其他人在哪里坐着

00:01:27.670 --> 00:01:29.360
让我们加入其它的人

00:01:29.360 --> 00:01:32.810
我们把 Kunal 放在这 他在 Ben 的左边

00:01:32.810 --> 00:01:35.259
但是 在 XML 中如何表达呢？

00:01:35.259 --> 00:01:39.552
没有特定的属性来表示一个视图应该在

00:01:39.552 --> 00:01:40.655
Ben 这个视图的左边

00:01:40.655 --> 00:01:43.363
所有的 Android 属性名称都通用 

00:01:43.363 --> 00:01:46.940
适用于任何你想要的用例

00:01:46.940 --> 00:01:49.410
我们想把 Kunal 放在 Ben 的左边 

00:01:49.410 --> 00:01:52.580
我们还不知道哪个属性可以完成这个任务

00:01:52.580 --> 00:01:53.768
幸运的是

00:01:53.768 --> 00:01:58.780
RelativeLayout 有一个属性 android: layout_toLeftof

00:01:58.780 --> 00:02:03.520
这意味着 Kunal 这个 TextView 应该在一些视图的左边

00:02:03.520 --> 00:02:08.020
指定一个视图的方法是使用视图的ID

00:02:08.020 --> 00:02:10.000
我们可以将视图ID名称分配给任何视图

00:02:10.000 --> 00:02:13.110
并非一定要针对 RelativeLayout

00:02:13.110 --> 00:02:16.275
它们可以被定位在 RelativeLayout 或者 LinearLayout 中

00:02:16.275 --> 00:02:18.200
或者任意其他的视图组中

00:02:18.200 --> 00:02:21.710
在 Ben 的 TextView 中 我们可以加入这样的属性 android:id

00:02:21.710 --> 00:02:23.860
它的值就是 ID 名称

00:02:23.860 --> 00:02:29.500
它的格式是以符号“@”开始的  “@”表示 Android 应用中的资源

00:02:29.500 --> 00:02:34.263
在我们的应用 我们也见过 “@” 这个符号指代图像

00:02:34.263 --> 00:02:36.516
例如在应用程序 Drawable 中

00:02:36.516 --> 00:02:38.950
然后我们指定资源的类型

00:02:38.950 --> 00:02:41.017
在这个实例中 资源类型是 ID 

00:02:41.017 --> 00:02:44.197
还需要添加 “+” 符号 因为这是我们第一次

00:02:44.197 --> 00:02:45.219
声明这个id

00:02:45.219 --> 00:02:50.120
加一条斜线 我们就得到了这个视图的名称 

00:02:50.120 --> 00:02:53.190
这是我们为 Ben 这个视图所选择的名称

00:02:53.190 --> 00:02:55.240
我们称它为 ben_text_view

00:02:56.320 --> 00:02:59.470
基本要求是这个名称不能包含任何空格

00:02:59.470 --> 00:03:00.937
这就是为什么我们在这里使用下划线符号

00:03:00.937 --> 00:03:02.883
它必须以字母开头

00:03:02.883 --> 00:03:06.229
它不能包含任何奇怪的标点符号

00:03:07.250 --> 00:03:08.990
可以使用数字

00:03:08.990 --> 00:03:14.500
在这个实例中 我们把Ben 视图的ID 赋值为 ben_text_view

00:03:14.500 --> 00:03:16.130
以后我们可以参考这个方法

00:03:16.130 --> 00:03:20.460
在 Kunal TextView 中加入属性 layout_toLeftof

00:03:20.460 --> 00:03:22.920
我们可以设定它在 Ben TextView 的左边

00:03:24.190 --> 00:03:28.390
通过 “@id” 来使用 Ben TextView 的ID

00:03:28.390 --> 00:03:32.322
我们不需要使用 “+” 符号 因为我们已经定义了那个ID

00:03:32.322 --> 00:03:34.692
这是我们第二次使用 ID

00:03:34.692 --> 00:03:38.910
当你想出一个视图的 ID 名称时 需要确认这个名称是不是唯一的

00:03:38.910 --> 00:03:42.550
一般 挑选一些相关内容是有帮助的

00:03:42.550 --> 00:03:45.920
这就是如何将 Kunal 放在 Ben 左边

00:03:45.920 --> 00:03:49.740
例如 我们想把 Omoju 放在 Jennie 上面

00:03:49.740 --> 00:03:51.760
因为我们需要参考 Jennie

00:03:51.760 --> 00:03:53.980
所以我们为 Jennie 建立一个 ID

00:03:53.980 --> 00:03:58.240
指定 Jennie TextView 的这个属性并给它赋值

00:03:58.240 --> 00:04:01.880
ID 名称是 jennie_text_view

00:04:01.880 --> 00:04:04.550
在 Omoju TextView 中加入这些属性

00:04:04.550 --> 00:04:09.680
这就是说 Omoju 应该在 jennie_text_view 的上部

00:04:09.680 --> 00:04:11.380
这是我们创建的ID

00:04:12.570 --> 00:04:13.850
我们来看这个 XML 的布局

00:04:13.850 --> 00:04:18.010
我们有一个相对布局 它的 width 和 height 的值为 match_parent

00:04:18.010 --> 00:04:19.870
于是就有了 lyla_text_view

00:04:19.870 --> 00:04:22.267
与父视图的左下角对齐

00:04:22.267 --> 00:04:23.600
正如我们看到的

00:04:24.770 --> 00:04:26.314
这个 jennie_text_view

00:04:26.314 --> 00:04:29.010
与父视图的右下角对齐

00:04:29.010 --> 00:04:29.720
它在这

00:04:31.300 --> 00:04:32.876
这个 ben_text_view

00:04:32.876 --> 00:04:35.900
与父视图的上边缘对齐

00:04:35.900 --> 00:04:38.290
还对它进行居中

00:04:38.290 --> 00:04:39.880
这些是锚定视图

00:04:39.880 --> 00:04:42.460
其他的视图可以根据它们来定位

00:04:42.460 --> 00:04:45.720
注意到对于每个视图的我已经添加了一个 ID

00:04:45.720 --> 00:04:48.040
这是 Ben TextView 的 ID

00:04:48.040 --> 00:04:50.970
我们可以把 Kunal TextView 放在的 Ben 左侧

00:04:50.970 --> 00:04:56.930
我们把 Kunal 放在父视图的上部 Ben TextView的左侧

00:04:56.930 --> 00:04:58.525
我在这里为 Ben 使用视图 ID

00:04:58.525 --> 00:05:02.025
我们把 Omoju TextView 放在 Jenny 的上面

00:05:02.025 --> 00:05:04.915
Omoju 与父视图的右边缘对齐

00:05:04.915 --> 00:05:06.435
并且在 Jenny TextView 的上面

00:05:07.505 --> 00:05:08.245
很好 酷

00:05:08.245 --> 00:05:11.465
在此布局中 很多朋友被正确的定位

00:05:12.925 --> 00:05:15.475
在下面的讲师注释中 我们给你提供了一个链接

00:05:15.475 --> 00:05:19.270
包含可视化的 XML 的源代码

00:05:19.270 --> 00:05:20.910
继续修改这个 XML 

00:05:20.910 --> 00:05:24.200
直到每个人都可以实现自己想要的布局

00:05:24.200 --> 00:05:26.840
一些视图已经被正确的定位

00:05:26.840 --> 00:05:28.060
你需要固定这些视图

00:05:29.310 --> 00:05:32.490
顺便说一句 我们需要引入大量的新属性

00:05:32.490 --> 00:05:34.680
但是你不需要记住所有的属性

00:05:34.680 --> 00:05:36.446
你可以随时来查看

00:05:36.446 --> 00:05:40.460
你可以为一个 RelativeLayout 搜索一个布局参数

00:05:40.460 --> 00:05:45.260
如果你点击第一个链接 你就进入这样的一个文档

00:05:45.260 --> 00:05:48.870
这些是你可以用到子视图中的所有 XML 属性

00:05:48.870 --> 00:05:53.290
在 RelativeLayout 中 你可以用这些属性来定位子视图

00:05:53.290 --> 00:05:54.755
有一些你已经非常熟悉了

00:05:54.755 --> 00:06:00.370
Layout_above alignParentbottom alignParentright 等等

00:06:00.370 --> 00:06:00.890
注意 出于教学的目的

00:06:00.890 --> 00:06:05.510
可视化 XML 可能不支持所有的这些属性

00:06:05.510 --> 00:06:08.630
然而 当你用 Android Studio 开发应用时

00:06:08.630 --> 00:06:10.050
你可以用所有的这些属性

