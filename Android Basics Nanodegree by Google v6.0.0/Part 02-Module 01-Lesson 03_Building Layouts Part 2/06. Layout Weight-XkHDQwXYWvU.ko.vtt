WEBVTT
Kind: captions
Language: ko

00:00:00.970 --> 00:00:05.250
지난 퀴즈에서
우리는 Tom, Tim, Todd

00:00:05.250 --> 00:00:08.240
텍스트 뷰에 개인적인
공간을 주는 방법을 알아보았죠.

00:00:08.240 --> 00:00:12.470
기기의 세로에서 수직으로
균일하게 띄어써서 말이죠.

00:00:13.380 --> 00:00:15.740
우리는 고정 dp값을 설정했지만

00:00:15.740 --> 00:00:19.900
태블릿 같은 더 긴 기기로
바꾸면 소용이 없었어요.

00:00:19.900 --> 00:00:24.300
match_parent도 시도해봤지만
Tom 텍스트뷰를 정말 크게 만들었죠.

00:00:24.300 --> 00:00:27.390
그래서 다른 두 텍스트를
기기 밖으로 몰아냈고요.

00:00:27.390 --> 00:00:31.440
우리는 linear layout weight에 대해
조사하기 시작했어요.

00:00:31.440 --> 00:00:34.660
문서에서,
수직 linear layout을 위해

00:00:34.660 --> 00:00:37.030
우리가 children을 균등하게
공백을 띄우려면

00:00:37.030 --> 00:00:42.550
높이를 0dp로, 무게는 1로
각각의 children을 설정해야 해요.

00:00:43.590 --> 00:00:46.480
무게 값을 child 뷰에 주는 것은

00:00:46.480 --> 00:00:49.290
이것에 중요도 값을 넣는 것과 같아요.

00:00:49.290 --> 00:00:50.930
더 높은 무게 값을 가지면

00:00:50.930 --> 00:00:55.520
parent 왼쪽에 공간이 있다면
더 많은 공백을 가집니다.

00:00:56.280 --> 00:00:57.510
예를 들어,

00:00:57.510 --> 00:01:01.920
수직 linear layout이
이렇게 수직으로 채워졌다면

00:01:01.920 --> 00:01:04.590
이는 linear layout이
추가 공간을 갖고 있다는 것이고

00:01:04.590 --> 00:01:08.900
이는 무게 값을 가진
children 뷰로 분배될 겁니다.

00:01:08.900 --> 00:01:11.020
만약 child가 매우 높은
무게 값을 가진다면

00:01:11.020 --> 00:01:14.450
더 많은 가능한 높이는
child에게 주어지겠죠.

00:01:14.450 --> 00:01:16.890
child가 매우 작은
무게 값을 가진다면

00:01:16.890 --> 00:01:19.900
더 적은 가능한 높이가
child에 부여될 거예요.

00:01:19.900 --> 00:01:21.340
어떻게 보이는지 보여드리죠.

00:01:21.340 --> 00:01:24.130
이 child의 높이를
0dp로 설정할 것이고

00:01:24.130 --> 00:01:26.020
weight는 1로 설정할 거예요.

00:01:26.020 --> 00:01:29.642
linear layout은 먼저 Tim,
Todd TextView를 놓아요.

00:01:29.642 --> 00:01:33.880
왜냐하면 그것들은 안의 요소에 기반한
고정 높이를 갖고 있기 때문이죠.

00:01:33.880 --> 00:01:38.019
그리고 초기 높이가 0dp인
Tom TextView가 있지만

00:01:38.019 --> 00:01:38.880
무게는 1이에요.

00:01:38.880 --> 00:01:41.266
다른 children 중 어느것도
무게 값을 가지지 않아요.

00:01:41.266 --> 00:01:45.000
왜냐하면 특정화 하지 않으면
기본 무게 값은 0이기 때문이죠.

00:01:45.000 --> 00:01:47.150
이것은 무게 값이 있는
유일한 child입니다.

00:01:47.150 --> 00:01:50.480
parent는 화면의 남은
모든 높이를

00:01:50.480 --> 00:01:51.900
Tom TextView에 줍니다.

00:01:51.900 --> 00:01:55.610
그래서 Tom TextView가
매우 거대하게 보이죠.

00:01:55.610 --> 00:01:58.810
이제 다음 children에도
무게 값을 부여해봅시다.

00:01:58.810 --> 00:02:02.660
각 child는 높이 0dp,
무게 1을 가집니다.

00:02:02.660 --> 00:02:04.980
이는 linear layout이
거쳐야 할 과정입니다.

00:02:04.980 --> 00:02:08.250
이는 각 뷰의 높이를
이해하게 해줍니다.

00:02:08.250 --> 00:02:10.889
이 뷰들의 높이는
0dp에서 시작합니다.

00:02:10.889 --> 00:02:13.950
parent의 가능한 남은 높이는

00:02:13.950 --> 00:02:16.270
기본적으로 화면의 전체 높이입니다.

00:02:16.270 --> 00:02:20.450
이것은 화면의 전체 높이를
무게의 합, 3으로 나눕니다.

00:02:20.450 --> 00:02:24.215
그리고 가능한 높이의
삼분의 일을 Tom 텍스트 뷰에,

00:02:24.215 --> 00:02:27.220
삼분의 일을 Tim 텍스트 뷰에,

00:02:27.220 --> 00:02:29.680
삼분의 일을 
Todd 텍스트 뷰에 줍니다.

00:02:29.680 --> 00:02:32.840
무게 값 덕분에
더 큰 화면 기기에서도

00:02:32.840 --> 00:02:37.250
이것들은 기기의 높이에서
균등하게 띄어져 있어요.

00:02:37.250 --> 00:02:40.130
무게값을 더 높은 것으로 바꾸면

00:02:40.130 --> 00:02:44.920
parent는 Tim 텍스트 뷰에
더 많은 높이를 줄 겁니다.

00:02:44.920 --> 00:02:47.310
이것을 더 높은
무게 값으로 바꿀 수 있어요.

00:02:47.310 --> 00:02:51.380
이것이 높이를 어떻게
계속 얻는지 볼 수 있습니다.

00:02:51.380 --> 00:02:54.240
이 경우에 Tim TextView는
8의 무게를 가져요.

00:02:54.240 --> 00:02:56.910
Tom은 1의 무게,
Todd는 1의 무게를 가지고요.

00:02:56.910 --> 00:03:00.170
무게의 소계는 8, 9, 10이죠.

00:03:00.170 --> 00:03:03.930
parent는 가능한 높이를
10으로 나눕니다.

00:03:03.930 --> 00:03:06.710
십분의 일이 Tom에게 가고,
십분의 팔이 Tim에게 가고,

00:03:06.710 --> 00:03:08.730
십분의 일이 Todd에게 갑니다.

00:03:09.450 --> 00:03:13.020
수직 linear layout에
3개의 child TextView가 있어요.

00:03:13.020 --> 00:03:15.410
초기 높이를 0dp로 설정해요.

00:03:15.410 --> 00:03:19.400
그들은 0 높이에서
기기의 최상단에 붙어있죠.

00:03:19.400 --> 00:03:23.290
그것은 parent가 남은 높이를
모두 갖고 있다는 뜻입니다.

00:03:23.290 --> 00:03:26.740
각 child TextView에
무게 1을 준다면

00:03:26.740 --> 00:03:32.250
가능한 parent 높이는 각각
children에게 똑같이 분배돼죠.

00:03:32.810 --> 00:03:35.400
수평 linear layout에도
똑같이 적용되죠.

00:03:35.400 --> 00:03:37.550
3개의 텍스트뷰가 있어요.

00:03:37.550 --> 00:03:39.820
너비 0dp로 시작합니다.

00:03:39.820 --> 00:03:43.300
이것은 parent가 모든 여분
너비를 갖고 있다는 뜻입니다.

00:03:43.300 --> 00:03:46.770
무게 값 1을 각 child 뷰에 넣으면

00:03:46.770 --> 00:03:49.020
parent에 남은 너비가

00:03:49.020 --> 00:03:52.710
각각의 child에게 똑같이
분배될 것입니다.

00:03:52.740 --> 00:03:54.910
이것이 1의 무게를 가질 필요는 없어요.

00:03:54.910 --> 00:03:57.740
이것은 3이나 다른 값이 될 수 있죠.

00:03:57.740 --> 00:03:59.960
0의 무게를 가질 수도 있고요.

00:03:59.960 --> 00:04:03.690
뷰가 0의 무게를 가진다면
그것은 parent에 남은

00:04:03.690 --> 00:04:06.290
가능한 공간에 의해
변하지 않는다는 겁니다.

00:04:06.290 --> 00:04:09.560
이는 기본적으로 당신이 준
너비와 높이를 가질 겁니다.

00:04:09.560 --> 00:04:11.880
제가 찾아내고 싶은 것은,
높이나 너비를 0으로

00:04:11.880 --> 00:04:14.370
지정할 경우입니다.

00:04:14.370 --> 00:04:15.800
수직 linear layout을 가진다면

00:04:15.800 --> 00:04:18.950
당신은 이렇게 수직으로
linear layout을 채웁니다.

00:04:18.950 --> 00:04:20.390
높이가 얼마가 될지 모른다면

00:04:20.390 --> 00:04:24.130
높이를 처음에 0dp로 설정하고
무게 값을 주세요.

00:04:24.620 --> 00:04:28.760
수평 linear layout도 비슷하게
이것은 수평으로 채웁니다.

00:04:28.760 --> 00:04:31.920
아직 child 뷰들의 너비를 몰라요.

00:04:31.920 --> 00:04:35.420
그럼 너비를 0dp로 두고,
이것에 무게 값을 주세요.

00:04:36.660 --> 00:04:39.820
기본적으로 무게 값을
뷰에 부여함으로써

00:04:39.820 --> 00:04:44.840
이것이 parent 뷰가 얼마나
큰지에 따라 늘어나게 할 수 있어요.

00:04:44.840 --> 00:04:47.980
이것은 작은 기기와
큰 기기에서 가능한 공간을

00:04:47.980 --> 00:04:50.129
모두 채우는 좋은 방법이죠.

00:04:50.620 --> 00:04:54.450
레이아웃의 무게가 유용한
실생활의 예가 몇 개 있어요.

00:04:54.980 --> 00:04:57.210
이건 Google Hangouts 앱입니다.

00:04:57.210 --> 00:05:01.750
이것으로 친구와 채팅하거나 그들에게
졸린 팽귄을 보낼 수 있어요.

00:05:01.750 --> 00:05:05.620
여기 화면의 아래에서
메시지를 보낼 수 있어요.

00:05:05.620 --> 00:05:08.950
이 레이아웃을 조금 더
가까이서 살펴봅시다.

00:05:08.950 --> 00:05:13.490
이것은 수평 줄에 놓여있으므로
수평 linear layout입니다.

00:05:13.490 --> 00:05:14.827
이는 ImageView와
텍스트를 입력할 수 있는

00:05:14.827 --> 00:05:19.090
EditText 필드, 또 다른 
ImageView로 이루어져 있어요.

00:05:19.090 --> 00:05:22.520
각 뷰의 높이는
사실 wrap_content예요.

00:05:22.520 --> 00:05:25.410
왜냐하면 이는 안의 요소를
덮어싸고 있기 때문이죠.

00:05:25.410 --> 00:05:28.480
이 두 이미지 뷰의 너비는
wrap_content예요.

00:05:28.480 --> 00:05:30.980
이것은 안의 요소만큼만
넓기 때문이죠.

00:05:31.460 --> 00:05:34.870
우리는 0의 무게를 줄게요.
parent에 남은 공간이 많다고 해도

00:05:34.870 --> 00:05:37.890
이것이 이것보다 더 커지길
바라지 않으니까요.

00:05:37.890 --> 00:05:41.100
무게를 0로 설정하는 것은
너비와 높이에 warp_content가

00:05:41.100 --> 00:05:43.280
되게 하고, 이는 변하지 않아요.

00:05:43.280 --> 00:05:46.900
우리는 이것을 늘려서 더 큰 
기기 화면에서는 더 커지게,

00:05:46.900 --> 00:05:50.640
더 작은 기기에서는
작아지게 줄이고 싶어요.

00:05:50.640 --> 00:05:54.250
너비를 0dp로 설정하고
무게를 1로 설정해요.

00:05:54.250 --> 00:05:58.054
이것은 parent linear layout이
이 이미지를 먼저,

00:05:58.054 --> 00:05:59.630
그 다음에 이걸 배치하죠.

00:05:59.630 --> 00:06:04.580
그리고 기기에 남은 너비는
이 뷰에 주어질 것입니다.

00:06:05.050 --> 00:06:07.000
여기 지도 앱에 예가 있습니다.

00:06:07.000 --> 00:06:09.690
이것은 장소에 대한 상세 페이지입니다.

00:06:09.690 --> 00:06:12.480
여기 Call, Save, Website
세 버튼이 있어요.

00:06:12.480 --> 00:06:14.450
그것들을 더 자세히 봅시다.

00:06:14.450 --> 00:06:19.030
이것들을 아이콘이 첨부된
TextView로 만들 수 있어요.

00:06:19.030 --> 00:06:21.370
더 자세한 사항은
instructor note에 있어요.

00:06:21.370 --> 00:06:23.540
그건 정말 접점입니다.

00:06:23.540 --> 00:06:26.520
이 예에서, 이것들이
텍스트 뷰라고 가정합시다.

00:06:26.520 --> 00:06:29.710
각 텍스트 뷰의 높이는
wrap_content가 됩니다.

00:06:29.710 --> 00:06:33.000
이 안의 요소의 높이를
감싸버리기 때문입니다.

00:06:33.000 --> 00:06:34.980
너비는 좀 더 까다로워요.

00:06:34.980 --> 00:06:38.485
우리는 각 TextVIew가
화면의 가로에 균등하게

00:06:38.485 --> 00:06:42.470
기기가 크고 작은 것에 따라서
퍼져있길 바라요.

00:06:42.470 --> 00:06:44.980
우리는 세 텍스트 뷰가
화면 왼쪽 모서리에

00:06:44.980 --> 00:06:46.950
모여있지 않았으면 해요.

00:06:47.450 --> 00:06:50.640
children을 균일하게 띄우려면
그들에게 같은 무게를 줘야해요.

00:06:50.640 --> 00:06:53.580
0의 너비와 1의 무게를
각각에 설정합니다.

00:06:54.058 --> 00:06:57.350
이 방법에서 parent 안의
가능한 너비는 세 children에게

00:06:57.350 --> 00:06:58.950
똑같이 나누어질 것입니다.

00:06:59.790 --> 00:07:02.170
마지막 예는 이메일 앱이에요.

00:07:02.170 --> 00:07:05.940
이는 새로운 메시지를 쓸 수 있는
Gmail의 작성 화면입니다.

00:07:06.460 --> 00:07:09.770
이는 수직 linear layout이에요.
요소들이 열 안에 있기 때문이죠.

00:07:10.230 --> 00:07:13.380
이것은 다른 네 개의
EditText 필드로 만들어졌어요.

00:07:13.380 --> 00:07:15.836
지금 각 child의 너비는
match_parent예요.

00:07:15.836 --> 00:07:18.760
왜냐하면 우리는 이것이 기기의
너비 전체에 퍼져있길 바라니까요.

00:07:18.760 --> 00:07:22.845
높이는, 우리가 세 EditText필드를
wrap_content로 설정하여

00:07:22.845 --> 00:07:25.475
안의 텍스트를 감싸게 해요.

00:07:25.475 --> 00:07:30.025
parent에 높이가 더 있더라도
사이즈가 커지는 걸 바라지 않으므로

00:07:30.025 --> 00:07:32.620
무게는 0으로 설정해요.

00:07:32.620 --> 00:07:35.870
하지만 마지막 EditText 필드는
당신이 메시지를 쓰는 곳이고

00:07:35.870 --> 00:07:40.710
사용자들이 할머니께 긴 편지를
쓸 수 있는 공간을 주고 싶어요.

00:07:40.710 --> 00:07:44.870
높이가 0dp이 되게 설정하고
무게를 1로 설정해요.

00:07:44.870 --> 00:07:46.700
parent에 남은 높이가 있으면

00:07:46.700 --> 00:07:50.070
그것은 이 child EditText
필드에 주어질 것입니다.

00:07:50.070 --> 00:07:54.120
더 큰 화면의 기기에서,
이메일 쓰는 필드는 더 길어지고

00:07:54.120 --> 00:07:57.540
더 작은 기기에서는
더 작아지겠죠.

00:07:58.620 --> 00:08:00.150
이제 여러분이 연습할 차례입니다.

00:08:00.150 --> 00:08:03.840
앞으로 나아가서 XML 비주얼라이저에
이 레이아웃을 만들기 바라요.

00:08:03.840 --> 00:08:06.550
아래에 우리가 제공한 XML로
시작할 수 있습니다.

00:08:06.550 --> 00:08:08.140
여기 몇 가지 팁이 있어요.

00:08:08.140 --> 00:08:12.197
이런 것에 끼어들 때,
먼저 각 뷰의 너비를 고려하고

00:08:12.197 --> 00:08:15.500
다음에, 각 뷰의 높이를
고려해보세요.

00:08:15.500 --> 00:08:18.700
이미지가 parent linear layout의
남은 높이를 차지하도록

00:08:18.700 --> 00:08:19.730
만드세요.

00:08:19.730 --> 00:08:22.550
작은 화면기기에서는
더 적은 높이를 차지하고,

00:08:22.550 --> 00:08:25.110
더 큰 화면 기기에서는
더 많은 높이를 차지하죠.

00:08:25.110 --> 00:08:26.390
좋아요, 해보세요.

00:08:26.390 --> 00:08:28.300
다 되었으면 이 박스를 체크하세요.

