WEBVTT
Kind: captions
Language: ko

00:00:00.330 --> 00:00:01.840
자, 우리는 이 리니어 레이아웃이

00:00:01.840 --> 00:00:03.090
어떻게 내부에서
2개의 소산 텍스트뷰를

00:00:03.090 --> 00:00:05.110
포함하는지 보았습니다.

00:00:05.170 --> 00:00:06.730
어쨋든, 이 백그라운드 색깔들은

00:00:06.730 --> 00:00:08.540
여러분이 이 2개의 소산 텍스트뷰가

00:00:08.540 --> 00:00:10.190
모체의 안에 있다는 것을 이해하는데

00:00:10.190 --> 00:00:13.280
도움을 주는 교구입니다.

00:00:13.280 --> 00:00:15.670
빨간색과 파란색은 여러분이 뷰에서

00:00:15.670 --> 00:00:17.860
백그라운드 색으로
특별히 설정하지 않는 한

00:00:17.860 --> 00:00:19.810
실제로 기기에서는
나타나지 않을 것입니다.

00:00:19.850 --> 00:00:21.110
제가 말씀 드린 것을
보여드리기 위해서,

00:00:21.110 --> 00:00:22.840
XML Visualizer로 가봅시다.

00:00:22.870 --> 00:00:25.290
XML Visualizer의 코드를 보면,

00:00:25.290 --> 00:00:27.550
이것이 장치에서
나타나는 모습입니다.

00:00:27.550 --> 00:00:29.380
먼저, 여기에 리니어 레이아웃
뷰그룹이 있습니다.

00:00:29.380 --> 00:00:31.710
백그라운드 색이
설정돼 있지 않기 때문에

00:00:31.710 --> 00:00:33.840
투명한 색으로 보입니다.

00:00:33.850 --> 00:00:36.680
첫 번째 소산은 방문자 목록을
설정하는 텍스트뷰입니다.

00:00:36.680 --> 00:00:38.840
이것은 여기 상위에서 나타납니다.

00:00:38.840 --> 00:00:41.370
두 번째 소산은,
쿠나르라고 적혀있죠,

00:00:41.370 --> 00:00:44.040
첫 번째 텍스트뷰의
아래에서 나타납니다.

00:00:44.040 --> 00:00:47.540
제가 이 텍스트뷰를 복사해서
여기 아래에 붙인다면,

00:00:47.540 --> 00:00:49.770
무슨 일이 일어날까요?

00:00:49.770 --> 00:00:51.920
네, 또 다른 쿠나르라고
적혀 있는 텍스트뷰가

00:00:51.920 --> 00:00:54.290
처음 생겼던 것
바로 밑에 나타납니다.

00:00:54.290 --> 00:00:56.660
자, 우리가 더 많은
텍스트뷰를 추가할수록

00:00:56.660 --> 00:00:58.430
텍스트뷰들은 차례로
목록에서 나타나는

00:00:58.430 --> 00:01:01.020
패턴을 보이는 것 같습니다.

00:01:01.570 --> 00:01:03.330
이제 코드를 좀 더 유심히 봅시다.

00:01:03.330 --> 00:01:05.415
꺽쇠괄호가 열려있고

00:01:05.415 --> 00:01:07.990
뷰 이름인 리니어 레이아웃이 있어요.

00:01:07.990 --> 00:01:12.020
그리고 속성의 목록들이 있고,
그 뒤에는 꺽쇠괄호가 닫힙니다.

00:01:12.020 --> 00:01:14.980
이것이 리니어 레이아웃의
여는 태그이기 때문에

00:01:14.980 --> 00:01:16.940
사선이 없습니다.

00:01:16.940 --> 00:01:19.140
닫는 태그는
여기 아래에 있습니다.

00:01:19.140 --> 00:01:21.270
소산인 요소들을 여는 태그와

00:01:21.270 --> 00:01:24.120
닫는 태그 사이에
넣으려 했기 때문이죠.

00:01:24.120 --> 00:01:25.920
하지만 예를 들어, 이 텍스트 뷰에서,

00:01:25.920 --> 00:01:28.210
이 안에는 소산이 없기 때문에

00:01:28.210 --> 00:01:31.320
우리는 여기에 자립태그를
사용할 수 있습니다.

00:01:31.330 --> 00:01:33.130
여기에 있는 텍스트 뷰와

00:01:33.130 --> 00:01:35.350
이곳에 있는
텍스트뷰도 마찬가지 입니다.

00:01:35.350 --> 00:01:38.160
그러므로 뷰그룹이 소산 뷰를 가질 때,

00:01:38.160 --> 00:01:42.850
이러한 것들을 여는 태그와
닫는 태그 사이에 삽입해야 합니다.

00:01:42.850 --> 00:01:45.040
지금 여러분이 
주목해야 하는 또 다른 것은

00:01:45.040 --> 00:01:48.480
“android:orientation=vertical”에 있는
속성입니다.

00:01:48.480 --> 00:01:50.140
우리는 이것을 본 적이 없으니,

00:01:50.140 --> 00:01:51.490
제가 이전에 보여드렸던 것처럼,

00:01:51.490 --> 00:01:54.130
안드로이드 문서를 봅시다.

00:01:54.130 --> 00:01:59.065
새로운 검색창에서
android orientation을 검색했습니다.

00:01:59.075 --> 00:02:01.225
첫 번째 결과는
리니어 레이아웃에 관한 것이네요.

00:02:01.225 --> 00:02:03.615
이것은 developer.android.com
웹사이트에 있습니다.

00:02:03.615 --> 00:02:04.655
이것을 클릭해보겠습니다.

00:02:04.655 --> 00:02:07.505
텍스트뷰 문서처럼,
이것은 조금 압도적입니다.

00:02:07.505 --> 00:02:09.705
이 텍스트의 대다수는
무시해도 됩니다.

00:02:09.705 --> 00:02:11.865
우리는 이것이 리니어
레이아웃을 위한 페이지라는 것을

00:02:11.865 --> 00:02:13.630
확인할 필요만 있으니까요

00:02:13.630 --> 00:02:16.580
스크롤 다운을 하겠습니다.
XML 속성을 보세요.

00:02:17.210 --> 00:02:21.470
android orentation이라고 적힌
속성을 찾아보겠습니다.

00:02:21.580 --> 00:02:22.390
여기 있네요.

00:02:22.390 --> 00:02:24.740
더 많은 세부사항을
보기 위해서 클릭하겠습니다.

00:02:25.390 --> 00:02:26.880
설명에는 이 속성의 레이아웃이

00:02:26.880 --> 00:02:28.146
세로줄로 되어야 하는지

00:02:28.146 --> 00:02:29.903
아니면 가로줄로 되어야 하는지를

00:02:29.903 --> 00:02:31.670
결정짓는다고 나와있습니다.

00:02:31.670 --> 00:02:32.660
세로줄로 나타내려면

00:02:32.660 --> 00:02:34.216
가치가 수직적으로 되어야 하는 것처럼,

00:02:34.216 --> 00:02:35.773
이 속성의 가치는 가로줄로 되기 위해서

00:02:35.773 --> 00:02:37.870
수평적이어야 합니다.

00:02:37.870 --> 00:02:40.230
그리고 여기에는 이 2개의
가치를 열거했습니다.

00:02:40.230 --> 00:02:42.190
멋지군요. 현재 우리의 코드는

00:02:42.190 --> 00:02:45.530
android orentation이
수직적이라고 나타내고 있습니다.

00:02:45.530 --> 00:02:49.410
이것은 왜 뷰가 세로로 
나타나는 지를 보여주는 것입니다.

00:02:49.410 --> 00:02:51.090
이제 여러분의 호기심을
충족시키기 위해서,

00:02:51.090 --> 00:02:53.690
우리는 다른 가치를
시도해 보겠습니다.

00:02:53.690 --> 00:02:56.490
orientation을 수평적으로 설정하고

00:02:56.490 --> 00:02:57.960
무슨 일이 일어나는지 보겠습니다.

00:02:57.960 --> 00:02:59.910
코드로 들어가서
수직적인 가치를 지우겠습니다.

00:02:59.910 --> 00:03:02.150
이것을 수평적이 되도록
입력하겠습니다.

00:03:02.150 --> 00:03:05.300
보세요, 이제 뷰는
수평적인 줄로 되어있습니다.

00:03:05.610 --> 00:03:06.810
여러분에 대해서는
잘 모르지만,

00:03:06.810 --> 00:03:09.310
제 손님 목록을 수평적으로
읽는 것은 정말 맘에 안드네요.

00:03:09.310 --> 00:03:12.000
하지만 수평적인 리니어 레이아웃을

00:03:12.000 --> 00:03:15.040
사용하기에 유용한 경우가 많이 있죠.

00:03:15.040 --> 00:03:17.510
예를 들어, 아이템 목록을 만든다면,

00:03:17.510 --> 00:03:19.480
왼쪽에 이미지를 두고

00:03:19.480 --> 00:03:21.970
설명을 오른쪽에 두는 게 낫죠.

00:03:21.970 --> 00:03:24.820
잠시 후에, 여러분이 이것을
직접 시도해 볼 시간을 드리겠지만,

00:03:24.820 --> 00:03:28.030
먼저 제가 이 추가적인 코드의
예를 보여드리겠습니다.

00:03:28.030 --> 00:03:31.130
이것은 XML namespace
declaration입니다.

00:03:31.150 --> 00:03:33.310
여기에서 안드로이드에 속하는

00:03:33.310 --> 00:03:36.020
모든 속성을 명시하기 위해서

00:03:36.020 --> 00:03:38.190
우리는 이 namespace를
사용했습니다.

00:03:38.220 --> 00:03:40.930
그래서 이것들이 “andriod:”로
시작하는 것입니다.

00:03:40.940 --> 00:03:43.000
이것은 이 특정한
URL을 위한 약칭인데,

00:03:43.000 --> 00:03:45.220
안드로이드에서는 독특한 것이죠.

00:03:45.220 --> 00:03:48.400
여러분은 실제로 여러분만의
속성을 만들 수 있습니다.

00:03:48.400 --> 00:03:50.530
두 개의 속성이
다른 작용을 가지고 있지만

00:03:50.530 --> 00:03:52.510
같은 이름을 가지고 있는 것으로 인해서

00:03:52.510 --> 00:03:55.100
이름이 충돌하는 것을 막기 위해,

00:03:55.100 --> 00:03:56.685
우리는 항상 이것들이

00:03:56.685 --> 00:03:58.375
안드로이드 속성을 나타내는 접두사인

00:03:58.375 --> 00:04:01.980
“android:”를
여기에 추가할 것입니다.

00:04:02.430 --> 00:04:03.970
그러므로 이 XML namespace
declaration을

00:04:03.970 --> 00:04:06.970
여러분의 XML 파일에 있는
루트뷰의 여는 태그에서

00:04:06.970 --> 00:04:10.790
추가하는 것을 항상 기억하세요.

00:04:11.710 --> 00:04:12.910
자, 이제는 여러분의 차례입니다.

00:04:12.910 --> 00:04:14.510
이제 여러분이 리니어 레이아웃으로

00:04:14.510 --> 00:04:16.850
실험을 해 보시길 바랍니다.

00:04:16.860 --> 00:04:18.500
이 세로줄에 더 많은 아이템을 적기 위해서

00:04:18.500 --> 00:04:20.230
더 많은 텍스트 뷰를 추가하세요.

00:04:20.230 --> 00:04:22.390
여러분의 파티를 위한 특별손님목록에

00:04:22.390 --> 00:04:24.370
누구의 이름을 넣으실 건가요?

00:04:24.370 --> 00:04:28.114
또한 리니어 레이아웃
orientation 속성을 바꿔보세요.

00:04:28.114 --> 00:04:29.454
이것이 수직적으로 또는 수평적으로

00:04:29.454 --> 00:04:31.256
설정할 수 있다는 것을
잊지 마시길 바랍니다.

