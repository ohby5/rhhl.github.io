WEBVTT
Kind: captions
Language: ru

00:00:01.884 --> 00:00:04.763
В вашем приложении есть
пример использования <b>LinearLayout</b>?

00:00:04.763 --> 00:00:10.611
Даже здесь, этот набор из трех карточек -
горизонтальный <b>LinearLayout</b>,

00:00:10.611 --> 00:00:16.463
где мы просто добавили три карточки
в качестве дочерних <b>views</b>.

00:00:16.463 --> 00:00:23.810
Установили нулевую ширину,
а вес <b>layout</b> взяли за единицу.

00:00:23.810 --> 00:00:29.569
Разумеется, во время работы программы
layout подается команда занять

00:00:29.569 --> 00:00:35.523
как можно больше веса и
равномерно распределить веса

00:00:35.523 --> 00:00:42.100
в зависимости от относительных весов
дочерних views этой группы.

00:00:42.100 --> 00:00:43.400
Итак, это один из примеров.

00:00:43.401 --> 00:00:47.420
А вот другой, новые и обновленные игры.

00:00:47.420 --> 00:00:50.110
И кнопка <b>more</b>,
которая является заголовком группы,

00:00:50.110 --> 00:00:52.910
это также и простой
горизонтальный линейный <b>layout</b>.

00:00:52.910 --> 00:00:54.980
Так что для простых элементов нет нужды

00:00:54.980 --> 00:00:57.740
писать собственные <b>layouts</b>.

00:00:57.740 --> 00:01:01.310
Не стоит использовать <b>RelativeLayout</b>
повсеместно в силу его большей,

00:01:01.310 --> 00:01:05.980
нежели у <b>LinearLayout</b>,
универсальности, к примеру.

00:01:05.980 --> 00:01:08.700
Для простых элементов это чересчур.

00:01:09.800 --> 00:01:11.748
Итак, когда дизайнер дает вам макет,

00:01:11.748 --> 00:01:15.660
с чего начать разработку приложения?

00:01:15.660 --> 00:01:19.660
Надеюсь, что, как мы уже говорили ранее,
в такой момент это уже не один макет.

00:01:19.660 --> 00:01:23.640
По меньшей мере, два-три макета,
показывающие, как дизайн будет меняться

00:01:25.200 --> 00:01:29.880
между маленькими и большими экранами.

00:01:29.880 --> 00:01:33.560
Далее я хочу определить
строительные блоки.

00:01:33.560 --> 00:01:37.680
Если речь идет о некой карточке,
которая появляется во многих местах

00:01:37.680 --> 00:01:41.000
в приложении, то не обязательно начинать
с создания большого числа вариантов

00:01:41.000 --> 00:01:45.740
одной и той же карточки.

00:01:45.740 --> 00:01:49.240
В зависимости от того, нужно ли показать
маленькое или большое изображение, или,

00:01:49.240 --> 00:01:52.930
может быть, однострочный заголовок,
вместо двухстрочного.

00:01:52.930 --> 00:01:57.258
Итак, я пытаюсь определить эти блоки
и встроить их как самостоятельные классы,

00:01:57.258 --> 00:02:02.580
самостоятельные <b>layouts</b>,
а затем начать разработку на этой основе.

00:02:02.580 --> 00:02:07.484
То есть начинаем с TextView,
ImageView, счетчика

00:02:07.484 --> 00:02:11.055
и не будем брать блоки меньшего размера.

00:02:11.055 --> 00:02:16.771
Затем вы сможете продолжить
работу с этими малыми блоками

00:02:16.771 --> 00:02:22.450
и выстроить блоки крупнее
на все той же основе.

00:02:22.450 --> 00:02:26.390
И замечательно то, что, даже если
вы потратите чуть больше времени вначале,

00:02:26.390 --> 00:02:32.440
затем все станет проще,
особенно, если дизайн последовательный

00:02:32.440 --> 00:02:37.280
в плане разворачивания приложения
и добавления функциональности.

00:02:37.280 --> 00:02:41.472
Если дизайн последователен,
то вы и дальше будете встречать

00:02:41.472 --> 00:02:44.461
одни и те же блоки в разных конфигурациях,
снова и снова.

00:02:44.461 --> 00:02:49.789
Именно так окупается изначальное вложение,
разработка нового экрана

00:02:49.789 --> 00:02:55.430
не является для вас
совершенно новой задачей.

00:02:55.430 --> 00:03:01.190
Скорее, 50, 60, 70% работы уже сделано,
может понадобиться корректировка цвета,

00:03:01.190 --> 00:03:05.450
или, может быть, оформления,
а может и не понадобиться.

00:03:05.450 --> 00:03:10.272
Если дизайн последовательный,
то внедрение упрощается в силу того,

00:03:10.272 --> 00:03:14.098
что вы это уже делали.

00:03:14.098 --> 00:03:19.903
Становится легче делать редизайн,
просто даже на визуальном уровне.

00:03:19.903 --> 00:03:24.099
Если вы хотите скорректировать цвета,
настроить оформление,

00:03:24.099 --> 00:03:28.941
или же добавить что-то вроде
эффекта биения при нажатии чего-либо,

00:03:28.941 --> 00:03:31.880
как мы это сделали для Lollipop.

00:03:31.880 --> 00:03:36.870
Если есть несколько частей, которые
вы используете снова и снова, как стили,

00:03:36.870 --> 00:03:42.250
<b>layouts</b>, то это визуальное обновление 
приходится делать в меньшем числе мест,

00:03:42.250 --> 00:03:48.030
откуда оно потом
последовательно применяется везде.

00:03:48.030 --> 00:03:51.550
Я делаю акцент на изначально правильной
организации данных,

00:03:51.550 --> 00:03:57.918
особенно в случае приложений,
получающих данные из внешних источников.

00:03:57.918 --> 00:04:02.512
И уже затем детализировать пиксели,
получив данные для внедрения

00:04:02.512 --> 00:04:07.532
сетки координат, оформления, цветов,
анимации, переходов, чего угодно,

00:04:07.532 --> 00:04:12.575
вне зависимости от затраченного времени.

00:04:12.575 --> 00:04:16.338
И думаю, будет то же самое в случае
чего-то наподобие клиента Twitter.

00:04:16.338 --> 00:04:21.991
Вы могли бы начать "шлифовку" пикселей
ваших layouts на основе неверных данных.

00:04:21.991 --> 00:04:27.122
Потом вы понимаете, что не знаете ничего
об извлечении данных из Twitter,

00:04:27.122 --> 00:04:32.920
и следующие 3 месяца занимаетесь тем,
что достаете их.

00:04:32.920 --> 00:04:37.240
Или, просто пример,
я предпочитаю начинать с данных.

00:04:37.240 --> 00:04:41.880
Я представляю все это в виде айсберга,

00:04:41.880 --> 00:04:47.640
где на поверхности видны красивые пиксели,
которых всего 5-10%,

00:04:47.640 --> 00:04:50.800
а вся основная работа по их поддержке
идет внизу, под водой.

00:04:50.800 --> 00:04:53.820
Ты говоришь, люди видят верхушку айсберга.

00:04:53.820 --> 00:04:57.210
Что же в действительности происходит
под поверхностью воды?

00:04:57.210 --> 00:05:00.620
Каким ты видишь приложение Google Play?

00:05:00.620 --> 00:05:05.940
Под поверхностью происходит, во-первых,
получение данных из сети,

00:05:05.940 --> 00:05:11.643
так что вы можете авторизоваться
и получить данные.

00:05:11.643 --> 00:05:14.969
А затем поместить их в локальный кэш,
чтобы в следующий раз, при переходе

00:05:14.970 --> 00:05:18.152
из потока на страницу деталей и обратно,
использовались кэшированные данные

00:05:18.152 --> 00:05:22.820
и кэшированные изображения.

00:05:22.820 --> 00:05:26.616
Так мы не будем перегружать батарею.

00:05:26.616 --> 00:05:30.284
Приложение, к тому же, показывает
имеющуюся у него информацию.

00:05:30.284 --> 00:05:33.830
Дальше идет поддержка
из различных аккаунтов.

00:05:33.830 --> 00:05:37.660
Может быть несколько байтов, упорно
сохраняющихся тут и там в базе данных.

00:05:38.670 --> 00:05:44.380
Далее, биллинговые потоки,
большая часть работы с которыми

00:05:44.380 --> 00:05:48.840
идет на сервере, для интеграции
с различными методами оплаты.

00:05:48.840 --> 00:05:51.200
И, конечно же, работа с клиентской частью.

00:05:51.200 --> 00:05:57.050
Другая большая часть работы Play store -

00:05:57.050 --> 00:05:59.660
загрузка и установка приложений и игр.

00:05:59.660 --> 00:06:04.530
На стороне Play store мы ответственны
за загрузку, установку

00:06:04.530 --> 00:06:06.840
и обновление приложений.

00:06:06.840 --> 00:06:11.556
И большая порция всего этого
имеет частички на поверхности,

00:06:11.556 --> 00:06:16.052
в виде пикселей на экране.

00:06:16.052 --> 00:06:21.425
И затем следует огромный кусок работы
под поверхностью по донесению данных

00:06:21.425 --> 00:06:27.668
в правильный аккаунт
и выведению их на экран.

00:06:27.668 --> 00:06:32.610
У тебя огромный опыт работы над
различными итерациями в Google Play.

00:06:32.610 --> 00:06:37.385
Как ты остаешься в курсе
последних новостей в Android?

00:06:37.385 --> 00:06:42.657
Много информации приходит из Google+
от активных разработчиков Андроид,

00:06:42.657 --> 00:06:47.295
которые выкладывают туда
обучающие материалы.

00:06:47.295 --> 00:06:52.322
Наконец, из разных блогов,
причем я даже не всегда

00:06:52.322 --> 00:06:57.575
вчитываюсь детально в выпуски
про <b>RecyclerView</b>, <b>ViewPage</b>,

00:06:57.575 --> 00:07:02.732
что угодно,
как сконфигурировать <b>Панель инструментов</b>

00:07:02.732 --> 00:07:07.430
или <b>ActionBar</b>.

00:07:07.430 --> 00:07:09.200
Я как бы думаю: я знаю, что

00:07:10.270 --> 00:07:12.810
в них очень много информации.

00:07:12.810 --> 00:07:17.340
И вот когда мне понадобятся
глубокие знания в этой области,

00:07:17.340 --> 00:07:20.000
тогда я и обращусь к этим ресурсам.

00:07:20.001 --> 00:07:21.699
Большое спасибо за уделенное время, Сирил.

00:07:21.700 --> 00:07:24.699
Думаю, нашим студентам будет
очень интересно услышать твою точку зрения

00:07:24.700 --> 00:07:27.010
на то, что это такое -
быть разработчиком под Андроид.

