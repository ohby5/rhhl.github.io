WEBVTT
Kind: captions
Language: ko

00:00:00.360 --> 00:00:01.630
지금까지 잘 하셨습니다

00:00:01.630 --> 00:00:04.580
정말로 멋진 레이아웃을 구축하는
방법을 제대로 하고 계십니다

00:00:04.580 --> 00:00:09.360
하지만 지금까지 구축한 레이아웃은
거의 모두, 문제가 보입니다

00:00:09.360 --> 00:00:12.740
뷰들은 바로 ViewGroup의
모서리 부분에 위치하거나

00:00:12.740 --> 00:00:14.300
장치의 모서리 부분에 있습니다

00:00:14.300 --> 00:00:17.180
이번 강좌에서 지금까지 구축했던
모든 레이아웃들에 대하여

00:00:17.291 --> 00:00:19.990
약간의 시각적 장식을
추가할 수 있는데

00:00:19.990 --> 00:00:23.840
흰색 공간을 좀더 추가하면
더 예뻐집니다

00:00:23.840 --> 00:00:26.240
패딩과 마진이라는 개념들을
활용해 그걸 해보겠습니다

00:00:26.240 --> 00:00:28.580
이번 영상에서
다루어볼 주제입니다

00:00:28.580 --> 00:00:31.240
가령, 여기 여기에
흰색 공간을 좀더 추가하거나

00:00:31.240 --> 00:00:33.780
뷰들이 혼란스럽게 보이지 않도록
심지어 상단에도 추가할 수 있어요

00:00:33.780 --> 00:00:37.780
부모의 모서리와 장치의 모서리에 맞닿아
뷰들이 위치해 있기 때문이죠

00:00:37.780 --> 00:00:39.350
하지만 이건 디자인적인
판단이기는 합니다

00:00:39.350 --> 00:00:41.550
간혹 모서리끼리 맞닿게 하는 걸
원하실 수 있어요

00:00:41.550 --> 00:00:45.140
즉, 전에 말씀드렸던 풀 블리드 이미지
효과를 내기 위해서 말이죠

00:00:45.140 --> 00:00:49.109
하지만 어느 경우라도, 흰 공간을 이용해서
숨쉴 틈을 좀더 추가할 수 있습니다

00:00:49.109 --> 00:00:53.130
그러면 내용을 읽거나 검색하는 데
좀 용이해지기 때문이죠

00:00:53.130 --> 00:00:56.840
패딩 및 마진을 뷰에 추가하는 것의
효과를 보여드릴 겁니다

00:00:56.840 --> 00:00:59.480
'Hello'라고 하는
텍스트뷰로 시작해 봅시다

00:00:59.480 --> 00:01:01.880
8군데가 파인 패딩을
뷰에 추가하면

00:01:01.880 --> 00:01:05.450
여기 8가지 방향으로
8군데 파인 곳만큼 확대됩니다

00:01:05.474 --> 00:01:08.647
텍스트뷰에 8군데 파인 곳의
레이아웃 마진을 추가하면

00:01:08.647 --> 00:01:10.850
이런 식으로 보이게 됩니다

00:01:10.850 --> 00:01:13.470
마진을 추가하기 위해서
ViewGroup안에 넣어야 합니다

00:01:13.470 --> 00:01:16.360
그래서 제가 이걸 여기에 있는
선형 레이아웃에 넣은 겁니다

00:01:16.360 --> 00:01:19.350
선형 레이아웃은 원래의 텍스트뷰를 취해

00:01:19.350 --> 00:01:21.260
8군데 파인곳만큼
밀어냅니다

00:01:21.260 --> 00:01:23.330
좌측으로부터 그리고 상단으로부터
밀어내는 거죠

00:01:23.330 --> 00:01:25.510
또한 측면으로부터도 밀어냅니다

00:01:25.510 --> 00:01:30.300
고로 자식 텍스트뷰 상에서
패딩 및 마진을 선언하더라도

00:01:30.388 --> 00:01:32.780
패딩은 텍스트뷰 자체에
의해서 처리됩니다

00:01:32.780 --> 00:01:35.900
마진이 부모 ViewGroup에 의해
처리되는 것과 대조적이죠

00:01:35.900 --> 00:01:40.349
이 두 가지를 실제 장치에서 실행하고
텍스트뷰에 대한 배경이 없다면

00:01:40.374 --> 00:01:42.820
기술적으로 둘은
동일하게 보일 겁니다

00:01:42.820 --> 00:01:46.030
해당 텍스트가 좌측으로부터
8군데 파인 채로

00:01:46.030 --> 00:01:48.390
장치의 상단으로부터 8군데가
파인 상태로 시작되기 때문이죠

00:01:48.390 --> 00:01:51.780
하지만, 텍스트뷰의
배경색이 있다면

00:01:51.780 --> 00:01:54.990
사용자는 텍스트뷰가 이렇게
크다는 걸 알아볼 수 있습니다

00:01:54.990 --> 00:01:58.660
반면에, 다른 장치에서는 텍스트뷰가
이 정도 크기에 불과하는 것이죠

00:01:58.660 --> 00:02:00.700
뷰 상에 패딩을 내보이는
코드가 여기에 있습니다

00:02:02.040 --> 00:02:05.744
텍스트뷰 XML 요소 상에서는
새로운 속성을 선언할 텐데, 즉

00:02:05.744 --> 00:02:10.800
android: padding는 따옴표 속에 있는
8 dips와 같다는 것이죠

00:02:10.800 --> 00:02:12.320
패딩이 크기를 원하는 만큼
선택할 수 있어요

00:02:12.320 --> 00:02:15.330
'dip'값에 따라서 말입니다

00:02:15.330 --> 00:02:19.080
8 dip의 패딩을 명시한 경우
텍스트뷰에서 8군데의 파인 곳을

00:02:19.080 --> 00:02:21.410
좌측, 상단, 하단, 우측 모서리에
추가할 수 있습니다

00:02:22.460 --> 00:02:25.100
범용 안드로이드 패딩 속성을
사용하는 대신에

00:02:25.100 --> 00:02:28.970
각각, 좌측, 우측, 상단, 하단으로
나눌 수도 있습니다

00:02:28.970 --> 00:02:32.550
본질적으로, 이 코드 4줄은
이 한 줄짜리 코드와 동일한 기능을 합니다

00:02:32.550 --> 00:02:35.820
하지만 이렇게 세부적인 제어치로
좌우측, 상하단 별로 각기 다르게

00:02:35.820 --> 00:02:39.420
패딩 값을 지정할 수 있습니다

00:02:39.420 --> 00:02:43.390
4방향 모두 같은 패딩값을
지정할 필요는 없으니까요

00:02:43.390 --> 00:02:47.280
패딩의 기본값은 0이므로
좌우측과 상단 패딩값을 명시하였으나

00:02:47.280 --> 00:02:52.110
하단 값을 지정 안 하면 하단 패딩의
파인 곳(dip)은 0이 될 겁니다

00:02:52.110 --> 00:02:55.990
마진을 명시하기 위해
텍스트뷰의 속성을 재추가합니다

00:02:55.990 --> 00:03:00.206
속성의 이름은
android: layout_margin이며

00:03:00.206 --> 00:03:02.750
그 값은 가령
8dips으로 설정합니다

00:03:02.750 --> 00:03:07.440
이러면 자식 텍스트뷰는 모든 모서리에
부모로부터 8군데 파이게 됩니다

00:03:07.440 --> 00:03:11.770
여기 상단에 다른 자식 텍스트뷰가 있다면
마진을 가지게 됨에 따라

00:03:11.770 --> 00:03:15.000
첫째 텍스트뷰 아래로 8 dip만큼
이 텍스트뷰를 밀어냅니다

00:03:16.060 --> 00:03:20.050
마진을 이 뷰 주위에 약간의
힘의 영역으로 생각할 수 있습니다

00:03:20.050 --> 00:03:23.750
그 주위에 8군데 파인 영역으로는
다른 뷰가 침범할 수 없으니까요

00:03:23.750 --> 00:03:27.621
혹은, 역시 레이아웃 마진을
4가지 방향으로 각각 나눌 수도 있어요

00:03:27.621 --> 00:03:31.750
레이아웃 마진 좌우측,
상하단 각각 말이죠

00:03:31.750 --> 00:03:35.780
이 값들을 명기하지 않으면
기본 값인 0으로 될 겁니다

00:03:35.780 --> 00:03:38.730
ViewGroup은 이 자식들을
위치시키는 데

00:03:38.730 --> 00:03:41.930
마진에 바탕한다는 걸 기억하려면
이 속성들을 보면 됩니다

00:03:41.930 --> 00:03:45.130
모두가 마진에 대해
레이아웃과 밑줄로 시작하고 있어요

00:03:45.130 --> 00:03:48.929
그렇게, ViewGroup이 이 뷰들의 위치를
처리한다는 걸 알 수 있죠

00:03:50.160 --> 00:03:52.790
패딩과 마진은 모든 뷰에
적용할 수 있어요

00:03:52.790 --> 00:03:55.960
방금 우리가 배운 속성들을
연습해봅시다

00:03:55.960 --> 00:03:58.500
여기에 선형 레이아웃의 형태로
3개의 텍스트뷰가 있어요

00:03:58.500 --> 00:04:01.000
모두가 화면 좌측 구석에
몰려 있어

00:04:01.000 --> 00:04:02.259
약간의 공간을 추가하고 싶습니다

00:04:03.390 --> 00:04:04.910
약간의 마진을 추가하는 것부터
시작합시다

00:04:05.910 --> 00:04:08.235
좋네요, 이 텍스트뷰 주위에
공간이 더 생겼습니다

00:04:09.420 --> 00:04:11.155
다른 두 개의 텍스트뷰에 대해서도
동일하게 해보겠습니다

00:04:12.250 --> 00:04:17.029
재미 있군요, 이게 16개의 dip이니까
실제로 32개의 dip이군요

00:04:17.029 --> 00:04:20.260
왜냐하면 첫 텍스트뷰로부터
하단 마진이 8개 dip이고

00:04:20.260 --> 00:04:22.960
두 번째 텍스트뷰로부터 상단 마진이
8개 dip이기 때문이죠

00:04:22.960 --> 00:04:24.780
공백 설정을 일관적으로 하여

00:04:24.780 --> 00:04:30.250
모든 뷰 간에 항상 16개 dip이 있기를 바라면
여기 마진을 변경해야 합니다

00:04:30.250 --> 00:04:33.100
저는 개별적 마진값으로
나누었습니다

00:04:33.100 --> 00:04:37.980
이 코드를 가지고 상단과 좌측 마진
각각 16개 dip을 설정했습니다

00:04:37.980 --> 00:04:40.750
첫 텍스트뷰로부터
하단 마진은 없으므로

00:04:40.750 --> 00:04:43.290
사이의 공간은 정확히
16개의 dip이 됩니다

00:04:43.290 --> 00:04:46.970
마지막 텍스트뷰에 대해서도
동일하게 적용할 겁니다

00:04:46.970 --> 00:04:48.780
좋습니다, 이제
모든 수직 공백이 동일합니다

00:04:49.900 --> 00:04:53.420
전에 이 뷰들의 모서리에
흰 공간을 추가한다고 했을 때

00:04:53.420 --> 00:04:56.240
기술적으로는 그 공간은
투명한 것이었습니다

00:04:56.240 --> 00:04:58.690
그 공간을 투과해 뒤에 있는 것을
볼 수 있는 것이죠

00:04:58.690 --> 00:05:02.100
이 경우, ViewGroup 상에
회색 배경이 있습니다

00:05:02.100 --> 00:05:05.390
장치에서 마진이든 패딩을 이용할 때
레이아웃이 동일하게 보이는 이유는

00:05:05.390 --> 00:05:08.785
이 경우 텍스트뷰 상에
배경색이 없기 때문입니다

00:05:09.820 --> 00:05:12.090
배경을 추가하여 각 뷰의 한계가
되는 곳이 어디인지 봅시다

00:05:13.330 --> 00:05:16.180
자, 이제 첫 텍스트뷰 상에
배경색이 생겼습니다

00:05:16.180 --> 00:05:20.178
좌측, 상단 마진을 추가했을 때
ViewGroup이 밀어내는 걸 보았습니다

00:05:20.178 --> 00:05:22.600
상단으로 8만큼 하단으로 8만큼
텍스트뷰가 밀려났죠

00:05:22.600 --> 00:05:26.950
이 걸 패딩에 맞게 변경할 수 있는데
이제 텍스트뷰가 더 커진 것이 보이며

00:05:26.950 --> 00:05:29.580
좌측과 상단에 8dip만큼의
공간을 차지하고 있습니다

00:05:30.700 --> 00:05:33.210
고로 시각적으로 대상들은
장치 상에서 달라 보일 겁니다

00:05:33.210 --> 00:05:35.120
패딩이든 마진이 있느
관계 whether you have padding or margin.

00:05:35.120 --> 00:05:38.000
이 텍스트뷰 상에
배경색이 있다면

00:05:38.000 --> 00:05:40.570
다른 뷰들에 대해서도 동일하게
해보고 잘 되는지 확인할 수 있어요

00:05:41.830 --> 00:05:45.400
패딩과 마진값을 추가하는 것은
이 자식 뷰들에만 국한되지 않고

00:05:45.400 --> 00:05:47.840
ViewGroup 상에도
추가할 수 있습니다

00:05:47.840 --> 00:05:50.520
제가 선형 레이아웃에 대해
패딩값을 추가하면

00:05:50.520 --> 00:05:55.680
모든 방향에 16 dip만큼 뷰들이
뒤바뀌는 걸 확인할 수 있어요

00:05:55.680 --> 00:05:59.390
패딩 및 마진에 대해 아무 값이나
설정할 수 있다고 제가 그랬죠

00:05:59.390 --> 00:06:01.380
하지만 어떤 값을 택할지
어떻게 알까요?

00:06:01.380 --> 00:06:04.740
머티리얼 디자인 지침에 따르면
조금씩 값을 올릴 때의 간격을

00:06:04.740 --> 00:06:05.750
8 dip을 사용하라고 합니다

00:06:05.750 --> 00:06:09.190
이는 좀 더 발전된 지식이긴 하지만
본질적으로 저희가 바라는 건

00:06:09.190 --> 00:06:13.000
이 8dip 정사각형 격자를 따라
화면 상에서 구성요소들이 정렬하는 겁니다

00:06:13.000 --> 00:06:15.870
지금 정사각형들은 실제로
화면에 나타나지는 않지만

00:06:15.870 --> 00:06:17.710
여기에 텍스트를
위치시키고자 하면

00:06:17.710 --> 00:06:21.090
2개의 정사각형을 건너뛰어
좌측으로 이동시켜야 할 겁니다

00:06:21.090 --> 00:06:25.280
이 격자상의 2개의 정사각형이
16 dip과 맞먹는 것이죠

00:06:25.280 --> 00:06:28.980
이 이메일 화면에는 모든 아이콘들이
이 줄을 따라 정렬되어 있습니다

00:06:28.980 --> 00:06:33.120
그 아이콘들은 화면의 좌측 모서리로부터
16 dip를 넘어 위치되어 있습니다

00:06:33.120 --> 00:06:38.020
여기 모든 텍스트는 화면 좌측 끝에서
72dip을 넘어 위치되어 있죠

00:06:38.020 --> 00:06:42.250
고로 해당 내용이 여기 특정 줄을
따르기 시작하는 게 상상이 갈 겁니다

00:06:42.250 --> 00:06:44.440
여기 그걸 형상화하는
또 다른 방법이 있어요

00:06:44.440 --> 00:06:47.160
구글 I/O 앱에서 발췌한
이 스크린샷에는

00:06:47.160 --> 00:06:53.920
내용물을 16dip 줄과 72dip 줄에
맞춰 정렬시켰습니다

00:06:53.920 --> 00:06:57.395
기본적으로 화면 좌측 끝으로부터
72 dip을 넘어 있습니다

00:06:57.395 --> 00:06:58.855
그리고 이 가장자리에는

00:06:58.855 --> 00:07:03.303
내용물이 화면 우측 끝에서부터
16dip 이전 위치에 멈춰 있습니다

00:07:03.303 --> 00:07:05.485
태블릿 상에는 앱의
화면 출력 영역이 더 크기에

00:07:05.485 --> 00:07:07.495
패딩이 약간 더
많을 수 있습니다

00:07:07.495 --> 00:07:10.635
화면의 좌측 끝으로부터
24dip을 넘어 있거나

00:07:10.635 --> 00:07:12.175
기타 다른 값을
가질 수 있죠

00:07:12.175 --> 00:07:16.645
이 값들을 추천하는 이유는
내용물의 가독성을 높기이 위함입니다

00:07:16.645 --> 00:07:20.250
가령, 이 제목이 2-3 픽셀만큼
이동했고

00:07:20.250 --> 00:07:23.660
서브텍스트가 2-3 픽셀만큼
우측으로 이동했다면

00:07:23.660 --> 00:07:25.560
여기 가장자리가
들쭉날쭉할 겁니다

00:07:25.560 --> 00:07:29.780
그리고 사용자가 실제 내용을
읽는 데 집중에 방해가 되겠죠

00:07:29.780 --> 00:07:34.540
고로 모든 것을 정렬시킴으로써 앱의 
가독성과 활용성을 높이는 겁니다

00:07:34.540 --> 00:07:38.120
여기 마진에 패딩을 활용하는
몇 가지 실례가 있어요

00:07:38.120 --> 00:07:40.190
여기 보이는 구글 캘린더 앱의
스크린샷에는

00:07:40.190 --> 00:07:43.680
여기 텍스트가 약간
이동한 걸 볼 수 있습니다

00:07:43.680 --> 00:07:46.680
달력 상의 사건들 간에
약간의 공백도 있죠

00:07:46.680 --> 00:07:48.180
패딩을 활용해
이것을 실행하면

00:07:48.180 --> 00:07:52.360
이 배경 이미지가
아마 빈 공간까지 확장될 겁니다

00:07:52.360 --> 00:07:55.920
그 대신, 마진을 이용하면 뷰 둘레에
작은 완충지대를 추가하며

00:07:55.920 --> 00:07:57.820
고로 이게 아마 마진이에요

00:07:57.820 --> 00:08:01.890
달력상 한 사건에 대한 상세 페이지의
또 다른 스크린샷이 이겁니다

00:08:01.890 --> 00:08:06.160
여기에 많은 텍스트가 있고 다른 것보다
간격이 더 넓은 것 같네요

00:08:06.160 --> 00:08:08.700
패딩을 추가하여 그러한 더 넓은 간격을
생성할 수 있습니다

00:08:08.700 --> 00:08:13.370
여기 이 간격을 추가하기 위해
이 텍스트뷰에 하단 패딩을 추가하거나

00:08:13.370 --> 00:08:15.130
이 뷰에 상단 패딩을
추가할 수 있습니다

00:08:16.140 --> 00:08:17.600
둘 중 어떤 것도
해당 효과를 낼 수 있죠

00:08:17.600 --> 00:08:20.680
혹은 레이아웃 마진을 활용해
그 효과를 실행할 수도 있습니다

00:08:20.680 --> 00:08:24.772
이 경우, 패딩과 레이아웃 마진의
활용 상의 차이를 구별할 수 없는데

00:08:24.797 --> 00:08:28.050
왜냐하면 사용된 텍스트의 배경은
투명하기 때문이죠

00:08:28.050 --> 00:08:32.169
이제 다른 패딩과 마진값을 설정하는
연습을 여러분이 해볼 차례입니다

00:08:32.169 --> 00:08:35.090
아래에 있는 링크를 이용해 
시험해볼 초기 코드가 제공되었습니다

00:08:35.090 --> 00:08:38.940
패딩과 마진값 설정이 편해지면
계속하여

00:08:38.940 --> 00:08:40.169
이 레이아웃 구축을 해보세요

00:08:41.210 --> 00:08:45.780
한편, 이 텍스트는 여기 가장자리로부터
16 dip만큼 떨어져 위치되어 있습니다

00:08:45.780 --> 00:08:49.410
하지만 두 텍스트뷰들 사이에는
단지 8dip만 떨어져 있을 뿐이죠

00:08:49.410 --> 00:08:50.530
완료하면 이 공란을 체크하세요

