WEBVTT
Kind: captions
Language: ja

00:00:00.300 --> 00:00:02.670
これまでパーティのお客リストを
作ってきました

00:00:02.670 --> 00:00:05.660
- 誕生パーティ用のお客リストだね？
- ええ

00:00:06.320 --> 00:00:08.109
僕がリストに入ってるといいけど

00:00:09.140 --> 00:00:10.470
それは後で分かるわ

00:00:11.660 --> 00:00:13.040
肩身が狭いなぁ

00:00:13.430 --> 00:00:15.160
狭いと言えば

00:00:15.160 --> 00:00:17.610
画面のビューのサイズの話をしましょう

00:00:17.610 --> 00:00:21.090
固定の高さを使ったね
dp だね

00:00:21.090 --> 00:00:23.140
ええ 幅と高さよ

00:00:23.140 --> 00:00:25.640
ビューに wrap_content も設定できるわ

00:00:25.640 --> 00:00:27.095
それは変な言い方だね

00:00:27.095 --> 00:00:29.034
ビューがコンテンツを包み込むって

00:00:29.034 --> 00:00:31.299
じゃコンテンツが大きくなれば
ビューも大きくなり

00:00:31.299 --> 00:00:33.020
コンテンツが小さくなれば
ビューも小さくなる

00:00:33.020 --> 00:00:35.560
実は第3に match_parent というのもあるの

00:00:35.720 --> 00:00:37.560
それはちょっと変だね

00:00:37.560 --> 00:00:41.260
片親たちの出会い系サイトみたいだ

00:00:41.460 --> 00:00:42.600
そうでもないわ

00:00:42.600 --> 00:00:47.190
match_parent の意味はビューの幅又は
高さが親と同じになることよ

00:00:47.190 --> 00:00:48.446
じゃ分かる

00:00:48.446 --> 00:00:50.440
僕はビューで 親がいて

00:00:50.440 --> 00:00:53.270
僕の幅と高さが親と同じになるんだ

00:00:53.270 --> 00:00:55.440
その通りよ　まとめると

00:00:55.440 --> 00:00:59.560
ビューのサイズに設定できる
様々な値は 幅です

00:00:59.560 --> 00:01:01.090
幅と高さの固定dp

00:01:01.090 --> 00:01:02.570
wrap_content もできる

00:01:02.570 --> 00:01:04.516
次に試すのは

00:01:04.516 --> 00:01:05.870
match_parent です

00:01:05.870 --> 00:01:08.990
ここではいくつか例をあげ
リニアレイアウトの子ビューに

00:01:08.990 --> 00:01:13.410
色々な値を設定して
最後のUI にどう影響するか見ましょう

00:01:13.410 --> 00:01:18.040
この例では各子ビューに
200 dp の固定幅を設定します

00:01:18.640 --> 00:01:22.070
各ビュー内のコンテンツが
200 dp を超えると

00:01:22.070 --> 00:01:25.620
こんな風にコンテンツがいくらか
切れる危険があります

00:01:25.620 --> 00:01:30.460
この例では各子ビューに
幅の wrap_content を設定しました

00:01:31.260 --> 00:01:33.380
すると全コンテンツが表示されますが

00:01:33.380 --> 00:01:36.930
各ビューの幅が その中のものに基づいて
変わります

00:01:37.550 --> 00:01:41.660
この例では各子ビューの幅を
match_ parent に設定しました

00:01:41.660 --> 00:01:43.740
今度は各子どもの幅は

00:01:43.740 --> 00:01:48.540
その中のコンテンツに関わりなく
親のビューグループと同じ幅になります

00:01:49.320 --> 00:01:53.330
それらの同じ値は各ビューの高さにも
適用できます

00:01:53.330 --> 00:01:58.380
この例では この子テキストビューの
高さを200 dp に設定しました

00:01:58.380 --> 00:02:01.440
その中のコンテンツがそれより高ければ

00:02:01.440 --> 00:02:04.250
コンテンツがいくらか切れる危険があります

00:02:05.070 --> 00:02:09.239
この例では子テキストビューの高さを
wrap_content に設定しました

00:02:09.239 --> 00:02:12.040
こうすると画面に全コンテンツが表示されー

00:02:12.040 --> 00:02:14.750
何も切れないでしょう
なぜならテキストビューのサイズは

00:02:14.750 --> 00:02:17.010
その内部のコンテンツに依るからです

00:02:17.610 --> 00:02:22.030
この例では 子テキストビューの高さを
match_parentに設定しました

00:02:22.030 --> 00:02:23.500
そうすると子ビューは

00:02:23.500 --> 00:02:26.720
その中のコンテンツに関わりなく
親自身と同じ高さです

00:02:27.360 --> 00:02:29.580
では XML visualizer を開きー

00:02:29.580 --> 00:02:32.350
コードにある私達の親に
もっと近づけなさい

00:02:32.350 --> 00:02:35.740
スターターコード付 XML Visualizer への
リンクを

00:02:35.740 --> 00:02:37.910
下の講師ノートにあげておきます

00:02:38.520 --> 00:02:41.880
この場合 リニアレイアウトは
このレイアウトのルートビューです

00:02:41.880 --> 00:02:44.460
それは最初で最外部のビューだからです

00:02:45.130 --> 00:02:48.470
このルートビューの幅と高さに
match_parent を設定しー

00:02:48.470 --> 00:02:51.330
これをアプリのメインレイアウトに設定すると

00:02:51.330 --> 00:02:55.400
このレイアウトは端末画面と
同じ高さと幅になります

00:02:56.300 --> 00:03:00.120
このリニアレイアウトの背景を
不透明色に設定して

00:03:00.120 --> 00:03:03.230
お見せしましょう

00:03:03.920 --> 00:03:06.830
このリニアレイアウトの背景を灰色に
設定すると

00:03:06.830 --> 00:03:11.000
灰色が端末の幅と高さのいっぱいに
広がるのが分かります

00:03:11.000 --> 00:03:13.610
これらのテキストビューの幅か
高さを match_parent に変えると

00:03:13.610 --> 00:03:15.040
どうなるでしょう？

00:03:15.040 --> 00:03:18.130
各ビューの境界がはっきりするようにー

00:03:18.130 --> 00:03:20.620
ビューの各々に背景色を設定しますね

00:03:20.620 --> 00:03:24.900
ではこのテキストビューの高さを
match_parent に変えます

00:03:24.900 --> 00:03:27.360
ところでmatch_parentと綴りなさい

00:03:27.360 --> 00:03:32.080
今度はこのテキストビューが親の高さ
いっぱいを占めるのがわかります

00:03:32.080 --> 00:03:34.680
残念ながら これは他の全てを画面から
押し出すので

00:03:34.680 --> 00:03:36.300
これは望みませんね

00:03:36.300 --> 00:03:38.320
だから wrap_ content に戻しましょう

00:03:39.520 --> 00:03:42.539
では 今度は幅をmatch_parent にして
どうなるか見ましょう

00:03:43.450 --> 00:03:48.320
今度は テキストビューの幅は
親と同じ幅になり 同様に

00:03:48.320 --> 00:03:50.400
端末画面と同じ幅になります

00:03:51.270 --> 00:03:54.510
他のテキストビューも
match_parent に変えると

00:03:54.510 --> 00:03:58.610
親の幅いっぱいを占めて行くのがわかります

00:03:58.610 --> 00:04:01.060
もう一つ指摘しておきましょう

00:04:01.060 --> 00:04:04.860
layout_heightとかlayout_ widthのように
毎回レイアウト下線で始まる属性を見ます

00:04:04.860 --> 00:04:09.310
これらは実はビューグループレイアウト
パラメータです

00:04:09.310 --> 00:04:11.900
これらは親ビューグループに使われー

00:04:11.900 --> 00:04:14.849
これらのビューのサイズと位置を
決めます

00:04:15.770 --> 00:04:19.110
一方 背景 テキストサイズ 
テキストのような他の属性は

00:04:19.110 --> 00:04:23.240
それ自身のビューをスタイルする
テキストビューによって処理されます

00:04:23.240 --> 00:04:26.590
しかしこれらのビューグループレイアウト
パラメータは親によって処理されます

00:04:26.590 --> 00:04:29.610
では 様々な幅と高さの値にする
あなたの番です

00:04:29.610 --> 00:04:33.430
スターターコード付きXML Visualizerへの
リンクは

00:04:33.430 --> 00:04:35.450
下の講師ノートを参照しなさい

00:04:35.450 --> 00:04:38.870
各テキストビューの幅と高さの値を
変えなさい

00:04:38.870 --> 00:04:42.550
固定 dp 値か wrap-contentか
match_parent を設定できます

00:04:42.550 --> 00:04:45.711
各ビューで 幅と高さの値は一致する必要は
ありません

00:04:46.171 --> 00:04:48.831
終わったら
ボックスにチェックして次へ行きなさい

