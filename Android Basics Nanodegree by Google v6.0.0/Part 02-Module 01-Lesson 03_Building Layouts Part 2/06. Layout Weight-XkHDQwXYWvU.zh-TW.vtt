WEBVTT
Kind: captions
Language: zh-TW

00:00:00.970 --> 00:00:05.250
上個小測中，我們嘗試找方法為 Tom、Tim 和

00:00:05.250 --> 00:00:08.240
Tod TextView 多加一點私人空間

00:00:08.240 --> 00:00:12.010
將他們垂直平分於裝置螢幕上

00:00:13.380 --> 00:00:15.740
試過設定固定 dp 值

00:00:15.740 --> 00:00:19.900
但換上像平板電腦等較長的裝置便不行

00:00:19.900 --> 00:00:24.300
然後試過用 <i>match_parent</i>
卻令 Tom TextView 變得過大

00:00:24.300 --> 00:00:27.390
把其他兩個 TextView 擠出螢幕外

00:00:27.390 --> 00:00:31.440
接著著手查看線性佈置權重

00:00:31.440 --> 00:00:34.660
文本說在垂直線性佈置中

00:00:34.660 --> 00:00:37.820
如要平均分佈子元件

00:00:37.820 --> 00:00:42.320
則需將高度設為 0 dp，並為各子元件設定權重值

00:00:43.590 --> 00:00:46.480
為子元件檢視框設定權重值

00:00:46.480 --> 00:00:49.490
就如設定其優先值一般

00:00:49.490 --> 00:00:50.930
權重值較高

00:00:50.930 --> 00:00:55.040
便可佔用更多母元件剩下的空間

00:00:56.280 --> 00:00:57.510
舉例說

00:00:57.510 --> 00:01:01.920
這個垂直線性佈置這樣垂直往下佔用空間

00:01:01.920 --> 00:01:04.590
最後這個線性佈置剩下很多空位

00:01:04.590 --> 00:01:08.900
這些空位便會分配給設有權重值的子元件

00:01:08.900 --> 00:01:11.020
如子元件設有很高的權重值

00:01:11.020 --> 00:01:14.450
則更多的剩餘高度會分配給那個子元件

00:01:14.450 --> 00:01:16.890
如子元件設有很小的權重值

00:01:16.890 --> 00:01:19.900
則較小的剩餘高度會分配給那個子元件

00:01:19.900 --> 00:01:21.340
讓我來展示實際效果是怎樣的

00:01:21.340 --> 00:01:24.130
我將這個子元件的高度設定為 0dp

00:01:24.130 --> 00:01:26.020
然後將其權重值設定為 1

00:01:26.020 --> 00:01:29.642
線性佈置首先配置 Tim 和 Todd TextView

00:01:29.642 --> 00:01:33.880
因為它們設有按其內容而定的固定高度

00:01:33.880 --> 00:01:38.019
然後是初始高度為 0dp 的 Tom TextView

00:01:38.019 --> 00:01:38.880
但它的權重值為 1

00:01:38.880 --> 00:01:41.266
沒有其他子元件設有權重值

00:01:41.266 --> 00:01:45.000
如無指明，權重值則默認為 0

00:01:45.000 --> 00:01:47.150
那麼這是唯一一個設有權重值的子元件

00:01:47.150 --> 00:01:50.480
所以母元件將螢幕的剩餘高度

00:01:50.480 --> 00:01:51.900
全部分配給 Tom TextView

00:01:51.900 --> 00:01:55.610
所以 Tom TextView 變得那麼大

00:01:55.610 --> 00:01:58.810
讓我試試給其他子元件設定權重值

00:01:58.810 --> 00:02:02.660
現在各子元件的高度為 0dp，權重值為 1

00:02:02.660 --> 00:02:04.980
線性佈置的處理過程是這樣的

00:02:04.980 --> 00:02:08.250
首先會找出各檢視框的高度

00:02:08.250 --> 00:02:10.889
這些檢視框的高度為 0 dp

00:02:10.889 --> 00:02:13.950
即母元件所剩下的高度

00:02:13.950 --> 00:02:16.410
是整個螢幕的高度

00:02:16.410 --> 00:02:19.500
它將螢幕全高除以權重值總和

00:02:19.500 --> 00:02:20.280
即除以三

00:02:20.280 --> 00:02:24.215
然後將三份一剩餘高度分配給 Tom TextView

00:02:24.215 --> 00:02:27.220
三份一高度分配給 Tim TextView

00:02:27.220 --> 00:02:29.680
三份一分配給 Todd TextView

00:02:29.680 --> 00:02:32.840
即使在較大的螢幕裝置上，三者依然會平分

00:02:32.840 --> 00:02:37.250
裝置的高度，全因那權重值之故

00:02:37.250 --> 00:02:40.130
如將權重值調高

00:02:40.130 --> 00:02:44.920
母元件會將較多的剩餘高度分配給 Tim TexView

00:02:44.920 --> 00:02:47.310
將權重值調得更高

00:02:47.310 --> 00:02:51.380
便可看到它怎樣漸漸獲分配更多的剩餘高度

00:02:51.380 --> 00:02:54.240
現在 Tim TextView 的權重值為 8

00:02:54.240 --> 00:02:56.910
Tom 的權重值為 1，Todd 的權重值為 1

00:02:56.910 --> 00:03:00.340
所以權重值總和為八……九……十

00:03:00.340 --> 00:03:03.930
所以母元件將剩餘高度除以十

00:03:03.930 --> 00:03:06.710
十份一給 Tom，八份一給 Tim

00:03:06.710 --> 00:03:08.170
十份一給 Todd

00:03:09.450 --> 00:03:13.020
在垂直線性佈置中，舉例說有三個 TextView

00:03:13.020 --> 00:03:15.410
將初始高度設定為 0 dp

00:03:15.410 --> 00:03:19.400
它們便全部疊於螢幕上方，其高度為 0

00:03:19.400 --> 00:03:23.290
即母元件有這裡全部的額外高度

00:03:23.290 --> 00:03:27.810
如將各子元件 TextView 的權重值設為 1

00:03:27.810 --> 00:03:31.420
剩餘的母元件高度會平均分配給各子元件

00:03:32.810 --> 00:03:35.400
水平線性佈置的運作亦一樣

00:03:35.400 --> 00:03:37.550
舉例說有三個子元件 TextView

00:03:37.550 --> 00:03:39.820
初始高度為 0 dp

00:03:39.820 --> 00:03:43.300
即母元件有這裡全部的額外寬度

00:03:43.300 --> 00:03:46.960
如將各子元件檢視框的權重值設為 1

00:03:46.960 --> 00:03:50.110
母元件的剩餘寬度會

00:03:50.110 --> 00:03:52.740
平均分配給各子元件

00:03:52.740 --> 00:03:54.910
當然，權重值不一定要是 1

00:03:54.910 --> 00:03:57.740
可以是 3 或任何其他數值

00:03:57.740 --> 00:03:59.960
權重值甚至可以是 0

00:03:59.960 --> 00:04:04.440
如檢視框的權重值為 0

00:04:04.440 --> 00:04:06.290
則不會因母元件的剩餘空間而有所改變

00:04:06.290 --> 00:04:09.560
基本上只會維持你所設定的寬度和高度而已

00:04:09.560 --> 00:04:12.710
我想指出的一點是：何時將高度設為 0 或

00:04:12.710 --> 00:04:14.370
將寬度設為 0

00:04:14.370 --> 00:04:15.700
垂直線性佈置

00:04:15.700 --> 00:04:18.950
是這樣垂直地填滿線性佈置

00:04:18.950 --> 00:04:20.390
你便不知道高度該為多少

00:04:20.390 --> 00:04:23.510
所以將初始高度設為 0 dp，然後設定權重值

00:04:24.620 --> 00:04:28.760
同樣地，水平線性佈置是水平地填滿空間

00:04:28.760 --> 00:04:31.920
你還不知道子元件檢視框的寬度

00:04:31.920 --> 00:04:34.930
所以將初始寬度設為 0 dp，然後設定權重值

00:04:36.660 --> 00:04:39.820
大體上，為檢視框設定權重值就如

00:04:39.820 --> 00:04:44.840
讓它按母元件大小而伸展

00:04:44.840 --> 00:04:48.540
用於填滿小裝置或大裝置上的

00:04:48.540 --> 00:04:49.259
剩餘空間皆可

00:04:50.620 --> 00:04:53.730
以下幾個實際例子可說明佈置權重的好用之處

00:04:54.980 --> 00:04:57.210
這是 Google Hangouts 應用程式

00:04:57.210 --> 00:05:01.750
可以用來跟朋友聊天或給他們發送打瞌睡的企鵝

00:05:01.750 --> 00:05:05.620
螢幕底部是你發送訊息的地方

00:05:05.620 --> 00:05:08.950
來更仔細看看這個佈置

00:05:08.950 --> 00:05:13.490
它配置於水平列上，所以是個水平線性佈置

00:05:13.490 --> 00:05:14.827
由 ImageView、可輸入文字的 EditText 欄

00:05:14.827 --> 00:05:19.090
和另一個 ImageView 所組成

00:05:19.090 --> 00:05:22.520
各檢視框的高度實為 <i>wrap_content</i>

00:05:22.520 --> 00:05:25.410
因為它包圍裡面的內容

00:05:25.410 --> 00:05:28.480
這兩個 ImageView 的寬度為 <i>wrap_content</i>

00:05:28.480 --> 00:05:30.350
因為它只是跟裡面的內容一樣寬

00:05:31.460 --> 00:05:33.980
將權重值設為 0，是不想它比這樣子更大

00:05:33.980 --> 00:05:37.890
即使母元件剩下許多空間亦然

00:05:37.890 --> 00:05:41.100
將權重值設為 0 確保它的寬度和

00:05:41.100 --> 00:05:43.280
高度為 <i>wrap_content</i>，而並不會變動

00:05:43.280 --> 00:05:46.110
我們想它在較大的螢幕上伸展得大一點

00:05:46.110 --> 00:05:50.640
而在螢幕較小的裝置上則縮小

00:05:50.640 --> 00:05:54.250
所以將寬度設為 0 dp，權重值為 1

00:05:54.250 --> 00:05:58.404
即母元件線性佈置會先配置這個圖像

00:05:58.404 --> 00:05:59.340
然後再配置這個圖像

00:05:59.340 --> 00:06:05.050
最後，裝置上任何剩餘的寬度會分配給這個檢視框

00:06:05.050 --> 00:06:07.000
接下來是地圖應用程式的例子

00:06:07.000 --> 00:06:09.570
這是地點的詳細頁面

00:06:09.570 --> 00:06:12.480
這裡有三個按鈕：致電、儲存和網站

00:06:12.480 --> 00:06:14.450
來仔細看看

00:06:14.450 --> 00:06:18.660
這個可以用 TextView 加上圖標來建立

00:06:18.660 --> 00:06:21.370
詳情可參閱導師備註

00:06:21.370 --> 00:06:23.540
但這有點偏離正題

00:06:23.540 --> 00:06:26.520
在這個練習中，姑且假設這些是 TextView

00:06:26.520 --> 00:06:29.710
各 TextView 的高度為 <i>wrap_content</i>

00:06:29.710 --> 00:06:33.000
因為它包圍裡面內容的高度

00:06:33.000 --> 00:06:34.980
而寬度就有點難度

00:06:34.980 --> 00:06:38.485
我們想視乎裝置大小

00:06:38.485 --> 00:06:42.470
將螢幕寬度平均分配給各 TextView

00:06:42.470 --> 00:06:44.980
而不要全部三個 TextView

00:06:44.980 --> 00:06:46.240
在螢幕左方組合起來

00:06:47.450 --> 00:06:50.640
要子元件平均分佈，則設定相同的權重值

00:06:50.640 --> 00:06:53.050
各個寬度為 0，權重值為 1

00:06:54.058 --> 00:06:57.790
這樣母元件的剩餘寬度

00:06:57.790 --> 00:06:58.490
會平均分配給三個子元件

00:06:59.790 --> 00:07:02.170
最後一個例子是電郵應用程式

00:07:02.170 --> 00:07:05.420
這是在 Gmail 裡撰寫新電郵的畫面

00:07:06.460 --> 00:07:09.160
項目以欄配置，所以是垂直線性佈置

00:07:10.230 --> 00:07:13.380
並由四個不同 EditText 欄位所組成

00:07:13.380 --> 00:07:16.546
各子元件的寬度為 <i>match_parent</i>

00:07:16.546 --> 00:07:18.760
因為我們想它伸展至整個裝置的寬度

00:07:18.760 --> 00:07:22.845
這三個 EditText 欄位的高度設為 <i>wrap_content</i>

00:07:22.845 --> 00:07:25.475
使它包圍裡面的文字

00:07:25.475 --> 00:07:28.185
權重值設為 0，因為即使母元件有剩餘高度

00:07:28.185 --> 00:07:32.620
亦不想它們改變大小

00:07:32.620 --> 00:07:35.870
但最後一個 EditText 欄位是寫郵寄訊息的地方

00:07:35.870 --> 00:07:40.710
想給用戶許多空間撰寫長長的電郵給祖母

00:07:40.710 --> 00:07:44.870
所以將高度設為 0 dp，權重值為 1

00:07:44.870 --> 00:07:46.700
這樣，母元件如有任何剩餘高度

00:07:46.700 --> 00:07:50.070
便會分配給這個子元件 EditText 欄位

00:07:50.070 --> 00:07:54.120
在螢幕較大的裝置，撰寫電郵欄位會高一點

00:07:54.120 --> 00:07:56.880
在較小的裝置便會小一點

00:07:58.620 --> 00:08:00.150
現在輪到你練習了

00:08:00.150 --> 00:08:03.840
我們要你在 XML Visualizer 裡建立這個佈置

00:08:03.840 --> 00:08:06.550
你可從以下提供的 XML 開始著手

00:08:06.550 --> 00:08:08.140
這是幾個小提示

00:08:08.140 --> 00:08:11.517
嘗試拆解這樣的佈置時，首先試著確定

00:08:11.517 --> 00:08:15.500
各檢視框的寬度，然後嘗試確定各檢視框的高度

00:08:15.500 --> 00:08:18.430
同時確保圖像獲分配母元件線性佈置的

00:08:18.430 --> 00:08:19.730
任何剩餘高度

00:08:19.730 --> 00:08:22.550
在螢幕較小的裝置上佔用較小高度

00:08:22.550 --> 00:08:25.110
在螢幕較大的裝置上則佔用較多高度

00:08:25.110 --> 00:08:26.390
好，著試做吧

00:08:26.390 --> 00:08:27.610
完成後在這個方格打勾

