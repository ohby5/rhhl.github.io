WEBVTT
Kind: captions
Language: ru

00:00:00.360 --> 00:00:01.630
Молодцы.

00:00:01.630 --> 00:00:04.580
Вы на пути к созданию
поистине красивых разметок.

00:00:04.580 --> 00:00:09.360
Тем не менее я замечаю одну проблему
в большинстве разметок, созданных нами.

00:00:09.360 --> 00:00:12.740
Элементы View находятся прямо
на краю ViewGroup или

00:00:12.740 --> 00:00:14.300
у края экрана.

00:00:14.300 --> 00:00:16.490
Всем разметкам, которые
мы создали на этом уроке,

00:00:16.490 --> 00:00:19.990
можно добавить лоска, сделать

00:00:19.990 --> 00:00:23.840
их красивее, добавив
немного свободного пространства.

00:00:23.840 --> 00:00:26.240
Мы сделаем это, используя отступ и поля,

00:00:26.240 --> 00:00:28.580
о которых пойдет речь в этом видео.

00:00:28.580 --> 00:00:31.540
Например, мы могли бы добавить немного
свободного пространства здесь, здесь

00:00:31.540 --> 00:00:33.780
и даже наверху, чтобы
элементы View не кучковались

00:00:33.780 --> 00:00:37.780
у края материнского элемента или
у края дисплея устройства.

00:00:37.780 --> 00:00:39.350
На самом деле это вопрос дизайна,

00:00:39.350 --> 00:00:42.050
поскольку иногда как раз нужно
расположение по краю, например, чтобы

00:00:42.050 --> 00:00:45.140
добиться эффекта изображения без полей,
о котором я говорила раньше.

00:00:45.140 --> 00:00:49.109
В любом случае вы можете использовать
свободное пространство, чтобы сделать

00:00:49.109 --> 00:00:53.130
разметку просторнее и немного облегчить
чтение и просмотр контента.

00:00:53.130 --> 00:00:56.840
Я покажу вам, что получится, если добавить
отступ или поле к элементу View.

00:00:56.840 --> 00:00:59.480
Начнем с компонента TextView,
который выводит текст Hello.

00:00:59.480 --> 00:01:01.880
Если добавить 8 dp
отступа к элементу View,

00:01:01.880 --> 00:01:05.450
то он увеличится на 8 dp
в каждом направлении.

00:01:05.450 --> 00:01:08.081
Если добавить поле размером
8 dp в элемент TextView,

00:01:08.081 --> 00:01:10.850
то результат будет выглядеть так.

00:01:10.850 --> 00:01:13.470
Чтобы добавить поле, нужно
расположить его внутри ViewGroup,

00:01:13.470 --> 00:01:16.360
поэтому у меня он находится
в этой разметке LinearLayout.

00:01:16.360 --> 00:01:19.350
В разметке LinearLayout исходный TextView

00:01:19.350 --> 00:01:21.260
сокращается на 8 dp.

00:01:21.260 --> 00:01:23.330
Слева и сверху.

00:01:23.330 --> 00:01:25.510
И с боков тоже.

00:01:25.510 --> 00:01:27.860
Поэтому, хотя вы создаете

00:01:27.860 --> 00:01:32.780
отступ или поле на дочернем TextView,
отступ производится самим TextView.

00:01:32.780 --> 00:01:35.900
Поля же создаются
материнским элементом ViewGroup.

00:01:35.900 --> 00:01:39.685
Если вы используйте оба способа,
и у вас не установлен фон для

00:01:39.685 --> 00:01:42.820
TextView, то результаты будут
выглядеть одинаково.

00:01:42.820 --> 00:01:46.030
Текст будет находиться на расстоянии
8 dp от левого края и на 8 dp ниже

00:01:46.030 --> 00:01:48.390
верхнего края устройства.

00:01:48.390 --> 00:01:51.780
Однако если в элементе TextView
установлен цветной фон,

00:01:51.780 --> 00:01:54.990
то пользователь увидит, что
TextView такого большого размера.

00:01:54.990 --> 00:01:58.660
На другом же устройстве
TextView будет только такого размера.

00:01:58.660 --> 00:02:00.700
Вот код для
отображения отступа в элементе view.

00:02:02.040 --> 00:02:06.576
В XML-элементе TextView вы
задаете новый атрибут:

00:02:06.576 --> 00:02:10.800
android:padding = "8 dp"
[отступ равен 8 dp].

00:02:10.800 --> 00:02:12.320
Вы можете выбрать любой размер

00:02:12.320 --> 00:02:15.330
отступа, главное,
чтобы он исчислялся в dp.

00:02:15.330 --> 00:02:19.080
Когда мы устанавливаем 8 dp отступа,
то отсчитывается 8 dp

00:02:19.080 --> 00:02:21.410
от левого, верхнего, нижнего
и правого краев TextView.

00:02:22.460 --> 00:02:25.100
Вместо того чтобы использовать
общий атрибут android:padding,

00:02:25.100 --> 00:02:28.970
мы можем разделить атрибуты на
левый, правый, верхний и нижний.

00:02:28.970 --> 00:02:32.550
Эти четыре строки кода
действуют так же, как одна эта строка.

00:02:32.550 --> 00:02:35.820
Однако эти четыре атрибута
позволяют вам иметь разную величину

00:02:35.820 --> 00:02:39.420
отступа левого, правого
верхнего и нижнего краев.

00:02:39.420 --> 00:02:43.390
Необязательно устанавливать одинаковую
величину отступа для всех четырех сторон.

00:02:43.390 --> 00:02:47.280
Величина отступа по умолчанию равна нулю.
Поэтому, если настроить отступ слева,

00:02:47.280 --> 00:02:52.110
справа, сверху, но не снизу,
отступ снизу будет равен 0 dp.

00:02:52.110 --> 00:02:55.990
Чтобы настроить величину полей, нужно
снова добавить в TextView атрибут.

00:02:55.990 --> 00:03:00.206
Название атрибута — android:layout_margin.

00:03:00.206 --> 00:03:04.750
Мы можем задать значение, например 8 dp.
Тогда дочерний TextView отодвигается

00:03:04.750 --> 00:03:07.440
от родительского элемента на 8 dp
со всех сторон.

00:03:07.440 --> 00:03:11.770
Если наверху есть другой
дочерний TextView, то атрибут margin

00:03:11.770 --> 00:03:15.000
поместит этот TextView на 8 dp
ниже края первого элемента TextView.

00:03:16.060 --> 00:03:18.920
Можете представить, что наличие полей —
это будто маленькое силовое поле

00:03:18.920 --> 00:03:20.050
вокруг этого элемента view.

00:03:20.050 --> 00:03:23.750
Другие элементы view не могут войти
в окружающую его зону размером в 8 dp.

00:03:23.750 --> 00:03:27.621
Так можно разделить атрибут layout_margin
на 4 атрибута для каждой стороны:

00:03:27.621 --> 00:03:31.750
установить поле слева, справа,
сверху и снизу.

00:03:31.750 --> 00:03:35.780
Если не задать какое-нибудь значение,
то по умолчанию оно будет нулевым.

00:03:35.780 --> 00:03:38.730
Чтобы помнить, что именно ViewGroup
задает позиции этих дочерних

00:03:38.730 --> 00:03:41.930
элементов, основываясь на величине полей,
можете посмотреть на атрибуты.

00:03:41.930 --> 00:03:45.130
Все они начинаются с layout_margin.

00:03:45.130 --> 00:03:48.340
Таким образом, вы понимаете, что
именно ViewGroup определяет позицию

00:03:48.340 --> 00:03:49.900
этих элементов view.

00:03:50.160 --> 00:03:52.790
Отступ и поля
можно применить ко всем view.

00:03:52.790 --> 00:03:55.960
Давайте применим полученные
знания об атрибутах на практике.

00:03:55.960 --> 00:03:58.500
У меня есть три элемента TextView
в линейной разметке.

00:03:58.500 --> 00:04:01.000
Все три расположены прямо
у левого края экрана, поэтому

00:04:01.000 --> 00:04:02.659
мне нужно добавить немного пространства.

00:04:03.390 --> 00:04:04.910
Попробуем добавить поля.

00:04:05.910 --> 00:04:08.335
Отлично, теперь вокруг
этого элемента TextView больше места.

00:04:09.420 --> 00:04:11.755
Сделаю то же самое с оставшимися
двумя элементами TextView.

00:04:12.250 --> 00:04:17.029
Любопытно. Здесь 16 dp,
а здесь – 32 dp, потому что

00:04:17.029 --> 00:04:20.260
производится отступ 8 dp от нижнего
поля первого элемента TextView

00:04:20.260 --> 00:04:22.960
и отступ 8 dp от верхнего поля
второго элемента TextView.

00:04:22.960 --> 00:04:25.180
Если мы хотим добиться последовательного
отступа, чтобы

00:04:25.180 --> 00:04:29.750
между элементами всегда было 16 dp,
нам нужно изменить вот этот атрибут поля.

00:04:30.250 --> 00:04:32.900
Я могу разбить его на
отдельные величины полей.

00:04:33.100 --> 00:04:37.980
Этот код дает мне левое поле размером
16 dp и верхнее поле размером 16 dp.

00:04:37.980 --> 00:04:40.750
Для первого элемента TextView
нижнего поля нет, поэтому

00:04:40.750 --> 00:04:43.590
это пространство между элементами
теперь имеет правильный размер 16 dp.

00:04:44.090 --> 00:04:46.970
То же самое касается последнего TextView.

00:04:46.970 --> 00:04:48.980
Здорово, теперь вертикальные
интервалы равнозначны.

00:04:49.900 --> 00:04:53.420
Ранее я говорила, что мы добавляем
свободное пространство

00:04:53.420 --> 00:04:56.240
к краям этих элементов;
формально это пространство прозрачное.

00:04:56.240 --> 00:04:58.690
Можно смотреть сквозь него,
видеть то, что за ним.

00:04:58.690 --> 00:05:02.100
В нашем случае у элемента ViewGroup
серый фон.

00:05:02.100 --> 00:05:05.390
На устройстве разметка будет одинаковой
независимо от того, используется

00:05:05.390 --> 00:05:08.785
поле или отступ, потому что в этом случае
у элемента TextView нет цветного фона.

00:05:09.820 --> 00:05:12.490
Давайте добавим его и посмотрим,
где границы каждого элемента view.

00:05:13.330 --> 00:05:16.180
Теперь у первого элемента TextView
есть цветной фон.

00:05:16.180 --> 00:05:20.178
Мы добавили левые и верхние поля
и видим, что ViewGroup просто

00:05:20.178 --> 00:05:22.600
отодвигает TextView вправо на 8 dp
и вниз на 8 dp.

00:05:22.600 --> 00:05:26.950
Мы можем заменить поля отступом,
и теперь мы видим, что TextView стал

00:05:26.950 --> 00:05:29.580
больше и занимает эти 8 dp
пространства слева и сверху.

00:05:30.600 --> 00:05:33.210
Итак, на устройстве все будет
выглядеть по-разному, в зависимости

00:05:33.210 --> 00:05:35.120
от того, поля или отступ используются,

00:05:35.120 --> 00:05:38.000
и имеет ли этот элемент TextView
цветной фон.

00:05:38.000 --> 00:05:40.570
Мы можем сделать то же самое
с остальными элементами view.

00:05:41.830 --> 00:05:45.400
Отступ и поля можно добавлять
не только для дочерних элементов view,

00:05:45.400 --> 00:05:47.840
но и для элемента ViewGroup.

00:05:47.840 --> 00:05:50.520
Если я добавлю отступ в линейной разметке,

00:05:50.520 --> 00:05:55.680
то элементы view будут сдвинуты
на 16 dp со всех сторон.

00:05:55.680 --> 00:05:59.390
Я упоминала, что вы можете задать
любую величину отступа или поля.

00:05:59.390 --> 00:06:01.380
Но как узнать, какую величину выбрать?

00:06:01.380 --> 00:06:04.740
В руководстве по материальному дизайну
рекомендуется использование интервалов

00:06:04.740 --> 00:06:05.750
размером 8 dp.

00:06:05.750 --> 00:06:09.190
Это немного более продвинутый уровень
знаний, но в целом это значит, что

00:06:09.190 --> 00:06:13.000
компоненты должны выстраиваться на экране
в соответствии с этой квадратной сеткой.

00:06:13.000 --> 00:06:15.870
Квадраты не видны на дисплее, но

00:06:15.870 --> 00:06:17.710
если вы захотите поместить текст здесь,

00:06:17.710 --> 00:06:21.090
то нужно будет переместить его
на два квадрата влево.

00:06:21.090 --> 00:06:25.280
Два квадрата на этой сетке
равнозначны 16 dp.

00:06:25.280 --> 00:06:28.980
На экране, отображающем почтовый ящик,
все иконки выстроены в эту линию.

00:06:28.980 --> 00:06:33.120
Они расположены на 16 dp правее
левого края экрана,

00:06:33.120 --> 00:06:38.020
а весь текст вот здесь расположен
на 72 dp правее левого края дисплея.

00:06:38.020 --> 00:06:41.280
Таким образом, становится понятно, что
контент располагается вдоль

00:06:41.280 --> 00:06:42.280
определенных линий.

00:06:42.280 --> 00:06:44.440
Вот другой способ показать это.

00:06:44.440 --> 00:06:47.160
На этом скриншоте из приложения Google I/O

00:06:47.160 --> 00:06:53.920
контент выстроен вдоль этой
линии 16 dp, а также этой линии 72 dp.

00:06:53.920 --> 00:06:57.395
По сути это на 72 dp правее
левого края дисплея.

00:06:57.395 --> 00:06:58.855
На этом краю

00:06:58.855 --> 00:07:03.303
контент расположен за 16 dp до
правого края дисплея.

00:07:03.303 --> 00:07:05.485
Планшеты
имеют дисплеи большего размера, поэтому

00:07:05.485 --> 00:07:07.495
можно позволить больший отступ.

00:07:07.495 --> 00:07:10.635
Отступ может быть 24 dp от левого
края экрана, то же касается

00:07:10.635 --> 00:07:12.175
и других значений.

00:07:12.175 --> 00:07:16.645
Мы рекомендуем эти величины потому,
что это облегчает чтение контента.

00:07:16.645 --> 00:07:20.250
Например, если бы этот заголовок
был смещен на пару пикселей влево,

00:07:20.250 --> 00:07:23.660
а этот подзаголовок смещен
на пару пикселей вправо,

00:07:23.660 --> 00:07:25.560
то здесь край был бы зазубренным.

00:07:25.560 --> 00:07:29.580
Это отвлекало бы пользователей от
чтения самого контента.

00:07:29.580 --> 00:07:34.140
Выравнивание всего вдоль одной линии
упрощает чтение и работу с приложением.

00:07:34.340 --> 00:07:37.920
Приведу пару примеров практического
использования отступа и полей.

00:07:37.920 --> 00:07:39.990
На этом скриншоте Google Calendar

00:07:40.190 --> 00:07:43.480
мы видим, что текст
вот здесь немного смещен.

00:07:43.480 --> 00:07:46.480
Также между событиями календаря
имеется немного свободного пространства.

00:07:46.680 --> 00:07:48.180
Если бы мы использовали отступ,

00:07:48.180 --> 00:07:52.360
то это фоновое изображение
заняло бы это пустое пространство.

00:07:52.360 --> 00:07:55.920
При использовании полей вокруг
элемента view образуется пустое

00:07:55.920 --> 00:07:57.820
пространство, так что, наверное, это поля.

00:07:57.820 --> 00:08:01.890
Вот другой скриншот
страницы с подробностями о событии.

00:08:01.890 --> 00:08:06.160
Здесь много текста,
и есть промежутки больше остальных.

00:08:06.160 --> 00:08:08.900
Мы можем создать подобные более
крупные промежутки с помощью отступа.

00:08:08.900 --> 00:08:13.170
Чтобы создать вот этот промежуток, можно
добавить нижний отступ к этому TextView

00:08:13.370 --> 00:08:15.430
либо верхний отступ к этому элементу view.

00:08:16.140 --> 00:08:17.600
Любой из этих способов подойдет.

00:08:17.600 --> 00:08:20.680
Можно даже использовать
поле разметки [layout_margin].

00:08:20.680 --> 00:08:23.910
В этом случае невозможно сказать,
поля использованы или отступ,

00:08:23.910 --> 00:08:27.650
поскольку фон текста прозрачный.

00:08:28.050 --> 00:08:30.574
Теперь ваш черед попрактиковаться
в назначении разных величин

00:08:30.574 --> 00:08:32.169
отступа и полей.

00:08:32.169 --> 00:08:35.390
Мы предоставили исходный код, доступный
по ссылке ниже, чтобы помочь вам начать.

00:08:35.590 --> 00:08:38.940
Когда вы освоите назначение величин
отступа и полей, попробуйте

00:08:38.940 --> 00:08:40.169
создать такую разметку.

00:08:41.210 --> 00:08:45.780
Кстати, этот текст расположен
на расстоянии 16 dp от краев.

00:08:45.780 --> 00:08:49.410
Однако между двумя элементами TextView
только 8 dp.

00:08:49.410 --> 00:08:51.130
Когда закончите, поставьте здесь галочку.

