WEBVTT
Kind: captions
Language: ja

00:00:00.390 --> 00:00:05.250
これまでに リニアレイアウトが
縦方向や横方向になれると学びました

00:00:05.900 --> 00:00:09.380
又 個々のビューが weight 値を持ってー

00:00:09.380 --> 00:00:11.740
親の余分スペースを埋められる事も
学びました

00:00:12.460 --> 00:00:16.100
今度は 相対レイアウトビューグループを
学ぶ時間です

00:00:16.450 --> 00:00:19.020
これで更に柔軟なレイアウトを
作れるようになります

00:00:19.710 --> 00:00:22.140
相対レイアウトの Ray を覚えていますか？

00:00:22.140 --> 00:00:25.040
彼は父親で　ココのこのビューグループを
代表しています

00:00:25.040 --> 00:00:29.000
彼は子供達のビューがこの容器内に
配置されるのを手伝います

00:00:29.000 --> 00:00:32.550
相対レイアウトで
子供達を 親に対し相対的に配置できます

00:00:32.680 --> 00:00:34.840
例えば 親の上部とか 親の下部に

00:00:35.850 --> 00:00:39.400
他のオプションは子供達を
他の子供達に対し相対的に配置する事です

00:00:39.400 --> 00:00:40.660
こんな風にです

00:00:40.660 --> 00:00:45.040
まず ビューが親に対し相対的な例に
注目してみましょう

00:00:45.780 --> 00:00:49.950
この例では この親の相対レイアウトが
幅が match_parent に

00:00:49.950 --> 00:00:53.370
高さが match_parent に設定されているので
デバイスと同じ大きさです

00:00:53.370 --> 00:00:55.580
相対レイアウト内の子供達はー

00:00:55.580 --> 00:01:00.880
親の左 上 右 下の端に
相対的に配置できます

00:01:00.880 --> 00:01:04.519
これがそれのコードです
子供ビュー の XML 要素でー

00:01:04.519 --> 00:01:08.180
例えば イメージやテキストビュー に
これらの属性を加えます

00:01:08.180 --> 00:01:14.230
属性名は android:layout_alignParentTop の
形式をとります

00:01:14.230 --> 00:01:16.870
この属性は 子ビューが

00:01:16.870 --> 00:01:19.400
親の上端に寄るかどうかを決定します

00:01:19.400 --> 00:01:22.500
だから 可能な値は true （真）か 
false （偽）です

00:01:22.500 --> 00:01:25.780
真なら ビューは親の上端に寄せられます

00:01:25.780 --> 00:01:27.880
偽なら 寄せられません

00:01:27.880 --> 00:01:30.990
他の端にも同様に属性があります

00:01:30.990 --> 00:01:34.800
例えば alignParentBottom は親の下端に
寄せる場合です

00:01:34.800 --> 00:01:37.460
alignParentLeft は親の左端に寄せる場合

00:01:37.460 --> 00:01:41.000
alignParentRight は親の右端に寄せる場合です

00:01:41.760 --> 00:01:45.150
これらの属性を複数一度に混ぜ合わせられます

00:01:45.690 --> 00:01:47.680
このイメージビューを例にすると

00:01:48.360 --> 00:01:52.100
alignParentTop 属性を真とします

00:01:52.100 --> 00:01:54.350
なぜなら それは親の上端に
寄っているからです

00:01:54.350 --> 00:01:57.510
また親の左と右端にも寄っています

00:01:57.510 --> 00:02:00.610
それで 左を真 右も真と設定します

00:02:01.040 --> 00:02:04.896
親の下端には寄っていないので
それは偽と設定します

00:02:06.586 --> 00:02:08.410
下のココの このテキストビューは

00:02:08.410 --> 00:02:11.430
親の下端 右端 左端に寄っています

00:02:12.580 --> 00:02:15.910
だから alignParentBottom は真
alignParentLeft は真ー

00:02:15.910 --> 00:02:20.039
alignParentRight は真です
しかし alignParentTop は偽となります

00:02:20.980 --> 00:02:25.880
子を画面の上位置 又は下位置に配置する他に

00:02:25.880 --> 00:02:28.040
特定の隅にもできます

00:02:28.040 --> 00:02:31.600
「誕生日」のテキストビューを
左上の隅に配置したければ

00:02:31.600 --> 00:02:36.190
alignParentTop を真とし
alignParentLeft も真とします

00:02:37.160 --> 00:02:39.560
ビューを右上の隅に配置するには

00:02:39.560 --> 00:02:43.230
それを親の上端と右端に寄せます

00:02:43.230 --> 00:02:46.280
だから　 alignParentTop = "true"
alignParentRight = "true" です

00:02:47.110 --> 00:02:51.930
左下の隅には 親の左端と下端に寄せます

00:02:52.530 --> 00:02:54.490
だから alignParentBottom = ”true" で

00:02:54.490 --> 00:02:56.470
alignParentLeft = "true" となります

00:02:56.960 --> 00:03:00.480
これらの値は偽で デフォルトでは偽なので

00:03:00.480 --> 00:03:02.940
それらを XML コードに
入れる必要はありません

00:03:03.020 --> 00:03:06.170
次に 最後の隅では
親の右端と下端に寄っています

00:03:06.600 --> 00:03:10.720
だから alignParentBottom と
alignParentRight は真です

00:03:10.720 --> 00:03:12.100
ほかの２つは偽です

00:03:12.100 --> 00:03:14.180
だからコードから外せます

00:03:14.180 --> 00:03:16.850
嘘みたいですが
設定できる属性はもっとあります

00:03:16.850 --> 00:03:19.780
ビューを横中央揃えにもできます

00:03:19.780 --> 00:03:23.300
android:layout_centerHorizontal = "true"　
と書きます

00:03:23.300 --> 00:03:27.270
また 前に学習した属性を足す事もできます

00:03:27.530 --> 00:03:30.550
これが下端の行で中央揃えなら

00:03:30.550 --> 00:03:32.220
こう見えます

00:03:32.220 --> 00:03:34.870
最後に layout_centerVertical を紹介しましょう

00:03:34.870 --> 00:03:38.995
これを真に設定すれば
親内でビューが縦中央揃えになります

00:03:38.995 --> 00:03:44.445
この値を設定しなくても
このテキストビューが親の左端に寄る理由はー

00:03:44.445 --> 00:03:47.615
相対レイアウトをつけたビューは全てー

00:03:47.615 --> 00:03:51.060
デフォルトでビューグループの左上に
配置されるからです

00:03:51.060 --> 00:03:54.670
これらの属性は全て ビューグループレイアウト
パラメータと呼ばれます

00:03:54.760 --> 00:03:57.410
子の XML 要素で宣言されてもー

00:03:57.410 --> 00:04:01.990
子供達をどう配置するか知る為に
親ビューグループで使われます

00:04:01.990 --> 00:04:04.758
このように それら全部の始めは
layout_ です

00:04:04.758 --> 00:04:07.720
これも同じパターンで layout_width となり

00:04:07.720 --> 00:04:10.800
layout_height となります
それはもうお馴染みですね

00:04:10.800 --> 00:04:14.370
それら２つの属性もビューグループレイアウト
パラメータです 　なぜならー

00:04:14.370 --> 00:04:17.920
子供達の位置と大きさを決めるため
ビューグループの親に使われるからです

00:04:18.350 --> 00:04:21.889
これが 相対レイアウトとその子供達の
XML です

00:04:21.889 --> 00:04:24.000
詳しくは下のリンクで参照できます

00:04:24.000 --> 00:04:28.110
相対レイアウト開始タグがあり
下のココに閉じタグがあります

00:04:28.110 --> 00:04:30.360
子供達は全てその間にあります

00:04:30.420 --> 00:04:32.320
相対レイアウトの幅と高さは

00:04:32.320 --> 00:04:33.950
match_parent に設定されています

00:04:34.330 --> 00:04:36.460
これは アプリ全体のレイアウトなので

00:04:36.460 --> 00:04:38.670
画面全体を占めます

00:04:38.880 --> 00:04:41.930
子供テキスト３つが
相対レイアウト内で使われてー

00:04:41.930 --> 00:04:44.830
最初のは「Happy」というテキストビューです

00:04:44.830 --> 00:04:49.090
幅と高さは wrap_content で
他にこれらの属性がありー

00:04:49.090 --> 00:04:53.250
相対レイアウトで この子テキストビューを
どこに配置するか決まります

00:04:53.250 --> 00:04:55.550
親の右端に寄せろと指示しー

00:04:55.550 --> 00:04:58.010
親の上端に寄せろと指示します

00:04:58.010 --> 00:05:01.150
それで うまくテキストビューは
画面の右上にきます

00:05:01.710 --> 00:05:05.300
「誕生日」テキストビューでも
幅と高さは wrap content です

00:05:05.300 --> 00:05:08.350
そうして親の左下端に寄せています

00:05:08.350 --> 00:05:12.110
それで左下端は 下のココの隅になります

00:05:12.110 --> 00:05:14.790
この最後のテキストビューには

00:05:14.790 --> 00:05:19.570
親のどこに相対的にするか指定する
特定の属性がありません

00:05:19.570 --> 00:05:22.120
幅と高さを wrap content にするとしか
分かりません

00:05:22.120 --> 00:05:25.703
前に述べたように 
子ビューの位置を指定しなければー

00:05:25.329 --> 00:05:29.329
デフォルトで相対レイアウトは
それを画面の左上に配置します

