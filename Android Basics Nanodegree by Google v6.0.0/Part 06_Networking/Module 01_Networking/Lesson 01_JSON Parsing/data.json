{
  "data": {
    "lesson": {
      "id": 160642,
      "key": "1335cf7d-bb4f-48c6-8503-f14b127d2abc",
      "title": "JSON Parsing",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn how to parse JSON, one of the most useful data formats. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/1335cf7d-bb4f-48c6-8503-f14b127d2abc/160642/1516907443127/JSON%20Parsing%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/1335cf7d-bb4f-48c6-8503-f14b127d2abc/160642/1516907299224/JSON%20Parsing%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 160776,
          "key": "7e580b0e-b0fb-4395-9e24-c3df3383d300",
          "title": "Earthquake at the Coffee Shop",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e580b0e-b0fb-4395-9e24-c3df3383d300",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160792,
              "key": "cf87d0b7-f582-445a-a8a9-78f81732960c",
              "title": "Earthquake at the Coffee Shop",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4tgJ2syEARo",
                "china_cdn_id": "4tgJ2syEARo.mp4"
              }
            }
          ]
        },
        {
          "id": 160677,
          "key": "81ddcf0a-abb5-41a5-93cc-328887e777c0",
          "title": "Where to Find Earthquake Data? ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "81ddcf0a-abb5-41a5-93cc-328887e777c0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160923,
              "key": "8880626121",
              "title": "Where to Find Earthquake Data?",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Other places to find APIs include:\n\nProgrammable Web API Directory: http://www.programmableweb.com/apis/directory\n\nGoogle APIs Explorer: https://developers.google.com/apis-explorer/#p/ \n\nData.gov: http://data.gov\n",
              "user_state": {
                "node_key": "8880626121",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "c3IPNw66sxM",
                  "china_cdn_id": "c3IPNw66sxM.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Where to Find Earthquake Data? - Quiz",
                "alt_text": "",
                "background_image": "//lh3.googleusercontent.com/CMM6ZNPtzE57_TgzT6TW_je44t5m0hBLlVg5ZUOXGZVuVXUO9462YO896Sh91MNjLHzjPoTOjvWLzKWLmYI=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8880626121",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8909329806",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": true,
                    "tabindex": null,
                    "placement": {
                      "height": 0.36807095343680707,
                      "width": 0.8815461346633416,
                      "x": 0.058915211970074814,
                      "y": 0.43767322616407983
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "nCxFKP1rOKE",
                  "china_cdn_id": "nCxFKP1rOKE.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160777,
          "key": "81405c49-5b26-4448-bb0a-1e7cb577540e",
          "title": "Receiving Mocks from Our Designer",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "81405c49-5b26-4448-bb0a-1e7cb577540e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160793,
              "key": "4f96a056-b5ba-41a9-9f18-880e2a077c73",
              "title": "Recieving Mocks from our Designer",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<a href=\"https://developer.android.com/training/best-ui.html\" target=\"_blank\">Tips for building a great UI</a>\n\n<a href=\"https://lh3.googleusercontent.com/g_3Cj8mRrGaNjbO3NSByf6gvgEpvFAiLEJ5swoeVJdvkxhndk8OuSKjU871d8PCmm0yecYwYpisVmStKV9Y=s0#w=1440&h=2560\" target=\"_blank\">The UI Mock-up</a>",
              "video": {
                "youtube_id": "-2R19TpoLG0",
                "china_cdn_id": "-2R19TpoLG0.mp4"
              }
            }
          ]
        },
        {
          "id": 160778,
          "key": "d1a35891-313b-4948-82d2-45f0a508a1f4",
          "title": "Course Map",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d1a35891-313b-4948-82d2-45f0a508a1f4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160922,
              "key": "b46ab254-ca5c-4a5d-8546-dbf1baf88dc8",
              "title": "Course Map",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "__TKCDL9zg4",
                "china_cdn_id": "__TKCDL9zg4.mp4"
              }
            }
          ]
        },
        {
          "id": 160779,
          "key": "e714b1bb-bb34-4708-b5f1-3472a8d591e2",
          "title": "Explore USGS Website As A User",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e714b1bb-bb34-4708-b5f1-3472a8d591e2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160939,
              "key": "8906410065",
              "title": "Explore USGS Website As A User",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "USGS Earthquake real time feeds and notifications: http://earthquake.usgs.gov/earthquakes/feed/v1.0/index.php \n\nUSGS Real-Time Earthquake Data in Spreadsheet Format:\nhttp://earthquake.usgs.gov/earthquakes/feed/v1.0/csv.php",
              "user_state": {
                "node_key": "8906410065",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "ImJal-e49uA",
                  "china_cdn_id": "ImJal-e49uA.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Explore USGS Website As A User - Quiz",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/re5LYuZujpwgNszfRif-PyLhrNaqfkXRb9URStbDXMMHdwc54QssY6PggiGF7gZ-ze0LRZsiwdmRzscJaCU=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8906410065",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8918880057",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": true,
                    "tabindex": null,
                    "placement": {
                      "height": 0.35476718403547675,
                      "width": 0.8778054862842892,
                      "x": 0.060287665845152744,
                      "y": 0.40738943569411723
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "v1s0S53KSc0",
                  "china_cdn_id": "v1s0S53KSc0.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160780,
          "key": "9f79ada1-66b6-4ede-b666-324ba2a4c072",
          "title": "Drive-Through Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f79ada1-66b6-4ede-b666-324ba2a4c072",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160794,
              "key": "58159736-4fd9-43d3-aaee-e7e26d93918c",
              "title": "Drive-Through Data",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ViHbSKJP4ik",
                "china_cdn_id": "ViHbSKJP4ik.mp4"
              }
            }
          ]
        },
        {
          "id": 160781,
          "key": "f51b0643-0287-41ba-a5db-74823b165113",
          "title": "Explore USGS Website As A Developer",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f51b0643-0287-41ba-a5db-74823b165113",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160940,
              "key": "8911779830",
              "title": "Explore USGS Website As A Developer",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Look at the results from the USGS query at http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_week.geojson to see what the data looks like. The left column of this table has some of the data you will find in the JSON that you get back from the USGS website. What do you think these data values represent? If you don't know just give it your best guess. Look at the formatted JSON in a website like jsonprettyprint.com and fill in the table with a description of what you think the parameter is for, in your own words. You can compare your answers to the <a href=\"http://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php\" target=\"_blank\">GeoJSON documentation</a>.\n",
              "user_state": {
                "node_key": "8911779830",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "B1Za-CyyX6c",
                  "china_cdn_id": "B1Za-CyyX6c.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Explore USGS Website As A Developer",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/0MZurfUOG4BXu139Y1Xtwvltl4R57kOLk_y7Dgn6CVZvmW0LOUfr22JSbbsXmIgNeV9v64A0rj9Q_B5dEgQ=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8911779830",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8926459956",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.4551122194513716,
                      "x": 0.3372644438707918,
                      "y": 0.3360587583148559
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.4538653366583541,
                      "x": 0.33888803990999067,
                      "y": 0.4062730742663872
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text3",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.4551122194513716,
                      "x": 0.33756756485251715,
                      "y": 0.4725609756097561
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text4",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.06873614190687362,
                      "width": 0.4513715710723192,
                      "x": 0.3431958129578398,
                      "y": 0.5408120842572062
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text5",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.4551122194513716,
                      "x": 0.33966734165562656,
                      "y": 0.6084087904699627
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text6",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.06873614190687362,
                      "width": 0.45261845386533667,
                      "x": 0.34284946508241115,
                      "y": 0.6814717971564926
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text7",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.456359102244389,
                      "x": 0.341377467585918,
                      "y": 0.7499923536888513
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "454Ltc0pu-4",
                  "china_cdn_id": "454Ltc0pu-4.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160782,
          "key": "a7f94023-2bff-4a17-bf42-42280c73e968",
          "title": "Import Existing Project",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a7f94023-2bff-4a17-bf42-42280c73e968",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160943,
              "key": "8916499910",
              "title": "Import Existing Project",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "8916499910",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "We’ve created an initial version of the Quake Report app for you to start off with, but don’t worry--there’s still plenty left for you to do. \n\nWhen a professional Android developer is joining a new project, it’s very common for the team to already have an existing app that they’re working on. It’s good practice to learn how to read an existing codebase because, oftentimes, you won’t be creating a brand new app from scratch.\n\n### Follow these instructions to import the Quake Report project into Android Studio on your computer:\n\n* Go to <a href=\"https://github.com/udacity/ud843-QuakeReport\" target=\"_blank\">this GitHub project repository link</a>.\n\n* Click on the “Download zip” button to download the app code.\n\n* Unzip the downloaded file on your computer so that you have a “Quake Report” folder.\n\n* Open Android Studio.\n\n* Choose File > Import Project and select the “Quake Report” folder. It may take some time for the project to be imported. If you have any issues, check the Troubleshooting document.\n\n* Once that app has successfully imported, run the app on your Android device (phone, tablet, or emulator). It should look like this screenshot. \n\n<img src=\"//lh3.googleusercontent.com/GQmW_6b4gxgeoRzs26sNRZpVgMNNNaH5xuKXV4aZEEzvNIgo4APYaCL1-wQikaPHr4kp9buy2mqiPQ2g-Q=s0#w=1440&h=2560\" width=\"200\">\n\n\n* Open the Project tab in Android Studio so you can see the file directory.\n\n<img src=\"//lh3.googleusercontent.com/Aldm0kXmSjvVj38EbfLQ_WOYbAqQTtEq0tzyyyv7O67-lhWluNCXBZbG-CaVJjqJNRKib6kf3u61B3FJYg=s0#w=129&h=182\" width=\"140\">     <img src=\"//lh3.googleusercontent.com/JA6W09UB-fS4YJrklJeODqQRqEc4c8odmpZlwiHXQn0l4txR2Bxn4MLjNxLVkZCa-46eEmbWyixxmIWtPdDX=s0#w=331&h=307h=182\" width=\"200\">\n                         \n\n* In Android Studio, browse through the codebase for the Quake Report app and become familiar with the project files. Then answer the questions in the quiz.\n\nNote: If you have trouble understanding the code, no worries. You may consider revisiting the material in the last course that covers displaying a list of data in an app. "
              },
              "question": {
                "title": "Import Existing Project",
                "alt_text": "",
                "background_image": "//lh3.googleusercontent.com/bOW_LDeJISNPmnKZWO31bgci4pQZosjWhNhb9yuRKX3m5pPiF2Z7P4Qz9jiTsFttdoX-wGzZ3sEx6_Y0ftY=s0#w=1312&h=740",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8916499910",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8918939819",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.09977827050997783,
                      "width": 0.9014962593516209,
                      "x": 0.04697241271820449,
                      "y": 0.22876247228381374
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.09977827050997783,
                      "width": 0.9064837905236908,
                      "x": 0.045491739401496256,
                      "y": 0.4779309866962306
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text3",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.09977827050997783,
                      "width": 0.9102244389027432,
                      "x": 0.043718827930174564,
                      "y": 0.709984756097561
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "FyzAw9yoOnk",
                  "china_cdn_id": "FyzAw9yoOnk.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 371552,
          "key": "3dd6bd8a-f5fc-49a0-9faf-8ae160334448",
          "title": "Checking the build.gradle file",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3dd6bd8a-f5fc-49a0-9faf-8ae160334448",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 371553,
              "key": "e3471b4a-5622-44a8-a291-d197359d6f24",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Checking the build.gradle file\n\nWhen importing someone else's code into Android Studio, you should normally use the same package versions and target SDK settings that the original code was designed to use. Keeping your own projects up to date is always a good practice, though.\n           \nSince Android is always releasing new sums of SDK packages, whenever you open or import an old project in Android Studio, you may see an alert saying that the plugin is too old:",
              "instructor_notes": ""
            },
            {
              "id": 467354,
              "key": "b3d9e534-b69e-4668-ba3a-f9b05e97ee58",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/December/5a21dbdd_screen-shot-2017-12-01-at-2.46.23-pm/screen-shot-2017-12-01-at-2.46.23-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b3d9e534-b69e-4668-ba3a-f9b05e97ee58",
              "caption": "Android Studio will warn you if you import a project whose gradle version is too old",
              "alt": "",
              "width": 2330,
              "height": 450,
              "instructor_notes": null
            },
            {
              "id": 371554,
              "key": "a224de39-d413-48ac-8168-364fb45dc97c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To resolve this, click on the hyperlink \"Fix Gradle version (as part of the update, the Android plugin will be updated to version 2.3.3) Open Documentation\" which opens up the documentation with instructions on how to resolve the issue. \n\nAlternatively, you can update the Gradle version directly by navigating to Gradle Scripts, double-clicking the build.gradle file to open and edit the file:",
              "instructor_notes": ""
            },
            {
              "id": 371558,
              "key": "334292b2-b254-431a-b9ce-c54f87be05f5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5991f7d1_screen-shot-2017-08-14-at-12.19.29-pm/screen-shot-2017-08-14-at-12.19.29-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/334292b2-b254-431a-b9ce-c54f87be05f5",
              "caption": "",
              "alt": null,
              "width": 910,
              "height": 754,
              "instructor_notes": null
            },
            {
              "id": 371555,
              "key": "d06c61be-0846-4034-818c-289d692b3222",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Make sure you include the most up-to-date versions of:\n\n* compileSdkVersion\n* buildToolsVersion\n* targetSdkVersion\n\nIn addition, in the same file, check if all the dependencies are also updated, for example when the beta version of Constraint Layout beta was released, she would complain about this from an alpha version, since it is now obsolete:\n",
              "instructor_notes": ""
            },
            {
              "id": 371559,
              "key": "e8698cdb-a111-4446-8928-071c5caac2b5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5991f7e3_screen-shot-2017-08-14-at-12.19.54-pm/screen-shot-2017-08-14-at-12.19.54-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e8698cdb-a111-4446-8928-071c5caac2b5",
              "caption": "",
              "alt": null,
              "width": 930,
              "height": 168,
              "instructor_notes": null
            },
            {
              "id": 371556,
              "key": "f0b5c6f2-9dbb-4198-a0ed-0bce817db92f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nGenerally, Android Studio would highlight any outdated packages, such as:",
              "instructor_notes": ""
            },
            {
              "id": 371560,
              "key": "48ec0cc6-75f0-45f0-afd6-db7e96a1f760",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5991f7f3_screen-shot-2017-08-14-at-12.20.11-pm/screen-shot-2017-08-14-at-12.20.11-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/48ec0cc6-75f0-45f0-afd6-db7e96a1f760",
              "caption": "",
              "alt": null,
              "width": 906,
              "height": 248,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 160783,
          "key": "ca595ca2-6562-44d3-93a3-2a64c8828238",
          "title": "Solution Code on GitHub",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ca595ca2-6562-44d3-93a3-2a64c8828238",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160800,
              "key": "bf6c243e-cd9c-415f-9c72-52b9918924c0",
              "title": "Solution Code on Github",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For the rest of the course, you’re going to be making code changes to the Quake Report app that we provided you in the last quiz.\n\nAt any point, if you get stuck, we encourage you to keep trying different approaches to debug the problem, such as adding <a href=\"https://developer.android.com/studio/command-line/logcat.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#logClass\" target=\"_blank\">log messages</a> or using the <a href=\"https://developer.android.com/studio/debug/index.html\n?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">Android Studio debugger</a>. Practicing your debugging skills is an essential skill that professional developers have acquired through lots of trial and error. \n\nIf you can’t get your app to work, as an absolute last resort, you can refer to our version of the code. The code's home base is on GitHub at <a href=\"https://github.com/udacity/ud843-QuakeReport\" target=\"_blank\">github.com/udacity/ud843-QuakeReport</a>. \n\nMake sure you navigate to the right branch of code from the dropdown menu.\n\nThere is one branch for the state of the code at the end of each lesson, lesson-one, lesson-two, lesson-three, and lesson-four.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 465928,
              "key": "d6b1b04f-869e-4b6d-a250-e06db3bc4ee3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a1f381d_screen-shot-2017-11-29-at-2.43.23-pm/screen-shot-2017-11-29-at-2.43.23-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d6b1b04f-869e-4b6d-a250-e06db3bc4ee3",
              "caption": "Navigate to the branches for each lesson from the dropdown menu",
              "alt": "",
              "width": 1630,
              "height": 824,
              "instructor_notes": null
            },
            {
              "id": 465929,
              "key": "9bee88ac-d93b-494e-a93b-4ba28634349e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you click on the commits link, you can see a history log of all the individual commits (or snapshots that were captured) at certain points in time, when building up the app.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 465930,
              "key": "6ba1cf4a-4159-48a2-89dc-bb20c7c824a7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a1f3880_screen-shot-2017-11-29-at-2.45.11-pm/screen-shot-2017-11-29-at-2.45.11-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6ba1cf4a-4159-48a2-89dc-bb20c7c824a7",
              "caption": "Use the commits link to see a history log of all the individual commits, snapshots captured, at certain points in time of the state of the code",
              "alt": "",
              "width": 1594,
              "height": 102,
              "instructor_notes": null
            },
            {
              "id": 465931,
              "key": "e9611388-45be-45c7-86a8-24b0e227d88a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To download the code, find the gray \"Download ZIP\" button at the right side of the toolbar. That'll download a file called ud843-QuakeReport.zip onto your computer. Unzip that file into a “ud843-QuakeReport” folder.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 465932,
              "key": "1d9c1a49-4424-4795-a58b-90d072ebc587",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/November/5a1f390e_screen-shot-2017-11-29-at-2.47.27-pm/screen-shot-2017-11-29-at-2.47.27-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1d9c1a49-4424-4795-a58b-90d072ebc587",
              "caption": "To download the code, click the \"Clone or Download\" button > Download Zip ",
              "alt": "",
              "width": 720,
              "height": 366,
              "instructor_notes": null
            },
            {
              "id": 465933,
              "key": "57cb77fb-4d9a-480b-a2b8-254b16d14789",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Then import the project into Android Studio. Open up Android Studio, and close any open projects until you get to the splash screen. On the Quick Start pane, select Import project. Once you can see “ud843-QuakeReport” folder, select it, and hit \"OK\".",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160784,
          "key": "68fa24b3-381d-49c5-947a-f0144999837a",
          "title": "Show more info on each earthquake",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "68fa24b3-381d-49c5-947a-f0144999837a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160944,
              "key": "8882006060",
              "title": "Show More Info on Each Earthquake",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Refer to the <a href=\"https://github.com/udacity/ud839_CustomAdapter_Example\" target=\"_blank\">CustomAdapter app</a> from the last course on GitHub.\n\nHint: Create an Earthquake class to hold all the relevant information for a single earthquake.\n\nHint: Create a custom ArrayAdapter to properly display a list of Earthquake objects.",
              "user_state": {
                "node_key": "8882006060",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "7PssSuVC8SE",
                  "china_cdn_id": "7PssSuVC8SE.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Show More Info on Each Earthquake",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/YAuB5Z1ZV_8qUBvi_RGPWVEQij2dKWZDbBoLBmRMsmAMhvjib7DoFo2C4ccpZKcZokISNpGtC0dyXHlRbw=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8882006060",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8925529994",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.07470474813941708,
                      "y": 0.5874292750051968
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "4XGECSTRI0U",
                  "china_cdn_id": "4XGECSTRI0U.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160785,
          "key": "cf8cd625-1fef-4d03-991b-2808a3ddb47c",
          "title": "Overview of JSON",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cf8cd625-1fef-4d03-991b-2808a3ddb47c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160921,
              "key": "258c631a-60b4-46b2-aeb8-f00851fe1e49",
              "title": "Overview of JSON",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "PKc8LVgsDA8",
                "china_cdn_id": "PKc8LVgsDA8.mp4"
              }
            },
            {
              "id": 160796,
              "key": "10771e03-862c-4000-8f02-da85dd3c9cb8",
              "title": "JSON Structure",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Curly Braces \nYou can see that everything in this JSON shoe example is enclosed in a set of curly braces, indicating the whole thing can be treated as an object. \n\n# Commas\nThe keys and values are separated by a colon character, and each key/value pair is separated by a comma character.\nHighlight each bit of code as they are mentioned\nJSON supports the basic data types that you find in most programming languages, such as numbers, strings, booleans, arrays, and objects. You can see a few of those data types in this example:\n\n# Size code\nThe first key called \"size\" has a value of 9.5, and you can tell the value is a number because there are no quotation marks around it.\n\n# Wide code\nThe \"wide\" key has a value of true, with no quotation marks. This indicates that the value is a boolean.\nHighlight country of origin\nIf the number had quotes around it, then it would be a string. And a string is exactly what we find in the second key value pair, where it says \"country-of-origin\" and then the value is set to \"usa\".\n\n# Style\nThe next item is \"style\", and the value of it is represented as an object, as indicated by the curly braces. \n\n# Nested values.\nInside of the style object, we can find two nested values: One for categories, and one for color. Coordinates is represented as an array with three values in the array. \n\nGroups of values can be nested in this way, by using objects and arrays, and then you can place different data types inside of those containers.\n\n# More Info: \n\nFor more info on how JSON is structured, check out <a href=\"http://www.json.org/\" target=\"_blank\">http://www.json.org/</a>.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160786,
          "key": "1c68bec9-f1f7-4654-9d6b-c29332ded407",
          "title": "JSON Components",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1c68bec9-f1f7-4654-9d6b-c29332ded407",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160947,
              "key": "8909999958",
              "title": "JSON Components",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "To review the syntax rules, review <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\" target=\"_blank\">the spec</a>.\n\nAnswer the questions by looking at this specific <a href=\"https://gist.github.com/udacityandroid/919553548886a18a7c14e1e21f18ae5b\" target=\"_blank\">JSON response</a> from a request to the Twitter favorites API (which fetches a list of the 20 most recently liked Tweets by a certain user). You can check the <a href=\"https://dev.twitter.com/rest/reference/get/favorites/list\" target=\"_blank\">API documentation</a> page for more details.",
              "user_state": {
                "node_key": "8909999958",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "2UGRDSIJV2s",
                  "china_cdn_id": "2UGRDSIJV2s.mp4"
                },
                "text": null
              },
              "question": {
                "title": "JSON Components",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/4Y5yXHpSZgKN5d2_-JsA_NXWNepBxdxXK-NEpatUY11p9Cc7phlGg2dYmSimtlbSG2dimK1huvEIWqzXepIa=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8909999958",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8922680074",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6548732843185007,
                      "y": 0.37794105546701784
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.7681967718642846,
                      "y": 0.37940386922290753
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.8760866845337827,
                      "y": 0.37486148673520664
                    }
                  },
                  {
                    "group": "group2",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio4",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.654267118458736,
                      "y": 0.504973553236731
                    }
                  },
                  {
                    "group": "group2",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio5",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.7682183853111362,
                      "y": 0.5054354445632969
                    }
                  },
                  {
                    "group": "group2",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio6",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": 1,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.8777752731209086,
                      "y": 0.5028948392677731
                    }
                  },
                  {
                    "group": "group3",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio7",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": 2,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6530459203280666,
                      "y": 0.6260624312508661
                    }
                  },
                  {
                    "group": "group3",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio8",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": 3,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.7680832802284402,
                      "y": 0.6275406729619942
                    }
                  },
                  {
                    "group": "group3",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio9",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": 4,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.877283155695439,
                      "y": 0.6262934445806194
                    }
                  },
                  {
                    "group": "group4",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio10",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": 5,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6541355840889632,
                      "y": 0.7568829318636537
                    }
                  },
                  {
                    "group": "group4",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio11",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": 6,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.7689912826899128,
                      "y": 0.7524944905959846
                    }
                  },
                  {
                    "group": "group4",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio12",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": 7,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.8787619850852273,
                      "y": 0.7512472622146099
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "fUpI18gwKb8",
                  "china_cdn_id": "fUpI18gwKb8.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160787,
          "key": "1b01fa93-decc-45cb-bc90-b3196d7ebf4d",
          "title": "Traverse Nodes in JSON Object Tree",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1b01fa93-decc-45cb-bc90-b3196d7ebf4d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160949,
              "key": "8903432391",
              "title": "Traverse Nodes in JSON Object Tree",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "**Video Correction:** The prompt for the last question should be \"First hashtag on the image\" instead of \"Username of the first user in the image\".\n\nTo answer the quiz questions, check out this specific <a href=\"https://gist.github.com/udacityandroid/61d07ce8f6ec8396aace14d40b7aa073\" target=\"_blank\">JSON response</a> from the Instagram API for information on a  specific image file. See the <a href=\"https://www.instagram.com/developer/endpoints/media/#get_media\" target=\"_blank\">API documentation page</a> for more details.",
              "user_state": {
                "node_key": "8903432391",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "bYJwG6hRICQ",
                  "china_cdn_id": "bYJwG6hRICQ.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Traverse Nodes in JSON Object Tree",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/f_2UjuKqrgyKh76hFa24eR523446gxfWW_KIU6uKl3hsRtxflwKLUrJS61wZzVuOt9AxQAkkF7PZH55iLYg=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8903432391",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8924540026",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.9103362391033624,
                      "x": 0.04825653798256538,
                      "y": 0.37125831485587585
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.912826899128269,
                      "x": 0.04740037359900374,
                      "y": 0.5080377616797741
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text3",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.9115815691158157,
                      "x": 0.04750412576373755,
                      "y": 0.6341925576626594
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text4",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.912826899128269,
                      "x": 0.04887920298879203,
                      "y": 0.7572985731577397
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "9rhGaYb1NXY",
                  "china_cdn_id": "9rhGaYb1NXY.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160788,
          "key": "85a11c0c-3acd-42e7-b49b-8623d17686b9",
          "title": "Parsing JSON in Android",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "85a11c0c-3acd-42e7-b49b-8623d17686b9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "MainActivity",
                "uri": "https://d17h27t6h515a5.cloudfront.net/topher/2017/December/5a2b162d_mainactivity/mainactivity.java"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 160950,
              "key": "8910879868",
              "title": "Parsing JSON in Android",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "**Note:** The tutorial that is referenced for the quiz has changed its code. Instead, refer to the MainActivity.java file linked in the Supporting Materials at the bottom of this page. \n\nIf you're still interested reviewing the tutorial, check here: <a href=\"http://www.tutorialspoint.com/android/android_json_parser.htm\" target=\"_blank\">Tutorial on Parsing JSON in Android</a>\n\nAdditional resources:\n\n* <a href=\"https://developer.android.com/reference/org/json/JSONObject.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">JSONObject</a>\n\n* <a href=\"https://developer.android.com/reference/org/json/JSONArray.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">JSONArray</a>",
              "user_state": {
                "node_key": "8910879868",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "Qp9Gm-iVxqA",
                  "china_cdn_id": "Qp9Gm-iVxqA.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Parsing JSON in Android",
                "alt_text": "",
                "background_image": "//lh3.googleusercontent.com/Z6th6CBx4Ewm-tb9B23AEQ9TwHL9pTseksl2SOlyjH2ihZU5TqR-JeSotPvpisI9Nn-c0ZUznS2MF1LF=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8910879868",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8923560003",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.09775840597758406,
                      "y": 0.7177107106819914
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "dNm5HEyL1Es",
                  "china_cdn_id": "dNm5HEyL1Es.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160789,
          "key": "605806ca-f880-4764-92bc-2e749e2c674a",
          "title": "Look at Earthquake Query Result",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "605806ca-f880-4764-92bc-2e749e2c674a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160951,
              "key": "8910329211",
              "title": "Look at Earthquake Query Result",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "For step #1, use this URL to fetch earthquake data http://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2016-01-01&endtime=2016-01-31&minmag=6&limit=10  \n\n\nFor step #2, you can search for a “JSON formatter” online, or use these options:\nhttps://jsonformatter.curiousconcept.com/\n http://jsonprettyprint.com/ \n\nFor step #3, if you want to know what each attribute key represents, check the detailed API guide:\nhttp://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php \nhttp://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson_detail.php",
              "user_state": {
                "node_key": "8910329211",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "QffIISFiRGw",
                  "china_cdn_id": "QffIISFiRGw.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Look at Earthquake Query Result",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/Q9wp5zxXVhBhF5_Ls17nAHs3PgqfQjQQQJywKZ42w-xQHqPGfMfeg168cQCb8I9pnsNrqJD6gFHm8Q8Zdg=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8910329211",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8923570003",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.07199564134495641,
                      "y": 0.21618625277161863
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check2",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.07113947696139478,
                      "y": 0.35883224724137336
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check3",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.07004981320049813,
                      "y": 0.5292406441631444
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "oGwR10YQQG8",
                  "china_cdn_id": "oGwR10YQQG8.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160790,
          "key": "7c2713d5-45a0-4ecb-80c2-6c24501c4aa1",
          "title": "Traversing Earthquake JSON Object Tree",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c2713d5-45a0-4ecb-80c2-6c24501c4aa1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160957,
              "key": "8908359976",
              "title": "Traversing Earthquake JSON Object Tree",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Use this sample <a href=\"https://gist.githubusercontent.com/anonymous/e4acd750376afac52eba3702b3659131/raw/06e109b2a2c60626b70c929140fced6ef60bdb45/response.json\" target=\"_blank\">JSON response</a> to answer the quiz questions.\n\nUse these JSON formatters:\n\n <a href=\"http://jsonprettyprint.com/\" target=\"_blank\">JSON pretty print</a> or  <a href=\"https://jsonformatter.curiousconcept.com/\" target=\"_blank\">JSON Formatter and Validator</a>.\n\nRefer to the earlier quiz question on traversal paths if you need help.",
              "user_state": {
                "node_key": "8908359976",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "IFa7lEUApe0",
                  "china_cdn_id": "IFa7lEUApe0.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Traversing Earthquake JSON Object Tree",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/8EEtOswHPVRxxqBTHFqEnXaPyx6VJRC4HyCEjTJJypaJBQZkIAq696uLid617FtsmcukO0Cuv1HEMCPl59c=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8908359976",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8924560084",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.912826899128269,
                      "x": 0.048023038605230384,
                      "y": 0.38225242462496534
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.9115815691158157,
                      "x": 0.04685554171855542,
                      "y": 0.5044808059996881
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text3",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.912826899128269,
                      "x": 0.045921544209215445,
                      "y": 0.6255543913915258
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text4",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.9103362391033624,
                      "x": 0.04825653798256538,
                      "y": 0.7461198015910823
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "Bd0fiIcvAdA",
                  "china_cdn_id": "Bd0fiIcvAdA.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160791,
          "key": "0eca5789-48d7-4662-8e87-d71490519bd4",
          "title": "Parse JSON response in Quake Report app",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0eca5789-48d7-4662-8e87-d71490519bd4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160958,
              "key": "8912759632",
              "title": "Parse JSON response in Quake Report app",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "8912759632",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "In the last quiz, we already talked about how to traverse the JSON object tree to extract the values we care about. You just parsed JSON in your head! That was a bit of a manual, tedious process though, so let’s get the app to do it for us. We will just have to write down the logic step-by-step so that the app can take care of it for us.\n\nTechnically, we would get a real-time response from the Internet, but for now we’re going to simulate the fact that we got *this* particular JSON response by hardcoding it into our app. That will allow us to build out all the logic in our app and test that it works, so that we can handle any JSON response in the future.\n\nThe response we'll be using:\nhttp://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2016-01-01&endtime=2016-01-31&minmag=6&limit=10 \n\n# Your Turn\n\nIn the Quake Report app, you’ll write code to convert this JSON response and turn it into an ArrayList of Earthquake objects with the proper attributes.\n\nCopy/paste the code from the <a href=\"https://gist.github.com/udacityandroid/10892631f57f9f073ab9e1d11cfaafcf\" target=\"_blank\">QueryUtils.java class</a>  (we’ve provided this for you) into a new file within your app. Notice that the particular JSON response we want to use is already defined in the SAMPLE_JSON_RESPONSE String constant at the top of the file.\n\nFinish implementing the TODO that was left in the QueryUtils.extractEarthquakes() method. Here’s some pseudocode of what needs to be done:\n\n     Convert SAMPLE_JSON_RESPONSE String into a JSONObject\n     Extract “features” JSONArray\n     Loop through each feature in the array\n     Get earthquake JSONObject at position i\n     Get “properties” JSONObject\n     Extract “mag” for magnitude\n     Extract “place” for location\n     Extract “time” for time\n     Create Earthquake java object from magnitude, location, and time\n     Add earthquake to list of earthquakes\n\nModify the EarthquakeActivity to call QueryUtils.extractEarthquakes() to get a list of Earthquake objects from the JSON response.\n\nIn EarthquakeActivity, instead of creating a fake list of earthquakes:\n\n     // Create a fake list of earthquakes.\n     ArrayList<Earthquake> earthquakes = new ArrayList<>();\n     earthquakes.add(new Earthquake(\"7.2\", \"San Francisco\", \"Feb 2, 2016\"));\n     earthquakes.add(new Earthquake(\"6.1\", \"London\", \"July 20, 2015\"));\n     earthquakes.add(new Earthquake(\"3.9\", \"Tokyo\", \"Nov 10, 2014\"));\n     earthquakes.add(new Earthquake(\"5.4\", \"Mexico City\", \"May 3, 2014\"));\n     earthquakes.add(new Earthquake(\"2.8\", \"Moscow\", \"Jan 31, 2013\"));\n     earthquakes.add(new Earthquake(\"4.9\", \"Rio de Janeiro\", \"Aug 19, 2012\"));\n     earthquakes.add(new Earthquake(\"1.6\", \"Paris\", \"Oct 30, 2011\"));\n\nReplace with this code:\n\n     // Create a fake list of earthquakes.\n     ArrayList<Earthquake> earthquakes = QueryUtils.extractEarthquakes();\n\n The resulting app should look like this:\n\n<img src=\"https://lh3.googleusercontent.com/V077peaYHVxFM8BYzHUaYLBeo1wjblUagkLLLLw4zupkbmiXY7EI-GD_GBpeMsrfDUkYICzQltIAefK9SekC=s0#w=1440&h=2560\" width=200>"
              },
              "question": {
                "title": "Parse JSON response in Quake Report app",
                "alt_text": "",
                "background_image": "//lh3.googleusercontent.com/pjFRSbitL12yCjroqjneCVOZ6YyhHSkSUad1zpRq0fl4MX5U8HF5HXxPQcCCELNBK2fmmJsDysX9OT6Nft8=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8912759632",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8919990020",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.06820773722077367,
                      "y": 0.24575020733006514
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check2",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.06841531755915317,
                      "y": 0.41033820513875413
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check3",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.06732565379825654,
                      "y": 0.6683296152863428
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "G4QByuw7HuE",
                  "china_cdn_id": "G4QByuw7HuE.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 189395,
          "key": "b0efafc3-4b4d-49a2-94a7-788483daf884",
          "title": "Display date and time of earthquake",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b0efafc3-4b4d-49a2-94a7-788483daf884",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 189396,
              "key": "01ea6476-6908-4d34-a691-02ad499587dd",
              "title": "Display date and time of earthquake",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The next series of coding tasks are about improving the UI to make it match the design mocks provided by our designer. This is familiar to the visual polish steps covered in the last course where you built the Miwok language app.\n\nThe nodes will be presented in a written text format to make it easier for you to see all the steps one-by-one. Any new topics that come up will be explained in-line, but the focus of this course is on networking and not on user interface, so don’t worry if you don’t become an expert on the upcoming topics. If you want more practice with Java programming, we highly suggest that you take the the time to methodically work on these upcoming coding tasks.\n\nLet’s start by updating the way that we display the information for when an earthquake happened. In the current state of our app, I can easily see the magnitude and location of each earthquake, but the time is a long sequence of numbers. The time for the first earthquake is 1454124312220, which isn't in the most helpful format.\n\n<img src=\"https://lh3.googleusercontent.com/TNjsh4VnW0DVK19TlPZEkCvlSHXhC416XdWied-6BHY6SkpT5HwiZXiFtjiWvosKmBtKZdLOfngTFZV5bs0=s0#w=1440&h=2560\" width=\"200\"/>\n\n\n\nLet’s revisit our design mocks. We can see the date and time displayed on separate lines for each earthquake, which is much more readable. \n\n<img src=\"https://lh3.googleusercontent.com/x0v16jPyAD3KGbrrL4WEtKQrlTkJxGZosSKPjzfXc6LC2OQIwdhIBTX7_8d_18QGDnnBu7gsrfyLFPSaJf1O=s0#w=1440&h=2560\" width =\"200\"/>\n\nHow do we go from the time in milliseconds to the date/time format that we want? First, let’s understand what the time in milliseconds represents.\n\n### Unix Time\n\nThis format is called Unix time, and it's describes a time as the number of milliseconds that have passed since midnight 1970 in England (<a href=\"https://en.wikipedia.org/wiki/Coordinated_Universal_Time\" target=\"_blank\">Coordinated Universal Time</a>, if you want to get technical). We need to turn this Unix time into a more readable date and time, but that's a very tricky proposition. You'd probably want to display the time in the correct local time zone for the user, but time zones are <a href=\"https://www.youtube.com/watch?v=-5wpm-gesOY\" target=\"_blank\">incredibly complex</a>. Also depending on where you are in the world, dates are written differently.\n\nFor more info on Unix time, check out <a href=\"https://youtu.be/QJQ691PTKsA\" target=\"_blank\">this video</a>.\n\n### Date Formatting\n\nThankfully, you don't have to handle date formatting yourself. There's a fantastic class called <a href=\"https://developer.android.com/reference/java/text/SimpleDateFormat.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">SimpleDateFormat</a> that knows all about time zones and how dates are written in different parts of the world, and will handle all this complexities for you.\n\nYou supply a desired time format such as: \"yyyy-MM-dd HH:mm:ss\"\n\nIn the time format syntax, characters have special meaning, which is described in detail in <a href=\"https://developer.android.com/reference/java/text/SimpleDateFormat.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">this table</a>.\n\n* “y” stands for year, “yyyy” stands for a 4-digit year like 2016.\n* “M” stands for month, “MM” stands for a 2-digit month like 03.\n* “d” stands for day, “dd” stands for a 2-digit day like 10.\n* “H” stands for hour.\n* “m” stands for minute in hour.\n*  “s” stands for second in minute.\n\nAny characters that are not listed in the table of special characters, are used directly in the output string. If the time format string contains a colon or dash or comma, for example, then the output string will also contain the same punctuation symbol in that direct location.\n \nHere’s an example for the time 1463159138711 milliseconds. We create a SimpleDateFormat object with the format \"yyyy-MM-dd HH:mm:ss a\", and pass in a Date object initialized with the time 1463159138711 milliseconds, and then the date will be formatted as “2016-05-13 12:07:46 PM”.\n\nThis is the code. First convert the time in milliseconds into a Date object by calling the Date constructor.\n\n     long timeInMilliseconds = 1454124312220L;\n     Date dateObject = new Date(timeInMilliseconds);\n\nThen we can initialize a SimpleDateFormat instance and configure it to provide a more readable representation according to the given format.\n\n     SimpleDateFormat dateFormatter = new SimpleDateFormat(\"MMM DD, yyyy\");\n     String dateToDisplay = dateFormatter.format(dateObject);\n\nAfter these 4 lines of code are executed, the value of dateToDisplay is a beautifully formated date: “Jan 29, 2016”. \n\nIf Android Studio doesn’t recognize these classes, you may need to manually import them at the top of the file.\n\n     import java.text.SimpleDateFormat;\n     import java.util.Date;\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160868,
          "key": "9f8f20b8-175e-4eed-b3f1-fe7db00eda1a",
          "title": "Quiz: Display date and time of earthquake",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f8f20b8-175e-4eed-b3f1-fe7db00eda1a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160870,
              "key": "9969f0b4-82b8-4fb1-b358-9c9b285ba822",
              "title": "Quiz: Display date and time of earthquake",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Your Turn\n\nSince the SimpleDateFormat.format() method requires a <a href=\"https://developer.android.com/reference/java/util/Date.html\" target=\"_blank\">Date object</a>, which in turn requires a long as input, we should extract the time of the earthquake from the JSON response as a long data type (instead of a String). Long is one of the 8 primitive data types in Java <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\" target=\"_blank\">here</a>. \n\nModify the QueryUtils.extractEarthquakes() method to extract the time of the earthquake as a “long” data type from the JSON response.\n\n// Extract the value for the key called \"time\"\nlong time = properties.getLong(\"time\");\n\nThis causes a ripple effect and we need to update other places in the app as well.",
              "instructor_notes": ""
            },
            {
              "id": 160869,
              "key": "90c76d46-b806-4e3e-bd77-abea2f862f34",
              "title": "Quiz: Display date and time of earthquake",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "90c76d46-b806-4e3e-bd77-abea2f862f34",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Store time (in milliseconds) of each earthquake as a long data type, create a <a href=\"https://developer.android.com/reference/java/util/Date.html\">Date</a> object, and Format date and time into a readable string for the user, in EarthquakeAdapter class:",
                "answers": [
                  {
                    "id": "a1468957550428",
                    "text": " In QueryUtils class, extract time as a long when parsing the JSON response",
                    "is_correct": true
                  },
                  {
                    "id": "a1468957601782",
                    "text": " In Earthquake class, store time as a long",
                    "is_correct": true
                  },
                  {
                    "id": "a1468957608941",
                    "text": " Create Date object from time in milliseconds",
                    "is_correct": true
                  },
                  {
                    "id": "a1468957617483",
                    "text": "Use SimpleDateFormat to format the date and time into readable Strings",
                    "is_correct": true
                  },
                  {
                    "id": "a1468957618913",
                    "text": "Update list item layout to show date and time in 2 separate TextViews",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 160871,
              "key": "837d9e4d-1751-46c2-b2aa-0d5fe514e886",
              "title": "Solution: ",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "First, let’s modify the QueryUtils extractEarthquakes() method to extract time as a long data type from the JSON response.\n\nIn the QueryUtils extractEarthquakes() method:\n\n     // Extract the value for the key called \"time\"\n     long time = properties.getLong(\"time\");\n\nThis will cause an error because the Earthquake constructor doesn’t accept a long data type as the third input parameter. Hence, we need to make some changes to the Earthquake class.\n\nChange the data type of the global variable, and rename it so the name is more descriptive of the information stored inside.\n\n*In Earthquake.java:*\n\n      /** Time of the earthquake */\n      private long mTimeInMilliseconds;\n\nModify the Earthquake constructor so that it takes a long data type for the time and update the Javadoc comments.\n\n*In Earthquake.java:*\n\n      /**\n       * Constructs a new {@link Earthquake} object.\n       *\n       * @param magnitude is the magnitude (size) of the earthquake \n       * @param location is the city location of the earthquake\n       * @param timeInMilliseconds is the time in milliseconds (from the Epoch) when the\n       *  earthquake happened\n       */\n      public Earthquake(String magnitude, String location, long timeInMilliseconds) {\n            mMagnitude = magnitude;\n            mLocation = location;\n            mTimeInMilliseconds = timeInMilliseconds;\n      }\n\nUpdate the public getter method so that a long data type is returned.\n\n*In Earthquake.java:*\n\n      /**\n      * Returns the time of the earthquake.\n      */\n      public long getTimeInMilliseconds() {\n         return mTimeInMilliseconds;\n      }\n\nWhen the EarthquakeAdapter creates list items for each earthquake, the adapter must convert the time in milliseconds into a properly formatted date and time. There are now 2 TextViews that display date and time separately, so we need to modify the earthquake_list_item.xml layout to add another TextView and give it an appropriate view ID.\n\n*In earthquake_list_item.xml:*\n\n      <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          xmlns:tools=\"http://schemas.android.com/tools\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"match_parent\"\n          android:orientation=\"horizontal\"\n          android:padding=\"16dp\">\n      \n          <TextView\n              android:id=\"@+id/magnitude\"\n              android:layout_width=\"0dp\"\n              android:layout_height=\"wrap_content\"\n              android:layout_weight=\"1\"\n              tools:text=\"8.9\" />\n      \n          <TextView\n              android:id=\"@+id/location\"\n              android:layout_width=\"0dp\"\n              android:layout_height=\"wrap_content\"\n              android:layout_weight=\"1\"\n              tools:text=\"San Francisco, CA\" />\n      \n          <TextView\n              android:id=\"@+id/date\"\n              android:layout_width=\"0dp\"\n              android:layout_height=\"wrap_content\"\n              android:layout_weight=\"1\"\n              tools:text=\"Mar 6, 2010\" />\n      \n          <TextView\n              android:id=\"@+id/time\"\n              android:layout_width=\"0dp\"\n              android:layout_height=\"wrap_content\"\n              android:layout_weight=\"1\"\n              tools:text=\"3:00 PM\" />\n      \n      </LinearLayout>\n\nWithin the EarthquakeAdapter, we modify the getView() method to produce the formatted strings to display in the corresponding TextViews. We get the time from the current Earthquake object, using currentEarthquake.getTimeInMilliseconds(), and pass that into the Date constructor to form a new Date object. \n\n*In EarthquakeAdapter.java:*\n\n      public View getView(int position, View convertView, ViewGroup parent) {\n      // Check if there is an existing list item view (called convertView) that we can reuse,\n      // otherwise, if convertView is null, then inflate a new list item layout.\n              View listItemView = convertView;\n              if (listItemView == null) {\n                  listItemView = LayoutInflater.from(getContext()).inflate(\n                          R.layout.earthquake_list_item, parent, false);\n              }\n      \n              // Find the earthquake at the given position in the list of earthquakes\n              Earthquake currentEarthquake = getItem(position);\n      \n              // Find the TextView with view ID magnitude\n              TextView magnitudeView = (TextView) listItemView.findViewById(R.id.magnitude);\n              // Display the magnitude of the current earthquake in that TextView\n              magnitudeView.setText(currentEarthquake.getMagnitude());\n      \n              // Find the TextView with view ID location\n              TextView locationView = (TextView) listItemView.findViewById(R.id.location);\n              // Display the location of the current earthquake in that TextView\n              locationView.setText(currentEarthquake.getLocation());\n      \n              // Create a new Date object from the time in milliseconds of the earthquake\n              Date dateObject = new Date(currentEarthquake.getTimeInMilliseconds());\n      \n              // Find the TextView with view ID date\n              TextView dateView = (TextView) listItemView.findViewById(R.id.date);\n              // Format the date string (i.e. \"Mar 3, 1984\")\n              String formattedDate = formatDate(dateObject);\n              // Display the date of the current earthquake in that TextView\n              dateView.setText(formattedDate);\n      \n              // Find the TextView with view ID time\n              TextView timeView = (TextView) listItemView.findViewById(R.id.time);\n              // Format the time string (i.e. \"4:30PM\")\n              String formattedTime = formatTime(dateObject);\n              // Display the time of the current earthquake in that TextView\n              timeView.setText(formattedTime);\n      \n              // Return the list item view that is now showing the appropriate data\n              return listItemView;\n      }\n\nThe above code includes two helper methods, formatDate() and formatTime(), that we created to accept a Date object and return an appropriately formatted date string using SimpleDateFormat.\n\n      /**\n       * Return the formatted date string (i.e. \"Mar 3, 1984\") from a Date object.\n       */\n      private String formatDate(Date dateObject) {\n          SimpleDateFormat dateFormat = new SimpleDateFormat(\"LLL dd, yyyy\");\n          return dateFormat.format(dateObject);\n      }\n      \n      /**\n       * Return the formatted date string (i.e. \"4:30 PM\") from a Date object.\n       */\n      private String formatTime(Date dateObject) {\n          SimpleDateFormat timeFormat = new SimpleDateFormat(\"h:mm a\");\n          return timeFormat.format(dateObject);\n      }\n\nWith all these changes in place, the app should look like the following screenshot when we run it on our device. Note that it takes many rounds of trial/error to make the formatting look precisely as we wanted. It didn’t take just one try to get all the code to run perfectly.\n\n<img src=\"https://lh3.googleusercontent.com/2W9iMQc_osSlH5jKSEcpS4b5ALyZy7yTSicxOXcXHgcuazhrhnNGVf25xssa8uTWXwW0D7Hh-XrQHu0y-ziH=s0#w=1440&h=2560\" width=\"200\">\n\nGreat job! The date and time of the earthquake are looking much more readable now!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160872,
          "key": "9ab4ec3d-aa72-40f1-af9e-d4fa47bc799a",
          "title": "Split location into 2 TextViews",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9ab4ec3d-aa72-40f1-af9e-d4fa47bc799a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160975,
              "key": "8924600151",
              "title": "Split location into 2 TextViews",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "Hint: If you get stuck, check out this StackOverflow <a href=\"http://stackoverflow.com/questions/3481828/how-to-split-a-string-in-java/3481842#3481842\" target=\"_blank\">post</a>.",
              "user_state": {
                "node_key": "8924600151",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "Now let’s move onto location. We can revisit our design mocks to see how the location of each earthquake should be displayed. The design displays proximity information on two lines; the first line shows the distance from the city specified in the second line. Since both lines of text appear in different font styles and font colors, it would be wise to use 2 different TextViews here.\n\n<img src=\"https://lh3.googleusercontent.com/zgWlUKzvWxneuMYOJ2jJoiwxIqWyNzL7f7DvHjAw2BY91F5XzyGD11DFYLSQ9WRwPgxTfyrQVaps9hxA0Ls=s0#w=1440&h=2560\" width=\"200\"/>\n\n\n### Split one String into two separate Strings\n\nIf you look at the JSON response we receive from the USGS dataset, the String value from the “place” key comes in two forms:\n“74km NW of Rumoi, Japan”\n“Pacific-Antarctic Ridge”\n\nThe goal is to split the one location String into two Strings, so that they can be displayed in two separate TextViews. Since some locations may not provide details on a km distance from the location, we can use the phrase “Near the” as a substitute. \n“74km NW of Rumoi, Japan” --> “74km NW of” and “Rumoi, Japan”\n“Pacific-Antarctic Ridge” --> “Near the” and “Pacific-Antarctic Ridge”\n\nTo make it easier to refer to these separate Strings, we can call one String the primary location (i.e. “Rumoi, Japan” or “Pacific-Antarctic Rdige”) and the other String the location offset (“74km NW of” or “Near the”).\n\n### String Manipulation\n\nIn this task, you’ll practice manipulating Strings. This means learning to chop and piece together different parts of Strings, so that you can create a String in the format you desire. There is a whole bunch of methods offered by the <a href=\"https://developer.android.com/reference/java/lang/String.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">String class</a> in Java, to help you perform these tasks. \n\nMany of them assume that you understand that a String is simply a sequence of characters. For a String like “hello”, the length is 5 characters long, and the first character “h” is located at index 0, “e” is located at index 1, “l” at index 2, and so on.\n\nYou may also see <a href=\"https://developer.android.com/reference/java/lang/CharSequence.html\" target=\"_blank\">CharSequence</a> in the documentation. A CharSequence is set of characters, and a String is a more specific type of CharSequence (the String class extends from CharSequence class). If a method requires a CharSequence as input, you can pass in a String.  \n\nHere are some additional methods you can call on a String object:\n\n<a href=\"https://developer.android.com/reference/java/lang/String.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#length()\" target=\"_blank\">length()</a> - Returns the number of characters in a String\n\n<a href=\"https://developer.android.com/reference/java/lang/String.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#contains(java.lang.CharSequence)\" target=\"_blank\">contains(CharSequence cs)</a> - Returns true or false depending on whether or not the input CharSequence (or input String) is contained within the original String \n\n<a href=\"https://developer.android.com/reference/java/lang/String.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#indexOf(java.lang.String)\" target=\"_blank\">indexOf(String string)</a> - Returns the index of where the input String first appears in the original String, or returns -1 if there input String is not found in the original String\n\n<a href=\"https://developer.android.com/reference/java/lang/String.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#split(java.lang.String)\" target=\"_blank\">split(String string)</a> - Returns an array of String parts by splitting the original String at the locations specified in the input String.\n\n<a href=\"https://developer.android.com/reference/java/lang/String.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#substring(int,%20int)\" target=\"_blank\">substring(int start, int end)</a> - Returns a new String that starts at the start index and goes up to (but doesn’t include) the end index.\n\n### Your Turn\n\nIn this coding task, you will split the location text into a location offset (“74km NW of “) and a primary location (“Rumoi, Japan”) and display the 2 Strings in 2 separate TextViews. If there’s no location offset, use “Near the”, along with the primary location (“Pacific-Antarctic Ridge”).\n\nSince this logic is related to how the information is displayed in the UI, make the code changes in the EarthquakeAdapter class. You could technically make the code change in the Earthquake class, and ultimately it can come down to personal preference of the developer on where to put the code. In this case, we prefer to store the original location String in the Earthquake class, and keep all UI-related modifications to the earthquake data in the EarthquakeAdapter class. In the future, if our designer wants to display the whole location string together in the UI, we can leave our Earthquake class code as-is, and just modify the logic in the EarthquakeAdapter on how the location is displayed.\n\nThe app should look like the following screenshot when you’re done:\n\n<img src=\"//lh3.googleusercontent.com/1ijR7PEyfC8tOCqC1xjovRBgjg8HftTbZuizI_QppWImmclUGCem09vpcwiRFtsckXCbrQmI2xjC8_hBxHQ=s0#w=1440&h=2560\" width=\"200\">\n\nThis is a tricky task that involves String manipulation with methods you may not have used before, but feel free to use trial and error. There are multiple ways to achieve the desired result. Good luck!"
              },
              "question": {
                "title": "Split location into 2 TextViews",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/V8pq66lwke15jihYxDsJOs51n4Gsl1hDAeucu5zHKXA5FrVMyE2wYJp90eS9EnekEbFbrvZxg1Bh1xxB=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8924600151",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8926530184",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.09977827050997783,
                      "width": 0.6309226932668329,
                      "x": 0.05723971321695761,
                      "y": 0.6918306541019955
                    }
                  }
                ]
              },
              "answer": {
                "text": "To achieve the desired UI mocks, we should add another TextView to the list item layout. The 2 location TextViews have view IDs “@+id/primary_location” and “@+id/location_offset”, respectively.\n\nIn earthquake_list_item.xml:\n\n     <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\"\n    android:padding=\"16dp\">\n\n    <TextView\n        android:id=\"@+id/magnitude\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        tools:text=\"8.9\" />\n\n    <TextView\n        android:id=\"@+id/location_offset\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        tools:text=\"30km S of\" />\n\n    <TextView\n        android:id=\"@+id/primary_location\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        tools:text=\"San Francisco, CA\" />\n\n    <TextView\n        android:id=\"@+id/date\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        tools:text=\"Mar 6, 2010\" />\n\n    <TextView\n        android:id=\"@+id/time\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        tools:text=\"3:00 PM\" />\n\n     </LinearLayout>\n\nAnother change we need is to add “Near the” as a string resource for the locations that don’t have a location offset in km. This String doesn’t come from the original JSON response, and is added to satisfy our application’s UI design. We add the string in the res/values/strings.xml resource file, so we don’t hardcode English strings into the Java code. \n\nIn res/values/strings.xml:\n\n     <!-- Default text to show with the earthquake location (\"Near the Pacific-Antarctic Ridge\")\n      if no specific kilometer distance from the primary location is given [CHAR LIMIT=30] -->\n     <string name=\"near_the\">Near the</string>\n\nNext, we need to modify the EarthquakeAdapter getView() method. At the bottom of this solution, there will be a link to the full EarthquakeAdapter class. As mentioned earlier, it’s okay if you didn’t implement this exactly like we did. Here’s one approach to creating the desired Strings.\n\nFirst, we get the original location String from the Earthquake object and store that in a variable.\n\nIn EarthquakeAdapter getView():\n\n     String originalLocation = currentEarthquake.getLocation();\n\nWe also create new variables (primary location and location offset) to store the resulting Strings.\n\n     String primaryLocation;\n     String locationOffset;\n\n\nWe will be using the split(String string) method in the String class to split the original string at the position where the text “ of “ occurs. The result will be a String containing the characters PRIOR to the “ of ” text and a String containing the characters AFTER the “ of “ text. Since we’ll frequently need to refer to the “ of “ text, we can define a static final String constant (that is a global variable) at the top of the EarthquakeAdapter class.\n\nIn EarthquakeAdapter:\n\n     private static final String LOCATION_SEPARATOR = \" of \";\n\nLet’s dive into the details of the split. If the original location String is “74km NW of Rumoi, Japan” and we split the string using the LOCATION_SEPARATOR, then we will get a String array as the return value. In the String array, the 0th element of the array is “74km NW” and the 1st element of the array is “Rumoi, Japan”. Note that we also add the “ of “ text back to the 0th element of the array, so the locationOffset will say “74km NW of “.\n\nThere is still the issue that some location Strings don’t have a location offset. Hence, we should check if the original location String contains the LOCATION_SEPARATOR first, before we decide to split the string with that separator. If there is no LOCATION_SEPARATOR in the original location String, then we can assume that we should we use the “Near the” text as the location offset, and just use the original location String as the primary location. Here’s the code for the logic we just discussed.\n\nIn EarthquakeAdapter getView():\n\n     if (originalLocation.contains(LOCATION_SEPARATOR)) {\n        String[] parts = originalLocation.split(LOCATION_SEPARATOR);\n        locationOffset = parts[0] + LOCATION_SEPARATOR;\n        primaryLocation = parts[1];\n     } else {\n        locationOffset = getContext().getString(R.string.near_the);\n        primaryLocation = originalLocation;\n     }\n\nOnce we have the 2 separate Strings, we can display them in the 2 TextViews in the list item layout.\n\n     TextView primaryLocationView = (TextView) listItemView.findViewById(R.id.primary_location);\n     primaryLocationView.setText(primaryLocation);\n     \n     TextView locationOffsetView = (TextView) listItemView.findViewById(R.id.location_offset);\n     locationOffsetView.setText(locationOffset);\n\nThen we’re done! The code for the full EarthquakeAdapter class is linked <a href=\"https://github.com/udacity/ud843-QuakeReport/blob/lesson-one/app/src/main/java/com/example/android/quakereport/EarthquakeAdapter.java\" target=\"_blank\">here</a>.\n\nThe app should look like this:\n\n<img src=\"//lh3.googleusercontent.com/N1a_ASTePU2nfhnA4P6eqeli9jYkq2hCwYO9ou7adeICemz9d9Yu5IkilAwWdh_W092WJHMvewDgarOkZLfQ=s0#w=1440&h=2560\" width=\"200\">\n\nNote: An alternative approach to creating the primaryLocation and locationOffset Strings is to use the indexOf(String string) method and the substring(int start, int end) methods. First you would find the index of the “ of ” text. Then you would take a substring of the original location String from the 0th index to the location after the “ of ” text to produce a String that says “74km NW of”. Then you would create another substring on the original String going from the starting index (where we last left off) to the end of the original String, to produce a String that says “Rumoi, Japan”. This approach involves meticulously keeping track of the right indices within the String, so that may get more complicated than using the String split() method. Regardless, either way would work and there are also probably multiple other approaches too!",
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160873,
          "key": "29d231a9-aa43-4b90-bb13-3768ee5f90bf",
          "title": "Magnitude as a Decimal Value",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "29d231a9-aa43-4b90-bb13-3768ee5f90bf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160977,
              "key": "2ae99016-a88e-4aff-97b3-96ace076c8e3",
              "title": "Magnitude as a Decimal Value",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you’ve seen the magnitude values in the JSON responses from the server, you’ll notice that sometimes they come in the form of one or two decimal places, such as “7.2” or “7.29”. However, according to our design mocks we prefer to display magnitude as a String with one decimal place (i.e. “7.2”), so that the magnitude value can be shown centered within a nice colored circle.\n\n<img src=\"//lh3.googleusercontent.com/kQdrMLmV8Y3zc9qMZKJp1cYxQ-s-W7kUBk-Y6eHdKaXGIJwr1fkh67NzVHFlhg47QVVACKal-8OtbsOLTQ2b=s0#w=1440&h=2560\" width=200>\n\n### DecimalFormat\n\nGuess what? There’s a class in Android that can help us! It’s called the <a href=\"https://developer.android.com/reference/java/text/DecimalFormat.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">DecimalFormat</a> class. Just to let you know, there’s also the <a href=\"https://developer.android.com/reference/java/text/NumberFormat.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">NumberFormat</a> class that handles formatting all types of numbers, but it’s an abstract class, so DecimalFormat is a concrete class that we can interact with.\n\nTo initialize a DecimalFormat object, you pass in a format string matching a defined pattern (similar to the year, month, date symbols for the SimpleDateFormat class). There are special symbols with a specific meaning (i.e. 0 means a placeholder for a digit, # also means a digit but leading zeros are not shown). The full list is shown in a table on the <a href=\"https://developer.android.com/reference/java/text/DecimalFormat.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">DecimalFormat</a>  documentation page.\n\nHere’s an example where we use the <a href=\"https://developer.android.com/reference/java/text/DecimalFormat.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)\" target=\"_blank\">DecimalFormat format method</a>. \n\n     DecimalFormat formatter = new DecimalFormat(\"0.00\");\n     String output = formatter.format(2.3234);\n\nSince we specified the DecimalFormat to show 3 digits (“0.00”), formatting a decimal like 2.3234 will truncate down to two decimal places and output a String value of “2.32”.\n\nYou may need to import this class at the top of the file, if it doesn’t automatically import.\n\n     import java.text.DecimalFormat;\n\n### Double data type\n\nYou may have noticed that the DecimalFormat format() method takes a double value as input. “Double” is another primitive data type in Java. You can think of it as a decimal value, compared to the “int” data type which is a whole number.\n\nNote: If you want to be more efficient with storing decimal values, you can also use the “float” data type for decimals. The nuances between “float” and double” are in the official Java documentation site <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\" target=\"_blank\">here</a>.\n\n### Your Turn\n\nIn this upcoming quiz, you will store magnitude as a double data type. This starts by extracting the decimal magnitude value as a double when parsing the JSON response.\n\nIn QueryUtils extractEarthquakes():\n\n     // Extract the value for the key called \"mag\"\n     double magnitude = properties.getDouble(\"mag\");\n\nThis will cause a ripple effect in other parts of the app, and you’ll need to update the Earthquake class, for example, to handle storing a double value for magnitude. Also, in the EarthquakeAdapter, when you try to display the magnitude, use the DecimalFormat class to format the magnitude so only one decimal place is shown. Good luck!\n\n<img src=\"//lh3.googleusercontent.com/Jch519UowgCN0NPnZrBHxTGlHoqcZVcYVpWVxtcfv2cYxnJV2kf_GkR7h3510T3UcPhViCmvqVNHXmP0UhdT=s0#w=1440&h=2560\" width=200>",
              "instructor_notes": ""
            },
            {
              "id": 160979,
              "key": "2fd67d7b-9f90-4497-9df1-843ffcc2b569",
              "title": "Magnitude as a Decimal Value",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2fd67d7b-9f90-4497-9df1-843ffcc2b569",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Store magnitude of each earthquake as a double data type and Format magnitude to display to the user:",
                "answers": [
                  {
                    "id": "a1468980050296",
                    "text": " In the QueryUtils class, extract magnitude as a double when parsing the JSON response",
                    "is_correct": true
                  },
                  {
                    "id": "a1468980052240",
                    "text": " In the Earthquake class, store magnitude as a double",
                    "is_correct": true
                  },
                  {
                    "id": "a1468980052914",
                    "text": " In the EarthquakeAdapter class, use DecimalFormat so that one decimal place is always shown",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 160980,
              "key": "b4d11f5d-d7a5-4baf-872b-2231368d0cda",
              "title": "Magnitude as a Decimal Value - Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "First you should have modified the way that we parse the magnitude value from the JSON response, so that we have a double value.\n\nIn QueryUtils extractEarthquakes():\n\n     // Extract the value for the key called \"mag\"\n     double magnitude = properties.getDouble(\"mag\");\n\nAndroid Studio will display an error because we can’t pass a double value into the Earthquake constructor, so we need to update the Earthquake class. Inside the Earthquake class:\nthe magnitude global variable should be a double\nthe constructor should accept a double value as input \nand the magnitude getter method should return a double. \n\n\nNote that the ellipsis (...) means that we’ve omitted parts of the code so that the code changes are easier to see, but the other parts of the code are still there if you check the full file.\n\nIn Earthquake.java:\n\n     /** Magnitude of the earthquake */\n     private double mMagnitude;\n     \n     …\n\n     /**\n      * Constructs a new {@link Earthquake} object.\n      *\n      * @param magnitude is the magnitude (size) of the earthquake\n      * @param location is the location where the earthquake happened\n      * @param timeInMilliseconds is the time in milliseconds (from the Epoch) when the\n      *                           earthquake happened\n      */\n     public Earthquake(double magnitude, String location, long timeInMilliseconds) {\n         mMagnitude = magnitude;\n         mLocation = location;\n         mTimeInMilliseconds = timeInMilliseconds;\n     }\n\n     …\n\n     /**\n      * Returns the magnitude of the earthquake.\n      */\n     public double getMagnitude() {\n         return mMagnitude;\n     }\n\nAnother advantage to storing the earthquake magnitude as a double is that we can do math calculations easily. For example, if we wanted to find the average magnitude of all the earthquakes, we can easily sum up all the magnitudes and divide by the number of earthquakes. We wouldn’t be able to do math calculations if the magnitude values were text Strings. \n\nIn the EarthquakeAdapter, we can format the decimal value into whatever is needed by the UI. In our case, we just want to show one decimal place. We created a helper method called formatMagnitude() that takes a double value as input and returns the formatted string. The helper method initializes a DecimalFormat object instance with the pattern string “0.0”. Then in the getView() method of the adapter, we can read the magnitude value from the current Earthquake object, format the decimal into a string, and then update the TextView to display the value.\n\nIn EarthquakeAdapter.java:\n\n     import java.text.DecimalFormat;\n     \n     …\n     \n     @Override\n     public View getView(int position, View convertView, ViewGroup parent) {\n       \n         …\n\n         // Find the TextView with view ID magnitude\n         TextView magnitudeView = (TextView) listItemView.findViewById(R.id.magnitude);\n         // Format the magnitude to show 1 decimal place\n         String formattedMagnitude = formatMagnitude(currentEarthquake.getMagnitude());\n         // Display the magnitude of the current earthquake in that TextView\n         magnitudeView.setText(formattedMagnitude);\n     \n         …\n     }\n\n     /**\n      * Return the formatted magnitude string showing 1 decimal place (i.e. \"3.2\")\n      * from a decimal magnitude value.\n      */\n     private String formatMagnitude(double magnitude) {\n         DecimalFormat magnitudeFormat = new DecimalFormat(\"0.0\");\n         return magnitudeFormat.format(magnitude);\n     }\n\nThe app should look like this when you’re done.\n\n\n<img src=\"//lh3.googleusercontent.com/-WwPHC5ZdjpYNRJdkhJINq5qF_dvDF8a2G-g9ZJ297Cl_gQlEadJaHV3sqSQqimnz8tErlstdBYcd2nltEQ=s0#w=1440&h=2560\" width=200>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160874,
          "key": "feb082f7-3824-4a31-8d7b-cd1f70d94588",
          "title": "Switch Statement",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "feb082f7-3824-4a31-8d7b-cd1f70d94588",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160959,
              "key": "8918609749",
              "title": "Switch Statement",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "*Note:* For this quiz to accept your answer, write just the contents of the string with no quotes (e.g. `hot` rather than `\"hot\"`). ",
              "user_state": {
                "node_key": "8918609749",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "Z8rlr_tPLXA",
                  "china_cdn_id": "Z8rlr_tPLXA.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Switch Statement",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/r94aU0O3wXaXik6ejYMJVm0mYNODj4PyeKGF4Rm9Nhx2AC_9wwIVdifGtuO9IcWr_15h-4eP4ouPBKcFbA=s0#w=2560&h=1600",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8918609749",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8911470100",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.20049813200498132,
                      "x": 0.33408569487955325,
                      "y": 0.4009608503455862
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.199252801992528,
                      "x": 0.3348381070983811,
                      "y": 0.4670178060256721
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text3",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.199252801992528,
                      "x": 0.3367320211560165,
                      "y": 0.5346453004824349
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text4",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.20049813200498132,
                      "x": 0.337873599003736,
                      "y": 0.6130358237120634
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text5",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.199252801992528,
                      "x": 0.33834059775840597,
                      "y": 0.6828344645362736
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text6",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.07095343680709534,
                      "width": 0.199252801992528,
                      "x": 0.3399231793129281,
                      "y": 0.7451497350722354
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "ckGjK6und3U",
                  "china_cdn_id": "ckGjK6und3U.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160879,
          "key": "3c0d097a-fa41-4e90-bf95-ba0088f3f588",
          "title": "Circle Background for Magnitude",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3c0d097a-fa41-4e90-bf95-ba0088f3f588",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160981,
              "key": "1367f649-a8fc-4d83-a898-a313ed339abd",
              "title": "Circle Background for Magnitude",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now you’ll have a chance to apply what you learned about switch statements to the Quake Report app! Let me provide some context first and walk you through setting your app for the next coding task.\n\nIn the final designs, you’ll notice that there’s a colored circle behind the magnitude value in each list item.\n\n<img src=\"https://lh3.googleusercontent.com/H-3_vHE-l83e-H2QIKAdJ26boEHjiA5PnHh0_WdJ6x7cUSwMWCRsXxH9wD6JEvjdvkOzzTHO-JXdZiAm6A9P=s0#w=1440&h=2560\" width=200>\n\nOur designer provided us this guide on what color the circle should be. The colors range from blue (low magnitude value) to red (high magnitude value). Anything above a magnitude 10 earthquake uses the darkest red color (#C03823). Anything between a magnitude 9 and 10 earthquake uses a slightly lighter red color (#D93218), anything between a magnitude 8 and 9 earthquake uses an even lighter red color (#E13A20), and so on. Each level has a different color. Anything below a 2.0 earthquake uses a blue color (#4A7BA7). The specific hex values are provided below.\n\n<img src=\"https://lh3.googleusercontent.com/TbzujYd5AqUScgLByiDGkDeQZovdgxx8Y-nVnqXt2o1mATz3aZ2AF19m22sN-pRPeBuS4XembtXpuHwxJu0=s0#w=164&h=1189\" width=50/>\n\n### Setup Your App for the Quiz\n\nAdd these colors to your res/values/colors.xml file. You will need to refer to these color resource IDs later in the EarthquakeAdapter when setting up the list item layouts.\n\n     <!-- Color for an earthquake with magnitude 0 and 2 -->\n     <color name=\"magnitude1\">#4A7BA7</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude between 2 and 3 -->\n     <color name=\"magnitude2\">#04B4B3</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude between 3 and 4 -->\n     <color name=\"magnitude3\">#10CAC9</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude between 4 and 5 -->\n     <color name=\"magnitude4\">#F5A623</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude between 5 and 6 -->\n     <color name=\"magnitude5\">#FF7D50</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude between 6 and 7 -->\n     <color name=\"magnitude6\">#FC6644</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude between 7 and 8 -->\n     <color name=\"magnitude7\">#E75F40</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude between 8 and 9 -->\n     <color name=\"magnitude8\">#E13A20</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude between 9 and 10 -->\n     <color name=\"magnitude9\">#D93218</color>\n\n     <!-- Magnitude circle color for an earthquake with magnitude over 10 -->\n     <color name=\"magnitude10plus\">#C03823</color>\n\nDefine a new drawable for the colored circle. Within the project directory pane of Android Studio, right click on the res/drawable folder to add a new drawable resource XML file. Name the file “magnitude_circle”. \n\n<img src=\"https://lh3.googleusercontent.com/zUhqlkoMZcT7ONAU4LNZSLU9oIqQ_xLW1fQymTB-nvEJPSTo8Il4HEtudli28pBJvfKSHVl0yGoSsz0O_Q=s0#w=537&h=84\">\n\n<img src=\"https://lh3.googleusercontent.com/sl1X3wT7_OoK7bdfDOTlVUlZ39bU8Ec_Shf8PWuRPAG84dhOkf19O2429vjQ9TAqCMsemHQeVVURMM-StNAp=s0#w=825&h=478\">\n\nAfterwards, in the project directory pane, you should see the magnitude_circle.xml file appear.\n\n<img src=\"https://lh3.googleusercontent.com/Rx3Ug2dRi20hwux2xlQqsKOLPUKo6M8JHKvxUSyZvcQp1UvhZAFMy1w3TuAMuTNLkI3nnNMbnJsLPIklJ5V5=s0#w=224&h=64\">\n\n\nReplace the contents of the res/drawable/magnitude_circle.xml file with the below XML. \n\nIn magnitude_circle.xml:\n\n     <?xml version=\"1.0\" encoding=\"utf-8\"?>\n     <!-- Background circle for the magnitude value -->\n     <shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"oval\">\n        <solid android:color=\"@color/magnitude1\" />\n        <size\n            android:width=\"36dp\"\n            android:height=\"36dp\" />\n        <corners android:radius=\"18dp\" />\n     </shape>\n     \nBy defining the circle shape in XML, we create a single flexible asset that will scale across devices instead of including multiple image assets from our designer. We can also manipulate the color from Java code, further reducing the number of required assets. Fewer image files in our project means the size of our app will be smaller, which is better for the end user! \n\n\nDiving deep into the topic of shape drawables is out of scope for this course, but you can see this [documentation link](https://developer.android.com/guide/topics/resources/drawable-resource.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#Shape) or this [Codepath tutorial](https://guides.codepath.com/android/Drawables) for more information.\n\nNow modify the list item layout so that the background attribute of the magnitude TextView refers to the new drawable resource we just defined (android:background=\"@drawable/magnitude_circle\"). There are also other tweaks to the TextView appearance, such as font size and color, so that it matches the design mocks.\n\nIn earthquake_list_item.xml:\n\n     …\n\n     <TextView\n        android:id=\"@+id/magnitude\"\n        android:layout_width=\"36dp\"\n        android:layout_height=\"36dp\"\n        android:layout_gravity=\"center_vertical\"\n        android:background=\"@drawable/magnitude_circle\"\n        android:fontFamily=\"sans-serif-medium\"\n        android:gravity=\"center\"\n        android:textColor=\"@android:color/white\"\n        android:textSize=\"16sp\"\n        tools:text=\"8.9\" />\n\n     … \n\nOptionally, you can add 16dp of left margin on the location offset TextView, so that there is some whitespace between the location TextView and the magnitude TextView.\n\nIn earthquake_list_item.xml:\n\n     …\n\n     <TextView\n         android:id=\"@+id/location_offset\"\n         android:layout_marginLeft=\"16dp\"\n         android:layout_width=\"0dp\"\n         android:layout_height=\"wrap_content\"\n         android:layout_weight=\"1\"\n         tools:text=\"30km S of\" />\n\n     … \n\nFinally, you need to modify the EarthquakeAdapter so that the correct color gets set on the background circle for each list item. This code snippet assumes that magnitudeView is a reference to the R.id.magnitude TextView in the list item layout. You will also need to import the GradientDrawable class.\n\nIn EarthquakeAdapter.java:\n\n     import android.graphics.drawable.GradientDrawable;\n\n\nIn EarthquakeAdapter getView():\n\n     …\n\n     // Set the proper background color on the magnitude circle.\n     // Fetch the background from the TextView, which is a GradientDrawable.\n     GradientDrawable magnitudeCircle = (GradientDrawable) magnitudeView.getBackground();\n\n     // Get the appropriate background color based on the current earthquake magnitude\n     int magnitudeColor = getMagnitudeColor(currentEarthquake.getMagnitude());\n\n     // Set the color on the magnitude circle\n     magnitudeCircle.setColor(magnitudeColor);\n\n     …\n\nIf you add the above code to your app, you’ll see an error in Android Studio mentioning that it doesn’t recognize the method getMagnitudeColor() because it will be your job to define this method! \n\n### Your Turn\n\nFinish implementing this design change by defining a private helper method called getMagnitudeColor(double magnitude) that returns the correct color value based on the current earthquake’s magnitude value. Use this opportunity to practice writing a switch statement in the helper method.\n\n<img src=\"https://lh3.googleusercontent.com/drJidkdUcOHD6ZVzH_ViQsTO9tWX21_8v34-Hnh5-kV2H2ewms9fewXnOdiOkl-4TeXXYRAadEE2nmhkAME=s0#w=1440&h=2560\" width=200/>\n\nNote on color values: In Java code, you can refer to the colors that you defined in the colors.xml file using the color resource ID such as R.color.magnitude1, R.color.magnitude2. You still need to convert the color resource ID into a color integer value though. Example:\n\n     int magnitude1Color = ContextCompat.getColor(getContext(), R.color.magnitude1);\n\nNote on testing: Once you think your code is working, you can test it by modifying the sample JSON response in the QueryUtils class. Change the QueryUtils SAMPLE_JSON_RESPONSE constant value so that the earthquakes temporarily have different magnitude values from 0 to over 10. Use the example SAMPLE_JSON_RESPONSE <a href=\"https://gist.github.com/anonymous/e8992fb9c5b5e8cc717c74f84139d4d6\" target=\"_blank\">code snippet</a>. When you run the app on your device, you should see the full range of magnitude color values. \n\n<img src=\"https://lh3.googleusercontent.com/_U0t9ueTivF5grTiyxl565webiza3wPpsXabGb7Dq_OfZ7JbJBQfAWmbeqlZCfyJDpxGNcGWB-Xs8DiKGQ=s0#w=1440&h=2560\" width=200 />",
              "instructor_notes": ""
            },
            {
              "id": 160982,
              "key": "bf47b1dd-37f4-494c-9652-038bbf132a47",
              "title": "Circle Background for Magnitude",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bf47b1dd-37f4-494c-9652-038bbf132a47",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Finish implementing this design change by defining a private helper method called getMagnitudeColor(double magnitude) that returns the correct color value based on the current earthquake’s magnitude.",
                "answers": [
                  {
                    "id": "a1468989347339",
                    "text": "Follow the steps provided in the quiz instructions (defining new colors, modifying the list item layout, adding a shape drawable).",
                    "is_correct": true
                  },
                  {
                    "id": "a1468989348132",
                    "text": "In the EarthquakeAdapter, define this new helper method. Use a switch statement to find the appropriate color resource based on the magnitude value.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 160983,
              "key": "ac384ed7-529c-4d2d-a103-8bf0846aa940",
              "title": "Circle Background for Magnitude - Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this quiz, we asked you to define the getMagnitudeColor() helper method in the EarthquakeAdapter class. We also encouraged you to use a switch statement. This is one way you could have implemented the method. Remember to add break statements in between each case, if you intend to exit at the end of each case!\n\nIn EarthquakeAdapter.java:\n\n     …\n\n     import android.support.v4.content.ContextCompat;\n\n     … \n\n     private int getMagnitudeColor(double magnitude) {\n        int magnitudeColorResourceId;\n        int magnitudeFloor = (int) Math.floor(magnitude);\n        switch (magnitudeFloor) {\n            case 0:\n            case 1:\n                magnitudeColorResourceId = R.color.magnitude1;\n                break;\n            case 2:\n                magnitudeColorResourceId = R.color.magnitude2;\n                break;\n            case 3:\n                magnitudeColorResourceId = R.color.magnitude3;\n                break;\n            case 4:\n                magnitudeColorResourceId = R.color.magnitude4;\n                break;\n            case 5:\n                magnitudeColorResourceId = R.color.magnitude5;\n                break;\n            case 6:\n                magnitudeColorResourceId = R.color.magnitude6;\n                break;\n            case 7:\n                magnitudeColorResourceId = R.color.magnitude7;\n                break;\n            case 8:\n                magnitudeColorResourceId = R.color.magnitude8;\n                break;\n            case 9:\n                magnitudeColorResourceId = R.color.magnitude9;\n                break;\n            default:\n                magnitudeColorResourceId = R.color.magnitude10plus;\n                break;\n        }\n        return ContextCompat.getColor(getContext(), magnitudeColorResourceId);\n     }\n\nWe provided you with the method signature, so that the method would take a double magnitude value as input and return a color integer value. According to the documentation, the switch statement cannot accept a double value, so we should convert our decimal magnitude value into an integer. Also, the precision of the decimal doesn’t matter at this point because we just need to know if the magnitude falls into 1 of 10 possible buckets.\n\nWe can use the <a href=\"https://developer.android.com/reference/java/lang/Math.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">Math class</a> to do some handy mathematical calculations. In this case, we can take the <a href=\"https://developer.android.com/reference/java/lang/Math.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#floor(double)\" target=\"_blank\">“floor”</a> of the decimal magnitude value. This means finding the closest integer less than the decimal value. The floor of the value 1.2 would be the integer 1. Informally, for a positive decimal number, you can think of it as truncating the part of the number after the decimal point.  \n\n     int magnitudeFloor = (int) Math.floor(magnitude);\n\nOnce we have the magnitude in an integer form (stored in the magnitudeFloor variable), we can write a switch statement that performs different logic based on the magnitudeFloor value.\n\n     switch (magnitudeFloor) {\n       ...\n     }\n\nWithin each case, we set the value of the magnitudeColorResourceId variable to be one of the color resources that we defined the colors.xml file. For case 0 and 1, we fall through to the same logic, which is to use the R.color.magnitude1 color. This was a design decision to use the same color for earthquakes with magnitude less than 2. We also have a default case where any earthquake with magnitude higher than 10 will use the R.color.magnitude10plus color resource.\n\nOnce we find the right color resource ID, we still have one more step to convert it into an actual color value. Remember that color resource IDs just point to the resource we defined, but not the value of the color. For example, R.layout.earthquake_list_item is a reference to tell us where the layout is located. It’s just a number, not the full XML layout. \n\nYou can call ContextCompat <a href=\"https://developer.android.com/reference/android/support/v4/content/ContextCompat.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#getColor(android.content.Context,%20int)\" target=\"_blank\">getColor()</a> to convert the color resource ID into an actual integer color value, and return the result as the return value of the getMagnitudeColor() helper method.\n\n     ContextCompat.getColor(getContext(), magnitudeColorResourceId);\n\nEarlier in the EarthquakeAdapter getView() code that we provided you, we set the color value onto the GraidentDrawable which is set on the background of the magnitude TextView. And there you go! The proper color is automatically set on the magnitude circle in the UI!\n\nThe full code difference is located <a href=\"https://github.com/udacity/ud843-QuakeReport/commit/6b40e2d799a59db9e45f7ce80d0ff9f4777e8cc8\" target=_\"blank\">here</a>. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160880,
          "key": "d80cc1e1-f2e7-42ac-be83-71cd93e8c07f",
          "title": "Visual Polish",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d80cc1e1-f2e7-42ac-be83-71cd93e8c07f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160984,
              "key": "d47f2758-d7b0-469a-8479-c73719a3bb13",
              "title": "Visual Polish",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We’re going to add some visual polish on the list. Normally, we would do this step at the end of building an app, but since we’re already focused on UI changes in this lesson, we’ll take care of them now. \n\n### New colors\n\n1. Add these new colors to the res/values/colors.xml file. They will be referenced later in the earthquake_list_item layout that we provide you. \n\n           <!-- Text color for the details of the earthquake in the list item -->\n          <color name=\"textColorEarthquakeDetails\">#B4BAC0</color>\n\n          <!-- Text color for the primary location of the earthquake in the list item -->\n          <color name=\"textColorEarthquakeLocation\">#2B3D4D</color>\n\n### List item layout\n\n2. Update the earthquake_list_item.xml file with the provided layout. We have fixed up the font styling, padding, and positioning of the views to reflect the design mocks. You can use the view IDs we provided, or modify the layout file to use the view IDs that your Java code already depends on.\n\n          <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              xmlns:tools=\"http://schemas.android.com/tools\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"?android:attr/listPreferredItemHeight\"\n              android:orientation=\"horizontal\"\n              android:paddingEnd=\"16dp\"\n              android:paddingLeft=\"16dp\"\n              android:paddingRight=\"16dp\"\n              android:paddingStart=\"16dp\">\n          \n              <TextView\n                  android:id=\"@+id/magnitude\"\n                  android:layout_width=\"36dp\"\n                  android:layout_height=\"36dp\"\n                  android:layout_gravity=\"center_vertical\"\n                  android:background=\"@drawable/magnitude_circle\"\n                  android:fontFamily=\"sans-serif-medium\"\n                  android:gravity=\"center\"\n                  android:textColor=\"@android:color/white\"\n                  android:textSize=\"16sp\"\n                  tools:text=\"8.9\" />\n\n              <LinearLayout\n                  android:layout_width=\"0dp\"\n                  android:layout_height=\"wrap_content\"\n                  android:layout_gravity=\"center_vertical\"\n                  android:layout_marginLeft=\"16dp\"\n                  android:layout_marginStart=\"16dp\"\n                  android:layout_weight=\"1\"\n                  android:orientation=\"vertical\">\n\n                  <TextView\n                      android:id=\"@+id/location_offset\"\n                      android:layout_width=\"wrap_content\"\n                      android:layout_height=\"wrap_content\"\n                      android:ellipsize=\"end\"\n                      android:fontFamily=\"sans-serif-medium\"\n                      android:maxLines=\"1\"\n                      android:textAllCaps=\"true\"\n                      android:textColor=\"@color/textColorEarthquakeDetails\"\n                      android:textSize=\"12sp\"\n                      tools:text=\"30km S of\" />\n\n                  <TextView\n                      android:id=\"@+id/primary_location\"\n                      android:layout_width=\"wrap_content\"\n                      android:layout_height=\"wrap_content\"\n                      android:ellipsize=\"end\"\n                      android:maxLines=\"2\"\n                      android:textColor=\"@color/textColorEarthquakeLocation\"\n                      android:textSize=\"16sp\"\n                      tools:text=\"Long placeholder location that should wrap to more than 2 lines of text\" />\n\n              </LinearLayout>\n\n              <LinearLayout\n                  android:layout_width=\"wrap_content\"\n                  android:layout_height=\"wrap_content\"\n                  android:layout_gravity=\"center_vertical\"\n                  android:layout_marginLeft=\"16dp\"\n                  android:layout_marginStart=\"16dp\"\n                  android:orientation=\"vertical\">\n\n                  <TextView\n                      android:id=\"@+id/date\"\n                      android:layout_width=\"wrap_content\"\n                      android:layout_height=\"wrap_content\"\n                      android:layout_gravity=\"end\"\n                      android:textColor=\"@color/textColorEarthquakeDetails\"\n                      android:textSize=\"12sp\"\n                      tools:text=\"Mar 6, 2010\" />\n\n                  <TextView\n                      android:id=\"@+id/time\"\n                      android:layout_width=\"wrap_content\"\n                      android:layout_height=\"wrap_content\"\n                      android:layout_gravity=\"end\"\n                      android:textColor=\"@color/textColorEarthquakeDetails\"\n                      android:textSize=\"12sp\"\n                      tools:text=\"3:00 PM\" />\n\n              </LinearLayout>\n          </LinearLayout>\n\nTo preview the layout, you can switch to the design pane in Android Studio, or you can run the app on your device.\n\nNotes:\nFor details on the specific attributes, check out the <a href=\"https://developer.android.com/reference/android/widget/TextView.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">TextView documentation</a>. Specifically, the ellipsize and maxLines attributes are probably new to you. These two attributes mean that if the text in the TextView is longer than the number of maxLines, then we can add an ellipsis (“...”) within the text (such as at the end of the text).\nA lot of the positioning was done with the <a href=\"https://developer.android.com/reference/android/widget/LinearLayout.LayoutParams.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#attr_android:layout_gravity\" target=\"_blank\">layout_gravity attribute</a>, which is a LinearLayout layout parameter, just like layout_height and layout_width.\n\n### Hide divider between list items\n\n3. To hide the divider between list items, there are two attributes that you can set on the ListView XML element within the earthquake_activity.xml file. We want to set android:divider to be “@null” and android:dividerHeight to be “0dp”. \n\n          <ListView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n             android:id=\"@+id/list\"\n             android:orientation=\"vertical\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"match_parent\"\n             android:divider=\"@null\"\n             android:dividerHeight=\"0dp\"/>\n\n<a href=\"https://github.com/udacity/ud843-QuakeReport/commit/93a27548d1e904804ba1f564b84ce65e6e386735\" target=\"_blank\">Entire Code Difference</a>\n\n\n### Result\n\nAfter all of those code changes, your app should look like this!\n\n<img src=\"https://lh3.googleusercontent.com/0o5QfZGQErFeHwGsYqKu5gKHBzN_PiJyBsjeFNSZmOp-INcofvU46nugMbOQC6QO7Kleicesty6I2uyW5g=s0#w=1440&h=2560\" width=200>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 160881,
          "key": "9e3938ea-8018-42ba-8753-1f4b4f5f29c8",
          "title": "Add Earthquake Intent",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9e3938ea-8018-42ba-8753-1f4b4f5f29c8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160985,
              "key": "8922730540",
              "title": "Add Earthquake Intent",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "8922730540",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "Ok, there’s actually ONE more thing left to do for the list UI to be finished. And good news, you already know these concepts!\n\nImplementing this feature will involve remembering what we learned in the last course about click listeners on items in a ListView. \n\n### Your Turn\n\nSet up Quake Report so that when users click on a particular list item, they are sent to the USGS web page to see additional details on that earthquake.\n\n<img src=\"https://lh3.googleusercontent.com/Q6ItoEjkQZe6tteOtIdFCg-GutXz1JYud2wAYThffUAsvTfzm2EvYXcYxpfcPly6B6UgAptiGqlCZtJc_g=s0#w=800&h=600\" width=\"500\">\n\nAs you discovered in an earlier quiz, the JSON response from the server contains a website URL for that earthquake. We need to extract that field and store it in our app.\n\nOnce we detect the user has clicked on a list item, we need to open the right web page. Since we don’t care which web browser app on the device opens the web page, we can create and send an implicit intent that contains the website URL. Feel free to search online on how to accomplish the different parts of this task."
              },
              "question": {
                "title": "Add Earthquake Intent",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/lIvGxVM9v9kjhgo-5kZZKRRgLyeaY_qi3f7K3c47t4U-sIJFM2yRFddAj7Csk2LSLiALCjA3xtwCrozhsw=s0#w=912&h=637",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8922730540",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "8923630445",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text1",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.08425720620842572,
                      "width": 0.7581047381546134,
                      "x": 0.08354114713216958,
                      "y": 0.5022519401330376
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "",
                    "label": null,
                    "marker": "text2",
                    "model": "TextInputWidget",
                    "is_text_area": false,
                    "tabindex": null,
                    "placement": {
                      "height": 0.09090909090909091,
                      "width": 0.7605985037406484,
                      "x": 0.09226932668329177,
                      "y": 0.7788248337028825
                    }
                  }
                ]
              },
              "answer": {
                "text": "### Quiz Solution\n\nHere are the answers to the questions:\n\n1. What was the key in the JSON response to get the website URL for the earthquake? “Url”\n2. What intent action did you set on the intent to open the web browser? Intent.ACTION_VIEW\n\n### Extract the website URL\n\nThe JSON response contains a website URL for each earthquake under the key “url”. We need to extract this value alongside the other earthquake data during parsing. Then we should pass in the url into the Earthquake object.\n\nIn QueryUtils extractEarthquake():\n\n      // Extract the value for the key called \"url\"\n      String url = properties.getString(\"url\");\n\n      // Create a new {@link Earthquake} object with the magnitude, location, time,\n      // and url from the JSON response.\n      Earthquake earthquake = new Earthquake(magnitude, location, time, url);\n\n### Store the website URL\n\nThe above change requires us to update the Earthquake class as well. We need to:\n\n * modify the constructor to accept a String input parameter for the URL\n * add a private global variable to store the URL\n * provide a public getter method so that other classes can access that variable.\n\nIn Earthquake.java:\n\n      /** Website URL of the earthquake */\n      private String mUrl;\n      \n      …\n\n      /**\n      * Constructs a new {@link Earthquake} object.\n      *\n      * @param magnitude is the magnitude (size) of the earthquake\n      * @param location is the location where the earthquake happened\n      * @param timeInMilliseconds is the time in milliseconds (from the Epoch) when the\n      *                           earthquake happened\n      * @param url is the website URL to find more details about the earthquake\n      */\n      public Earthquake(double magnitude, String location, long timeInMilliseconds, String url) {\n         mMagnitude = magnitude;\n         mLocation = location;\n         mTimeInMilliseconds = timeInMilliseconds;\n         mUrl = url;\n      }\n\n      …\n\n      /**\n      * Returns the website URL to find more information about the earthquake.\n      */\n      public String getUrl() {\n         return mUrl;\n      }\n\n### Handle the list item click\n\nOnce the earthquake URL is properly stored in the Earthquake objects, we can access the URL when the list item is clicked. From the last course, we learned how to detect and respond when a user taps on a list item. We need to declare an <a href=\"https://developer.android.com/reference/android/widget/AdapterView.OnItemClickListener.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics\" target=\"_blank\">OnItemClickListener</a> on the ListView. OnItemClickListener is an interface, which contains a single method onItemClick(). We declare an anonymous class that implements this interface, and provides customized logic for what should happen in the onItemClick() method. Remember that the onItemClick() method is a callback triggered by the Android system when the user clicks on a list item. \n\nIn EarthquakeActivity onCreate():\n\n      ...\n\n      // Create a new adapter that takes the list of earthquakes as input\n      final EarthquakeAdapter adapter = new EarthquakeAdapter(this, earthquakes);\n      \n      // Set the adapter on the {@link ListView}\n      // so the list can be populated in the user interface\n      earthquakeListView.setAdapter(adapter);\n\n      earthquakeListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n         @Override\n         public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {\n             // Find the current earthquake that was clicked on\n             Earthquake currentEarthquake = adapter.getItem(position);\n      \n             // Convert the String URL into a URI object (to pass into the Intent constructor)\n             Uri earthquakeUri = Uri.parse(currentEarthquake.getUrl());\n\n             // Create a new intent to view the earthquake URI\n             Intent websiteIntent = new Intent(Intent.ACTION_VIEW, earthquakeUri);\n\n             // Send the intent to launch a new activity\n             startActivity(websiteIntent);\n         }\n      });\n\n\n\nWe override the onItemClick() method, so that when a list item is clicked, we find the corresponding Earthquake object from the adapter. (Note that we also had to add the “final” modifier on the EarthquakeAdapter local variable, so that we could access the adapter variable within the OnItemClickListener.) \n\n      Earthquake currentEarthquake = adapter.getItem(position);\n\nThen we can get the URL from the current Earthquake object. But then how do we open the website? What if the user has multiple web browsers installed? Which app should open up the earthquake website? It would be better to use the defaults the user has already chosen, or give them the option. We can do this by creating an implicit intent.\n\nInstead of deciding exactly what activity we want to launch with an intent, we can instead specify what action we want to perform, without giving any option on what activity should actually handle that action. In this case, we'll create an intent with the action of viewing something. What do we want to view? Well this Intent <a href=\"https://developer.android.com/reference/android/content/Intent.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#Intent(java.lang.String,%20android.net.Uri)\" target=\"_blank\">constructor</a> also accepts a URI for the data resource we want to view, and Android will sort out the best app to handle this sort of content. For instance, if the URI represented a location, Android would open up a mapping app. In this case, the resource is an HTTP URL, so Android will usually open up a browser.\n\nThe Intent constructor (that we want to use) requires a Uri object, so we need to convert our URL (in the form of a String) into a URI. We know that our earthquake URL is a more specific form of a URI, so we can use the <a href=\"https://developer.android.com/reference/android/net/Uri.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics#parse(java.lang.String)\" target=\"_blank\">Uri.parse method</a> (see <a href=\"http://stackoverflow.com/questions/3487389/convert-string-to-uri\" target=\"_blank\">this StackOverflow post</a>).\n\n      Uri earthquakeUri = Uri.parse(currentEarthquake.getUrl());\n\nOnce we have the website URL in a Uri object, we can create a new intent.\n\n      Intent websiteIntent = new Intent(Intent.ACTION_VIEW, earthquakeUri);\n\nLastly, we start a new activity with that intent, so that a web browser app on the device will handle the intent and display the website for that earthquake. \n\n      startActivity(websiteIntent);",
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                }
              }
            }
          ]
        },
        {
          "id": 160884,
          "key": "f38dd16b-cadc-4bf0-b68e-e0b91d4343b9",
          "title": "Reflection",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f38dd16b-cadc-4bf0-b68e-e0b91d4343b9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 160986,
              "key": "7d6b761d-7788-4636-9769-f4bbbbb6add5",
              "title": "Reflection",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Explore a New API\n\nCongratulations, you finished Lesson 1! \n\n You’ve made incredible progress on building an app to display critical information about earthquakes in the world. You also learned a ton about how both humans and programs can interact with data sources. That was one of the most important skills of this lesson. An API like USGS returns earthquake data in JSON form, and as a developer, we can parse the JSON and display it however we choose in the user interface of our app. \n\nNow we want you to apply what you’ve learned by exploring a new API that you may want to build into a future app project.\n\nSearch online for a different API that you may want to use in the future.\n\nExplore what information they offer to developers and in what format. Think about how you could display this information within an app that would be helpful to an end user. \n\nShare your findings on the discussion forum!\n\n\nIf you need help finding an API, check out these resources: \n * Programmable Web API Directory: http://www.programmableweb.com/apis/directory\n * Google APIs Explorer: https://developers.google.com/apis-explorer/#p/ \n * Data.gov: http://data.gov",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    }
  ]
}