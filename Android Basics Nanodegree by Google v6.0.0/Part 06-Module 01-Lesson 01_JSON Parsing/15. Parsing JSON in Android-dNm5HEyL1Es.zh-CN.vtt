WEBVTT
Kind: captions
Language: zh-CN

00:00:00.440 --> 00:00:01.200
此次任务的

00:00:01.200 --> 00:00:05.050
目的是练习在 web 上 阅读教程

00:00:05.050 --> 00:00:08.920
并查看 Android 中 JSON 解析的另一示例

00:00:08.920 --> 00:00:13.000
示例在开始时假设存在某特定的 JSON 响应 该响应存储在字符串

00:00:13.000 --> 00:00:17.630
STR JSON 或简称为 strJson 中

00:00:17.630 --> 00:00:21.050
可以看出 在字符串中所有 双引号的所在位置

00:00:21.050 --> 00:00:22.860
都具有反斜线字符

00:00:22.860 --> 00:00:26.100
但一般而言 与我们见到过的 JSON 很相似

00:00:26.100 --> 00:00:29.290
好了 让我们现在开始查看 本示例中的代码

00:00:29.290 --> 00:00:32.049
首先 我要把这一块代码 从中间的小窗口中

00:00:32.049 --> 00:00:35.540
复制粘贴出来 这样读起来 更容易一些

00:00:35.540 --> 00:00:37.690
然后再进行查看

00:00:37.690 --> 00:00:41.710
所以 我所执行的操作是将代码 复制到简单的文本编辑器中

00:00:41.710 --> 00:00:45.890
在本例中 我所使用的是 Sublime 文本编辑 但其实任何一种文本编辑器都可以

00:00:45.890 --> 00:00:50.290
好了 现在我们来说说 在 onCreate 中的代码

00:00:50.290 --> 00:00:52.320
我们已经认识了 字符串 strJson

00:00:52.320 --> 00:00:56.240
其中包含了一个原始 JSON 而我们要在此处研究的

00:00:56.240 --> 00:01:00.330
主要代码其实 就在 try 程序中

00:01:00.330 --> 00:01:03.290
接下来 我们来逐行 查看代码

00:01:03.290 --> 00:01:06.400
首先 创建一个 新 JSON 对象

00:01:06.400 --> 00:01:09.020
使用稍早时创建的 JSON 字符串

00:01:09.020 --> 00:01:12.650
随后 找到 employee 的 jsonArray

00:01:12.650 --> 00:01:15.590
即找到名为 employee 的键值

00:01:15.590 --> 00:01:18.240
接下来 不要使用 getjsonArray 等 getter 方法

00:01:18.240 --> 00:01:22.180
你会看到一个名为 optjsonArray 的方法

00:01:22.180 --> 00:01:25.820
这是获取 JSONArray 返回值 的另一种方法

00:01:25.820 --> 00:01:28.210
访问 developer.android.com 查看 Android

00:01:28.210 --> 00:01:33.580
官方文档 即可了解到 optJSONArray 方法

00:01:33.580 --> 00:01:38.250
在针对给定键名已存在 JSONArray 的情况下 需要返回 JSONArray

00:01:38.250 --> 00:01:42.510
如果相应数组不存在 则方法返回 null

00:01:42.510 --> 00:01:46.200
好了 接下来的主要内容是 创建一个循环

00:01:46.200 --> 00:01:48.720
迭代数组中的 每一个元素

00:01:48.720 --> 00:01:52.640
现在 在此处的第一行中 我们提取数组的

00:01:52.640 --> 00:01:56.392
各个元素 在这里恰好是 一个 JSON 对象

00:01:56.392 --> 00:02:00.510
通过索引 i 调用 方法 getJSONObject

00:02:00.510 --> 00:02:06.140
然后取出整型 ID、字符串 name 和浮点型 salary

00:02:06.140 --> 00:02:08.710
其在本例中为十进制小数

00:02:08.710 --> 00:02:12.420
然后 我们可以计算这些值 以得出一个较长的字符串

00:02:12.420 --> 00:02:15.040
稍后在文本屏幕中 显示所有文本

00:02:16.810 --> 00:02:19.460
你可能已注意到 在这段 JSON 解析 代码的前后

00:02:19.460 --> 00:02:21.340
还有 try-catch 区块

00:02:21.340 --> 00:02:24.120
其作用是在解析出现问题 的情况下防止应用

00:02:24.120 --> 00:02:25.160
发生崩溃

00:02:25.160 --> 00:02:27.330
但不要着急 稍后我们将就 相关内容进行详细讲解

