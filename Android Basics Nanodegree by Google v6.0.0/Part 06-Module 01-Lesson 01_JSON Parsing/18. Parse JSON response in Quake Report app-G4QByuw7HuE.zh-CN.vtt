WEBVTT
Kind: captions
Language: zh-CN

00:00:00.290 --> 00:00:03.890
我们需要修改 Quake Report 应用 以解析 USGS 服务器中的 JSON 响应

00:00:03.890 --> 00:00:07.220
并将其转换为 Earthquake 的 ArrayList

00:00:07.220 --> 00:00:10.430
所以 首先请复制我在 此链接中为你提供的

00:00:10.430 --> 00:00:11.900
QueryUtils 类

00:00:11.900 --> 00:00:14.480
选中全部文本并进行复制

00:00:14.480 --> 00:00:16.392
然后在 Android Studio 中 继续并

00:00:16.392 --> 00:00:19.580
创建名为 QueryUtils 的新 Java 类

00:00:19.580 --> 00:00:23.850
可移除初始 Boilerplate 代码 然后粘贴所复制的内容

00:00:23.850 --> 00:00:25.825
让我们折叠此窗格 以便轻松阅读此文件

00:00:25.825 --> 00:00:28.775
现在 可通过快速浏览 熟悉此文件

00:00:28.775 --> 00:00:31.060
让我们立刻进行回顾

00:00:31.060 --> 00:00:33.990
此类具有一个全大写的 名为 SAMPLE_JSON_RESPONSE

00:00:33.990 --> 00:00:36.170
的 String 常量

00:00:36.170 --> 00:00:38.480
由于这是静态的 最终常量值

00:00:38.480 --> 00:00:40.490
所以意味着该值永远不会变化

00:00:40.490 --> 00:00:43.090
所以切记 当我们将此常量 设置为与来自 USGS 查询

00:00:43.090 --> 00:00:44.630
的响应相同时

00:00:44.630 --> 00:00:47.500
双引号等特殊 字符将被转义为

00:00:47.500 --> 00:00:49.260
反斜杠字符

00:00:49.260 --> 00:00:50.870
然后这是私有构造函数

00:00:50.870 --> 00:00:53.830
这意味着所有人都不应 创建该类的实例

00:00:53.830 --> 00:00:57.040
这是 Utility 类 所以 包含静态变量和

00:00:57.040 --> 00:00:59.690
静态方法 此类 允许你直接调用方法

00:00:59.690 --> 00:01:02.560
而无需具有该类 的对象实例

00:01:02.560 --> 00:01:05.730
现在 最重要的方法是 被称为 extractEarthquakes

00:01:05.730 --> 00:01:09.320
的公共静态方法 该方法不接收任何输入

00:01:09.320 --> 00:01:11.970
并返回 Earthquake 的 ArrayList

00:01:11.970 --> 00:01:15.910
在该方法内 创建空的 Earthquake ArrayList

00:01:15.910 --> 00:01:18.060
并在方法结尾将其返回

00:01:18.060 --> 00:01:21.080
此处还具有 try-catch 区块 可用于拦截处理

00:01:21.080 --> 00:01:23.740
由 JSON 解析 代码引发的例外

00:01:23.740 --> 00:01:26.140
我们将在下节课中 详细讲解 Java 中的

00:01:26.140 --> 00:01:27.310
try-catch 区块

00:01:27.310 --> 00:01:30.520
但现在 我们在此方法中 为你留了一个需要完成的

00:01:30.520 --> 00:01:31.350
TODO 标记

00:01:31.350 --> 00:01:33.130
现在 让我们共同来完成它

00:01:33.130 --> 00:01:35.505
你现在可以使用我们提供的 用于引导你编写此代码的

00:01:35.505 --> 00:01:36.940
伪代码

00:01:36.940 --> 00:01:40.540
首先 通过调用构造函数和在 SAMPLE_JSON_RESPONSE

00:01:40.540 --> 00:01:42.980
字符串中进行传递来 创建根 JSONObject

00:01:42.980 --> 00:01:47.230
该类将解析我们从 USGS API 中 重新获得的整个 GL JSON 字符串

00:01:47.230 --> 00:01:51.240
然后 我们将在名为 baseJsonResponse 的变量中存储该对象

00:01:51.240 --> 00:01:54.930
现在 我们正在查找地震 的震级、地点和时间

00:01:54.930 --> 00:01:58.310
为了深度探讨这些信息 我们 首先需要 "features" 数组

00:01:58.310 --> 00:01:59.630
在根 JSONObject 中

00:01:59.630 --> 00:02:02.700
我们想获取与 features 键相关联的值

00:02:02.700 --> 00:02:06.320
应将其映射到包含地震 列表的 JSONArray 中

00:02:06.320 --> 00:02:10.419
让我们调用 baseJsonResponse 对象上的 getJSONArray 方法

00:02:10.419 --> 00:02:13.500
将 features 键作为字符串进行传递

00:02:13.500 --> 00:02:16.060
然后 我们可以在数据类型 JSONArray 的 earthquakeArray

00:02:16.060 --> 00:02:18.470
变量中存储结果

00:02:18.470 --> 00:02:21.650
此时 我们想依次循环 earthquakeArray 中的每个 Earthquake

00:02:21.650 --> 00:02:23.150
让我们从 for 循环开始

00:02:23.150 --> 00:02:24.540
如果你想要回顾循环和 for

00:02:24.540 --> 00:02:27.975
循环 可以检查上一 节课视频下方的说明

00:02:27.975 --> 00:02:30.810
现在 我们通过将计数变量 i 初始化为 0 可开始创建

00:02:30.810 --> 00:02:32.230
循环

00:02:32.230 --> 00:02:34.960
在循环的每个迭代前 我们需要测试条件

00:02:34.960 --> 00:02:38.120
“i 小于 earthquakeArray 的长度”是否仍然为真

00:02:38.120 --> 00:02:41.810
如果为真 则可以在循 环内执行所有代码行

00:02:41.810 --> 00:02:45.010
在迭代末尾 我们 将 i 值提升为 1

00:02:45.010 --> 00:02:47.190
(此处显示为 i++ 语法)

00:02:47.190 --> 00:02:49.620
然后 我们继续并再 次进行回路循环

00:02:49.620 --> 00:02:52.790
接下来 可在 earthquakeArray 的指定位置获取

00:02:52.790 --> 00:02:53.870
JSONObject

00:02:53.870 --> 00:02:58.260
我们从计数 i 变量的 初始值“位置 0”开始

00:02:58.260 --> 00:03:00.290
当我们拥有 currentEarthquake JSONObject 时

00:03:00.290 --> 00:03:04.230
可提取出与 properties 键 相关联的 JSONObject

00:03:04.230 --> 00:03:07.340
切记 这列出了 许多地震属性

00:03:07.340 --> 00:03:08.280
如你所见

00:03:08.280 --> 00:03:11.540
这些 JSONObject 深度嵌套于总响应中

00:03:11.540 --> 00:03:14.880
但最终 我们停留在可访问 properties JSONObject

00:03:14.880 --> 00:03:18.190
各个值的级别上 其 中 mag 键、place 键

00:03:18.190 --> 00:03:21.590
和 time 键分别代表 地震发生时的震级、

00:03:21.590 --> 00:03:24.280
地点和以毫秒 为单位的时间

00:03:24.280 --> 00:03:26.360
现在 由于这些值会 直接显示到屏幕上

00:03:26.360 --> 00:03:28.830
并且不会对其进行任何 附加计算或格式处理

00:03:28.830 --> 00:03:31.900
所以 我们可以将所 有值提取为字符串

00:03:31.900 --> 00:03:35.550
然后 可从这三个字符串中 创建新的 Earthquake 对象

00:03:35.550 --> 00:03:39.100
最后 我们需要将新的 Earthquake 添加到地震列表中

00:03:39.100 --> 00:03:42.130
当循环每次完成执行 features 数组中的一个

00:03:42.130 --> 00:03:46.095
Earthquake 时 我们将构建 Earthquake 的整个 ArrayList

00:03:46.095 --> 00:03:49.165
然后 我们可将此列表 返回为方法的返回值

00:03:49.165 --> 00:03:49.685
干得好

00:03:49.685 --> 00:03:52.895
这是一个非常富有挑战性的问题 其中包括许多复杂的工作语法

00:03:52.895 --> 00:03:54.495
因此应该为解决掉这一难题 而感到骄傲

00:03:54.495 --> 00:03:57.655
我现在需要返回并向代 码中再添加一些注释

00:03:57.655 --> 00:03:59.205
好了 看起来不错

00:03:59.205 --> 00:04:01.395
现在让我们通过调用 此方法来测试该代码

00:04:01.395 --> 00:04:04.225
在测验的第三步 你需要 修改 EarthquakeActivity

00:04:04.225 --> 00:04:08.060
来调用 QueryUtils extractEarthquakes 方法

00:04:08.060 --> 00:04:10.988
所以 现在让我们在此文 件中删除之前创建的地震

00:04:10.988 --> 00:04:14.143
的伪 ArrayList 并调用 QueryUtils 方法

00:04:14.143 --> 00:04:16.846
我们的代码中没有错误 让我们直接在设备上运行

00:04:16.846 --> 00:04:18.279
该代码并观察会发生什么情况

00:04:18.279 --> 00:04:20.930
非常好 我们的应用现 在显示出了地震列表

00:04:20.930 --> 00:04:22.900
这应该与你之前在 心中手动解析 JSON

00:04:22.900 --> 00:04:25.430
响应时描绘的 草图大致相同

00:04:25.430 --> 00:04:27.380
如果你想要参考我们 为你展示的任何代码

00:04:27.380 --> 00:04:28.800
可查看下方有关 代码差异的说明

