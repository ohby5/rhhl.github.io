WEBVTT
Kind: captions
Language: ar

00:00:00.367 --> 00:00:04.534
الغرض من هذه المهمة أن تتمرس
قراءة الدروس التعليمية على ويب

00:00:04.889 --> 00:00:08.089
بالنظر إلى مثال عملي آخر
لتفسير JSON في آندرويد

00:00:08.878 --> 00:00:13.512
يبدأ المثال بفرض استجابة JSON معينة
محفوظة في عبارة تُسمى..

00:00:13.775 --> 00:00:15.009
strJson

00:00:15.223 --> 00:00:17.024
أو للاختصار (ستار جيسون)

00:00:17.572 --> 00:00:20.742
ربما تلاحظ أن هذه العبارة تتضمن
رمز الشرطة المائلة العكسية

00:00:21.049 --> 00:00:22.482
حيثما وجدت علامات التنصيص

00:00:22.853 --> 00:00:25.427
لكنها تبدو عامة كنصوص JSON التي رأيناها

00:00:26.046 --> 00:00:28.500
لندرس الكود في هذا المثال

00:00:29.279 --> 00:00:32.345
أول ما سأفعل هو نسخ
ولصق مقطع الكود هذا..

00:00:32.430 --> 00:00:35.024
من تلك النافذة الصغيرة
ليكون أسهل في القراءة

00:00:35.485 --> 00:00:36.985
ويمكننا دراسته هنا

00:00:37.662 --> 00:00:41.244
كل ما فعلته هو نسخ الكود
إلى محرر نصوص بسيط

00:00:41.651 --> 00:00:45.451
في هذه الحالة أستخدم محرر (سبلايم)
ولكن أي محرر سيجدي

00:00:45.852 --> 00:00:49.386
لذا لنتحدث عن الكود الموجود
هنا في onCreate

00:00:50.244 --> 00:00:54.444
تعرفت بالفعل على السلسلة الحرفية
strJson التي تحتوي نص JSON الخام

00:00:55.200 --> 00:00:59.200
والكود الرئيسي الذي نريد
النظر إليه هو مقطع try

00:00:59.454 --> 00:01:02.621
هنا تماماً، لذا لندرس السطور
واحداً تلو الآخر

00:01:03.282 --> 00:01:06.192
أول ما نفعله هو إنشاء JSONObjecy

00:01:06.359 --> 00:01:08.359
من نص JSON الذي أنشئناه سابقاً

00:01:09.000 --> 00:01:12.362
ثم لاحقاً سنجد مصفوفة JSON
(Employee)

00:01:12.640 --> 00:01:15.107
بالبحث عن المفتاح المسمى Employee

00:01:15.563 --> 00:01:18.430
وبدلاً من استخدام وظيفة جلب
مثل getJSONArray..

00:01:18.730 --> 00:01:21.738
نرى وظيفة تسمى optJSONArray
قيد الاستخدام

00:01:22.183 --> 00:01:24.916
هذه ببساطة طريقة بديلة
لجلب مصفوفة JSON

00:01:25.765 --> 00:01:28.098
إذا تفحصت توثيقات آندرويد الرسمية..

00:01:28.498 --> 00:01:30.732
في developer.android.com

00:01:31.168 --> 00:01:33.266
سترى أو الوظيفة optJSONArray..

00:01:33.513 --> 00:01:35.420
تُرجع مصفوفة JSON..

00:01:35.896 --> 00:01:37.644
إذا وجد فيها مفتاح معين

00:01:38.177 --> 00:01:41.940
أما إذا كانت المصفوفة غير موجودة..
فستُرجع الوظيفة (لا) بدلاً عنها

00:01:42.409 --> 00:01:44.786
حسناً، ما يهم بعدها لنفعله..

00:01:44.889 --> 00:01:48.189
هو أن نصنع (حلقة Loop) لتكرر العمل
على كل عنصر في المصفوفة

00:01:48.667 --> 00:01:50.400
والآن في السطر الأول هنا..

00:01:50.701 --> 00:01:53.268
فإننا نستخرج العنصر الأول
من المصفوفة..

00:01:53.442 --> 00:01:56.175
والذي يصادف كونه كائن JSON
في حالتنا هذه

00:01:56.333 --> 00:02:00.033
عبر استدعاء الوظيفة getJSONObject
باستخدام المؤشر (i)

00:02:00.533 --> 00:02:02.699
ثم نستخرج العدد (id)

00:02:03.433 --> 00:02:05.933
السلسلة الحرفية (name)،
والعدد العشري (salary)

00:02:06.133 --> 00:02:07.925
وهو في هذه الحالة قيمة عشرية

00:02:08.687 --> 00:02:11.683
ثم نركب كل هذه القيم
في عبارة واحدة طويلة

00:02:12.374 --> 00:02:15.282
ثم لاحقاً نعرض كل النص في
واجهة نصية على الشاشة

00:02:16.790 --> 00:02:20.889
ربما لاحظت أن هنالك مقطع try
يحيط مقطع تفسير JSON هذا

00:02:21.346 --> 00:02:24.912
وهو ما يمنع التطبيق من الانهيار،
إن حدثت مشكلة في التفسير

00:02:25.158 --> 00:02:27.682
لكن لا تقلق، سنتحدث
عن هذا تفصيلاً لاحقاً

