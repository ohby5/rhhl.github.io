WEBVTT
Kind: captions
Language: pt-BR

00:00:00.033 --> 00:00:04.567
Depois treinar, você já sabe
identificar componentes JSON

00:00:04.601 --> 00:00:07.033
e como percorrer
uma árvore de objetos JSON

00:00:07.067 --> 00:00:09.434
para extrair os valores
que queremos.

00:00:10.100 --> 00:00:13.467
Transformar uma string de JSON
para um objeto JSON funcional

00:00:13.501 --> 00:00:16.000
requer parsing.

00:00:16.033 --> 00:00:19.133
Parsing é um parte fundamental
da computação.

00:00:19.167 --> 00:00:22.834
É a capacidade do computador
de ler um texto numa linguagem

00:00:22.868 --> 00:00:26.601
e o transformá-lo
numa representação mais útil.

00:00:26.634 --> 00:00:30.100
É como um objeto JSON
que pode chamar métodos

00:00:30.133 --> 00:00:32.701
e extrair os dados
que precisamos.

00:00:33.334 --> 00:00:36.234
Sabemos analisar JSON
na nossa cabeça

00:00:36.267 --> 00:00:39.901
identificando os pares chave-valor
e percorrendo o caminho.

00:00:39.934 --> 00:00:43.634
Mas precisamos fazer este processo
em código Java.

00:00:44.367 --> 00:00:45.734
Vamos falar sobre isso.

00:00:46.834 --> 00:00:49.534
Vamos trocar para o navegador

00:00:49.567 --> 00:00:54.868
e ver a documentação
no site developer.android.com.

00:00:54.901 --> 00:00:58.100
Há uma classe
chamada JSONObject.

00:00:58.133 --> 00:01:00.868
Assim é mais fácil converter
uma string de JSON

00:01:00.901 --> 00:01:05.033
para um objeto mais inteligente
que conhece as chaves que tem

00:01:05.067 --> 00:01:07.767
e sabe como acessar
os valores correspondentes.

00:01:07.801 --> 00:01:10.200
Se descermos até o resumo,

00:01:10.234 --> 00:01:12.400
podemos analisar
os construtores

00:01:12.434 --> 00:01:17.467
para criarmos uma instância
ou objeto da classe JSONObject.

00:01:17.501 --> 00:01:20.868
Vamos lá.
Queremos este construtor.

00:01:20.901 --> 00:01:25.434
Ele nos permite criar um objeto JSON
passando apenas uma string de JSON

00:01:25.467 --> 00:01:27.434
contendo o JSON bruto.

00:01:28.133 --> 00:01:31.234
Há diversos métodos getter

00:01:31.267 --> 00:01:33.567
para chamar uma instância
de um objeto JSON

00:01:33.601 --> 00:01:36.801
para extrair os valores
de certas chaves.

00:01:36.834 --> 00:01:40.334
Como vocês já sabem,
existem vários componentes JSON,

00:01:40.367 --> 00:01:43.734
de tipos de dados básicos,
como integer,

00:01:43.767 --> 00:01:48.100
para tipos de dados maiores,
como arrays e objetos JSON.

00:01:48.634 --> 00:01:51.501
Por exemplo, se você quiser
extrair um integer,

00:01:51.534 --> 00:01:53.968
você pode chamar
o método getInt

00:01:54.000 --> 00:01:56.601
passando o nome da chave
como uma string.

00:01:56.634 --> 00:01:59.501
Há um método similar
para passar um double

00:02:00.200 --> 00:02:02.133
ou para get uma string.

00:02:02.667 --> 00:02:04.501
Para componentes JSON maiores,

00:02:04.534 --> 00:02:07.501
você pode usar o getJSONArray

00:02:07.534 --> 00:02:09.901
para chamar a array JSON
pela sua chave.

00:02:09.934 --> 00:02:14.901
Notem que o tipo de dado retornado
por este método é do tipo JSONArray.

00:02:14.934 --> 00:02:19.300
Use o método getJSONObject
para chamar um objeto JSON.

00:02:19.334 --> 00:02:23.300
Notem que o tipo de dado retornado
é um objeto JSON.

00:02:24.100 --> 00:02:25.934
Vamos nos aprofundar.

00:02:25.968 --> 00:02:29.300
Sempre que usarmos
uma requisição GET num objeto JSON,

00:02:29.334 --> 00:02:31.734
a chave requerida
talvez não exista.

00:02:31.767 --> 00:02:35.400
Neste caso, a requisição vai gerar
uma JSONException.

00:02:35.434 --> 00:02:37.367
Teremos que corrigir isso.

00:02:37.400 --> 00:02:42.033
Também podemos usar métodos opt
para chamar objetos JSON.

00:02:42.067 --> 00:02:45.167
Opt quer dizer
par chave-valor opcional.

00:02:45.200 --> 00:02:48.100
Estes métodos pegam o valor
correspondente de uma chave,

00:02:48.133 --> 00:02:50.734
mas retornam nulo
se o valor não existe.

00:02:51.300 --> 00:02:54.400
Vamos fazer o parsing
deste JSON.

00:02:54.434 --> 00:02:58.734
Temos este objeto raiz
com uma chave chamada "candies".

00:02:58.767 --> 00:03:00.868
A chave corresponde
a uma array,

00:03:00.901 --> 00:03:03.534
indicado por estes colchetes.

00:03:04.033 --> 00:03:08.601
A array contém outro objeto JSON,
indicado por estas chaves.

00:03:08.634 --> 00:03:11.834
Este objeto interno
contém duas chaves.

00:03:11.868 --> 00:03:15.567
Uma delas é "name"
e o valor dela é "Jelly Beans".

00:03:15.601 --> 00:03:21.033
A outra chave é "count",
que equivale ao valor de integer 10.

00:03:21.634 --> 00:03:24.167
Vamos examinar o caminho
a percorrer

00:03:24.200 --> 00:03:27.634
para extrair os dados
mapeados por estas chaves.

00:03:28.467 --> 00:03:33.167
Para o dado "Jelly Beans",
começamos pela raiz do JSON.

00:03:33.200 --> 00:03:34.467
Esta é a raiz.

00:03:34.501 --> 00:03:38.000
Vamos no índice da chave
"candies",

00:03:38.033 --> 00:03:41.400
que vai retornar
uma array JSON.

00:03:41.434 --> 00:03:44.434
Queremos pegar o 1º elemento
desta array,

00:03:44.467 --> 00:03:47.234
que é este objeto JSON.

00:03:47.267 --> 00:03:50.634
Depois, temos que pegar
o valor string da chave "name",

00:03:50.667 --> 00:03:52.901
neste caso, "Jelly Beans".

00:03:53.667 --> 00:03:57.467
Vamos fazer o caminho
para pegar o "count".

00:03:57.501 --> 00:04:00.667
Começamos na raiz e queremos

00:04:00.701 --> 00:04:03.767
o valor da chave "candies".

00:04:03.801 --> 00:04:06.167
Vamos para a array JSON

00:04:06.200 --> 00:04:09.934
e queremos o 1º elemento da array,
que é um objeto JSON.

00:04:09.968 --> 00:04:15.367
Depois queremos
o valor da chave "count"

00:04:15.400 --> 00:04:18.767
que, neste caso,
é um integer de valor 10.

00:04:19.601 --> 00:04:22.400
Queremos pegar
este processo percorrido

00:04:22.434 --> 00:04:25.367
e transformá-lo em instruções
que podemos escrever em código.

00:04:25.400 --> 00:04:26.834
Vamos lá.

00:04:27.367 --> 00:04:31.300
Vamos dizer que recebemos
uma string com este objeto JSON.

00:04:31.334 --> 00:04:35.267
Na verdade, receberíamos
uma versão compactada,

00:04:35.300 --> 00:04:38.167
que é a mesma coisa,
mas sem os espaços

00:04:38.200 --> 00:04:40.300
e as aspas são escapadas.

00:04:40.334 --> 00:04:44.334
Escapar que dizer colocar
o símbolo \ antes de um item.

00:04:44.367 --> 00:04:46.834
Não podemos ter aspas
no meio da string.

00:04:46.868 --> 00:04:49.167
Como você saberia
o final da string?

00:04:49.200 --> 00:04:51.667
Podemos transformar
esta variável "candyjson"

00:04:51.701 --> 00:04:53.567
em um objeto JSON funcional

00:04:53.601 --> 00:04:57.434
passando a string JSON
através do construtor JSONObject.

00:04:57.467 --> 00:05:01.300
O JSONObject faz o parsing
da string JSON para nós.

00:05:01.334 --> 00:05:05.400
Ele sabe as chaves inclusas
e tem vários métodos úteis.

00:05:06.067 --> 00:05:08.167
Por exemplo,
vamos ver o objeto raiz.

00:05:08.200 --> 00:05:10.434
Vamos usar getJSONArray

00:05:10.467 --> 00:05:14.400
para achar a array
contida na chave "candies".

00:05:14.934 --> 00:05:18.534
Armazenamos isso
na variável chamada "candiesArray"

00:05:18.567 --> 00:05:21.133
que é do tipo de dado
JSONArray.

00:05:21.167 --> 00:05:26.634
A classe JSONArray expõe um método
chamado getJSONObject

00:05:26.667 --> 00:05:30.033
para acessar um objeto
numa posição especificada.

00:05:30.067 --> 00:05:33.167
Podemos pegar
o objeto JSON zero nesta array,

00:05:33.200 --> 00:05:35.501
que é o 1º objeto da lista.

00:05:35.534 --> 00:05:39.868
Podemos armazenar este objeto
na variável "firstCandy"

00:05:39.901 --> 00:05:42.334
do tipo JSONObject.

00:05:42.901 --> 00:05:46.334
Já que queremos os atributos
dentro do objeto "firstcandy",

00:05:46.367 --> 00:05:50.234
podemos usar o método getString
para extrair o valor primitivo

00:05:50.267 --> 00:05:54.334
associado com a chave,
neste caso, "Jelly Beans".

00:05:54.367 --> 00:05:59.067
Podemos usar o método getInt
no objeto "firstcandy"

00:05:59.100 --> 00:06:03.000
para extrair o valor integer
da chave "count",

00:06:03.033 --> 00:06:04.801
neste caso, o valor 10.

00:06:05.334 --> 00:06:08.968
Neste próximo quiz,
leia o tutorial no link

00:06:09.000 --> 00:06:10.868
sobre parsing de JSON
em Android.

00:06:10.901 --> 00:06:15.400
Este exemplo será mais difícil
do que o que acabamos de fazer.

00:06:15.434 --> 00:06:18.033
Tente entender tudo.

00:06:18.067 --> 00:06:22.734
Leia e tente entender
código MainActivity.java.

00:06:22.767 --> 00:06:24.200
Assinale aqui quando terminar.

