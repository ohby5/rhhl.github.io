WEBVTT
Kind: captions
Language: zh-CN

00:00:00.800 --> 00:00:04.832
在我们可以提取应用所需的 地震数据之前 我们应该

00:00:04.832 --> 00:00:08.936
先讨论从 USGS API 返回的 数据的格式结构

00:00:08.936 --> 00:00:10.083
谈及格式

00:00:10.083 --> 00:00:14.400
则意味着讨论有关数据 组织或构造方法的详细信息 以便

00:00:14.400 --> 00:00:18.840
掌握剖析与提取制作应用 所需部分的方法

00:00:18.840 --> 00:00:22.970
在本课的开始部分 我们回顾了 可用于查询 USGS 数据集的

00:00:22.970 --> 00:00:25.545
一些 HTTP 请求参数

00:00:26.640 --> 00:00:31.330
其中一种参数 format=值 可用于指定

00:00:31.330 --> 00:00:35.310
响应数据的响应格式或结构 即我们希望的发送方式

00:00:36.690 --> 00:00:39.850
我们选择了 format=geojson

00:00:39.850 --> 00:00:44.850
该参数会根据 JSON 语法规则 以某种结构向我们返回数据

00:00:45.980 --> 00:00:49.380
尽管存在具有优缺点 以及历史长于

00:00:49.380 --> 00:00:53.450
此类格式的其他格式 我们依然选择 JSON 因为它是

00:00:53.450 --> 00:00:58.990
现今许多签名 Web 服务 最常使用的响应格式

00:00:58.990 --> 00:01:03.687
但这并不是说 JSON 一定 优于任何其他格式 如

00:01:03.687 --> 00:01:05.235
XML

00:01:05.235 --> 00:01:09.110
此外 我们建议你在闲暇时 开发一些其他格式

00:01:09.110 --> 00:01:12.600
以更好地感知设计 意图、优

00:01:12.600 --> 00:01:15.560
缺点以及 那些格式的历史

00:01:17.510 --> 00:01:20.750
像所有技术一样 Web 也随着 时间的推移而快速变化着

00:01:20.750 --> 00:01:22.320
因而出现了多种格式

00:01:23.510 --> 00:01:27.085
不过 请放心 你通过学习 JSON 而 获得的经验

00:01:27.085 --> 00:01:31.300
将帮助你快速 掌握其他格式

00:01:31.300 --> 00:01:34.710
因此 让我们开始走进 JSON

00:01:34.710 --> 00:01:39.640
对于 USGS 地震 API 我们 可以使用名为 geojson 的格式

00:01:39.640 --> 00:01:42.605
Geojson 只是 JSON 的一种特殊风格

00:01:42.605 --> 00:01:46.420
经过定制可显示 地理信息

00:01:47.560 --> 00:01:51.940
JSON 是 JavaScript Object、Notation 的缩写

00:01:51.940 --> 00:01:55.710
从名称看 你可能会认为 它与 JavaScript 编程语言

00:01:55.710 --> 00:01:59.860
关系紧密 然而并非如此

00:01:59.860 --> 00:02:04.130
最初设计 JSON 时是为促进 网络的有效沟通

00:02:04.130 --> 00:02:06.990
因此以 JavaScript 开头

00:02:06.990 --> 00:02:10.580
其实 它是一组用于组织数据 的战术规则

00:02:10.580 --> 00:02:13.080
是一种完全独立的 编程语言

00:02:14.190 --> 00:02:18.900
因此可以选择使用任何 编程语言解释 JSON

00:02:18.900 --> 00:02:22.460
包括我们用于构建 Android 应用的 Java 代码

00:02:23.530 --> 00:02:27.920
我们将通过一个极为简单的示例 来学习如何读懂 JSON

00:02:27.920 --> 00:02:30.720
该示例用于描述一种鞋

00:02:30.720 --> 00:02:36.430
我们从最外侧的左大括号开始 它表示 JSON 对象的起始

00:02:36.430 --> 00:02:41.330
括号内 (末尾右大括号前) 的一切 均为其内容

00:02:41.330 --> 00:02:44.290
你可以将这些括号 看作一种物品容器

00:02:45.550 --> 00:02:49.260
JSON 语法结构的核心 为键值对

00:02:49.260 --> 00:02:51.180
这一概念

00:02:51.180 --> 00:02:56.420
依照语法 键位于冒号的左侧 值位于右侧

00:02:57.700 --> 00:03:01.860
该对仅仅是一种封装 我们选择的名称

00:03:01.860 --> 00:03:07.240
例如 这个键 与其对应值间的 等同或关联的方式

00:03:08.710 --> 00:03:12.580
这表明其是编程与计算机 科学领域中的一种

00:03:12.580 --> 00:03:14.270
重要语法

00:03:14.270 --> 00:03:15.350
为什么呢?

00:03:15.350 --> 00:03:18.420
这是因为将键 映射或绑定至一个值

00:03:18.420 --> 00:03:23.210
有助于我们以一种更为轻松且 具有逻辑的方式恢复数据层

00:03:23.210 --> 00:03:27.130
换言之 当我们想要 撤销或恢复数据层时

00:03:28.130 --> 00:03:32.300
与其必须记忆数据的所有详细信息 因为在某些情况下

00:03:32.300 --> 00:03:37.870
可能存在大量数据 不如通过使用 数据标签或键来实现操作

00:03:38.930 --> 00:03:41.820
就像你走进交响乐大厅时的 衣帽寄存

00:03:41.820 --> 00:03:45.510
你可能会在衣帽寄存处放下 许多物品 但是

00:03:45.510 --> 00:03:49.950
当你想要取回这些物品时 只需在退场时

00:03:49.950 --> 00:03:52.070
拿着票据并将其 交给服务人员

00:03:53.170 --> 00:03:55.890
让我们看几个有关键的示例

00:03:55.890 --> 00:04:01.470
这里有一个引用正小数的字符串键尺寸 (size)

00:04:01.470 --> 00:04:04.522
恰好表示 鞋号 9.5

00:04:04.522 --> 00:04:09.160
如果存在逗号 则其只是一个分隔符 用于告诉我们后面还有

00:04:09.160 --> 00:04:12.000
另一组键值对

00:04:12.000 --> 00:04:17.100
因此 这里还有宽松 (wide) 其映射的布尔值为 true

00:04:17.100 --> 00:04:20.970
然后将原产国 (country-of-origin) 这一字符串设置为 usa

00:04:22.540 --> 00:04:25.910
该键值符合语义且 让人觉得非常简单直接

00:04:26.940 --> 00:04:28.060
非常棒！

00:04:28.060 --> 00:04:32.190
这只是些非常简单的键 一些带有逻辑名称的键 用于映射你

00:04:32.190 --> 00:04:34.000
过去常常使用的简单基元

00:04:34.000 --> 00:04:38.050
数字、布尔值和字符串

00:04:38.050 --> 00:04:42.440
但是 等一下 这个键样式映射的是什么值

00:04:42.440 --> 00:04:45.550
这里的大括号表示什么 里面还有一大堆其他内容

00:04:45.550 --> 00:04:48.150
这些内容在这里有什么作用？

00:04:48.150 --> 00:04:52.830
这可能有点趣味 实际上 这正是

00:04:52.830 --> 00:04:56.450
JSON 作为一种数据格式 的强大与扩展性的体现

00:04:56.450 --> 00:04:57.850
让我们稍事休息 接下来

00:04:57.850 --> 00:05:01.170
我们将深入了解 下一节点中可能存在的值

