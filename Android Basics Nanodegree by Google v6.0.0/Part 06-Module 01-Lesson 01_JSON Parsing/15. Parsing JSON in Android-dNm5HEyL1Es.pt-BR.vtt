WEBVTT
Kind: captions
Language: pt-BR

00:00:00.335 --> 00:00:04.768
O propósito dessa tarefa
era praticar ler um tutorial na web

00:00:04.802 --> 00:00:08.368
e ver outro exemplo
de parsing de JSON para Android.

00:00:08.402 --> 00:00:11.768
Este exemplo presume
que uma resposta JSON

00:00:11.802 --> 00:00:17.202
está contida numa string
chamada "strJSON".

00:00:17.235 --> 00:00:22.568
Esta string também tem o símbolo "\"
antes de todas as aspas.

00:00:22.602 --> 00:00:25.768
Mas, em geral, ela se parece
com o JSON que vimos.

00:00:25.802 --> 00:00:28.768
Vamos examinar o código
deste exemplo.

00:00:28.802 --> 00:00:33.735
Primeiro, vou copiar e colar
o código numa tela maior

00:00:33.768 --> 00:00:37.402
para facilitar a leitura
e podemos examinar daí.

00:00:37.435 --> 00:00:41.502
Copiei o código
para um editor de texto.

00:00:41.535 --> 00:00:43.635
Neste caso,
estou usando o Sublime Text,

00:00:43.668 --> 00:00:45.635
mas qualquer
editor de texto serve.

00:00:45.668 --> 00:00:49.502
Vamos falar do código
onCreate.

00:00:50.002 --> 00:00:54.768
Você já conhece a string strJSON
que contém um JSON bruto.

00:00:54.802 --> 00:00:59.402
O código que queremos
está no bloco "try".

00:01:00.002 --> 00:01:03.068
Vamos examinar
uma linha por vez.

00:01:03.102 --> 00:01:06.135
A 1ª coisa que fizemos
foi gerar um novo objeto JSON

00:01:06.168 --> 00:01:08.702
da string JSON
que criamos antes.

00:01:08.735 --> 00:01:12.302
Depois achamos
o arranjo JSON "Employee"

00:01:12.335 --> 00:01:15.268
através da chave "Employee".

00:01:15.302 --> 00:01:18.568
Em vez de usar um método get
como getJSONArray,

00:01:18.602 --> 00:01:21.935
o método que vemos aqui
é optJSONArray.

00:01:21.968 --> 00:01:25.468
Essa é uma forma alternativa
de chamar o arranjo JSON.

00:01:25.502 --> 00:01:30.868
Na documentação oficial do Android,
em developer.android.com,

00:01:30.902 --> 00:01:35.435
vemos que o método optJSONArray
retorna um arranjo JSON

00:01:35.468 --> 00:01:37.835
se ela existe para uma chave.

00:01:37.868 --> 00:01:42.168
Se o arranjo não existe,
o método retorna uma resposta nula.

00:01:42.802 --> 00:01:45.902
A próxima coisa que fazemos
é criar um loop

00:01:45.935 --> 00:01:48.268
para repetir
cada elemento do arranjo.

00:01:48.802 --> 00:01:53.102
Nesta 1ª linha, temos que extrair
o elemento individual do arranjo,

00:01:53.135 --> 00:01:55.935
que neste caso
é um objeto JSON,

00:01:55.968 --> 00:02:00.235
usando o método getJSONObjet
com o índice "i".

00:02:00.268 --> 00:02:03.035
Depois, extraímos
o ID do integer,

00:02:03.068 --> 00:02:05.868
o nome da string
e o float "Salary",

00:02:05.902 --> 00:02:08.402
que neste caso
é um valor decimal.

00:02:08.435 --> 00:02:12.068
Podemos juntar todos estes valores
em uma string longa

00:02:12.102 --> 00:02:15.568
e depois exibir todo o texto
através de um TextView.

00:02:16.168 --> 00:02:19.435
Você deve ter notado
o bloco try/catch

00:02:19.468 --> 00:02:21.402
em volta deste código JSON.

00:02:21.435 --> 00:02:25.235
Isso impede que o app trave
se houver um problema no parsing.

00:02:25.268 --> 00:02:27.735
Não se preocupe.
Vamos detalhar isso depois.

