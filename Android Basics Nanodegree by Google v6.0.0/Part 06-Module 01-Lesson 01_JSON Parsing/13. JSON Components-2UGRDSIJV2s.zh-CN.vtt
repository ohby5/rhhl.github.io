WEBVTT
Kind: captions
Language: zh-CN

00:00:00.670 --> 00:00:04.059
现在让我们来讨论一下 键值对的右侧

00:00:04.059 --> 00:00:05.592
可以有哪些值

00:00:05.592 --> 00:00:09.220
上一节中我们已经看到 键可以引用原始数据类型

00:00:09.220 --> 00:00:14.720
如数字 布尔和字符串

00:00:14.720 --> 00:00:20.020
但它们也能以对象和数组形式 表示更复杂的数据

00:00:20.020 --> 00:00:23.620
没错 键可以指向 其他嵌套对象

00:00:23.620 --> 00:00:25.690
或者其他对象的数组

00:00:25.690 --> 00:00:27.870
让我们再来看一下 鞋子的示例

00:00:27.870 --> 00:00:31.360
你可能会怀疑样式键 映射到嵌套对象

00:00:31.360 --> 00:00:36.480
这是因为内容包含在大括号中 这种怀疑是对的

00:00:36.480 --> 00:00:39.230
在这里 值是一个嵌套 JSON 对象

00:00:40.250 --> 00:00:42.400
那要怎么反过来呢？

00:00:42.400 --> 00:00:44.544
如果仔细看这些内容

00:00:44.544 --> 00:00:47.780
就会发现它一直在使用 相同的键值对结构

00:00:47.780 --> 00:00:50.430
可以按之前的方式 读取

00:00:50.430 --> 00:00:53.160
这一次只是更深入一层

00:00:53.160 --> 00:00:55.640
让我们来看一下类别键

00:00:55.640 --> 00:01:00.970
它的值 以左括号开始 包含内容

00:01:00.970 --> 00:01:03.410
并以右括号结束

00:01:03.410 --> 00:01:05.330
你认为 括号表示什么呢？

00:01:07.020 --> 00:01:08.880
这是数组的语法

00:01:09.960 --> 00:01:14.740
JSON 数组可以包含 原始数据类型或 JSON 对象

00:01:14.740 --> 00:01:17.060
这与在 Java 中 看到的数组类似

00:01:17.060 --> 00:01:20.949
可以使用索引 找到数组中的内容

00:01:22.160 --> 00:01:27.400
在初始位置 即索引为 0 的位置 有一个字符串值 boot

00:01:29.030 --> 00:01:33.850
在下一个索引位置 即索引 1 是 winklepicker

00:01:35.730 --> 00:01:40.940
然后是颜色键 映射到原始字符串 black

00:01:42.270 --> 00:01:45.095
示例到此结束 这是一个描述鞋子的 JSON

00:01:46.440 --> 00:01:48.505
你可能会想到

00:01:48.505 --> 00:01:52.799
我们在鞋子示例中看到的嵌套 可以继续叠加

00:01:52.799 --> 00:01:57.506
该数组可以包含 更多的对象和数组

00:01:57.506 --> 00:02:01.175
这意味着 数据负载可能非常之大

00:02:01.175 --> 00:02:04.151
的确如此

00:02:04.151 --> 00:02:06.884
关键在于 虽然数据量可能很大

00:02:06.884 --> 00:02:10.110
但我们有了一种 在数据中导航的简单方式

00:02:10.110 --> 00:02:14.390
我们只需要 遵循键值对

00:02:15.750 --> 00:02:17.280
不明白我的意思？

00:02:17.280 --> 00:02:20.330
在下一节中 我们将探寻更复杂的示例

00:02:20.330 --> 00:02:23.980
并深入练习 如何遍历更大的 JSON

00:02:23.980 --> 00:02:24.520
但是

00:02:24.520 --> 00:02:27.660
首先让我们通过测验来练习一下 如何识别不同的 JSON 部分

00:02:29.330 --> 00:02:33.520
在下面的测验中 通过完全不同的 JSON 响应

00:02:33.520 --> 00:02:38.560
来练习如何区分 JSON 对象、数组或原始数据类型

00:02:38.560 --> 00:02:41.370
这是 Twitter API 的一个示例

00:02:41.370 --> 00:02:44.920
在这里可以请求 用户最近点赞的推文

00:02:44.920 --> 00:02:47.100
这是我们查询数据的 URL

00:02:47.100 --> 00:02:50.530
响应以 JSON 格式 返回

00:02:50.530 --> 00:02:54.230
但是这需要认证 也就是说需要提供用户名和密码

00:02:54.230 --> 00:02:56.370
才能访问数据

00:02:56.370 --> 00:02:59.060
不能像查询地震数据时一样 只是将 URL 复制到浏览器中

00:02:59.060 --> 00:03:01.850
就能 查看结果

00:03:01.850 --> 00:03:05.970
在这里我们不再深入讨论 认证的细节

00:03:05.970 --> 00:03:10.900
该文档给出了 请求示例和响应示例

00:03:10.900 --> 00:03:14.200
这个响应与我们之间看到的 JSON 十分相似

00:03:14.200 --> 00:03:18.759
其中有键值对 一些值是带大括号的 JSON 对象

00:03:19.790 --> 00:03:23.560
一些值是 带中括号的 JSON 数组

00:03:23.560 --> 00:03:28.530
还会在这里看到其他值 包括字符串、布尔、数字

00:03:28.530 --> 00:03:33.180
我和 Chris 针对 API 执行了自己的查询 并获得响应

00:03:33.180 --> 00:03:37.230
测验 请观察响应 并回答问题

00:03:37.230 --> 00:03:39.970
在测验中 我想知道从 Twitter 收藏 API

00:03:39.970 --> 00:03:43.500
返回的 JSON 响应中的 特定键

00:03:43.500 --> 00:03:47.160
下面是我的响应 以及原始文档站点的链接

00:03:48.700 --> 00:03:54.950
请确定给定键 映射到的值是 JSON 对象

00:03:54.950 --> 00:03:57.470
JSON 数组还是 JSON 原始数据类型

