WEBVTT
Kind: captions
Language: zh-CN

00:00:00.350 --> 00:00:03.660
在该练习全部完成之后 希望你了解如何识别 JSON

00:00:03.660 --> 00:00:06.890
组件以及 如何遍历 JSON 对象树

00:00:06.890 --> 00:00:08.920
以便你可提取 我们关注的值

00:00:10.220 --> 00:00:13.490
将一个 JSON 字符串 转换为活动 JSON 对象或

00:00:13.490 --> 00:00:16.370
JSON 数组需要解析

00:00:16.370 --> 00:00:20.180
现在解析是计算机科学 深处的一部分并且基本上意味着

00:00:20.180 --> 00:00:23.130
计算机会读取一些以其已知的某种 语言所撰写的文本

00:00:23.130 --> 00:00:28.380
然后将其转换为另一个更 有用的表示 例如 JSON 对象

00:00:28.380 --> 00:00:32.229
我们可调用方法 然后从中提取所需的数据

00:00:33.500 --> 00:00:36.440
现在我们知道如何 在我们的脑子中解析 JSON

00:00:36.440 --> 00:00:40.060
方法是 识别键值对并 遍历它们

00:00:40.060 --> 00:00:44.030
但我们需要了解如何将 该相同程序应用于我们的 Java 代码

00:00:44.030 --> 00:00:47.260
那么 让我们来谈谈它吧

00:00:47.260 --> 00:00:49.904
这样 我便已切换至 web 浏览器并且

00:00:49.904 --> 00:00:54.854
正在 developer.android.com 查看正式的 Android文档

00:00:54.854 --> 00:00:58.160
幸运的是 有一个 名为 JSONObject 的类

00:00:58.160 --> 00:01:01.420
这样我便可轻松地将 一个简单的 JSON 字符串转换为

00:01:01.420 --> 00:01:05.600
一个更智能的对象 而该对象了解其包含的键以及

00:01:05.600 --> 00:01:08.100
如何访问其随附的值

00:01:08.100 --> 00:01:12.088
如果向下滚动至摘要 部分 则可查看可用的

00:01:12.088 --> 00:01:15.183
构造函数 该构造函数可用于 创建 JSON 对象类的

00:01:15.183 --> 00:01:17.136
实例或对象

00:01:17.136 --> 00:01:18.228
我们开始吧

00:01:18.228 --> 00:01:21.040
这是我们所需的 特定构造函数

00:01:21.040 --> 00:01:25.270
其允许我们构建一个 JSON 对象 方法是 在包含原始 JSON 的

00:01:25.270 --> 00:01:26.600
单一 JSON 字符串中进行传递

00:01:28.410 --> 00:01:32.000
现在 我们看到我们有一组相当大的 getter 方法 我们可以在 JSONObject 实例中

00:01:32.000 --> 00:01:36.860
调用该方法来检索 与某些键相关联的值

00:01:36.860 --> 00:01:38.594
现在 正如你所知道的那样

00:01:38.594 --> 00:01:43.053
有各种不同的 JSON 组件 从基本数据类型

00:01:43.053 --> 00:01:48.024
(例如整数) 到较大的数据类型 (例如 JSONObjects 和 JSONArrays)

00:01:48.024 --> 00:01:52.944
因此 例如 如果你想要提取 一个整数 则可调用在此处的

00:01:52.944 --> 00:01:56.407
键名中作为字符串传递的 getInt get in 方法

00:01:56.407 --> 00:02:01.250
现在 我们有一个用于获取 双精度值或字符串的相似模式

00:02:02.820 --> 00:02:07.120
对于较大的 JSON 组件 你可调用诸如 getJSONArray 之类的项目

00:02:07.120 --> 00:02:09.513
因此 你获取的 JSON 已由其键映射

00:02:09.513 --> 00:02:14.800
请注意 由 getter 方法返回的数据类型 为 JSONArray 类型

00:02:14.800 --> 00:02:18.929
同样 你可调用 getJSONObject 以重新获取 JSONObject

00:02:18.929 --> 00:02:22.330
请再度注意 此处返回的数据类型 为 JSONObject

00:02:24.310 --> 00:02:26.020
让我们在更深的级别单击

00:02:26.020 --> 00:02:29.353
现在 请注意每次我们尝试对 JSONObject 提出 get 请求时

00:02:29.353 --> 00:02:31.400
所请求的键都可能不存在

00:02:31.400 --> 00:02:34.739
在这种情况下 请求实际上将会 导致我们需要捕获并处理的

00:02:34.739 --> 00:02:37.690
JSONException

00:02:37.690 --> 00:02:40.940
或者 这些 opt 方法可以在 JSONObject 上

00:02:40.940 --> 00:02:45.290
进行调用 其中 opt 代表 可选键值对

00:02:45.290 --> 00:02:48.170
这些方法将获取给定键的 对应值 但是

00:02:48.170 --> 00:02:50.100
如果该值不存在 则将返回 null

00:02:52.100 --> 00:02:54.440
让我们解析 JSON 的这个小代码段

00:02:54.440 --> 00:02:58.161
我们具有这个根对象 其中有一个名为 candies 的键

00:02:58.161 --> 00:03:03.507
由于那些方括号的原因 该键与此处的一个数组相对应

00:03:03.507 --> 00:03:09.030
其在这个大括号中包含此处的 另一个 JSON 对象

00:03:09.030 --> 00:03:11.529
现在 此内部对象 包括两个键

00:03:11.529 --> 00:03:16.311
其中的一个键是 name 与字符串值 Jelly Beans 相对应

00:03:16.311 --> 00:03:21.261
另一个键则称为 count 与整数值 10 相对应

00:03:21.261 --> 00:03:24.400
现在让我们查看 遍历解析的外观

00:03:24.400 --> 00:03:27.300
如果我们想要将这些键 所映射的数据提取出来

00:03:27.300 --> 00:03:32.389
那么 对于该数据 Jelly Beans 我们想要 从 JSON 有效负载的根开始

00:03:32.389 --> 00:03:37.562
在根的此处 然后我们将在使用 键 candies 时进行操作并编制索引

00:03:37.562 --> 00:03:41.636
这将向我们 返回一个 JSON 数组

00:03:41.636 --> 00:03:44.482
然后 我们想要获取 数组的第一个元素

00:03:44.482 --> 00:03:46.990
其将是这个单一的 JSONObject.

00:03:46.990 --> 00:03:50.247
然后 我们仅仅获取 name 键的值

00:03:50.247 --> 00:03:52.270
在这种情况下 其为 jelly beans

00:03:53.920 --> 00:03:57.660
现在 获取 count 值的 遍历路径

00:03:57.660 --> 00:04:01.320
同样 我们从根开始 然后我们将进行操作并且

00:04:01.320 --> 00:04:05.440
使用键 candies 的键值索引 将返回 JSON 数组

00:04:05.440 --> 00:04:08.366
然后 我们想要将该 第一个元素从数组中取出

00:04:08.366 --> 00:04:10.370
其为 JSON 对象

00:04:10.370 --> 00:04:14.863
接着 我们将通过键来引导你编制索引 以抓取由键 count 代表的值

00:04:14.863 --> 00:04:18.515
在这种情况下 它是 一个值为 10 的整数

00:04:18.515 --> 00:04:21.613
现在 我们想要采用这个 遍历路径程序并

00:04:21.613 --> 00:04:25.100
将其映射到我们可写入 工作代码的语句

00:04:25.100 --> 00:04:26.010
那么 让我们去看一看

00:04:27.480 --> 00:04:31.390
所以 比如说 我们被提供一个字符串 其中包含左侧的这个 JSON

00:04:31.390 --> 00:04:35.904
嗯 实际上我们更可能接收 一个精简版本 其在所有

00:04:35.904 --> 00:04:39.861
空白已移除以及所有引号 已转义的情况下是完全相同的

00:04:39.861 --> 00:04:41.505
我们所说的“已转义”是什么意思?

00:04:41.505 --> 00:04:44.703
其是指将反斜杠字符 添加到它的前面 因为你无法

00:04:44.703 --> 00:04:46.920
在字符串中间使用引号

00:04:46.920 --> 00:04:48.737
否则 你将如何知道 字符串的执行时间?

00:04:48.737 --> 00:04:53.518
现在 我们可将此 candy JSON 字符串 变量变为活动 JSONObject 其方法是

00:04:53.518 --> 00:04:57.195
将该字符串传递至 JSONObject 构造函数中

00:04:57.195 --> 00:05:01.435
现在 此 JSONObject 已执行为我们 解析 JSON 字符串的所有工作

00:05:01.435 --> 00:05:05.697
例如 它现在知道它所包含的 键以及此路由对象上的各种

00:05:05.697 --> 00:05:07.801
有用方法

00:05:07.801 --> 00:05:12.617
让我们调用 getJSONArray 以查找 嵌套于具有 candies 键的根对象内的

00:05:12.617 --> 00:05:13.735
数组

00:05:14.975 --> 00:05:19.770
现在 我们可以将其存储在一个 数据类型为 JSONArray 的名为

00:05:19.770 --> 00:05:20.380
candiesArray 的变量中

00:05:21.600 --> 00:05:24.820
现在 JSONArray 类显示 一个名为 getJSONobject 的

00:05:24.820 --> 00:05:30.230
方法以在指定的索引位置 访问一个对象

00:05:30.230 --> 00:05:33.150
因此我们可以在该数组中 获取此零 JSON 对象

00:05:33.150 --> 00:05:37.290
这意味着 列表中的第一个元素 然后我们可将这第一个元素存储在

00:05:37.290 --> 00:05:41.250
JSONObject 类型的 firstCandy 变量中

00:05:43.090 --> 00:05:46.960
由于我们想要在 firstCandy JSONObject 内查找属性

00:05:46.960 --> 00:05:50.920
因此我们可调用方法 getString 来 提取与键名相关联的

00:05:50.920 --> 00:05:52.270
原始值

00:05:52.270 --> 00:05:53.810
在这种情况下为 "Jelly Beans"

00:05:54.860 --> 00:05:58.920
同样 我们可调用 firstCandy JSONObject 上的 getInt 方法

00:05:58.920 --> 00:06:02.382
以提取具有键 count 的 原始整数值

00:06:02.382 --> 00:06:04.293
在这种情况下 值为 10

00:06:04.293 --> 00:06:05.533
在这下一个练习中

00:06:05.533 --> 00:06:10.581
我想让你通读有关 Android 中 JSON 解析的教程

00:06:10.581 --> 00:06:14.185
现在 此示例将比我们 一起浏览过的 candies

00:06:14.185 --> 00:06:16.513
示例复杂一点 但我想让你尽量

00:06:16.513 --> 00:06:17.968
试着了解一下

00:06:17.968 --> 00:06:22.415
更具体地说 试着阅读并 了解 MainActivity.java 代码

00:06:22.415 --> 00:06:23.730
完成后请在此处打勾

