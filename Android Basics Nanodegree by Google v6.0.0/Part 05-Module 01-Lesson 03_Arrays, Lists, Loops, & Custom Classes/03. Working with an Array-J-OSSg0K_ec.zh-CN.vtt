WEBVTT
Kind: captions
Language: zh-CN

00:00:00.470 --> 00:00:01.290
好的

00:00:01.290 --> 00:00:04.830
我觉得现在我们已经更明白什么时候应该使用数组

00:00:04.830 --> 00:00:06.400
什么时候不应该使用数组了

00:00:06.400 --> 00:00:07.600
但是还没有讨论如何在代码中

00:00:07.600 --> 00:00:08.410
使用数组

00:00:08.410 --> 00:00:11.100
这些变量有变量名称吗？

00:00:11.100 --> 00:00:12.050
不完全是这样

00:00:12.050 --> 00:00:14.570
整个数组有一个名称

00:00:14.570 --> 00:00:18.170
例如 我们可以将这个数组称为单词

00:00:18.170 --> 00:00:20.000
整个数组称为单词

00:00:20.000 --> 00:00:22.820
但是我该如何访问每个单元中的字符串呢？

00:00:22.820 --> 00:00:26.110
每个单元都称为数组的元素 我们可以通过引用

00:00:26.110 --> 00:00:29.919
元素的值位置或在数组中的索引来访问每个元素

00:00:29.919 --> 00:00:31.130
等等 索引？

00:00:31.130 --> 00:00:34.250
每个位置都有编号 我们以索引 0 开始

00:00:34.250 --> 00:00:38.240
可能有点奇怪 然后是索引 1 2 等等

00:00:38.240 --> 00:00:40.290
直到到达数组的末端

00:00:40.290 --> 00:00:44.070
所以对于长度为 7 的数组来说 从索引 0 开始

00:00:44.070 --> 00:00:45.080
最后是索引 6

00:00:45.080 --> 00:00:46.400
就是这样

00:00:46.400 --> 00:00:49.230
所有这些数字都叫做 indices（索引）

00:00:49.230 --> 00:00:51.130
因为 index 的复数形式是 indices

00:00:52.390 --> 00:00:53.540
有道理

00:00:53.540 --> 00:00:57.380
现在我的问题是 我们一开始是如何将值放入数组中的呢？

00:00:57.380 --> 00:00:58.980
类似地

00:00:58.980 --> 00:01:03.030
我们使用等号来引用数组中的特定索引

00:01:03.030 --> 00:01:07.500
等号是赋值运算符 我们将值赋到该位置

00:01:07.500 --> 00:01:10.110
等等 我需要看你写出来 我能看看

00:01:10.110 --> 00:01:11.280
代码吗？

00:01:11.280 --> 00:01:11.880
当然可以

00:01:11.880 --> 00:01:13.280
任何需求都可以 Katherine

00:01:13.280 --> 00:01:15.530
现在我将带你逐步研究一些示例代码

00:01:15.530 --> 00:01:18.730
我不想透露出 Miwok 应用的解决方案

00:01:18.730 --> 00:01:20.590
所以我将举个不同的例子

00:01:20.590 --> 00:01:23.520
假设有个应用 用户可以在线买鞋

00:01:23.520 --> 00:01:26.770
我们的应用需要跟踪哪些类型的鞋还有库存

00:01:26.770 --> 00:01:29.790
有一款鞋非常受欢迎

00:01:29.790 --> 00:01:31.640
但是只有三个尺码还有库存

00:01:31.640 --> 00:01:33.210
我们该如何存储这一信息？

00:01:33.210 --> 00:01:36.020
因为所有这些信息都与同一双鞋

00:01:36.020 --> 00:01:37.300
相关

00:01:37.300 --> 00:01:38.930
所以我们应该存储在数组中

00:01:38.930 --> 00:01:42.220
以后 我们将更容易发现哪个尺码还有库存

00:01:42.220 --> 00:01:44.920
因为我们引用单个数组变量

00:01:44.920 --> 00:01:47.380
而不用查看一堆不同的变量

00:01:47.380 --> 00:01:50.240
首先创建数组

00:01:50.240 --> 00:01:55.010
因为还剩下三个尺码 我们需要创建一个长度为 3 的整型数组

00:01:55.010 --> 00:01:59.420
每个元素都表示有库存的鞋码

00:01:59.420 --> 00:02:01.480
鞋码属于整型

00:02:01.480 --> 00:02:04.430
我知道代码语法会有点难懂 看起来可能比较复杂

00:02:04.430 --> 00:02:09.410
因为在各种奇怪的地方有括号和空格

00:02:09.410 --> 00:02:13.060
但是创建这个数组变量和我们之前创建整型

00:02:13.060 --> 00:02:14.760
及字符串变量是一样的

00:02:14.760 --> 00:02:16.940
左侧是数据类型

00:02:16.940 --> 00:02:19.260
这里是整型数组

00:02:19.260 --> 00:02:23.730
它是数据类型的名称 即 int 接着是左括号和

00:02:23.730 --> 00:02:24.820
右括号

00:02:24.820 --> 00:02:27.190
然后是数组变量的名称

00:02:27.190 --> 00:02:31.940
即有库存的鞋码 接着是等号 然后是关键字“new”

00:02:31.940 --> 00:02:34.240
紧跟着又是数组数据类型

00:02:34.240 --> 00:02:36.950
然后还是跟着左括号和右括号

00:02:36.950 --> 00:02:41.220
但是这次请注意 我们在括号里写出了数组的长度

00:02:41.220 --> 00:02:43.620
现在我们就创建了一个长度为 3 的空数组

00:02:43.620 --> 00:02:47.020
如果你想更改此数组的数据类型

00:02:47.020 --> 00:02:49.990
例如存储布尔值 变成布尔型数组

00:02:49.990 --> 00:02:53.680
那么就可以在这里和这里输入 Boolean

00:02:53.680 --> 00:02:56.480
现在我们可以根据索引位置为数组中的每个元素

00:02:56.480 --> 00:02:58.270
分配一个值

00:02:58.270 --> 00:03:01.960
对于给定的数组 我们称之为有库存的鞋码

00:03:01.960 --> 00:03:06.420
我们输入左括号和右括号 中间放入索引号

00:03:06.420 --> 00:03:10.360
在第一个示例中 我们通过使用等号

00:03:10.360 --> 00:03:15.040
将数字 5 分配给了数组索引 0

00:03:15.040 --> 00:03:18.055
这里的等号就是赋值运算符

00:03:18.055 --> 00:03:22.720
注意数组名称和括号之间没有空格

00:03:22.720 --> 00:03:27.090
当这三个语句被执行后 数组是这样的

00:03:27.090 --> 00:03:31.070
以后如果你想获取或访问数组中的元素

00:03:31.070 --> 00:03:35.090
则使用数组变量的名称 紧跟着括号 中间是索引

00:03:35.090 --> 00:03:38.630
这行代码将获取数组中的第一个元素

00:03:38.630 --> 00:03:40.830
该调用的结果是 5

00:03:40.830 --> 00:03:45.200
注意 索引从 0 开始 并连续增大

00:03:45.200 --> 00:03:48.650
所以这是索引 0 1 和 2

00:03:48.650 --> 00:03:52.810
类似地 下一行代码的结果是 7

00:03:52.810 --> 00:03:54.330
再下一行是 10

00:03:54.330 --> 00:03:56.950
如果你想知道数组的大小

00:03:56.950 --> 00:04:00.620
则输入数组变量的名称 然后输入 .length

00:04:00.620 --> 00:04:03.740
在此示例中 该表达式的结果是数字 3

00:04:03.740 --> 00:04:05.090
表示该数组有 3 个单元

00:04:06.220 --> 00:04:07.990
下面来练习下如何使用数组

00:04:07.990 --> 00:04:12.290
现实中有很多事物都可以用数组来表示

00:04:12.290 --> 00:04:15.055
例如 足球队有 11 名球员

00:04:15.055 --> 00:04:18.240
每个球员都有一个不同的球衣号码

00:04:18.240 --> 00:04:20.910
我们想要将他们的球衣号码分配到

00:04:20.910 --> 00:04:22.170
这个整型数组的每个位置

00:04:23.200 --> 00:04:26.500
假设我们已经从球员名单中选出 4 名球员

00:04:26.500 --> 00:04:29.000
我们可以将这 4 名球员的球衣号码

00:04:29.000 --> 00:04:30.820
存储在四个不同的数组索引处

00:04:30.820 --> 00:04:32.920
对于这道练习题

00:04:32.920 --> 00:04:36.070
我们将球衣号码随机地存储到数组中的每个位置

00:04:36.070 --> 00:04:39.340
请查看下所提供 gist 中的不同代码选项

00:04:39.340 --> 00:04:42.460
选出能够创建上述数组的代码选项

