WEBVTT
Kind: captions
Language: zh-CN

00:00:00.450 --> 00:00:01.210
嘿 Katherine

00:00:01.210 --> 00:00:04.330
对于 NumbersActivity 我们想在屏幕上显示

00:00:04.330 --> 00:00:05.600
一到十的数字列表

00:00:05.600 --> 00:00:07.430
你知道该怎么实现吗？

00:00:07.430 --> 00:00:10.410
在上一门课程中 我们讨论了如何在变量中

00:00:10.410 --> 00:00:11.800
存储一条信息

00:00:11.800 --> 00:00:13.100
对啊 对啊

00:00:13.100 --> 00:00:14.360
在 Just Java 应用中

00:00:14.360 --> 00:00:15.460
我们使用了整型变量（叫做数量）

00:00:16.590 --> 00:00:19.280
来存储我们定的咖啡杯数

00:00:19.280 --> 00:00:20.020
是的

00:00:20.020 --> 00:00:22.490
那么现在为何不使用十个字符串变量呢？

00:00:23.610 --> 00:00:24.340
例如这些

00:00:24.340 --> 00:00:27.680
可以有一个用于数字一的字符串 用于数字二的字符串

00:00:27.680 --> 00:00:29.430
用于数字三的字符串 等等

00:00:29.430 --> 00:00:32.600
你的想法很不错 但实际上还有更好的方式

00:00:32.600 --> 00:00:33.980
有什么更好的啊？

00:00:33.980 --> 00:00:36.166
有一种数据结构叫做数组

00:00:36.166 --> 00:00:38.510
数组是什么啊？

00:00:38.510 --> 00:00:40.570
数组可以帮我们存储一系列的变量

00:00:41.590 --> 00:00:45.050
并帮助我们保持一定的顺序 因为对于这样的一系列数字

00:00:45.050 --> 00:00:48.240
很容易就弄乱了 并显示错误的信息

00:00:48.240 --> 00:00:51.240
听起来不错 但是学员还没学过数组呢

00:00:51.240 --> 00:00:52.840
我们需要解释下

00:00:52.840 --> 00:00:54.610
你能打个比喻 或有别的方式来解释吗？

00:00:54.610 --> 00:00:58.870
实际上还真有 药盒

00:00:58.870 --> 00:01:00.170
你从哪弄来的？

00:01:00.170 --> 00:01:03.030
这和我姑姑装维他命的盒子很像啊

00:01:03.030 --> 00:01:04.750
就知道她会这么想

00:01:04.750 --> 00:01:05.930
不管怎样

00:01:05.930 --> 00:01:07.790
药盒怎么就像数组了呢？

00:01:07.790 --> 00:01:10.940
数组就像一个长度固定的容器

00:01:10.940 --> 00:01:13.950
一旦创建完毕 长度就固定了

00:01:13.950 --> 00:01:15.490
这个药盒的长度是 7

00:01:16.870 --> 00:01:18.790
每个单元都存储一个值

00:01:18.790 --> 00:01:21.240
等等 所以我可以在这个单元中存储任何内容？

00:01:21.240 --> 00:01:23.630
也不是能存储任何内容

00:01:23.630 --> 00:01:26.810
你不能将你姑父的药丸存储到姑姑的药盒里面

00:01:26.810 --> 00:01:30.170
创建好数组后 所有的值都必须是相同的类型

00:01:30.170 --> 00:01:31.990
也就是整个数组的字符串

00:01:31.990 --> 00:01:34.680
整个数组的布尔值 以及整个数组的整数

00:01:35.970 --> 00:01:38.770
如果我想存储这些字符串呢？

00:01:40.350 --> 00:01:41.450
例如一二三

00:01:41.450 --> 00:01:42.010
嗯 问的好

00:01:42.010 --> 00:01:45.120
对于一 我们可以存储在第一个索引中

00:01:45.120 --> 00:01:49.660
我们可以在第二个单元里存储字符串二

00:01:49.660 --> 00:01:51.500
在第三个单元里存储字符串三

00:01:52.780 --> 00:01:55.130
是的 数字就是这么继续往下存储的

00:01:57.100 --> 00:01:59.310
当我们将数字存储到数组中后

00:01:59.310 --> 00:02:01.430
我们可以获取所需的所有值

00:02:01.430 --> 00:02:03.493
在后来我们需要显示这些数字的时候

00:02:03.493 --> 00:02:04.380
完全正确

00:02:04.380 --> 00:02:06.360
等等 我们就这么介绍了个非常重要的概念

00:02:06.360 --> 00:02:10.320
如果你想存储一个信息列表 可以直接使用数组

00:02:10.320 --> 00:02:11.380
是的 说的对

00:02:11.380 --> 00:02:13.930
但要记住的一项重要内容是数组中的每个元素

00:02:13.930 --> 00:02:16.100
都必须是相同的数据类型

00:02:16.100 --> 00:02:17.250
有时候

00:02:17.250 --> 00:02:18.790
如果你就想存储一项内容

00:02:18.790 --> 00:02:22.020
例如一个字符串 那么就可以使用一个变量

00:02:22.020 --> 00:02:23.130
说的很对 Katherine

00:02:24.770 --> 00:02:26.090
决定如何存储数据

00:02:26.090 --> 00:02:28.920
称为为应用选择正确的数据结构

00:02:28.920 --> 00:02:33.120
何时需要数组？如果需要的话 应该是什么类型的数组？

00:02:33.120 --> 00:02:34.890
Java 是个对类型要求很严的语言

00:02:34.890 --> 00:02:37.340
也就是说 每次用 Java 创建一个变量

00:02:37.340 --> 00:02:39.490
都需要指定数据类型是什么

00:02:39.490 --> 00:02:44.030
在上一门课程中 我们运用了基本数据类型 例如整型和布尔型

00:02:44.030 --> 00:02:47.550
我们还将用到更加复杂的对象数据类型 例如 TextView

00:02:47.550 --> 00:02:48.250
和 ImageView

00:02:48.250 --> 00:02:51.160
对于特定的数据 你只能执行特定的运算

00:02:51.160 --> 00:02:55.020
例如 你可以用“+”将两个整数相加

00:02:55.020 --> 00:02:57.440
但是将布尔值相加就不合理了

00:02:57.440 --> 00:03:00.030
当我们要在 TextView 上设置文本时

00:03:00.030 --> 00:03:02.740
就表明了输入内容应该是字符串 而不是整数

00:03:02.740 --> 00:03:03.830
如果你的代码中存在数据不匹配的情况

00:03:03.830 --> 00:03:06.800
Java 就会报错

00:03:06.800 --> 00:03:09.620
为了帮助你理解数据类型 我们编写了这个文档

00:03:09.620 --> 00:03:14.530
讨论一些原始数据类型和一些对象数据类型

00:03:14.530 --> 00:03:20.520
你经常听到的原始数据类型是指 8 种基本的数据类型

00:03:20.520 --> 00:03:26.320
你可能会认识某些类型 例如整型 是指整个数字

00:03:26.320 --> 00:03:30.380
以及布尔型 它的值要么为 true 要么为 false

00:03:30.380 --> 00:03:33.660
这些是一些新的数据类型 你可能之前没用到过

00:03:33.660 --> 00:03:35.740
但是在以后将对你很有用

00:03:35.740 --> 00:03:42.120
例如双精度型是个小数 字符型是单个字符

00:03:42.120 --> 00:03:45.210
此外 你将发现 字符串没有列在原始数据类型

00:03:45.210 --> 00:03:46.430
表格中

00:03:46.430 --> 00:03:49.890
现在你应该已经熟悉字符串 它是指任何长度的文本

00:03:49.890 --> 00:03:53.660
它实际上是对象数据类型 而不是原始数据类型

00:03:53.660 --> 00:03:57.460
这就是为何我们将 String 中的首字母“s”大写了

00:03:57.460 --> 00:04:02.530
而我们没有使 char 或 boolean 首字母大写

00:04:02.530 --> 00:04:06.420
虽然字符串是个对象数据类型 但是在 Java 中却会特殊处理

00:04:06.420 --> 00:04:10.420
你可以通过将文本放入双引号里 自动创建一个新字符串

00:04:10.420 --> 00:04:13.380
而不用使用新的关键字正式地调用这个构造函数

00:04:14.560 --> 00:04:16.870
你可以创建任何数据类型的数组

00:04:16.870 --> 00:04:20.140
包括原始类型和对象类型

00:04:20.140 --> 00:04:23.420
例如 你可以创建一个整型数组

00:04:23.420 --> 00:04:27.120
字符数组甚至浮点型数组

00:04:27.120 --> 00:04:29.740
此外 你可以创建一个对象类型的数组

00:04:29.740 --> 00:04:33.470
例如字符串数组 甚至这里没有列出的对象类型数组

00:04:33.470 --> 00:04:37.350
例如 TextView 数组或按钮数组

00:04:37.350 --> 00:04:39.810
请运用你刚刚学到的关于数组以及数据类型

00:04:39.810 --> 00:04:43.610
方面的知识 试着回答这些问题

00:04:43.610 --> 00:04:45.070
我们准备了几个不同的应用场景

00:04:45.070 --> 00:04:46.960
作为开发者 你可能会遇到这些场景

00:04:46.960 --> 00:04:50.690
请判断如何在应用中表示这些信息

00:04:51.710 --> 00:04:53.440
对于这些情形

00:04:53.440 --> 00:04:55.846
你会在应用中使用什么数据结构来存储数据？

00:04:55.846 --> 00:05:00.250
整型？布尔型？字符串？

00:05:00.250 --> 00:05:04.780
整型数组？字符串数组？或其他类型？

00:05:04.780 --> 00:05:07.740
第一个情形是旅行应用

00:05:07.740 --> 00:05:10.220
你要存储旅行时带的物品

00:05:10.220 --> 00:05:11.410
第二个情形针对的是 YouTube 应用

00:05:11.410 --> 00:05:14.790
你希望知道观看了某个视频的人数

00:05:15.820 --> 00:05:18.720
第三个情形是设置应用

00:05:18.720 --> 00:05:21.529
你想要存储某款 Android 设备支持的语言

00:05:22.660 --> 00:05:25.290
第四个情形是购物应用

00:05:25.290 --> 00:05:27.640
你想要知道某个产品是否有库存

00:05:29.060 --> 00:05:31.650
第五个情形是彩票应用

00:05:31.650 --> 00:05:34.750
一轮下来五个数字的中奖组合是什么

00:05:34.750 --> 00:05:38.820
最后一个判断该使用什么数据类型的情形是

00:05:38.820 --> 00:05:40.160
健康跟踪应用

00:05:40.160 --> 00:05:43.100
跟踪这周每天行走的英里数或公里数

