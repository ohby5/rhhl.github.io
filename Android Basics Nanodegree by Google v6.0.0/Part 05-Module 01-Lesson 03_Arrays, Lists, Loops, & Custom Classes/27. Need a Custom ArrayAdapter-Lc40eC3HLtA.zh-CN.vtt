WEBVTT
Kind: captions
Language: zh-CN

00:00:00.410 --> 00:00:03.260
我们来总结下对 Miwok 应用所做的重大更改

00:00:03.260 --> 00:00:06.800
我们一开始使用的是循环语句来填充垂直 LinearLayout

00:00:06.800 --> 00:00:09.140
以便显示单词列表

00:00:09.140 --> 00:00:13.620
现在改为使用更加高效的 ListView + ArrayAdapter 组合

00:00:13.620 --> 00:00:16.730
然后我们构建了列表项布局 其中包含两个 TextView

00:00:18.070 --> 00:00:20.950
接着我们希望创建单个对象列表并传递给

00:00:20.950 --> 00:00:22.050
ArrayAdapter

00:00:22.050 --> 00:00:25.200
所以我们创建了自定义 Word 类 其中包含一个单词的

00:00:25.200 --> 00:00:27.180
英语和米沃克语翻译

00:00:27.180 --> 00:00:30.253
这样我们就可以创建 Word 对象数组列表

00:00:30.253 --> 00:00:31.095
并传递给 ArrayAdapter

00:00:31.095 --> 00:00:33.620
现在我们转到 NumbersActivity

00:00:33.620 --> 00:00:38.020
这里我们需要将字符串数组列表改为 words 数组列表

00:00:38.020 --> 00:00:40.920
所以我们需要更新泛型类型参数 即尖括号里的内容

00:00:40.920 --> 00:00:46.540
并创建一个数组列表 每个元素都是 Word 对象

00:00:46.540 --> 00:00:48.740
系统可能会弹出两个自动填充建议

00:00:48.740 --> 00:00:51.700
因为 Word 类已经存在于 Android 框架中

00:00:51.700 --> 00:00:53.710
位于不同的应用包名称下

00:00:53.710 --> 00:00:56.240
这里可以看到位于 UserDictionary 下面

00:00:56.240 --> 00:00:59.800
这些是你可以添加到自动填充字典里的单词

00:00:59.800 --> 00:01:01.650
例如向朋友发消息的时候就可以添加进去

00:01:01.650 --> 00:01:05.010
确保选择正确的 Word 类

00:01:05.010 --> 00:01:08.958
我们需要的是应用包 com.example.android.miwok 下面的 Word 类

00:01:08.958 --> 00:01:13.170
现在我们更新了 ArrayList 使其包含 Word 对象

00:01:13.170 --> 00:01:14.210
而不是字符串对象

00:01:14.210 --> 00:01:18.060
我指定 Word 为 ArrayList 的参数

00:01:18.060 --> 00:01:23.240
意味着当我们向该列表中添加元素时 我们需要添加数据类型为 Word 的对象

00:01:23.240 --> 00:01:26.500
如果我们调用 get 方法（用于获取列表中特定位置的元素）

00:01:26.500 --> 00:01:30.950
我们将获得数据类型为 Word 的对象

00:01:30.950 --> 00:01:34.476
目前所有这些 add 方法都是每次向 words 列表

00:01:34.476 --> 00:01:38.257
添加一个字符串对象 所以出现了所有这些错误提示

00:01:38.257 --> 00:01:42.725
我们需要将每行更新为传入一个 Word 对象

00:01:42.725 --> 00:01:44.814
先改下这里的第一个元素

00:01:44.814 --> 00:01:46.525
把这行注释掉

00:01:46.525 --> 00:01:50.081
在下面写出正确的代码

00:01:50.081 --> 00:01:51.894
向 words 列表添加新的 Word 对象

00:01:53.740 --> 00:01:56.390
下面介绍个典型的修改方式

00:01:56.390 --> 00:02:01.423
我们会创建一个新的 Word 对象 将其存储到一个变量中 这里称为 W

00:02:01.423 --> 00:02:04.257
然后将该变量添加到我们的 words 列表中

00:02:04.257 --> 00:02:06.668
这里 当我们创建新的 Word 对象时

00:02:06.668 --> 00:02:09.660
我们向构造函数中传入了两个新的输入参数

00:02:09.660 --> 00:02:11.490
即英语和米沃克语单词

00:02:11.490 --> 00:02:14.963
因为我们只需在这里引用这个 W 变量一次

00:02:14.963 --> 00:02:19.060
实际上有更简练的方式来写出这两行代码

00:02:19.060 --> 00:02:22.260
这里创建一个 Word 对象并将其添加到列表中的确可行

00:02:22.260 --> 00:02:25.770
但实际上还有更简练的方式

00:02:25.770 --> 00:02:28.870
在这里注意到 我们仅在下面

00:02:28.870 --> 00:02:30.540
引用这个变量“W”一次

00:02:30.540 --> 00:02:34.160
我们可以剪切掉这个 Word 对象的代码

00:02:34.160 --> 00:02:36.240
并直接粘贴到 add 方法中

00:02:36.240 --> 00:02:40.176
这样 我们就不需要这里的额外步骤在单独的一行代码中

00:02:40.176 --> 00:02:45.110
创建新的对象 然后存储到临时变量里

00:02:45.110 --> 00:02:47.540
我们可以直接完全删掉这行内容

00:02:48.830 --> 00:02:52.840
我们直接将新的 Word 对象添加到列表中

00:02:52.840 --> 00:02:57.041
总结下 这个列表的输入参数是个新的 Word 对象

00:02:57.041 --> 00:02:59.830
直接通过使用“new”关键字在行内创建了

00:02:59.830 --> 00:03:01.048
我将继续

00:03:01.048 --> 00:03:04.134
向 ArrayList 中填充 Word 对象

00:03:04.134 --> 00:03:06.064
完成后 创建 words ArrayList 的代码

00:03:06.064 --> 00:03:08.780
应该是这样的

00:03:08.780 --> 00:03:11.368
现在转到下面 我们将 ArrayList

00:03:11.368 --> 00:03:13.121
传入适配器中

00:03:13.121 --> 00:03:17.370
需要将这个泛型类型从字符串更改为 words

00:03:17.370 --> 00:03:20.220
这一更改表明 ArrayAdapter 现在包含的是 words 列表

00:03:20.220 --> 00:03:23.400
作为数据来源 而不是字符串

00:03:23.400 --> 00:03:27.420
同时需要将布局资源更新为我们的新的列表项布局

00:03:27.420 --> 00:03:31.460
将这个改为 R.layout.list_item

00:03:31.460 --> 00:03:34.260
现在代码中没有错误了

00:03:34.260 --> 00:03:36.120
在设备上运行下应用

00:03:36.120 --> 00:03:38.396
这是该版本的应用在模拟器上的运行效果

00:03:38.396 --> 00:03:40.784
转到 NumbersActivity

00:03:40.784 --> 00:03:44.325
应用崩溃了 什么情况？

00:03:44.325 --> 00:03:47.490
我们来看看 Android Monitor 和 Android 日志

00:03:47.490 --> 00:03:51.649
在日志消息的最顶部 我们在这里看到

00:03:51.649 --> 00:03:56.588
java.lang.IllegalStateException:ArrayAdapter requires the resource

00:03:56.588 --> 00:03:57.916
ID to be a TextView

00:03:57.916 --> 00:04:01.564
我不太确定这个错误的含义我们去官方文档中查看下

00:04:01.564 --> 00:04:05.445
看看能不能找到任何线索

00:04:05.445 --> 00:04:08.650
打开 ArrayAdapter 的开发者文档

00:04:08.650 --> 00:04:10.790
我们来看看“Class Overview”部分

00:04:10.790 --> 00:04:13.610
如果你想自己通读一遍

00:04:13.610 --> 00:04:14.480
可以暂停了视频

00:04:15.820 --> 00:04:20.658
我从这几段内容里了解到 默认情况下

00:04:20.658 --> 00:04:25.132
该类会预计提供的资源 ID 指的是单个 TextView

00:04:25.132 --> 00:04:29.689
也许这就是为何 Android 框架本身的列表项布局能正常运转

00:04:29.689 --> 00:04:32.891
因为整个布局仅由一个 TextView 组成

00:04:32.891 --> 00:04:36.577
在下一段里 我们看到我们还可以添加

00:04:36.577 --> 00:04:38.288
自定义对象的列表或数组

00:04:38.288 --> 00:04:41.800
正好符合我们的需求 可以帮助我们显示我们的自定义 Word 对象

00:04:41.800 --> 00:04:45.233
所有这些都是合理的 因为 ArrayAdapter

00:04:45.233 --> 00:04:46.240
使用泛型数据

00:04:46.240 --> 00:04:50.590
意味着我们可以将这里的 T 替换为任何对象数据类型

00:04:50.590 --> 00:04:53.840
看看下面的第三段内容

00:04:53.840 --> 00:04:57.940
为了显示更加复杂的列表项 其中包含多个 TextView

00:04:57.940 --> 00:05:01.870
我们需要重写 getView() 方法并提供我们自己的实现

00:05:01.870 --> 00:05:05.869
当 ListView 需要在屏幕上显示新的视图时

00:05:05.869 --> 00:05:06.715
会调用适配器的 getView() 方法

00:05:06.715 --> 00:05:10.845
该方法的输入参数之一是列表中的

00:05:10.845 --> 00:05:12.410
目标元素

00:05:12.410 --> 00:05:15.100
这里指的是位置 0

00:05:16.240 --> 00:05:20.922
知道这一信息后 适配器向 ListView 返回一个视图

00:05:20.922 --> 00:05:25.003
其中填充了位置 0 处的信息

00:05:25.003 --> 00:05:29.911
可以将 ListView 和 getView 之间的关系想象成

00:05:29.911 --> 00:05:35.270
手术室里的外科医生和外科技师之间的关系

00:05:35.270 --> 00:05:40.300
外科技师（getView）在需要的时候

00:05:40.300 --> 00:05:42.770
向外科医生（ListView）递去

00:05:42.770 --> 00:05:46.480
正确的工具（即正确的视图）

00:05:46.480 --> 00:05:51.610
外科医生 (ListView) 要求递过来手术剪刀（视图）时

00:05:51.610 --> 00:05:55.370
getView 获取所需的视图

00:05:55.370 --> 00:05:59.560
即外科技师将手术剪刀递给外科医生

00:05:59.560 --> 00:06:00.530
默认情况下

00:06:00.530 --> 00:06:04.670
ArrayAdapter 类预计将填充一个 TextView

00:06:04.670 --> 00:06:09.060
因为我们要填充的列表项视图将更加复杂

00:06:09.060 --> 00:06:13.360
它具有两个 TextView 最终还会有一个 ImageView

00:06:14.710 --> 00:06:18.273
我们需要将 getView() 方法重写成我们的自定义行为

00:06:18.273 --> 00:06:22.120
为此 我们需要创建 ArrayAdapter 类的子类

00:06:23.300 --> 00:06:26.962
解释下 这意味着我们需要创建新的 Java 类

00:06:26.962 --> 00:06:32.690
我们将其称为 WordAdapter 类 需要扩展自 ArrayAdapter 类

00:06:32.690 --> 00:06:34.376
我将演示下如何操作

00:06:34.376 --> 00:06:36.440
转到项目视图

00:06:37.700 --> 00:06:42.860
选中我们的应用包 右击 依次选择“新建 (New)”&gt;“Java 类 (Java Class)”

00:06:42.860 --> 00:06:44.960
将该文件命名为 WordAdapter

00:06:46.030 --> 00:06:49.510
我们需要修改下 Android Studio 自动生成的这个文件

00:06:49.510 --> 00:06:54.230
我们希望这个类声明指定 WordAdapter 扩展自或

00:06:54.230 --> 00:06:57.350
继承自 ArrayAdapter 类的行为

00:06:57.350 --> 00:07:00.700
要显示可以重写 ArrayAdapter 类的哪些方法

00:07:00.700 --> 00:07:03.660
我们的光标必须位于这两个大括号之间

00:07:03.660 --> 00:07:06.860
依次点击“代码 (Code)”&gt;“重写方法 (Overwrite Methods)”

00:07:06.860 --> 00:07:11.714
也可以使用键盘快捷键 Ctrl+O

00:07:11.714 --> 00:07:14.779
在这个列表中向下移动 找到 getView() 按下 Enter

00:07:14.779 --> 00:07:18.060
系统就自动生成了这个方法

00:07:18.060 --> 00:07:21.310
现在请你完成后面的步骤

00:07:21.310 --> 00:07:23.813
使该应用显示 NumbersActivity 中的

00:07:23.813 --> 00:07:24.892
单词列表

00:07:24.892 --> 00:07:28.493
这些步骤将包括完成 getView() 方法的实现

00:07:28.493 --> 00:07:32.100
完成整个测试题后 应用应该是这样的

00:07:32.100 --> 00:07:35.050
每个列表项都应该显示一个米沃克语单词

00:07:35.050 --> 00:07:36.780
下面是英语翻译

00:07:36.780 --> 00:07:39.408
为了帮助验证你的操作是否都正确

00:07:39.408 --> 00:07:42.389
我将提供一些 NumbersActivity 中需要出现的代码更改

00:07:42.389 --> 00:07:46.615
我们将使用 WordAdapter 而不是 ArrayAdapter

00:07:47.650 --> 00:07:51.328
WordAdapter 的构造函数具有两个输入参数

00:07:51.328 --> 00:07:53.818
即 Context 和 words 列表

00:07:53.818 --> 00:07:58.195
同时记得更新下面的 adapter 变量

00:07:58.195 --> 00:08:01.285
确保在做出这些 NumbersActivity 更改后 WordAdapter

00:08:01.285 --> 00:08:05.255
能正常运转 否则你需要回去修复你的 WordAdapter 类

00:08:05.255 --> 00:08:08.300
我知道这个编程练习将很有挑战 因为你之前从未

00:08:08.300 --> 00:08:12.520
创建过自定义 ArrayAdapter 甚至重写 getView() 方法

00:08:12.520 --> 00:08:16.270
这些任务涉及很多个步骤 但是我认为你肯定已经准备好了

00:08:16.270 --> 00:08:17.760
一定要保持耐心

00:08:17.760 --> 00:08:20.620
这项任务将花费一定的时间

00:08:20.620 --> 00:08:21.940
我再提供一项提示

00:08:21.940 --> 00:08:25.360
我将介绍一款示例应用 它的处理情形跟我们的很相似

00:08:25.360 --> 00:08:30.090
该项目托管在了 GitHub 平台上 是个开源项目

00:08:30.090 --> 00:08:33.429
意味着任何人都可以查看应用代码

00:08:33.429 --> 00:08:36.490
注意 每个开源项目都具有不同的许可

00:08:37.510 --> 00:08:39.465
当你查看特定的开源项目时

00:08:39.465 --> 00:08:42.971
一定要检查下许可限制

00:08:42.971 --> 00:08:45.320
看看代码是否能修改或再次发布

00:08:46.390 --> 00:08:50.260
这个应用是优达学城创建的

00:08:50.260 --> 00:08:52.300
你可以随便使用和修改

00:08:53.670 --> 00:08:58.680
我们的自定义适配器示例应用叫做 Android Flavors 应用

00:08:58.680 --> 00:09:01.820
该应用显示了所有 Android 版本列表

00:09:01.820 --> 00:09:05.240
每个版本都用列表项来表示

00:09:05.240 --> 00:09:09.660
每个列表项都包含一个图片 一个标题和版本号

00:09:11.140 --> 00:09:15.070
该应用使用了自定义 ArrayAdapter

00:09:15.070 --> 00:09:19.302
称为 FlavorAdapter 来显示自定义列表项视图

00:09:19.302 --> 00:09:21.131
其中包含一个 ImageView 和两个 TextView

00:09:21.131 --> 00:09:25.183
我们请你练习阅读其他应用中的代码

00:09:25.183 --> 00:09:28.770
并弄明白如何做出调整 用到 Miwok 应用中

00:09:28.770 --> 00:09:33.370
作为开发者 你需要经常阅读教程或其他开源项目

00:09:33.370 --> 00:09:35.979
并尝试将这些技能应用到自己的应用中

00:09:36.980 --> 00:09:40.780
要浏览该 Android Flavor 应用的代码

00:09:40.780 --> 00:09:41.896
你可以点击这个“Download ZIP”按钮

00:09:41.896 --> 00:09:45.865
下载所有代码 然后导入到 Android Studio 作为现有项目

00:09:45.865 --> 00:09:50.700
也可以直接在网络浏览器中浏览文件

00:09:50.700 --> 00:09:54.859
例如 我可以在这里依次点击“app”“source/main”

00:09:54.859 --> 00:09:58.470
然后浏览 Java 文件或 res 文件

00:09:59.580 --> 00:10:04.690
GitHub 有个很好使的键盘快捷键 即在键盘上按下 T

00:10:04.690 --> 00:10:08.130
我将按下 T 这会调出“文件查找器 (file finder)”

00:10:08.130 --> 00:10:11.858
这样可以轻松浏览项目中的文件

00:10:11.858 --> 00:10:15.656
如果我想查看 MainActivity 我可以输入 activity

00:10:15.656 --> 00:10:17.959
下面显示出 MainActivity.java 文件

00:10:17.959 --> 00:10:20.908
如果我想搜索之前提到的 FlavorAdapter

00:10:20.908 --> 00:10:22.830
则可以在这里轻松地找到

00:10:22.830 --> 00:10:26.890
希望这个示例能在下面的编程练习里帮到你

00:10:26.890 --> 00:10:30.830
请查看测试题 了解下如何开始的具体说明

00:10:30.830 --> 00:10:31.340
祝你好运

