WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:01.290
All right.

00:00:01.290 --> 00:00:04.830
So I think we have a better
idea now of when we should and

00:00:04.830 --> 00:00:06.400
should not use arrays.

00:00:06.400 --> 00:00:07.600
&gt;&gt; Yeah.
But we haven't talked about how to

00:00:07.600 --> 00:00:08.410
use arrays in code.

00:00:08.410 --> 00:00:11.100
Like do each of these thoughts
have a variable name?

00:00:11.100 --> 00:00:12.050
&gt;&gt; Well not exactly.

00:00:12.050 --> 00:00:14.570
So the entire array
itself has a single name.

00:00:14.570 --> 00:00:18.170
So, for example, we can call
this array something like words.

00:00:18.170 --> 00:00:20.000
&gt;&gt; Okay.
So the whole array is called words.

00:00:20.000 --> 00:00:22.820
But how do I get access to
the string in each slot.

00:00:22.820 --> 00:00:26.110
&gt;&gt; Well each slot is called an element
of the array and we can access each

00:00:26.110 --> 00:00:29.919
element by referring to its numerical
position or index in the array.

00:00:29.919 --> 00:00:31.130
&gt;&gt; Wait, index?

00:00:31.130 --> 00:00:34.250
&gt;&gt; Yeah, so each position is numbered,
It's kind of weird but

00:00:34.250 --> 00:00:38.240
we start with the next zero and
then move up to next one, two and so

00:00:38.240 --> 00:00:40.290
on until we reach the end of the array.

00:00:40.290 --> 00:00:44.070
&gt;&gt; Okay, so for an array of length
seven we start at index zero and

00:00:44.070 --> 00:00:45.080
we end at index six.

00:00:45.080 --> 00:00:46.400
&gt;&gt; Yeah, precisely.

00:00:46.400 --> 00:00:49.230
And all these numbers
together are called indices.

00:00:49.230 --> 00:00:51.130
&gt;&gt; Because the plural word for
index is indices.

00:00:52.390 --> 00:00:53.540
Okay so it makes sense.

00:00:53.540 --> 00:00:57.380
Now my question is how do we put values
into the array in the first place?

00:00:57.380 --> 00:00:58.980
&gt;&gt; Well, similar thing.

00:00:58.980 --> 00:01:03.030
So we refer to a specific index of
the array by using the equal sign

00:01:03.030 --> 00:01:07.500
which remember is the Simon operator and
we assign the value into that position.

00:01:07.500 --> 00:01:10.110
&gt;&gt; Wait I think I need to see
this written down can I look at

00:01:10.110 --> 00:01:11.280
the code for this?

00:01:11.280 --> 00:01:11.880
&gt;&gt; Yeah for sure.

00:01:11.880 --> 00:01:13.280
Anything for you, Kay.

00:01:13.280 --> 00:01:15.530
I'm going to walk you through
some code samples now and

00:01:15.530 --> 00:01:18.730
I don't want to give away
the solution for the me walk up.

00:01:18.730 --> 00:01:20.590
So I'm going to be using
a different example.

00:01:20.590 --> 00:01:23.520
So say we have an app where
users can buy shoes online and

00:01:23.520 --> 00:01:26.770
our app needs to keep track of which
types of shoes are still in stock.

00:01:26.770 --> 00:01:29.790
So one particular type of
shoe is really popular but

00:01:29.790 --> 00:01:31.640
we only have three sizes left.

00:01:31.640 --> 00:01:33.210
How should we store that information?

00:01:33.210 --> 00:01:36.020
Well since this is all related
information about the same

00:01:36.020 --> 00:01:37.300
pair of shoes.

00:01:37.300 --> 00:01:38.930
We should keep them in an array.

00:01:38.930 --> 00:01:42.220
Later, this makes it easier to
figure out which sizes are available

00:01:42.220 --> 00:01:44.920
because we can refer to
the single array variable

00:01:44.920 --> 00:01:47.380
instead of checking a bunch
of separate variables.

00:01:47.380 --> 00:01:50.240
So first we start off
by creating the array.

00:01:50.240 --> 00:01:55.010
Since there are three sizes left, we'll
create an integer array of length three.

00:01:55.010 --> 00:01:59.420
Each element of the array will be
one shoe size that is available and

00:01:59.420 --> 00:02:01.480
the shoe size is an integer.

00:02:01.480 --> 00:02:04.430
I know the syntax can be a little
tricky, it may look a little

00:02:04.430 --> 00:02:09.410
overwhelming because there's brackets
and spaces all in weird places but

00:02:09.410 --> 00:02:13.060
creating this array variable is similar
to how we've created integer and

00:02:13.060 --> 00:02:14.760
string variables in the past.

00:02:14.760 --> 00:02:16.940
On the left here, we have the data type.

00:02:16.940 --> 00:02:19.260
Which in this case is an integer array.

00:02:19.260 --> 00:02:23.730
It's the name of the data type which is
the word int, followed by the open and

00:02:23.730 --> 00:02:24.820
close bracket.

00:02:24.820 --> 00:02:27.190
Then, we have the name
of the array variable,

00:02:27.190 --> 00:02:31.940
which is shoe sizes available, followed
by an equal sign then the new cue word

00:02:31.940 --> 00:02:34.240
followed by the data
type of the array again.

00:02:34.240 --> 00:02:36.950
Int, with the open and
close brackets again.

00:02:36.950 --> 00:02:41.220
But this time, notice that we put the
length of the array inside the bracket.

00:02:41.220 --> 00:02:43.620
Now we have an empty
array of length three.

00:02:43.620 --> 00:02:47.020
So if you ever wanted to change
the type of data in this array,

00:02:47.020 --> 00:02:49.990
such as having it store
Booleans to be a Boolean array,

00:02:49.990 --> 00:02:53.680
then you would put Boolean here and
here.

00:02:53.680 --> 00:02:56.480
Now we can assign values to
each element of the array

00:02:56.480 --> 00:02:58.270
based on the index position.

00:02:58.270 --> 00:03:01.960
For the given array,
the recalling shoe sizes available here.

00:03:01.960 --> 00:03:06.420
We use the open and close brackets
with the index number in the middle.

00:03:06.420 --> 00:03:10.360
Example we've, and in this first
example, we've assigned the number

00:03:10.360 --> 00:03:15.040
5 into the index 0 slot of the array
by using the equal sign and so

00:03:15.040 --> 00:03:18.055
in this case the equal sign
is the assignment operator.

00:03:18.055 --> 00:03:22.720
Notice that there is no space between
the name of the array and the brackets.

00:03:22.720 --> 00:03:27.090
So when these three statements have
been executed the array looks like this.

00:03:27.090 --> 00:03:31.070
Later if you need to retrieve or access
elements of the array use the name of

00:03:31.070 --> 00:03:35.090
the array variable followed by
the brackets and index in the middle.

00:03:35.090 --> 00:03:38.630
So this line of code here, will retrieve
the first element of the array.

00:03:38.630 --> 00:03:40.830
And the result of this call, is 5.

00:03:40.830 --> 00:03:45.200
Remember that indices start at 0 and
increment consecutively.

00:03:45.200 --> 00:03:48.650
So this is index zero, one and two.

00:03:48.650 --> 00:03:52.810
And similarly the result of
the next line of code is 7 and

00:03:52.810 --> 00:03:54.330
the following one is 10.

00:03:54.330 --> 00:03:56.950
If you need to get the size of the array

00:03:56.950 --> 00:04:00.620
write out the name of the array
variable and then call .length.

00:04:00.620 --> 00:04:03.740
In this case this expression
yields the number three for

00:04:03.740 --> 00:04:05.090
the three slots in the array.

00:04:06.220 --> 00:04:07.990
So here's some practice
on how to use an array.

00:04:07.990 --> 00:04:12.290
There are many real world things
that can be represented as an array.

00:04:12.290 --> 00:04:15.055
For example,
think of a soccer team with 11 players,

00:04:15.055 --> 00:04:18.240
where each member has
a different jersey number.

00:04:18.240 --> 00:04:20.910
We want to assign the number of
their soccer jerseys at each

00:04:20.910 --> 00:04:22.170
place in this integer array.

00:04:23.200 --> 00:04:26.500
Assume we've chosen four players for
the roster already.

00:04:26.500 --> 00:04:29.000
We can store the jersey numbers
of these four players at

00:04:29.000 --> 00:04:30.820
four different array indices.

00:04:30.820 --> 00:04:32.920
So for the purpose of this exercise.

00:04:32.920 --> 00:04:36.070
We'll put the jersey numbers
in random spots of the array.

00:04:36.070 --> 00:04:39.340
Look at the different options
of code in the provided gist and

00:04:39.340 --> 00:04:42.460
pick the option that contains the code
that would create the array above.

