WEBVTT
Kind: captions
Language: zh-CN

00:00:00.450 --> 00:00:04.370
到目前位置 你已经练习了如何创建数组及初始化数组

00:00:04.370 --> 00:00:07.270
现在你将练习编写代码来访问数组元素

00:00:07.270 --> 00:00:08.480
为此

00:00:08.480 --> 00:00:12.650
你可以使用数组索引的值来设置 TextView 上的文本

00:00:12.650 --> 00:00:15.700
现在你将通过将值输出到 Android 日志中

00:00:15.700 --> 00:00:18.140
来访问数组元素

00:00:18.140 --> 00:00:22.240
你可以使用这个按钮来访问 logcat 管理器

00:00:22.240 --> 00:00:26.700
对于当前的代码 屏幕上不会显示任何内容

00:00:26.700 --> 00:00:28.920
我们在 Android 初学者课程中

00:00:28.920 --> 00:00:30.100
介绍了日志

00:00:30.100 --> 00:00:32.840
当时我们了解了 Android 会用系统日志记录设备上

00:00:32.840 --> 00:00:34.310
发生的情况

00:00:34.310 --> 00:00:36.730
它是来自系统的消息运行日志

00:00:36.730 --> 00:00:40.420
可以将其想象成日记 其中包含事件发生时间

00:00:40.420 --> 00:00:41.765
以及所发生情况的说明

00:00:41.765 --> 00:00:43.220
这些系统消息有助于

00:00:43.220 --> 00:00:46.140
调试代码 我们可以通过日志查看之前的内容

00:00:46.140 --> 00:00:49.570
看看问题发生之前系统上发生的情况

00:00:49.570 --> 00:00:52.350
当我们在 Android 初学者课程中构建 Just Java 应用时

00:00:52.350 --> 00:00:54.370
你亲自目睹了这一情形

00:00:54.370 --> 00:00:55.600
当应用崩溃时

00:00:55.600 --> 00:00:59.540
我们可以在日志中看到错误消息 帮助我们调试问题

00:00:59.540 --> 00:01:03.886
在 Android Studio 中 这些消息会出现在 logcat 窗口中

00:01:03.886 --> 00:01:06.526
除了使用日志来查看错误之外

00:01:06.526 --> 00:01:09.432
作为开发者 我们还可以向日志中写消息

00:01:09.432 --> 00:01:12.680
我们将这个向日志中写消息的流程称为写日志消息

00:01:12.680 --> 00:01:14.400
这样可以帮助我们暂时调试应用

00:01:14.400 --> 00:01:17.640
或者只是在应用运行时检查下应用状态

00:01:17.640 --> 00:01:20.710
类似于使用调试工具 对于调试工具 我们可以添加断点

00:01:20.710 --> 00:01:23.140
来查看应用中不同变量的状态

00:01:23.140 --> 00:01:26.590
写日志消息可以让我们将某些变量的值写入日志中

00:01:26.590 --> 00:01:29.480
但我个人更喜欢使用日志语句 因为操作更快

00:01:29.480 --> 00:01:32.350
你可以让应用正常运行 并在中途输出日志消息

00:01:32.350 --> 00:01:36.640
而不用手动地查看应用中的每行代码

00:01:36.640 --> 00:01:39.490
这篇文章介绍了如何写日志消息

00:01:39.490 --> 00:01:42.860
一条日志消息只需一行代码

00:01:42.860 --> 00:01:46.280
日志消息根据消息的严重或紧急程度

00:01:46.280 --> 00:01:49.412
分成了五大类别

00:01:49.412 --> 00:01:51.170
从详细消息一直到错误消息

00:01:51.170 --> 00:01:55.250
前者是指建议了解下的消息

00:01:55.250 --> 00:01:59.640
后者是指严重问题 例如应用出现了意外行为

00:01:59.640 --> 00:02:03.360
暂时我们将先练习写详细日志消息

00:02:03.360 --> 00:02:05.950
帮助我们查看应用中某些变量的状态

00:02:05.950 --> 00:02:10.900
注意 对于所有这些日志消息 都需要两个字符串作为输入参数

00:02:10.900 --> 00:02:13.710
点击第一个 Log.v 方法

00:02:13.710 --> 00:02:17.005
我们看到第一个输入参数是标记名称

00:02:17.005 --> 00:02:20.665
任何人（Android 或其他应用）都可以输出到日志中

00:02:20.665 --> 00:02:24.305
我们使用这个标记来标识消息来自何处

00:02:24.305 --> 00:02:27.205
对于该标记 通常我们直接使用日志语句

00:02:27.205 --> 00:02:29.235
所在的 Activity 或类的名称

00:02:29.235 --> 00:02:31.995
例如 在 NumbersActivity 中有个日志语句

00:02:31.995 --> 00:02:34.885
标记就可以是 NumbersActivity 字符串

00:02:34.885 --> 00:02:37.135
第二个参数是消息内容

00:02:37.135 --> 00:02:39.840
也就是我们希望在日志中看到的消息 

00:02:39.840 --> 00:02:42.970
第二个参数是消息内容

00:02:42.970 --> 00:02:46.790
也就是我们希望在日志中看到的消息

00:02:46.790 --> 00:02:50.641
回到刚才的这篇文章 下面有个示例

00:02:50.641 --> 00:02:56.354
是个 Log.i 方法调用 从这里可以判断出是信息日志

00:02:56.354 --> 00:03:01.350
我们看到标记名称是 MyActivity 消息在这里

00:03:01.350 --> 00:03:06.290
在消息参数中 我们使用加号来连结字符串

00:03:06.290 --> 00:03:09.793
字符串连结简单说来就是字符串相加

00:03:09.793 --> 00:03:11.969
类似于将数字相加

00:03:11.969 --> 00:03:14.407
我们可以使用加号来合并字符串

00:03:14.407 --> 00:03:18.701
此处 我们将这个字符串与这个 position 变量相合并

00:03:18.701 --> 00:03:20.490
创建一个更长的字符串

00:03:20.490 --> 00:03:24.100
在 logcat 中 你将看到标记名称 MyActivity

00:03:24.100 --> 00:03:29.270
以及消息内容 MyClass.getView() - get item number 1

00:03:29.270 --> 00:03:33.010
这里假设 position 变量的值为 1

00:03:33.010 --> 00:03:35.650
这是 NumbersActivity 中的一个示例

00:03:35.650 --> 00:03:40.568
我在 onCreate 方法的底部添加了这两个日志消息

00:03:40.568 --> 00:03:42.326
现在我在设备上运行下应用

00:03:44.128 --> 00:03:47.931
在应用运行时 我将转到 NumbersActivity

00:03:47.931 --> 00:03:50.890
注意这两个消息出现在了日志输出窗口中

00:03:52.090 --> 00:03:56.165
我们看见了语句：Word at index 0: one 以及

00:03:56.165 --> 00:03:58.310
Word at index 1: two

00:03:58.310 --> 00:03:59.310
这里要注意两点

00:04:00.340 --> 00:04:04.250
首先 我们需要在冒号后面加个空格

00:04:04.250 --> 00:04:07.440
这样所有这些文字就不会挤在一起

00:04:07.440 --> 00:04:10.215
其次 我们没有将

00:04:10.215 --> 00:04:15.010
words[0] 放在引号里

00:04:15.010 --> 00:04:20.010
因为我们需要的是这个索引处的值 而不是带括号的字符串本身

00:04:20.010 --> 00:04:23.200
总结下 输出日志消息非常有用

00:04:23.200 --> 00:04:26.360
可以确保变量的值是我们预期的

00:04:27.470 --> 00:04:31.900
这些日志消息只是临时的 稍后我们将删除了

00:04:31.900 --> 00:04:34.590
现在来 Miwok 应用中练习下日志功能

00:04:34.590 --> 00:04:37.330
请花时间在你的代码中写个日志消息

00:04:37.330 --> 00:04:40.360
以便查看 Words 数组中每个元素的值

00:04:40.360 --> 00:04:43.500
这是在日志中预期的输出结果

00:04:43.500 --> 00:04:44.970
完成后 请选中此方框

