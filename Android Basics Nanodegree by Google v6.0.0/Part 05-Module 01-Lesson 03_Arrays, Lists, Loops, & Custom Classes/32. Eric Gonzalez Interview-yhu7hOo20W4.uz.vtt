WEBVTT
Kind: captions
Language: uz

00:00:00.328 --> 00:00:05.570
Udacity app da massivlarni, masalan,
kursga yozilish uchun ishlatamiz, shunday emasmi? 
 
2
00:00:05,570 --&gt; 00:00:09,688
O‘zi aslida, siz bittadan ko‘proq kursga yozilgan bo‘lasiz,	
yoki nanodegree kursiga yozilgan bo‘lishingiz mumkin

00:00:09.688 --> 00:00:13.809
va shu kurslarning hammasi 

00:00:13.809 --> 00:00:17.200
sizga qayta ko‘rsatilganida 
massiv holatida saqlangan bo‘lishi mumkin.

00:00:17.200 --> 00:00:19.140
Misol uchun, aytaylik, 
siz CS 101 kursidasiz va

00:00:19.140 --> 00:00:22.240
Android kursiga yozilgansiz. 

00:00:22.240 --> 00:00:25.580
Va bularning ikkalasi ham sizga 
men ko‘rsatganimdek massiv holatida tasvirlanadi.

00:00:25.580 --> 00:00:28.700
Massivlar narsalar ro‘yxatini 

00:00:28.700 --> 00:00:29.890
tasvirlashda bizga juda qo‘l keladi.

00:00:29.890 --> 00:00:33.389
Narsalar ro‘yxati list view kabi 
yaxshi tarjima qilinadi massivlar yordamida.

00:00:34.450 --> 00:00:38.920
Umuman olganda, ular 
qandaydir massiv ma’lumotlar tuzilmasida saqlanadi.

00:00:38.920 --> 00:00:40.760
Shu sababli men oddiy massivlarni ishlatmayman.

00:00:40.760 --> 00:00:45.850
Lekin massivlar ro‘yxatini qachon ishlatishim mumkin, 
qachonki qaytaradigan javoblarimning aksariyati serverdan 

00:00:45.850 --> 00:00:50.150
keladigan bo‘lsa va ularning 
aniq hajmini bilmasam.

00:00:50.150 --> 00:00:52.875
Misol uchun ba’zan student faqatgina 
bitta kursga yozilgan bo‘lishi mumkin yoki

00:00:52.875 --> 00:00:54.503
yoki u yuzta kursga 
yozilgan bo‘lishi mumkin.

00:00:54.503 --> 00:00:58.569
Shuning uchun man ikkila holatda ham
to‘g‘ri ish yurita olishim kerak va 

00:00:58.569 --> 00:01:01.824
massiv ro‘yxati serverdan olgan javobimga qarab
uni kattalashtirishga yoki qisqartirishga sharoit yaratadi.

00:01:01.824 --> 00:01:03.577
Demak, bizda bir nechta ro‘yxatlar bor.

00:01:03.577 --> 00:01:06.256
Bizda bir nechta chiziqli ro‘yxatlar bor,
gorizontal ro‘yxatlar bor,

00:01:06.256 --> 00:01:08.950
bu yerda ro‘yxatlarni
ko‘plarini ko‘rishingiz mumkin.

00:01:08.950 --> 00:01:13.370
Agar ro‘yxatdan o‘tishni olsak,
ro‘yxatdan o‘tish ham list view da berilgan.

00:01:13.370 --> 00:01:16.290
Agar siz nanodegree dasturiga yozilgan bo‘lsangiz,

00:01:16.290 --> 00:01:19.960
siz uchun alohida nanodegree ko‘rinishi mavjud 
va u ham ro‘yxat ko‘rinishiga ega.

00:01:19.960 --> 00:01:21.342
Va bularni bir nechta joylarda kuzatish mumkin.

00:01:21.342 --> 00:01:25.390
Va yo‘llar ham, ilovadagi yo‘llarni ko‘rish mumkin 
agar siz gorizontal ravishda ekranni siljitsangiz.

00:01:25.390 --> 00:01:27.270
Bu o‘zini ichidagi ro‘yxat ko‘rinishi.

00:01:27.270 --> 00:01:30.650
Demak, view larni qayta-qayta ishlatish juda muhim,
chunki siz iloji boricha kamroq xotira ishlatishga 

00:01:30.650 --> 00:01:31.860
harakat qilishingiz kerak.

00:01:31.860 --> 00:01:36.450
Shuning uchun siz faqatgina ekranda kerak 
view larni ko‘rsatishga harakat qilishingiz kerak,

00:01:36.450 --> 00:01:39.460
chunki ro‘yxat juda ham uzun bo‘lishi mumkin
va ro‘yxat bo‘ylab yursangiz 

00:01:39.460 --> 00:01:42.260
siz view larni qayta ishlatyapsiz va 
faqatgina keraklilarini va

00:01:42.260 --> 00:01:44.790
ekranga sig‘adiganlarini 
ko‘rsatyapsiz.

00:01:44.790 --> 00:01:48.300
Ma’lumotni ilovada tuzilish yo‘lini 
tanlashimiz kursda ko‘rib chiqqan
 
35
00:01:48,300 --&gt; 00:01:50,760
yo‘llarimiz bilan deyarli 
bir xil. 

00:01:50.760 --> 00:01:54.330
Demak bizda nanodegree sinfi,

00:01:54.330 --> 00:01:59.250
dars sinfi va individual qismlarni
ilovada Java object 

00:01:59.250 --> 00:02:03.970
sifatida modellashtirish
tushunchasi mavjud.

00:02:03.970 --> 00:02:06.450
Juda ko‘p marta bu API bilan 
ishlashga o‘xshaydi va

00:02:06.450 --> 00:02:09.699
ko‘plab shunga o‘xshagan qarorlar 
oldinroq qabul qilingan edi.

00:02:09.699 --> 00:02:14.000
Shuning uchun API ishlatishda bu narsa 
qaysidir ma’noda allaqachon modellashtirib bo‘lingan.

00:02:14.000 --> 00:02:17.210
Siz oxirgi nuqtalar qaysi bo‘lishini, qanday 
javoblar kelishini bilasiz va

00:02:17.210 --> 00:02:20.560
bu javoblar bir turdagi object tomonidan
guruhlashtirib qo‘yilgan.

