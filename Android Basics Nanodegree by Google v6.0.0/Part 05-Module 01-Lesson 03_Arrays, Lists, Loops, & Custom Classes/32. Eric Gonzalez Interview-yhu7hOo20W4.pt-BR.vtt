WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:05.467
Usamos vetores no Udacity para
matrículas nos cursos, por exemplo.

00:00:05.501 --> 00:00:10.267
Idealmente, você está
fazendo mais de um curso.

00:00:10.300 --> 00:00:13.968
Pode estar em um nanoprograma,
ou em um conjunto deles,

00:00:14.000 --> 00:00:17.334
e estes são guardados
em um vetor.

00:00:17.367 --> 00:00:22.467
Você está em CS101,
e em um curso de Android.

00:00:22.501 --> 00:00:25.434
Os dois aparecem
como um vetor que eu leio.

00:00:25.467 --> 00:00:29.868
Vetores são úteis quando
você tem uma lista de itens,

00:00:29.901 --> 00:00:34.367
que se traduz muito bem em uma
exibição de lista, ou algo assim.

00:00:34.400 --> 00:00:38.901
Elas são guardadas em alguma
estrutura de dados de vetor.

00:00:38.934 --> 00:00:41.133
Eu não uso
vetores primitivos,

00:00:41.167 --> 00:00:44.400
mas uso vetores
de ArrayList,

00:00:44.434 --> 00:00:47.133
porque recebo
muitas respostas do servidor,

00:00:47.167 --> 00:00:50.000
e não sei
seu tamanho exato.

00:00:50.033 --> 00:00:53.000
Um aluno pode estar matriculado
em só um curso,

00:00:53.033 --> 00:00:54.767
mas também podem ser 100.

00:00:54.801 --> 00:00:56.868
Preciso lidar
com ambos os casos.

00:00:56.901 --> 00:00:59.534
Uma ArrayList
pode crescer ou diminuir

00:00:59.567 --> 00:01:01.701
com base
na resposta do servidor.

00:01:01.734 --> 00:01:03.400
Usamos muitas listas.

00:01:03.434 --> 00:01:06.434
Listas lineares,
listas horizontais...

00:01:06.467 --> 00:01:09.100
Tem listas
por toda a parte.

00:01:09.133 --> 00:01:11.534
Pensando de novo
nas matrículas,

00:01:11.567 --> 00:01:13.634
é uma exibição de lista.

00:01:13.667 --> 00:01:16.100
Se você tem
um nanoprograma,

00:01:16.133 --> 00:01:20.200
tem uma visualização para eles,
que também é uma exibição de lista.

00:01:20.234 --> 00:01:23.400
Estão em vários lugares.
Também tem trilhas no app,

00:01:23.434 --> 00:01:27.367
ao deslizar horizontalmente,
também uma exibição de lista.

00:01:27.400 --> 00:01:31.734
Reciclar as exibições é importante
para usar o mínimo de memória.

00:01:31.767 --> 00:01:36.167
Só queremos renderizar
as exibições que estão na tela,

00:01:36.200 --> 00:01:38.734
porque uma lista
pode ser muito grande,

00:01:38.767 --> 00:01:41.734
então enquanto desliza,
você recicla as exibições,

00:01:41.767 --> 00:01:44.601
para renderizar apenas
o que cabe na tela.

00:01:44.634 --> 00:01:47.133
Nós estruturamos os dados
no aplicativo

00:01:47.167 --> 00:01:51.167
ainda é baseado nos conceitos
que você vê nas aulas.

00:01:51.200 --> 00:01:54.300
Ainda temos o conceito
de classe de nanoprograma,

00:01:54.334 --> 00:01:57.968
tem uma classe de aula,
tem pacotes,

00:01:58.000 --> 00:02:00.334
todas essas
unidades individuais,

00:02:00.367 --> 00:02:03.868
que modelamos como
objetos java no app.

00:02:03.901 --> 00:02:06.734
Muitas vezes, quando
trabalhamos com uma API,

00:02:06.767 --> 00:02:10.434
muitas dessas decisões
já foram tomadas antes.

00:02:10.467 --> 00:02:13.734
Você consome uma API,
então ela já foi modelada.

00:02:13.767 --> 00:02:17.100
Você sabe quais Endpoints atinge,
quais são as respostas,

00:02:17.133 --> 00:02:21.000
e elas estão agrupadas logicamente
por algum tipo de objeto.

