WEBVTT
Kind: captions
Language: zh-CN

00:00:00.410 --> 00:00:03.510
现在你明白了具有 ListView 和自定义 ArrayAdapter

00:00:03.510 --> 00:00:05.340
的示例应用是如何工作的

00:00:05.340 --> 00:00:06.510
这将有助于明白

00:00:06.510 --> 00:00:09.790
如何对我们的应用做出相应的更改

00:00:09.790 --> 00:00:14.580
Android Flavor 应用的每个列表项具有两个 TextView 和一个 ImageView

00:00:14.580 --> 00:00:18.320
对于 Miwok 应用来说 我们希望具有两个 TextView

00:00:18.320 --> 00:00:21.080
因此我们需要创建一个自定义 ArrayAdapter

00:00:21.080 --> 00:00:24.740
因为默认的只能具有一个 TextView

00:00:24.740 --> 00:00:26.878
我们开始进入测试题的第一步

00:00:26.878 --> 00:00:30.700
首先我们请你创建了 Word 对象列表

00:00:30.700 --> 00:00:32.530
这是 Word 对象的 ArrayList 的代码

00:00:32.530 --> 00:00:36.880
注意创建的每个 Word 对象都具有英语和米沃克语翻译对

00:00:36.880 --> 00:00:39.740
确保输入参数的顺序是英语单词在前面

00:00:39.740 --> 00:00:41.000
然后是米沃克语单词

00:00:41.000 --> 00:00:44.750
因为我们在 Word 构造函数里就是这么设置的

00:00:44.750 --> 00:00:47.680
回到 NumbersActivity 我们请你修改

00:00:47.680 --> 00:00:51.290
适配器的创建方式并设置到 ListView 中

00:00:51.290 --> 00:00:54.170
我们提供了一些代码供你添加到 NumbersActivity

00:00:54.170 --> 00:00:56.940
确保你能创建 WordAdapter

00:00:56.940 --> 00:00:59.530
我们请你删除了旧的 ArrayAdapter 代码

00:00:59.530 --> 00:01:02.310
使 onCreate 方法看起来是这样的

00:01:02.310 --> 00:01:05.019
这里我们创建了新的 WordAdapter 对象

00:01:05.019 --> 00:01:07.340
并将其存储在变量“adapter”中

00:01:07.340 --> 00:01:09.650
我们调用构造函数并传入 Context

00:01:09.650 --> 00:01:13.329
即 this 所指代的 它指代的是 NumbersActivity

00:01:13.329 --> 00:01:16.480
然后传入 Word 对象的数组列表

00:01:16.480 --> 00:01:20.570
接着在布局中查找 ID 为“list”的 ListView

00:01:20.570 --> 00:01:22.850
并在其上设置适配器

00:01:22.850 --> 00:01:26.990
对于第三步 我们请你创建了新的 WordAdapter 类

00:01:26.990 --> 00:01:29.720
我们在之前的视频中演示了如何创建的说明

00:01:29.720 --> 00:01:33.620
对于第四步 我们修改了类的声明

00:01:33.620 --> 00:01:37.940
使 WordAdapter 扩展自或继承自 ArrayAdapter 类

00:01:37.940 --> 00:01:41.391
通过在这里将 Word 类指定为泛型参数

00:01:41.391 --> 00:01:46.040
我们知道 ArrayAdapter 的数据来源将为 Word 对象列表

00:01:46.040 --> 00:01:49.730
在第五步 我们请你重写 getView() 方法

00:01:49.730 --> 00:01:52.540
以便为该方法提供自己的实现

00:01:52.540 --> 00:01:55.360
这段代码是由 Android Studio 生成的

00:01:55.360 --> 00:02:00.570
你可以使用键盘快捷键 Control+O 或转到这里

00:02:00.570 --> 00:02:04.210
依次选择“代码 (Code)”&gt;“重写 (Override)”选择 getView() 方法

00:02:04.210 --> 00:02:07.930
对于第六步 我们请你使用自己的实现来完成此方法

00:02:07.930 --> 00:02:12.180
并将 Android Flavor 应用作为示例来讲解

00:02:12.180 --> 00:02:14.110
打开 Android Flavor 应用

00:02:14.110 --> 00:02:14.850
这是自定义 ArrayAdaptor 示例中的

00:02:14.850 --> 00:02:18.890
AndroidFlavorAdapter 的代码

00:02:18.890 --> 00:02:21.410
这里是 getView() 方法

00:02:21.410 --> 00:02:25.045
因为这段逻辑和我们在 Miwok 应用中所需的 getView() 方法非常相似

00:02:25.045 --> 00:02:27.664
我们直接复制这部分代码并粘贴到我们的应用中

00:02:34.172 --> 00:02:37.210
我将代码粘贴到了 WordAdapter 类中

00:02:37.210 --> 00:02:39.980
首先确保我们具有列表项视图

00:02:39.980 --> 00:02:41.420
即使它没有正确的数据

00:02:41.420 --> 00:02:45.030
我们可以尝试使用传入为输入参数的回收视图

00:02:45.030 --> 00:02:48.350
但是它可能为 null 意味着没有视图可以

00:02:48.350 --> 00:02:49.310
重复使用

00:02:49.310 --> 00:02:52.720
在这种情况下 我们将需要从列表项布局中从头隐形膨胀一个视图

00:02:52.720 --> 00:02:56.040
我们可以使用 Android 中的 LayoutInflator 并调用 inflate() 方法

00:02:56.040 --> 00:03:00.490
传入布局资源 ID 父视图 即 ListView

00:03:00.490 --> 00:03:03.490
以及这里的 false 因为我们暂时不希望将列表项视图附到

00:03:03.490 --> 00:03:05.100
父 ListView 上

00:03:05.100 --> 00:03:08.470
下一步是在所请求的位置找到

00:03:08.470 --> 00:03:09.032
Word 对象

00:03:09.032 --> 00:03:12.940
以便开始在该布局中向视图上设置正确的数据

00:03:12.940 --> 00:03:16.960
我们将调用来自超级类 ArrayAdapter 的 getItem() 方法

00:03:16.960 --> 00:03:20.840
并将目标位置作为输入参数

00:03:20.840 --> 00:03:24.600
我们希望这个 getItem() 方法返回 Word 对象

00:03:24.600 --> 00:03:28.400
而不是 AndroidFlavor 对象 因为我们的类声明指出

00:03:28.400 --> 00:03:33.370
我们继承自 ArrayAdapter 其中 Word 是 getItem() 方法的返回类型

00:03:33.370 --> 00:03:37.090
我们来看看 getItem() 方法的文档

00:03:37.090 --> 00:03:41.280
这是 ArrayAdapter 类的 getItem() 方法的文档

00:03:41.280 --> 00:03:44.390
在这种情况下 只要看到泛型参数 T

00:03:44.390 --> 00:03:46.370
我们就可以替换为 Word 数据类型

00:03:46.370 --> 00:03:49.070
再回到代码部分

00:03:49.070 --> 00:03:51.120
对于下面的三个部分

00:03:51.120 --> 00:03:53.670
我们的布局暂时还没有 ImageView

00:03:53.670 --> 00:03:56.720
所以可以删掉关于在 ImageView 上设置图片的

00:03:56.720 --> 00:03:58.270
代码

00:03:58.270 --> 00:04:01.340
我们转到 list_item.xml 布局

00:04:01.340 --> 00:04:05.185
这里有两个 TextView 一个的视图 ID 为

00:04:05.185 --> 00:04:10.000
miwok_text_view 另一个的视图 ID 为 default_text_view

00:04:10.000 --> 00:04:12.868
如果你选择采用不同的名称

00:04:12.868 --> 00:04:14.060
你的代码可能有所不同

00:04:14.060 --> 00:04:18.720
意味着在 WordAdapter 类中 listItemView 变量

00:04:18.720 --> 00:04:22.740
目前引用的是列表项布局的根 LinearLayout

00:04:22.740 --> 00:04:27.110
如果我们对列表项视图调用 findViewById() 方法

00:04:27.110 --> 00:04:30.820
那么就可以找到 Miwok TextView

00:04:30.820 --> 00:04:34.364
找到后 我们可以将该视图投射到 TextView 因为它是 TextView

00:04:34.364 --> 00:04:38.570
然后将其存储到 miwokTextView() 变量中

00:04:38.570 --> 00:04:42.700
接着 我们可以对该 TextView 调用 setText() 方法

00:04:42.700 --> 00:04:45.370
然后传入需要显示的新文本

00:04:45.370 --> 00:04:48.701
也就是当前 Word 对象的米沃克翻译字符串

00:04:53.242 --> 00:04:55.998
这行代码有点难理顺

00:04:55.998 --> 00:04:59.425
我们先从小括号里的表达式开始

00:04:59.425 --> 00:05:04.130
我们对 currentWord 对象调用 getMiwokTranslation() 方法

00:05:04.130 --> 00:05:07.703
返回米沃克单词字符串

00:05:07.703 --> 00:05:11.200
并成为 miwokTextView 对象的 setText() 方法调用的输入

00:05:11.200 --> 00:05:13.895
现在 miwokTextView 应该显示的是米沃克单词

00:05:13.895 --> 00:05:17.475
我们将对 defaultTextView 重复相同的步骤

00:05:17.475 --> 00:05:21.015
listItemView 指向 list_item 布局中的 LinearLayout

00:05:21.015 --> 00:05:24.935
我们将调用 findViewById() 方法来搜索其所有子项

00:05:24.935 --> 00:05:29.079
我们找到 ID 为 defaultTextView 的视图并将其投射至 TextView

00:05:29.079 --> 00:05:32.817
然后将其存储到变量 defaultTextView 中

00:05:34.157 --> 00:05:38.657
然后对 currentWord 对象调用 getDefaultTranslation() 方法

00:05:38.657 --> 00:05:42.207
这样就可以获得英语翻译字符串

00:05:42.207 --> 00:05:45.177
并成为 defaultTextView 对象的 setText() 方法调用的

00:05:45.177 --> 00:05:47.137
输入内容

00:05:47.137 --> 00:05:50.720
现在 defaultTextView 应该显示英语单词

00:05:50.720 --> 00:05:51.950
完成这些步骤后

00:05:51.950 --> 00:05:55.380
我们需要将 listItemView 作为返回值返回来

00:05:55.380 --> 00:06:00.270
listView 会将其返回值作为子项添加进来

00:06:00.270 --> 00:06:01.880
唷 太有挑战了

00:06:01.880 --> 00:06:03.330
感谢大家能认真的聆听

00:06:03.330 --> 00:06:04.770
总结下

00:06:04.770 --> 00:06:08.830
在 getView() 方法中 我们首先获得可以使用的 listItemView

00:06:08.830 --> 00:06:11.510
可以重复使用提供给我们的视图

00:06:11.510 --> 00:06:13.940
或者从头完全重新隐形膨胀一个视图

00:06:13.940 --> 00:06:16.650
然后获得给定位置的 Word 对象

00:06:16.650 --> 00:06:19.850
接着在列表项布局中查找视图

00:06:19.850 --> 00:06:22.480
并在上面设置从 Word 对象获得的数据

00:06:22.480 --> 00:06:25.880
最后 我们可以返回更新后的 ListItemView

00:06:25.880 --> 00:06:27.900
现在尝试运行下代码

00:06:27.900 --> 00:06:30.170
看起来 NumbersActivity 存在错误

00:06:30.170 --> 00:06:33.450
系统提示创建 WordAdapter 时出现错误

00:06:34.750 --> 00:06:37.870
这是因为我们忘记在 WordAdapter 中创建构造函数

00:06:37.870 --> 00:06:41.370
它需要两个输入参数 即 Context 和 words 列表

00:06:41.370 --> 00:06:42.490
我们现在创建下

00:06:43.530 --> 00:06:46.290
我们来看看 FlavorAdapter 应用中的示例

00:06:46.290 --> 00:06:49.040
我们之前在上个视频中描述了该构造函数

00:06:49.040 --> 00:06:50.720
如果有需要的话 可以再去观看下该视频

00:06:51.990 --> 00:06:55.510
我再次打开示例 Flavor 应用

00:06:55.510 --> 00:06:58.600
我们之前在上个视频中描述了该构造函数

00:06:58.600 --> 00:07:00.750
如果有需要的话 可以再去观看下该视频

00:07:00.750 --> 00:07:04.190
现在我们的 WordAdapter 也需要类似的构造函数

00:07:04.190 --> 00:07:06.847
我将复制这个构造函数并粘贴过来 然后稍加修改

00:07:09.122 --> 00:07:12.670
我将复制的构造函数粘贴到

00:07:12.670 --> 00:07:13.920
WordAdapter 类的顶部

00:07:13.920 --> 00:07:18.050
将 AndroidFlavorAdapter 改成 WordAdapter

00:07:18.050 --> 00:07:21.700
因为构造函数的名称必须和类的名称一模一样

00:07:21.700 --> 00:07:24.860
在这个列表里 我们需要的是 Words 列表

00:07:24.860 --> 00:07:26.740
而不是 AndroidFlavors 列表

00:07:26.740 --> 00:07:30.810
最后 在该构造函数内 我们可以调用超级类 AndroidAdaptors

00:07:30.810 --> 00:07:35.070
构造函数 并传入 Context 布局资源 ID

00:07:35.070 --> 00:07:36.480
和对象列表

00:07:36.480 --> 00:07:38.800
所以需要将这个也更新为 words

00:07:38.800 --> 00:07:41.760
这里可以针对布局资源 ID 传入 0

00:07:41.760 --> 00:07:45.520
因为我们会自己在 getView() 方法中隐形膨胀布局

00:07:45.520 --> 00:07:47.550
这是应用在设备上的样子

00:07:47.550 --> 00:07:50.280
转到 NumbersActivity

00:07:50.280 --> 00:07:50.980
不错

00:07:50.980 --> 00:07:53.980
列表中出现了米沃克单词和英语单词

00:07:53.980 --> 00:07:55.370
恭喜你

00:07:55.370 --> 00:07:56.070
完成的很棒

