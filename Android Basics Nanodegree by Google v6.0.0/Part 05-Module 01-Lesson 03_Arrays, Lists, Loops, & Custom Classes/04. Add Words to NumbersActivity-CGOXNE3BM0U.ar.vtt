WEBVTT
Kind: captions
Language: ar

00:00:00.380 --> 00:00:03.490
حسنًا، ربما نكون قد قدّمنا
ذلك في مقاطع سابقة، ولكننا

00:00:03.490 --> 00:00:07.040
نحتاج إلى إنشاء مصفوفة سلسلة
لتخزين قائمة الكلمات الإنجليزية

00:00:07.040 --> 00:00:08.530
للأرقام من واحد إلى عشرة.

00:00:08.530 --> 00:00:10.710
وتعتبر المصفوفة مناسبة لهذا الموقف،

00:00:10.710 --> 00:00:14.520
نظرًا لوجود مجموعات كلمات
مترابطة نحتاج إلى جمعها مع بعضها.

00:00:14.520 --> 00:00:16.970
ونريد أيضًا الحفاظ
على ترتيب الكلمات.

00:00:16.970 --> 00:00:22.090
وبالتالي، فإننا نتأكد من الترتيب
بحيث يكون 1، 2، 3 ...

00:00:22.090 --> 00:00:25.330
وسيكون من الغريب عرض
الكلمات بترتيبٍ مغايرٍ.

00:00:25.330 --> 00:00:29.860
ونظرًا لوجود عشرة كلمات، فإننا
نبدأ المصفوفة بحجم عشرة،

00:00:29.860 --> 00:00:31.290
وبالتالي يكون لدينا عشرة فتحات.

00:00:31.290 --> 00:00:34.320
ثم نعطي اسم "كلمات" لمتغير
المصفوفة.

00:00:34.320 --> 00:00:38.060
وبالنسبة لنوع بيانات هذا المتغير،
فإنك تحتاج إلى جعلها مصفوفة سلسلة.

00:00:38.060 --> 00:00:40.650
ونظرًا لاحتياجنا إلى تخزين النص
في كل عنصر من عناصر المصفوفة،

00:00:40.650 --> 00:00:43.730
وإذا كانت كل كلمة طولها
حرف واحد فقط، فيمكننا المضي قدمًا

00:00:43.730 --> 00:00:46.090
واستخدام حرفًا وإنشاء مصفوفة حروف.

00:00:46.090 --> 00:00:48.690
وتذكر أن الحرف هو نوع
بيانات مبدئي، ولكن

00:00:48.690 --> 00:00:52.700
هذه الكلمات أطول بكثيرٍ،
وبالتالي فإننا نستخدم مصفوفة سلسلة.

00:00:52.700 --> 00:00:56.010
دعونا نضيف كودًا في نشاط
الأرقام لإنشاء مصفوفة كلمات جديدة.

00:00:57.090 --> 00:01:02.050
ولإنشاء متغير المصفوفة، سنبدأ
بحرف كبير "S" لكلمة "string".

00:01:02.050 --> 00:01:05.110
وتذكر أن هذا يرجع إلى أن
السلسلة هي أحد أنواع بيانات الكيان

00:01:05.110 --> 00:01:06.970
وليست أحد أنواع البيانات المبدئية.

00:01:06.970 --> 00:01:07.980
وبعد ذلك،

00:01:07.980 --> 00:01:11.640
سنحتاج إلى إضافة أقواس
للإشارة إلى أنها مصفوفة سلسلة.

00:01:11.640 --> 00:01:16.788
وسوف نطلق على المتغير اسم
"كلمات"، ثم سأكتب علامة

00:01:16.788 --> 00:01:21.546
يساوي متبوعةً بسلسلة مساحة جديدة
بقيمة 10 داخل الأقواس.

00:01:21.546 --> 00:01:25.860
وبالتالي فإن 10 هنا
تشير إلى حجم المصفوفة.

00:01:25.860 --> 00:01:29.303
وتذكر أننا ننهي دومًا
عباراتنا بفاصلة منقوطة.

00:01:29.303 --> 00:01:33.659
وبالتالي، فبمجرد إنشاء مصفوفة
سلسلة، يمكننا البدء في تخصيص قيم

00:01:33.659 --> 00:01:36.639
في كل مركز عن طريق
تخصيص تخصيص القيمة في كل فهرس.

00:01:37.920 --> 00:01:42.460
فعلى سبيل المثال: في فهرس صفر،
نخصص القيمة واحد،

00:01:43.750 --> 00:01:46.680
وتذكر أن هذه القيمة،
وإليك سلسلة نصية.

00:01:47.860 --> 00:01:51.493
وبالتالي، سوف أقوم بذلك لكل فهرس
حتى الوصول إلى السلسلة النصية 10.

00:01:51.493 --> 00:01:53.341
[BLANK_AUDIO]

00:01:53.341 --> 00:01:56.504
وإليك ما سيبدو عليه
الحل الكامل بمجرد

00:01:56.504 --> 00:02:00.450
إضافة الكلمات العشرة كلها في تطبيقنا
وتخزينها في مصفوفة سلسلة.

00:02:00.450 --> 00:02:04.960
أنا أعرف أن هذا قد يبدو غريبًا بعض الشيء،
وهذا نظرًا لأننا خزنا القيمة واحد

00:02:04.960 --> 00:02:10.150
في الفهرس صفر، وخزنا القيمة
النهائية 10 في الفهرس 9.

00:02:10.150 --> 00:02:12.170
ولكن هذا صحيح،

00:02:12.170 --> 00:02:16.200
وسوف تعتاد على السلاسل التي تبدأ
بصفر فيما بعد عندما يزيد استخدامك لها.

00:02:17.600 --> 00:02:20.410
حسنًا، أحسنت صنعًا، والآن
أصبحت لدينا سلسلة كلمات في تطبيقنا.

