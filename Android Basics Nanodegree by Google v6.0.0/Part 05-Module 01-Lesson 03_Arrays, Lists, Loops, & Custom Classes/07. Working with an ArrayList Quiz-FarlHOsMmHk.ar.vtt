WEBVTT
Kind: captions
Language: ar

00:00:00.620 --> 00:00:05.020
في جدول المقارنة الذي عرضناه لك، قلنا إن ArrayList عبارة عن فئة

00:00:05.020 --> 00:00:08.600
وأنت تحتاج لأساليب استدعاء للوصول إلى عناصر القائمة وتعديلها.

00:00:08.600 --> 00:00:11.490
إذن الآن دعنا نناقش فئة ArrayList بمزيد من التفاصيل

00:00:11.490 --> 00:00:12.810
وكيف يمكنك التعامل معها في كود.

00:00:13.940 --> 00:00:17.660
لذا لنبدء بفتح صفحة الوثيقة لـArrayList،

00:00:17.660 --> 00:00:23.090
وفي الأعلى مكتوب أن الفئة العامة ArrayList تُوسع AbstractList.

00:00:23.090 --> 00:00:26.360
وتعني كلمات التوسيع الأساسية أننا نرث مجموعة من السلوكيات من

00:00:26.360 --> 00:00:28.760
فئة AbstractList مجانًا.

00:00:28.760 --> 00:00:31.620
لذلك دعني أنقر على فتح فئة AbstractList.

00:00:31.620 --> 00:00:36.030
تقول هذه الصفحة إن فئة AbstractList عبارة عن فئة مجردة.

00:00:36.030 --> 00:00:39.620
وتذكّر أن الفئة المجردة يتم تنفيذها جزئيًا، ما يعني أن

00:00:39.620 --> 00:00:43.380
لديها بعض الأساليب تُنفذ وبعض الأساليب تُترك فارغة.

00:00:43.380 --> 00:00:46.810
وبالنظر إلى تعريف الفئة أيضًا نرى أنها تُوسّع فئة أخرى.

00:00:46.810 --> 00:00:49.480
وها هي هنا تقول، تُوسّع AbstractCollection.

00:00:49.480 --> 00:00:51.380
لكن لن نخوض في هذه التفاصيل الآن.

00:00:51.380 --> 00:00:54.140
وما أريد الإشارة إليه هو أن AbstractList تنفذ

00:00:54.140 --> 00:00:55.112
واجهة القائمة.

00:00:55.112 --> 00:00:59.010
سأنقر على هذا الرابط لفتح واجهة القائمة.

00:00:59.010 --> 00:01:02.840
إذن عبر هذه السلسلة الطويلة من التوريثات، أود منك معرفة

00:01:02.840 --> 00:01:07.870
أن ArrayList الأولية تُنفذ حقًا واجهة القائمة.

00:01:07.870 --> 00:01:13.200
جرى تعريف واجهة القائمة في Java بأنه بعض السلوك العامة عن القوائم.

00:01:13.200 --> 00:01:16.710
ومن خلال قراءة الوصف، إنه يقول أن القائمة عبارة عن مجموعة من العناصر

00:01:16.710 --> 00:01:18.094
التي تحافظ على ترتيب بينها.

00:01:19.160 --> 00:01:20.750
يحتوي كل عنصر على مؤشر، لذلك

00:01:20.750 --> 00:01:22.750
يمكنك الوصول إلى العنصر استنادًا إلى وضع المؤشر.

00:01:24.090 --> 00:01:27.790
وفي الفئة الأخيرة، تحدثنا عن الواجهات، وكيف يمكن استخدامها

00:01:27.790 --> 00:01:34.140
لإيجاد عقد مع أساليب متوقعة، وإدخالات، وقيم مسترجعة، وأسماء أسلوب.

00:01:34.140 --> 00:01:38.436
لكن الواجهة لا تحدد كيف ينبغي تنفيذ كل أسلوب.

00:01:38.436 --> 00:01:40.760
لذا تحتوي واجهة القائمة على أساليب مجردة،

00:01:40.760 --> 00:01:46.520
مثل أسلوب الإضافة، أسلوب الحصول للوصول إلى لعناصر عند فهارس معينة.

00:01:46.520 --> 00:01:50.530
كما أنها تحتوي على أسلوب إزالة وغيره الكثير التي تراها هنا.

00:01:51.710 --> 00:01:54.655
حسنًا، بما أن فئة الواقعية تُنفذ واجهة القائمة هذه،

00:01:54.655 --> 00:01:57.825
لا بد لها من توفير تنفيذ لكل أسلوب من هذه الأساليب.

00:01:57.825 --> 00:01:59.375
وكما سترى قريبًا،

00:01:59.375 --> 00:02:03.425
يمكنك استدعاء كل تلك الأساليب في عنصر ArrayList.

00:02:03.425 --> 00:02:06.285
والآن يرجع سبب أن من المفيد لقائمة أن تكون واجهة

00:02:06.285 --> 00:02:09.133
إلى أن هناك أنواع أخرى كثيرة من القوائم في Java.

00:02:09.133 --> 00:02:11.415
والآن، لن نتناول كل هذه الأنواع في هذه الدورة، لكن

00:02:11.415 --> 00:02:18.080
على سبيل المثال لا الحصر، توجد قوائم مرتبطة، ومكدسات، ومتجهات، وغيرها.

00:02:18.080 --> 00:02:19.680
ولهذا، هناك هدف

00:02:19.680 --> 00:02:23.030
لامتلاك عقد مُعرَّف مسبقًا في واجهة القائمة.

00:02:23.030 --> 00:02:26.210
لذلك لتوضيح ما تحدثنا عنه للتو، ها هنا إصدار مُحدَّث لهذا

00:02:26.210 --> 00:02:32.190
المخطط مع فئة ArrayList، والفئة المجردة، وواجهة القائمة.

00:02:32.190 --> 00:02:34.330
إذن القائمة هنا عبارة عن واجهة

00:02:34.330 --> 00:02:37.765
ولا يوجد أي تنفيذ لأي من أساليبها.

00:02:37.765 --> 00:02:43.490
وتعد AbstractList عبارة عن فئة مجردة ولديها بعض الأساليب التي تُنفذ جزئيًا.

00:02:43.490 --> 00:02:46.840
وتعد ArrayList عبارة عن فئة محددة

00:02:46.840 --> 00:02:51.110
ولديها حالة وتنفيذ لكل أساليبها.

00:02:51.110 --> 00:02:55.120
لذا يمكننا إنشاء مثيل عنصر لـArrayList واستخدامه في تطبيقنا.

00:02:55.120 --> 00:02:58.070
ورغم ذلك، لا يمكننا إنشاء مثيلات للفئة المجردة أو

00:02:58.070 --> 00:03:01.060
الواجهة لأنها فئات إكمال مناسبة.

00:03:02.170 --> 00:03:05.390
عند استخدام أي شيء يُنفذ واجهة القائمة مثل

00:03:05.390 --> 00:03:09.040
فئى ArrayList، ستلاحظ أن شيئًا ما عن الأسلوب يوقع.

00:03:09.040 --> 00:03:11.640
إذن دعني أمرر لأسفل وألقي نظرة على واحد.

00:03:11.640 --> 00:03:15.203
على سبيل المثال في أسلوب الإضافة، سترى استدعاءً لشيء ما يُدعى E،

00:03:15.203 --> 00:03:20.155
وبالنسبة لأسلوب الإضافة ArrayList، إنه يقول إن الإدخال ينبغي أن يكون عنصرًا من نوع E.

00:03:20.155 --> 00:03:23.105
وإذا ألقيت نظرة على أسلوب الحصول، نرى أنه

00:03:23.105 --> 00:03:27.215
يصل إلى عنصر بالقائمة وعند وضع مؤشر معين،

00:03:27.215 --> 00:03:30.515
ويسترجع قيمة عنصر من النوع E.

00:03:30.515 --> 00:03:32.825
إذن، ما الذي تشير إليه E؟

00:03:32.825 --> 00:03:36.465
حسنًا، هذا يأخذنا إلى موضوع العام والأنواع العامة في Java.

00:03:37.620 --> 00:03:39.590
تعد E مجرد عنصر نائب.

00:03:39.590 --> 00:03:42.680
تُدعى E رسميًا أنها معلمة نوع.

00:03:42.680 --> 00:03:46.100
وهذا يعني أنه عندما ننشئ مثيل فعليًا لـArrayList،

00:03:46.100 --> 00:03:50.540
ونستدعي تلك الأساليب مثلًا الإضافة والحصول على هذا العنصر،

00:03:50.540 --> 00:03:53.890
يمكننا استبدال E بنوع بيانات محدد.

00:03:53.890 --> 00:03:56.030
لذلك هذا قد يعطي المطورين معلومات أكثر

00:03:56.030 --> 00:03:59.060
من إذا استخدمنا علامة استفهام فقط بدلًا من E.

00:03:59.060 --> 00:04:02.210
لذا في هذه الحالة، تُعد E اختصارًا لعنصر،

00:04:02.210 --> 00:04:04.030
فمن أين جاءت كلمة عنصر؟

00:04:04.030 --> 00:04:06.980
حسنًا، إن الأجزاء الفردية من مجموعة تُدعى عناصر.

00:04:06.980 --> 00:04:09.566
وبما أن تلك الأساليب مثل الحصول

00:04:09.566 --> 00:04:12.320
والإضافة تتعامل مع العناصر في مجموعة من البيانات،

00:04:12.320 --> 00:04:13.988
فيكون ذلك استبدالًا مناسبًا.

00:04:13.988 --> 00:04:18.070
يمكن استبدال E بأي نوع بيانات غير أساسية تريدها.

00:04:18.070 --> 00:04:23.436
إذن بدلًا من إنشاء ArrayList، يمكنك إنشاء قوس زاوية ArrayList،

00:04:23.436 --> 00:04:25.769
وقوس زاوية E من نوع معين.

00:04:25.769 --> 00:04:29.450
على سبيل المثال، لا يمكنك إنشاء ArrayList، لسلسلة،

00:04:29.450 --> 00:04:32.550
وهذا يعني أينما ترى E في الوثيقة.

00:04:32.550 --> 00:04:36.070
في حالتك، سيتم استبدالها بنوع بيانات عنصر سلسلة.

00:04:36.070 --> 00:04:39.060
لذلك إذا استدعيت أسلوب الإضافة في ArrayList سلسلة،

00:04:39.060 --> 00:04:41.165
فإنه يتوقع السلسلة كإدخال.

00:04:41.165 --> 00:04:43.985
وإذا استدعيت أسلوب الحصول في ArrayList سلسلة،

00:04:43.985 --> 00:04:45.995
فإنه سيُرجع نوع بيانات سلسلة.

00:04:45.995 --> 00:04:49.635
وكنتيجة لذلك، تُعد فئة ArrayList عبارة عن فئة عامة،

00:04:49.635 --> 00:04:53.445
حيث يمكن تبديل الأماكن التي لديها E معينة بنوع بيانات عنصر معين،

00:04:53.445 --> 00:04:57.830
عند إنشائك حقًا مثيلًا لـArrayList.

00:04:57.830 --> 00:05:01.210
توجد معلمة نوع مشترك أخرى مثل T، وN، وV.

00:05:01.210 --> 00:05:03.210
ولرؤية المزيد، انظر في النص بالأسفل.

00:05:03.210 --> 00:05:06.970
حسنًا، إذن أعرف أننا شرحنا الكثير من النظريات عن كيف

00:05:06.970 --> 00:05:08.770
ولماذا نشأت ArrayList.

00:05:08.770 --> 00:05:10.900
إذن الآن تأتي المعلومات العملية ذات الصلة.

00:05:11.930 --> 00:05:14.830
لقد وضعنا معًا قائمة مكثفة من استدعاءات أسلوب

00:05:14.830 --> 00:05:17.050
ArrayList شائعة الاستخدام التي يمكنك استخدامها،

00:05:17.050 --> 00:05:21.160
ونحن نعرض مثالًا لكيف نستخدم سلسلة كنوع ذي معلمات.

00:05:21.160 --> 00:05:23.380
لذلك في كل مكان، ترى سلسلة في هذا المثال،

00:05:23.380 --> 00:05:26.680
ربما يمكنك استبدالها بنوع عنصر مختلف.

00:05:26.680 --> 00:05:29.640
لاحظ أن أحد الفروق مقارنة بإنشاء مصفوفة هو عندما

00:05:29.640 --> 00:05:33.350
تُنشئ ArrayList جديدة، لا تحتاج لتحديد الرابط للقائمة.

00:05:33.350 --> 00:05:36.830
ولإضافة أو إزالة عناصر من ArrayList، نستخدم أساليب الإضافة

00:05:36.830 --> 00:05:38.380
والإزالة على التوالي.

00:05:39.440 --> 00:05:43.180
والآن لاحظ أن الفرق في كيفية استرجاع المعلومات من ArrayList.

00:05:43.180 --> 00:05:46.770
لا تستخدم الـArrayList علامة القوس التي استخدمناها في المصفوفات،

00:05:46.770 --> 00:05:51.040
وبدلًا من ذلك فإنها تستخدم أسلوب الحصول والمؤشر الذي نهتم به.

00:05:51.040 --> 00:05:54.109
تذكّر في المصفوفات، استخدمنا array.length لاسترجاع المعلومات عن

00:05:54.109 --> 00:05:56.000
سمة طول المصفوفة.

00:05:56.000 --> 00:05:59.510
ورغم ذلك، بالنسبة لعناصر ArrayList، نحتاج لاستخدام أسلوب الحجم.

00:05:59.510 --> 00:06:03.940
ولاحظ أنه لا توجد معلمات إدخال، لذلك فإنها تستخدم فقط أقواس فارغة،

00:06:03.940 --> 00:06:07.040
وستكون قيمتها المسترجعة هي عدد العناصر في القائمة.

00:06:07.040 --> 00:06:11.290
والآن في التدريب التالي، أريد منك قراءة كل سطر من التعليق

00:06:11.290 --> 00:06:14.460
وكتابة الكود الذي سيُستخدم لإما إنشاء ArrayList أو

00:06:14.460 --> 00:06:16.500
تعديل ArrayList وفقًا للتعليق.

00:06:17.630 --> 00:06:20.610
لذلك ها هو تدريب لمساعدتك في فهم كيف تعمل بشكل أفضل مع

00:06:20.610 --> 00:06:21.790
ArrayList.

00:06:21.790 --> 00:06:24.600
افترض أن سطور الكود هذه موجودة داخل تطبيق مطعم حيث

00:06:24.600 --> 00:06:27.620
يمكن لكل مستخدم الاحتفاظ بقائمة مطاعم يودون تجربتها.

00:06:27.620 --> 00:06:30.070
إذن اكتب جمل الكود الصحيحة تحت كل تعليق.

00:06:31.260 --> 00:06:33.952
طلب أول تعليق إنشاء عنصر ArrayList جديد يُدعى

00:06:33.952 --> 00:06:34.880
restaurantsToTry.

00:06:34.880 --> 00:06:38.220
وسوف يحتوي على قائمة سلاسل.

00:06:38.220 --> 00:06:41.280
ويتعلق التعليق التالي بإضافة مطعم يُدعى Morning Cafe

00:06:41.280 --> 00:06:42.740
إلى ArrayList التي أنشأتها بالأعلى.

00:06:43.960 --> 00:06:46.660
ويتعلق التعليق الثالث بإضافة مطعم آخر يُدعى

00:06:46.660 --> 00:06:48.850
Barbecue Time إلى ArrayList.

00:06:48.850 --> 00:06:52.400
ويتعلق التعليق الرابع بأن المستخدم جرّب فقط مطعم Morning Cafe،

00:06:52.400 --> 00:06:55.570
لكن سنود منك إزالة هذا المطعم من ArrayList.

00:06:55.570 --> 00:06:59.000
ويقول التعليق الخامس: احصل على طول ArrayList،

00:06:59.000 --> 00:07:02.670
ومن ثم خزّنه كمتغيّر عدد طبيعي يُدعى numbersOfRestaurants.

00:07:02.670 --> 00:07:04.010
حسنًا، الآن امض قدمًا وحاول فعل ذلك.

00:07:04.010 --> 00:07:05.520
وسأراك لاحقًا في قاعة التدريس.

