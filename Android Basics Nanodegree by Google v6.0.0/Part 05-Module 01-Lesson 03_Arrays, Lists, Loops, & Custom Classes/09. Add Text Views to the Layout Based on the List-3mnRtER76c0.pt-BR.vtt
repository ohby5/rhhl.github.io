WEBVTT
Kind: captions
Language: pt-BR

00:00:00.734 --> 00:00:01.801
Agora, escrevemos
muitos códigos

00:00:01.834 --> 00:00:05.968
e você deve estar ansioso para ver
a lista de palavras começar a aparecer na tela.

00:00:06.000 --> 00:00:08.534
Bom, aqui vai uma maneira manual
de fazer isso acontecer.

00:00:08.567 --> 00:00:11.400
Mencionamos várias vezes que tudo
o que você escrever no XML

00:00:11.434 --> 00:00:15.200
do seu app pode ser feito
no código Java também.

00:00:15.234 --> 00:00:19.367
Então eu poderia criar um objeto TextView
para cada elemento nesta lista

00:00:19.400 --> 00:00:22.200
e depois adicioná-lo como view filha
ao layout atual.

00:00:22.234 --> 00:00:23.234
Então vamos tentar essa abordagem.

00:00:24.400 --> 00:00:26.868
1º, preciso começar
checando o layout.

00:00:26.901 --> 00:00:28.868
Na NumbersActivity,

00:00:28.901 --> 00:00:33.567
vemos que o layout é definido
no arquivo activity_numbers XML.

00:00:35.067 --> 00:00:36.634
Então vou abrir
esse arquivo

00:00:36.667 --> 00:00:40.033
e depois mudar este RelativeLayout
para um LinearLayout.

00:00:40.067 --> 00:00:44.601
Então toda view filha que eu adicionar
vai vir seguida da outra

00:00:44.634 --> 00:00:45.901
em uma mesma coluna.

00:00:45.934 --> 00:00:49.300
Além disso, vou adicionar o atributo
de orientação para vertical.

00:00:49.334 --> 00:00:52.801
Vou adicionar views filhas
dinamicamente no código Java

00:00:52.834 --> 00:00:55.968
e por isso, devo dar a esse LinearLayout
uma id de view,

00:00:56.000 --> 00:00:58.601
para eu poder me referir a ele
no código Java depois.

00:01:00.234 --> 00:01:02.033
Vou chamar essa id
de rootView.

00:01:03.100 --> 00:01:04.501
Agora voltemos
à NumbersActivity.

00:01:06.534 --> 00:01:10.734
Vou adicionar as linhas de código
para exibir a lista de palavras

00:01:10.767 --> 00:01:12.300
no fim do método onCreate.

00:01:12.334 --> 00:01:15.767
E vou fazer isso depois
de criar minha ArrayList.

00:01:15.801 --> 00:01:19.367
Posso deletar
essas mensagens de log,

00:01:19.400 --> 00:01:22.667
porque já sei que minha lista
foi criada corretamente.

00:01:22.701 --> 00:01:25.634
Vou fechar o painel
do projeto ao lado,

00:01:25.667 --> 00:01:26.834
para podermos
ver o código melhor.

00:01:27.834 --> 00:01:30.601
O que preciso fazer
no código Java

00:01:30.634 --> 00:01:34.667
é 1º achar o LinearLayout que chamei
de rootView e armazená-lo em uma variável.

00:01:35.801 --> 00:01:40.334
Depois, posso começar a criar e adicionar
TextViews a este LinearLayout.

00:01:40.367 --> 00:01:44.968
Para isso, preciso começar
usando o método findViewById

00:01:45.000 --> 00:01:47.300
para achar a view
com a id rootView

00:01:48.534 --> 00:01:50.200
e isto me retornará
uma view.

00:01:51.434 --> 00:01:55.400
Mas preciso colocá-la
especificamente em um LinearLayout,

00:01:55.434 --> 00:01:58.000
e faço isso para poder adicionar
views filhas a ela.

00:01:59.067 --> 00:02:03.300
Agora vou armazenar esta view na variável
rootView para poder usar depois.

00:02:04.400 --> 00:02:06.400
Lembre-se de terminar
com um ponto e vírgula.

00:02:07.834 --> 00:02:08.801
Legal.

00:02:08.834 --> 00:02:13.334
Essa linha me ajuda a achar
o LinearLayout chamado rootView

00:02:13.367 --> 00:02:16.334
e vou armazená-la nesta variável
chamada rootView.

00:02:16.367 --> 00:02:19.234
Em seguida, preciso criar e adicionar
TextViews a este LinearLayout

00:02:19.267 --> 00:02:20.234
que acabamos de criar.

00:02:21.734 --> 00:02:23.634
Comece criando
o objeto TextView.

00:02:24.868 --> 00:02:26.901
Vou usar este construtor

00:02:26.934 --> 00:02:28.767
que requer um contexto
como única entrada.

00:02:29.834 --> 00:02:33.133
Para nos ajudar a entender
qual construtor usar,

00:02:33.167 --> 00:02:35.133
podemos sempre checar
a documentação.

00:02:35.167 --> 00:02:37.701
Aqui está a documentação
para a classe TextView.

00:02:37.734 --> 00:02:40.334
Vou descer para a seção
sobre construtores públicos.

00:02:41.667 --> 00:02:45.367
Aqui vemos que há alguns
construtores que poderíamos ter usado.

00:02:45.400 --> 00:02:49.200
Cada um dele tem um número
diferente de entradas.

00:02:49.234 --> 00:02:51.934
Mas vou usar este primeiro,

00:02:51.968 --> 00:02:54.834
que leva apenas
a entrada contexto.

00:02:54.868 --> 00:02:56.968
Toda vez que você criar
uma view em Java,

00:02:57.000 --> 00:03:00.734
precisa colocar um contexto,
para que a view saiba o tema

00:03:00.767 --> 00:03:04.100
e outras informações
sobre o app em que será exibida.

00:03:04.133 --> 00:03:06.701
Então ele dá o contexto
do que está acontecendo em volta.

00:03:08.133 --> 00:03:13.934
Neste caso, temos isto
como a entrada para este construtor.

00:03:13.968 --> 00:03:17.167
Como esta classe
é a NumbersActivity,

00:03:17.200 --> 00:03:19.133
este também
será o contexto.

00:03:20.834 --> 00:03:24.634
Certo, esta linha de código me ajudou
a criar um objeto TextView

00:03:24.667 --> 00:03:29.634
que é armazenado na variável wordView,
cujo tipo de dados é uma TextView.

00:03:30.767 --> 00:03:33.501
Para mudar o texto
que aparece na tela,

00:03:33.534 --> 00:03:37.300
aciono o método setText
no objeto wordView

00:03:37.334 --> 00:03:40.801
e coloco uma entrada,
que é o texto desejado.

00:03:40.834 --> 00:03:43.367
Neste caso, quero que o TextView
exiba a string

00:03:43.400 --> 00:03:46.200
armazenada na lista
de palavras no índice 0.

00:03:47.467 --> 00:03:51.000
Isto deve nos ajudar
a mapear até a 1ª palavra.

00:03:51.033 --> 00:03:54.100
Agora que temos um objeto wordView
com o texto correto dentro,

00:03:54.133 --> 00:03:59.033
vou adicionar a view como filha
à view pai chamada rootView.

00:04:00.200 --> 00:04:02.434
Então esta é nossa view filha,
wordView.

00:04:02.467 --> 00:04:06.801
E esta é nossa view pai,
rootView.

00:04:06.834 --> 00:04:10.200
Então adiciono a view filha,
wordView,

00:04:10.234 --> 00:04:14.968
usando o método .addView
à view pai, rootView.

00:04:17.133 --> 00:04:20.400
Certo, vamos executar este código
em nosso app e ver o que acontece.

00:04:20.434 --> 00:04:24.801
Agora quando vamos
à NumbersActivity... Legal.

00:04:24.834 --> 00:04:26.601
Vemos a palavra "one",

00:04:26.634 --> 00:04:30.534
que foi do elemento 0
da nossa arrayList de palavras.

00:04:30.567 --> 00:04:35.000
O que fizemos aqui é dinamicamente
criar uma TextView em Java

00:04:35.033 --> 00:04:38.300
baseada no 1º elemento
da arrayList.

00:04:38.334 --> 00:04:40.701
Neste ponto, você provavelmente
está começando a pensar

00:04:40.734 --> 00:04:41.901
em todas as possibilidades.

00:04:41.934 --> 00:04:46.334
E se eu repetir o mesmo código
para todos os outros elementos na lista?

00:04:46.367 --> 00:04:48.300
Então podemos mostrar
uma lista de palavras na tela.

00:04:50.234 --> 00:04:52.634
Então vamos tentar
com mais algumas views.

00:04:52.667 --> 00:04:55.000
Vou copiar essas 3 linhas
de código

00:04:55.033 --> 00:04:58.267
que nos ajudaram a criar uma TextView
para a palavra "um".

00:04:58.300 --> 00:05:02.267
Cole abaixo e depois modifique
para nos ajudar a criar uma TextView

00:05:02.300 --> 00:05:03.300
para a palavra "dois".

00:05:03.334 --> 00:05:05.567
Então parece
que recebo um erro.

00:05:05.601 --> 00:05:09.634
E ele diz que a variável wordView
já está definida no escopo.

00:05:09.667 --> 00:05:13.467
Isso significa que você só pode definir
uma variável local uma vez com o mesmo nome

00:05:13.501 --> 00:05:14.567
dentro do mesmo escopo.

00:05:15.601 --> 00:05:19.200
E o escopo a que isso
se refere é o método.

00:05:19.234 --> 00:05:22.567
Para resolver isso, colocarei um nome
diferente e chamar de wordView2.

00:05:23.601 --> 00:05:26.634
Depois, vou atualizar
o código abaixo para refletir isso.

00:05:26.667 --> 00:05:30.367
Ótimo, agora temos um bloco
de código que criar outra TextView

00:05:30.400 --> 00:05:35.000
chamada wordView2, e adicionamos
a TextView à view pai rootView.

00:05:36.434 --> 00:05:42.334
Mas espere, quero que esta segunda TextView
mostre a próxima palavra no índice 1.

00:05:42.367 --> 00:05:46.367
Então em vez de words.get(0),
vou mudar

00:05:46.400 --> 00:05:51.567
para words.get(1) para obter a string
localizada no índice 1 da lista.

00:05:52.734 --> 00:05:54.834
Agora vamos copiar
e colar essa seção

00:05:54.868 --> 00:05:57.834
e fazer algumas modificações
para exibir a 3ª palavra na lista.

00:05:59.234 --> 00:06:01.701
Certo, vamos testar
e ver o que acontece

00:06:01.734 --> 00:06:06.267
quando executamos o app em nosso
dispositivo e clicamos em números... Legal.

00:06:06.300 --> 00:06:10.067
Então na NumbersActivity,
colocamos uma lista de um, dois,

00:06:10.100 --> 00:06:13.267
e 3, que são os primeiros 3 elementos
de nossa arrayList.

00:06:14.400 --> 00:06:17.968
Certo, poderíamos continuar
essa abordagem de copiar e colar

00:06:18.000 --> 00:06:22.901
e fazer modificações no texto
na textView e os índices.

00:06:22.934 --> 00:06:25.367
Mas vai ficar muito tedioso

00:06:25.400 --> 00:06:28.100
e também precisamos estilizar essas TextViews
para deixá-las com melhor aparência.

00:06:28.133 --> 00:06:30.367
Por enquanto,
é apenas texto.

00:06:30.400 --> 00:06:33.667
Bom, poderíamos ter feito
tudo isso em XML e copiado

00:06:33.701 --> 00:06:36.934
e colado o elemento XML
várias e várias vezes.

00:06:36.968 --> 00:06:38.934
Bom, espere um momento.

00:06:38.968 --> 00:06:41.834
Ao escrever este código Java,
começamos a ver um padrão.

00:06:43.033 --> 00:06:47.133
Note que cada bloco de código
para cada TextView é bem similar

00:06:48.400 --> 00:06:52.000
e a diferença principal é
que a posição do índice muda

00:06:52.033 --> 00:06:53.000
de um bloco para outro.

00:06:53.033 --> 00:06:57.968
Então veja que estamos
aumentando o índice de 0,

00:06:58.000 --> 00:07:00.767
1, 2, e por aí em diante.

00:07:00.801 --> 00:07:03.033
Então reescrevi o código baseada
no padrão que vimos.

00:07:04.067 --> 00:07:07.667
Então se substituirmos a variável
que rastreia a posição atual

00:07:07.701 --> 00:07:10.801
de nosso índice na lista
e adicionarmos um de cada vez?

00:07:11.901 --> 00:07:15.901
Note que estes blocos de código
se parecem mais e mais,

00:07:15.934 --> 00:07:20.934
todos eles acionam words.get,
e passam um índice como entrada.

00:07:20.968 --> 00:07:24.467
E temos um código extra agora
que aumenta o valor do índice em 1.

00:07:24.501 --> 00:07:27.367
Então agora vou apresentar você a um ótimo
e novo conceito em programação

00:07:27.400 --> 00:07:28.667
chamado loops.

00:07:28.701 --> 00:07:31.901
Quando aprender sobre loops,
vou pedir que conserte este código

00:07:31.934 --> 00:07:35.701
para poder mostrar todas as palavras
na tela sem copiar

00:07:35.734 --> 00:07:39.267
e colar este bloco de código
10 vezes.

