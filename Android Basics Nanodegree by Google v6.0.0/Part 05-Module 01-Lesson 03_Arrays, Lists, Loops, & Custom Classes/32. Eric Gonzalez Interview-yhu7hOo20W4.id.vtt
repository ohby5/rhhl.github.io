WEBVTT
Kind: captions
Language: id

00:00:00.328 --> 00:00:05.570
Kita pakai array di aplikasi Udacity
misalnya untuk registrasi pelatihan, bukan?

00:00:05.570 --> 00:00:09.688
Idealnya, Anda mengambil
lebih dari satu pelatihan

00:00:09.688 --> 00:00:13.809
atau ikut program nanodegree
atau satu set nanodegree.

00:00:13.809 --> 00:00:17.200
Di mana semuanya tersimpan sebagai
array saat mereka kembali.

00:00:17.200 --> 00:00:19.140
Anggap Anda sedang belajar di 
mata kuliah pemrograman dasar

00:00:19.140 --> 00:00:22.240
dan juga mengikuti kursus Android,
misalnya.

00:00:22.240 --> 00:00:25.580
Di mana keduanya muncul sebagai
array yang dianalisis merata.

00:00:25.580 --> 00:00:28.700
Arrays justru bermanfaat
pada saat, misalnya

00:00:28.700 --> 00:00:29.890
Ana memiliki sebuah daftar item.

00:00:29.890 --> 00:00:33.389
Daftar item dapat diterjemahkan
jadi daftar tampilan atau lainnya.

00:00:34.450 --> 00:00:38.920
Umumnya itu semua tersimpan di
beberapa struktur data array.

00:00:38.920 --> 00:00:40.760
Jadi saya tak pakai primitive array.

00:00:40.760 --> 00:00:45.850
Akan saya gunakan array list
karena banyaknya respons.

00:00:45.850 --> 00:00:50.150
Saya terima dari server tapi
tak tahu ukuran pastinya.

00:00:50.150 --> 00:00:52.875
Ada kemungkinan siswa 
hanya ikut satu pelajaran, tapi

00:00:52.875 --> 00:00:54.503
bisa juga mereka juga
mendaftar ratusan pelajaran.

00:00:54.503 --> 00:00:58.569
Saya harus bisa tampung keduanya
agar array list memungkinkan

00:00:58.569 --> 00:01:01.824
keduanya tumbuh atau susut
berdasarkan respon dari server.

00:01:01.824 --> 00:01:03.577
Kita pakai beberapa daftar.

00:01:03.577 --> 00:01:06.256
Ada banyak daftar liniar,
daftar horizontal,

00:01:06.256 --> 00:01:08.950
dan daftar lainnya
di dalamnya.

00:01:08.950 --> 00:01:13.370
Dalam hal ini,
registrasi adalah list view-nya.

00:01:13.370 --> 00:01:16.290
Jika Anda punya nanodegree

00:01:16.290 --> 00:01:19.960
ada tampilan nanodegree khusus
yang juga merupan daftar tampilan.

00:01:19.960 --> 00:01:21.342
Ada juga di beberapa tempat lainnya.

00:01:21.342 --> 00:01:25.390
Juga track dalam aplikasi.
Jika Anda scroll horizontal

00:01:25.390 --> 00:01:27.270
di situ juga ada daftar tampilan.

00:01:27.270 --> 00:01:30.650
Mendaur ulang tampilan itu penting karena
Anda harus hemat memori

00:01:30.650 --> 00:01:31.860
sebanyak-banyaknya.

00:01:31.860 --> 00:01:36.450
Anda harus render tampilan yang ada
di layar saat itu saja

00:01:36.450 --> 00:01:39.460
karena daftar bisa jadi
sangat besar, dan jika

00:01:39.460 --> 00:01:42.260
Anda scroll, Anda mendaur ulang
tampilan untuk memastikan

00:01:42.260 --> 00:01:44.790
Anda hanya me-render
yang ukurannya pas di layar.

00:01:44.790 --> 00:01:48.300
Cara kita menstrukturkan data di
aplikasi sangatlah bergantung

00:01:48.300 --> 00:01:50.760
pada konsep
yang Anda lakukan di kelas.

00:01:50.760 --> 00:01:54.330
Kita sudah memiliki gagasan
tentang adanya kelas nanodegree,

00:01:54.330 --> 00:01:59.250
kelas pelajaran, morsel,
semua unit individual

00:01:59.250 --> 00:02:03.970
yang menjadi obyek Java
dalam aplikasi.

00:02:03.970 --> 00:02:06.450
Sering kali,
terutama jika pakai API

00:02:06.450 --> 00:02:09.699
keputusan semacam itu
sudah dibuat sebelumnya.

00:02:09.699 --> 00:02:14.000
Karena dengaan menggunakan API,
artinya sudah ada model untuk beberapa kondisi.

00:02:14.000 --> 00:02:17.210
Anda sudah tahu titik temunya.
Anda tahu responnya.

00:02:17.210 --> 00:02:20.560
Respon itu umumnya
dikelompokkan secara logis oleh beberapa tipe obyek.

