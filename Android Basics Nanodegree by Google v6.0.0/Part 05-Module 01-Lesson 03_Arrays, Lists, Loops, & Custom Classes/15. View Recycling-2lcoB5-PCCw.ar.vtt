WEBVTT
Kind: captions
Language: ar

00:00:00.260 --> 00:00:03.280
حسنًا، نحن ندرك أنه من الضروري إنشاء تطبيقات ذكية

00:00:03.280 --> 00:00:06.040
من حيث استخدام موارد ذاكرة الجهاز.

00:00:06.040 --> 00:00:09.390
والآن لنناقش إحدى طرق القيام بذلك من خلال تنفيذ
استراتيجية ذاكرة فعالة

00:00:09.390 --> 00:00:14.755
لعرض قائمة طويلة من البيانات، والتي يحتاج إلي تنفيذها
العديد من تطبيقات الهاتف المحمول.

00:00:14.755 --> 00:00:17.455
هذه الاستراتيجية تسمى إعادة تدوير الواجهة

00:00:17.455 --> 00:00:21.675
مما يعني إعادة استخدام الواجهات التي لم تعد مرئيةً
على الشاشة.

00:00:21.675 --> 00:00:26.265
وبالمناسبة، عندما أقول الواجهة، أعني المخطط الكامل
لصف واحد.

00:00:26.265 --> 00:00:29.035
وربما يتم إنشاء مخطط لصف واحد بواسطة مجموعة
واجهات.

00:00:29.035 --> 00:00:30.445
كشيء مثل مخطط خطي أو

00:00:30.445 --> 00:00:33.640
مخطط نسبي يمكن أن يحتوي على واجهات متعددة.

00:00:33.640 --> 00:00:37.070
ومع ذلك، تعد مجموعة الواجهات واجهةً بذاتها.

00:00:37.070 --> 00:00:41.330
وقد تسمعنا نشير إلى مخطط الصف الواحد فقط كواجهة.

00:00:41.330 --> 00:00:43.660
والآن، لغة Miwok أصبحت كبيرةً جدًا.

00:00:43.660 --> 00:00:46.590
ومن بين طرق الانتقال لإنشاء التطبيق أننا يمكن أن
ننشيء

00:00:46.590 --> 00:00:50.600
عشرات الآلاف من بنود القوائم ونضيفها إلى خط عمودي
في مخططك.

00:00:50.600 --> 00:00:52.530
ولكن إذا كان لديك العديد من المفردات،

00:00:52.530 --> 00:00:55.380
فقد يصبح التمرير خلال القائمة بأكملها بطيئًا حقًا.

00:00:55.380 --> 00:00:58.090
وقد يتعطل الجهاز لأنه لا يستطيع الاحتفاظ بكل بنود
القائمة هذه

00:00:58.090 --> 00:00:59.200
في الذاكرة.

00:00:59.200 --> 00:01:02.160
تذكر الآن أن الذاكرة مورد محدود.

00:01:02.160 --> 00:01:03.250
وأن نظام أندرويد

00:01:03.250 --> 00:01:06.560
والتطبيقات الأخرى تحتاج إلى بعض الذاكرة لتعمل
كذلك.

00:01:06.560 --> 00:01:08.580
والآن، هناك طريقة أكثر فاعلية للقيام بذلك.

00:01:08.580 --> 00:01:13.210
وذلك باستخدام واجهة القائمة (ListView) ومنشئ موائم
المصفوفة (ArrayAdapter)، حيث يمكننا إنشاء ما يكفي
من الواجهات،

00:01:13.210 --> 00:01:17.770
مما يعني صفوف بنود القائمة، استنادًا إلى ما نحتاجه
لملء الشاشة.

00:01:17.770 --> 00:01:19.950
وهذا يعني أننا إذا قمنا بالتمرير لأعلى،

00:01:19.950 --> 00:01:23.250
لم تعد هناك حاجة لرؤية الواجهات في الجزء السفلي من
الشاشة.

00:01:23.250 --> 00:01:26.440
لذلك، دعونا نركز فقط على بنية واجهة القائمة (ListView)
ومنشئ موائم المصفوفة (ArrayAdapter).

00:01:26.440 --> 00:01:29.250
وعلاوة على ذلك، يمكننا إعادة تدوير الواجهات.

00:01:29.250 --> 00:01:32.270
وهذا يعني أن الواجهة إذا لم تعد مرئيةً على الشاشة،

00:01:32.270 --> 00:01:34.960
فإننا نستطيع إعادة استخدامها من خلال تغيير
البيانات.

00:01:34.960 --> 00:01:39.210
وبالتالي، فإن تغيير البيانات داخل الواجهة مثل النص
في واجهة النص،

00:01:39.210 --> 00:01:41.400
يغير الصورة في واجهة الصورة.

00:01:41.400 --> 00:01:45.350
ونحن لسنا بحاجة لإضاعة الوقت في إنشاء الواجهة بكاملها
من الصفر مرةً أخرى.

00:01:45.350 --> 00:01:47.440
والآن، نأخذ هذه الواجهات الإضافية

00:01:47.440 --> 00:01:51.130
ونضعها في كومة الخردة التي يمكن إعادة تدويرها وإعادة
استخدامها.

00:01:51.130 --> 00:01:55.150
وهناك مصطلح آخر، فربما تسمع بعض الأشخاص يشيرون إليها
بواجهات الخردة.

00:01:55.150 --> 00:01:58.760
لذلك، فإننا نستخدم كومة الخردة، وهي مجموعة من الواجهات
غير المعروضة حاليًا

00:01:58.760 --> 00:02:02.770
على الشاشة والمتاحة الآن لإعادة الاستخدام في وقت
لاحق،

00:02:02.770 --> 00:02:03.970
وهو ما يعني إعادة التدوير.

00:02:03.970 --> 00:02:07.480
وللحصول على مزيد من التفاصيل حول كيفية إعادة
تدوير،

00:02:07.480 --> 00:02:10.550
لنقل على سبيل المثال إن المستخدم يقوم بالتمرير على
الشاشة.

00:02:10.550 --> 00:02:14.140
فهو يريد الذهاب إلى الجزء العلوي للقائمة لرؤية آخر
التغريدات الجديدة أو

00:02:14.140 --> 00:02:15.638
القصص التي تتضمن الأخبار.

00:02:15.638 --> 00:02:20.150
والآن تدرك واجهة القائمة (ListView) أنها بحاجة إلى
إنشاء المزيد من صفوف بنود القائمة على وجه السرعة.

00:02:20.150 --> 00:02:23.680
وعندما يمررها المستخدم يبدو أن بنود القائمة كانت
هناك

00:02:23.680 --> 00:02:25.050
على طول القائمة.

00:02:25.050 --> 00:02:27.425
والآن، بدلاً من إنشاء بند قائمة جديد من الصفر،

00:02:27.425 --> 00:02:30.070
يمكن ببساطة إعادة استخدامه من كومة الخردة،

00:02:30.070 --> 00:02:31.530
إن كان موجودًا بها.

00:02:31.530 --> 00:02:32.370
باختصار،

00:02:32.370 --> 00:02:36.680
أنشأنا المزيد من الصفوف عند الطلب من خلال إعادة
استخدام الواجهات في كومة الخردة.

00:02:36.680 --> 00:02:40.530
ثم أصبح الأمر يعتمد فقط على تغيير البيانات داخل
الواجهات.

00:02:40.530 --> 00:02:43.288
لذا، تظهر المعلومات الصحيحة لبند القائمة الذي نريده.

00:02:43.288 --> 00:02:47.380
تعد واجهة القائمة (ListView) ذكية بما يكفي لمعرفة
أن الواجهات التي كانت في أسفل

00:02:47.380 --> 00:02:50.520
الشاشة قد تم تمريرها خارج الشاشة.

00:02:50.520 --> 00:02:53.190
وأن هذه الواجهات لم تعد مرئية للمستخدم،

00:02:53.190 --> 00:02:54.990
وبالتالي، يمكن إضافتها إلى ملف الخردة.

00:02:54.990 --> 00:02:57.580
وبينما يقوم المستخدم بالمزيد من التمرير لأعلى
القائمة،

00:02:57.580 --> 00:03:00.680
يمكننا استخدام صف بند القائمة الذي كان في أسفل
الشاشة.

00:03:01.970 --> 00:03:04.970
والآن، في أعلى الشاشة،

00:03:04.970 --> 00:03:09.750
هدف كل هذه هو إنشاء أقل عدد ممكن من بنود القائمة. 

00:03:09.750 --> 00:03:14.960
لانه من المكلف تضخيم الواجهات من XML إلى كائنات
جافا.

00:03:14.960 --> 00:03:19.250
ولإثبات أن إعادة تدوير الواجهات تقلل من استخدام
الذاكرة،

00:03:19.250 --> 00:03:21.370
أعددت إصدارين من التطبيق؛

00:03:21.370 --> 00:03:23.370
أحدهما في حالة التطبيق الحالية،

00:03:23.370 --> 00:03:27.500
أي يستخدم مخطط خطي عمودي بواجهة نص واحدة لكل بند
قائمة.

00:03:27.500 --> 00:03:31.270
والآخر يستخدم واجهة القائمة (ListView) ومنشئ موائم
المصفوفة (ArrayAdapter).

00:03:32.310 --> 00:03:35.190
وأداة مراقبة الذاكرة متضمنة في أندرويد ستوديو

00:03:35.190 --> 00:03:38.330
لمساعدتك في معرفة حجم الموارد التي يستخدمها
تطبيقك.

00:03:38.330 --> 00:03:41.960
يستخدم المطورون المحترفون هذه الأداة لتساعدهم في
تحديد

00:03:41.960 --> 00:03:45.260
الطرق التي يمكنهم بها تقليل استخدام الموارد في
تطبيقاتهم.

00:03:45.260 --> 00:03:48.260
يصبح الفرق في استخدام الموارد بين استخدام مخطط خطي

00:03:48.260 --> 00:03:50.880
وواجهة القائمة (ListView) ومنشئ موائم المصفوفة
(ArrayAdapter) أكثر وضوحًا

00:03:50.880 --> 00:03:53.550
عندما يزيد عدد بنود القائمة.

00:03:53.550 --> 00:03:55.820
إذًا، سأجرب هذين المثالين

00:03:55.820 --> 00:03:59.180
حتي يعرض كل منهما قائمة بها 1000 كلمة.

00:03:59.180 --> 00:04:02.215
والآن، ها أنا في أندرويد ستوديو أنظر إلى إصدار
التطبيق

00:04:02.215 --> 00:04:03.685
الذي يستخدم مخططًا خطيًا.

00:04:03.685 --> 00:04:08.505
وألاحظ نشاط الأرقام (NumbersActivity) يعرض قائمة من
1000 كلمة

00:04:08.505 --> 00:04:11.345
وهنا كيف سيبدو التطبيق عند تشغيل جهازنا.

00:04:11.345 --> 00:04:16.115
وبالتالي، فإن النقر على نشاط الأرقام (NumbersActivity)
يعرض لنا القائمة الطويلة للكلمات.

00:04:16.115 --> 00:04:18.204
ومع توصيل الجهاز بالكمبيوتر،

00:04:18.204 --> 00:04:21.745
يمكننا تشغيل مراقبة الذاكرة للتحقق من استخدام الاذكرة
لهذه التطبيق.

00:04:21.745 --> 00:04:27.340
ولكن قبل أن أتمكن من التشغيل أحتاج إلى الانتقال
لأعلى هنا إلى أدوات &amp;gt; اندرويد

00:04:27.340 --> 00:04:29.650
وأقوم بتمكين تكامل ADB.

00:04:29.650 --> 00:04:32.690
وADB تعني هنا جسر تصحيح أندرويد (Android debug
bridge).

00:04:32.690 --> 00:04:35.360
إذًا، الاتصال يكون بين جهازنا وأندرويد ستوديو.

00:04:36.850 --> 00:04:40.830
وبمجرد تمكين ذلك، انتقل لأسفل هنا إلى شاشة أندروريد
في نافذة وقت التشغيل.

00:04:42.000 --> 00:04:44.700
انقر لفتحها وسأقوم بسحبها لأعلى

00:04:44.700 --> 00:04:46.169
ثم انقر هنا على شريط الذاكرة.

00:04:47.740 --> 00:04:51.960
ستتيح لي هذه الشاشة عرض استخدام الذاكرة لتطبيقي على
مدار الوقت.

00:04:51.960 --> 00:04:55.336
سأنتقل مباشرةً لتشغيل التطبيق على جهازنا.

00:04:55.336 --> 00:04:57.264
حسنًا، بتوصيل الجهاز،

00:04:57.264 --> 00:04:58.796
نرى مراقبة الذاكرة تعمل.

00:04:58.796 --> 00:05:02.895
ويمكننا رؤية حجم الذاكرة الموزعة المستخدمة لقائمة

00:05:02.895 --> 00:05:03.816
الفئات المعروضة فقط.

00:05:03.816 --> 00:05:06.385
ولذلك، سأضع ما تبدو عليه الشاشة على جهازنا الآن

00:05:06.385 --> 00:05:08.700
ودعونا نرى ماذا يحدث للمحاكي.

00:05:08.700 --> 00:05:10.805
عندما أنقر على نشاط الأرقام (NumbersActivity).

00:05:10.805 --> 00:05:15.005
[BLANK_AUDIO]

00:05:15.005 --> 00:05:17.070
يا للروعة، لاحظ، لقد انتقل هذا مباشرةً إلى هناك.

00:05:17.070 --> 00:05:20.049
لقد انتقلت من نحو اثنين ميجابايت إلى نحو 14
ميجابايت.

00:05:21.100 --> 00:05:25.300
فهل هذه الزيادة، هذه القفزة في الذاكرة الموزعة تعد
جيدة

00:05:25.300 --> 00:05:26.550
أم غير جيدة؟

00:05:27.730 --> 00:05:31.050
حسنًا، إن أفضل طريقة للتحقق هي تشغيل إصدار مختلف من
الكود

00:05:31.050 --> 00:05:32.580
على نفس الجهاز.سلة

00:05:32.580 --> 00:05:35.340
ولذلك، سنشغِّله على نفس الجهاز لأن به

00:05:35.340 --> 00:05:37.480
مجموعة محكومة من الموارد.

00:05:37.480 --> 00:05:41.602
وللقيام بذلك، سأنتقل إلى إصدار جديد من الكود
يستخدم

00:05:41.602 --> 00:05:46.444
واجهة القائمة (ListView) ومنشئ موائم المصفوفة
(ArrayAdapter) لعرض نفس القائمة التي تحتوي على 1000
كلمة.

00:05:46.444 --> 00:05:50.414
ها أنا أنظر الآن إلى إصدار واجهة القائمة (ListView)
ومنشئ موائم المصفوفة (ArrayAdapter) من الكود

00:05:50.414 --> 00:05:53.485
ويعرض أيضًا نفس القائمة التي تحتوي على 1000 كلمة. 

00:05:53.485 --> 00:05:56.204
لنلق نظرةً الآن على ما يبدو عليه عندما نشغِّل هذا
الكود

00:05:56.204 --> 00:05:56.739
على جهازنا.

00:05:57.830 --> 00:05:59.920
إذًا، شاشة الفئات تبدو نفس الشيء.

00:05:59.920 --> 00:06:02.380
ولكن عندما ننقر على نشاط الأرقام

00:06:02.380 --> 00:06:06.650
لاحظ أن القائمة التي تحتوي على 1000 كلمة تظهر ولكن
بفواصل.

00:06:06.650 --> 00:06:10.110
وسنعرف المزيد عن كيفية عمل هذا ولماذا في وقت لاحق.

00:06:10.110 --> 00:06:11.325
والآن، نعود إلى آندرويد ستوديو.

00:06:11.325 --> 00:06:14.405
سأقوم بتشغيل مراقبة الذاكرة بنفس الطريقة التي
استخدمتها سابقًا.

00:06:14.405 --> 00:06:19.130
أسفل شاشة آندرويد هنا، اسحبها لأعلى، ثم انتقل إلى
شريط الذاكرة.

00:06:19.130 --> 00:06:23.540
لاحظ أن مراقبة الذاكرة تم تشغيلها بعد توصيل جهازي
لأن

00:06:23.540 --> 00:06:25.570
جسر تصحيح آندرويد (ADB) كان ممكنًا.

00:06:25.570 --> 00:06:28.115
ويظل حجم الذاكرة الموزعة ثابتًا

00:06:28.115 --> 00:06:30.535
عندما أكون في شاشة الفئات.

00:06:30.535 --> 00:06:33.239
والآن، لاحظ ما يحدث عندما أنقر على نشاط الأرقام.

00:06:33.239 --> 00:06:36.740
[BLANK_AUDIO]

00:06:36.740 --> 00:06:38.565
لاحظ هذه القفزة البسيطة هناك.

00:06:38.565 --> 00:06:42.880
إذًا، زاد الرقم من 12.71 تقريبًا إلى 12.84
تقريبًا,

00:06:42.880 --> 00:06:47.149
وهذا يعد زيادةً بمقدار 0،1 ميجابايت بالكاد في الذاكرة
المنتقلة من

00:06:47.149 --> 00:06:51.310
شاشة الفئات إلى نشاط الأرقام.

00:06:51.310 --> 00:06:54.520
بالتالي، في هذه المرة كان حجم الذاكرة المستخدمة لعرض
قائمة الأرقام

00:06:54.520 --> 00:06:58.840
أقل بكثير مقارنة بحجم الذاكرة عندما استخدمنا إصدار
الكود الذي يستخدم المخطط الخطي.

00:06:58.840 --> 00:07:02.900
وبما أننا نستخدم حجم ذاكرة صغير، فإن هذا الإصدار
الذي يستخدم

00:07:02.900 --> 00:07:06.890
واجهة القائمة (ListView) ومنشئ موائم المصفوفة
(ArrayAdapter) سيعمل بشكل أكثر سلاسة في أجهزة الطرف
الأدنى.

00:07:07.900 --> 00:07:11.330
لنلقي نظرةً أقرب الآن على مراقبة الذاكرة هنا.

00:07:11.330 --> 00:07:13.530
إنها تظهر لنا شيئين.

00:07:13.530 --> 00:07:16.300
فالقسم الأزرق الداكن يمثل الذاكرة الموزعة

00:07:16.300 --> 00:07:19.080
وهي الذاكرة التي يستخدمها جهازنا في أي وقت.

00:07:20.430 --> 00:07:23.420
والقسم الأزرق الفاتح هنا يمثل الذاكرة المتاحة،

00:07:23.420 --> 00:07:26.040
وهي الذاكرة المتاحة على الجهاز.

00:07:26.040 --> 00:07:29.210
بينما يكون ربما من المغري أن نستخدم جميع الذاكرة
المتاحة على جهازنا

00:07:29.210 --> 00:07:30.910
لجعل تطبيقك يبدو أكثر روعةً،

00:07:30.910 --> 00:07:34.390
تذكر أن تطبيقك ليس التطبيق الوحيد المثبت على جهاز
المستخدم.

00:07:34.390 --> 00:07:38.450
ومن الأهمية بمكان أن تترك أكبر قدر ممكن من الموارد
للتطبيقات الأخرى.

00:07:38.450 --> 00:07:41.390
وهنا لقطتان شاشة من مراقبة الذاكرة

00:07:41.390 --> 00:07:43.210
لإصداري التطبيق.

00:07:43.210 --> 00:07:48.010
وهذا الجانب الأيسر هو الإصدار الأول من التطبيق والذي
يستخدم مخططًا خطيًا.

00:07:48.010 --> 00:07:51.881
بينما الجانب الأيمن هنا هو الإصدار الثاني من التطبيق
والذي يستخدم واجهة القائمة (ListView)

00:07:51.881 --> 00:07:53.120
ومنشئ موائم المصفوفة (ArrayAdapter).

00:07:53.120 --> 00:07:56.800
تذكر أن الذاكرة الموزعة يتم عرضها في القسم الأزرق
الداكن

00:07:56.800 --> 00:07:58.700
وأن الذاكرة المتاحة يتم عرضها في القسم الأزرق
الفاتح.

00:07:59.810 --> 00:08:04.180
لاحظ أن في كلتا الحالتين تحدث القفزة في الذاكرة
الموزعة عندما ينقر المستخدم على

00:08:04.180 --> 00:08:07.500
فئة الأرقام للانتقال إلى قائمة كلمات الأرقام.

00:08:08.590 --> 00:08:11.760
إذًا، لنكبر إصدار التطبيق الذي يستخدم المخطط
الخطي،

00:08:11.760 --> 00:08:16.910
وسنرى أن القفزة تحدث من 11 ميجابايت تقريبًا إلى 14
ميجابايت تقريبًا.

00:08:16.910 --> 00:08:21.025
إذًا فهذا استخدام يبلغ نحو 3 ميجابايت للذاكرة
المستخدمة لعرض

00:08:21.025 --> 00:08:21.870
القائمة التي تحتوي على 1000 كلمة.

00:08:23.070 --> 00:08:26.450
قارن هذا الآن عندما نستخدم واجهة القائمة (ListView)
ومنشئ موائم المصفوفة (ArrayAdapter)،

00:08:26.450 --> 00:08:31.400
وستجد أننا بالكاد نستخدم 0،5 ميجابايت لعرض قائمة
كاملة من 1000 كلمة.

00:08:32.520 --> 00:08:34.174
إذًا، بعد عرض هذين المثالين،

00:08:34.174 --> 00:08:36.799
أود أن تتفقد الروابط أدناه لمعرفة المزيد

00:08:36.799 --> 00:08:38.659
حول استخدام أداة مراقبة الذاكرة.

00:08:38.659 --> 00:08:40.900
والطرق الأخرى التي يمكنك من خلالها تحسين أداء
تطبيقك.

