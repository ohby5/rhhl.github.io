WEBVTT
Kind: captions
Language: id

00:00:00.810 --> 00:00:03.210
Baik, jadi ada banyak tipe
loop, dan

00:00:03.210 --> 00:00:05.900
yang pertama yang akan kita
pelajari adalah while loop.

00:00:05.900 --> 00:00:09.460
Dalam kuis berikutnya, Anda akan menulis
kode untuk while loop, dan

00:00:09.460 --> 00:00:11.990
while loop akan membantu
kita membuat TextView untuk

00:00:11.990 --> 00:00:15.530
tiap elemen di list kata,
lalu menambahkannya ke tata letak.

00:00:15.530 --> 00:00:19.640
Pada akhir tugas pengodean ini,
aplikasi Anda akan tampak seperti ini,

00:00:19.640 --> 00:00:21.880
jadi "while" adalah kata kunci Java khusus.

00:00:21.880 --> 00:00:24.650
Artinya, kita harus tetap
mengeksekusi blok statemen

00:00:24.650 --> 00:00:28.780
yang ditunjukkan oleh instruksi pada
diagram ini, selama kondisinya benar.

00:00:29.780 --> 00:00:33.030
Jadi kita lanjutkan mengeksekusi
rangkaian instruksi ini

00:00:33.030 --> 00:00:35.350
selagi kondisi ini benar.

00:00:35.350 --> 00:00:36.930
lalu pada dasarnya bergerak
melewati loop.

00:00:38.350 --> 00:00:39.570
Untuk lebih detailnya,

00:00:40.570 --> 00:00:45.000
sementara kondisi di antara tanda kurung
benar, kita mengeksekusi

00:00:45.000 --> 00:00:49.550
semua instruksi dalam blok kode ini
yang terletak di antara dua tanda kurung ini,

00:00:49.550 --> 00:00:52.830
lalu setelah itu kita kembali ke kondisi
lagi, lalu memeriksa apakah

00:00:52.830 --> 00:00:57.790
memang benar, dan jika memang benar kita
mengeksekusi rangkaian instruksi ini lagi.

00:00:57.790 --> 00:01:00.160
Lalu kita kembali ke kondisi,

00:01:00.160 --> 00:01:04.569
untuk memeriksa apakah benar, dan jika memang
benar, kita mengeksekusi rangkaian instruksi

00:01:04.569 --> 00:01:06.650
lagi, lalu kembali ke kondisi awal lagi.

00:01:06.650 --> 00:01:11.780
Jika salah, maka kita melewati
rangkaian instruksi ini,

00:01:11.780 --> 00:01:15.470
dan keluar dari loop dan melanjutkan
kode lain yang muncul setelahnya.

00:01:16.540 --> 00:01:19.270
Jadi, kondisi ini menentukan
berapa kali kode

00:01:19.270 --> 00:01:21.790
di dalam blok liar ini akan dieksekusi.

00:01:21.790 --> 00:01:25.310
seringnya kondisini ini akan
menguji status variabel.

00:01:25.310 --> 00:01:29.060
Jadi kita bisa mengatur variabel penghitung
sebelum kita memulai loop, dan setelah

00:01:29.060 --> 00:01:34.130
akhir tiap pengulangan, maka kita dapat memperbaharui variabel
lewat pergerakan itu.

00:01:34.130 --> 00:01:37.570
Di suatu titik, kita akan memperbarui
variabel sehingga kondisi

00:01:37.570 --> 00:01:41.130
akan menjadi salah, dan ini
menyebabkan kita keluar dari loop.

00:01:41.130 --> 00:01:43.710
Inilah contoh
while loop dan

00:01:43.710 --> 00:01:46.720
ini berhubungan dengan PlaySound
yang kita bahas sebelumnya.

00:01:47.980 --> 00:01:50.390
Bagaimana kita mendapatkan kode ini?

00:01:50.390 --> 00:01:53.710
Apa pun yang kita pikirkan,
apakah akan menulis loop atau tidak,

00:01:53.710 --> 00:01:55.820
kita bisa mengajukan tiga pertanyaan.

00:01:55.820 --> 00:01:57.630
Tugas apa yang akan
kita coba lakukan pada satu waktu?

00:01:57.630 --> 00:01:59.660
Berapa kali kita perlu
mengulangi loop?

00:01:59.660 --> 00:02:02.510
Hasilnya, apa kondisi dalam
loop tersebut.

00:02:02.510 --> 00:02:03.740
Dalam hal ini, untuk

00:02:03.740 --> 00:02:08.610
pertanyaan pertama, tugas apa yang harus kita
lakukan saat memutar suara?

00:02:08.610 --> 00:02:12.060
Untuk memahami kondisinya, kita perlu
mengajukan pertanyaan kedua.

00:02:12.060 --> 00:02:14.160
Berapa kali kita perlu mengulang loop?

00:02:14.160 --> 00:02:17.370
Misalnya, anggap saja
kita ingin mengulanginya tiga kali.

00:02:17.370 --> 00:02:18.230
Jika demikian,

00:02:18.230 --> 00:02:21.440
kita bisa membuat kondisi di mana
variabel count harus kurang dari tiga.

00:02:21.440 --> 00:02:25.470
Ini mengasumsikan bahwa variabel count
diinisialisasi pada nol dan

00:02:25.470 --> 00:02:27.280
kemudian diperbarui satu demi satu.

00:02:27.280 --> 00:02:29.620
Lihat bagaimana while loop ini berjalan.

00:02:29.620 --> 00:02:31.910
Mari kita lacak variabel count-nya.

00:02:31.910 --> 00:02:35.990
Variabel count pertama diinisialisasi
di nol, dan

00:02:35.990 --> 00:02:37.860
kemudian kita masuk pada while loop.

00:02:37.860 --> 00:02:41.400
Sekarang, kita tentukan apakah kondisinya
benar atau salah, dan

00:02:41.400 --> 00:02:44.640
kondisi ini mengatakan bahwa count
harus kurang dari tiga.

00:02:44.640 --> 00:02:47.980
Dalam hal ini, nol adalah kurang dari tiga,
maka kondisinya benar.

00:02:49.110 --> 00:02:51.570
Artinya, kita bisa melanjutkan ke
blok while dan

00:02:51.570 --> 00:02:53.280
mengeksekusi baris kode ini.

00:02:53.280 --> 00:02:55.950
Kita memanggil metode PlaySound, dan

00:02:55.950 --> 00:02:59.310
membayangkan PlaySound sebagai metode
valid yang didefinisikan di tempat lain.

00:02:59.310 --> 00:03:01.340
Ini akan memutar suara di perangkat.

00:03:01.340 --> 00:03:05.270
Setelah itu, kita memperbarui variabel
count dengan 1, maka

00:03:05.270 --> 00:03:10.720
sekarang count punya nilai 1 dan
kita kembali ke kondisi.

00:03:10.720 --> 00:03:12.750
Jadi kita periksa kondisi tugas, dan

00:03:12.750 --> 00:03:15.600
memeriksa apakah variabel count
masih lebih kecil dari 3.

00:03:15.600 --> 00:03:19.530
1 adalah lebih kecil dari 3, sehingga
kita bisa melanjutkan, dan

00:03:19.530 --> 00:03:21.900
kembali ke while loop.

00:03:21.900 --> 00:03:26.430
Maka kita mengeksekusi rangkaian instruksi
ini lagi, memutar suara, dan ding!

00:03:27.510 --> 00:03:30.580
Lalu kita memperbarui
variabel count menjadi 2,

00:03:30.580 --> 00:03:34.500
sekarang kondisi tugas masih benar
karena 2 masih lebih kecil dari 3.

00:03:34.500 --> 00:03:37.730
Maka kita memutar suara lagi,
dan kita memperbarui variabel count menjadi 3,

00:03:37.730 --> 00:03:41.960
dan saat kita kembali ,
kali ini kondisinya salah.

00:03:41.960 --> 00:03:44.960
Karena tiga itu bukan lebih kecil dari tiga.

00:03:44.960 --> 00:03:48.390
Maka, setelah kondisinya salah,
kita keluar dari loop dan

00:03:48.390 --> 00:03:50.470
berlanjut dengan kode
yang muncul setelahnya.

00:03:50.470 --> 00:03:55.860
Sebagai ringkasan, kita telah mengeksekusi
kode di dalam loop tiga kali dan

00:03:55.860 --> 00:03:59.210
artinya kita telah memutar suara tiga
kali di perangkat.

00:03:59.210 --> 00:04:03.690
Seperti Anda lihat, loop memungkinkan kita
untuk mengulangi perilaku dengan jumlah baris

00:04:03.690 --> 00:04:08.300
lebih pendek tanpa menyalin dan menempel
kode yang sama berkali-kali.

00:04:08.300 --> 00:04:11.710
Berikut ini contoh lagi untuk loop
sebelum saya meminta Anda untuk menulis sendiri.

00:04:12.710 --> 00:04:15.990
Anggaplah kode yang akan kita bahas
itu akan dijalankan

00:04:15.990 --> 00:04:19.550
dalam NumbersActivity setelah
Anda membuat list kata.

00:04:19.550 --> 00:04:23.600
Saya sudah menyiapkan skenario contoh
di mana tugas yang ingin saya ulang adalah

00:04:23.600 --> 00:04:28.280
mencetak statemen log untuk item
spesifik dalam list, berdasarkan variabel index.

00:04:29.390 --> 00:04:31.700
Anggap saja saya ingin
mengulangi loop empat kali.

00:04:31.700 --> 00:04:34.410
Maka, kondisinya adalah bahwa
kita tetap mengulangi loop

00:04:34.410 --> 00:04:37.510
selama variabel index
kurang dari empat.

00:04:37.510 --> 00:04:39.780
Asumsikan bahwa variabel
index tersebut dimulai dari nol dan

00:04:39.780 --> 00:04:42.380
bertambah satu demi satu.

00:04:42.380 --> 00:04:46.210
Untuk menulis kode ini, kita
pertama-tama membuat variabel index, dan

00:04:46.210 --> 00:04:47.860
menginisialisasinya di nol.

00:04:47.860 --> 00:04:50.740
Maka baris kode ini akan
aktif di luar loop.

00:04:50.740 --> 00:04:54.790
Saat memulai statemen while, kita perlu
menggunakan kata kunci "while" di Java

00:04:54.790 --> 00:04:57.720
diikuti tanda kurung untuk kondisi.

00:04:57.720 --> 00:05:00.940
Kondisinya adalah harus
lebih kecil dari empat, dan

00:05:00.940 --> 00:05:03.240
jika kita ingin mengulanginya empat kali,

00:05:03.240 --> 00:05:08.220
maka harus mengulang sekali untuk index 0,
untuk index 1, untuk index 2,

00:05:08.220 --> 00:05:12.370
dan terakhir untuk
index 3 sebelum keluar dari loop.

00:05:12.370 --> 00:05:15.810
Di dalam while loop,
kita dapat menulis instruksi untuk tugas.

00:05:15.810 --> 00:05:17.430
Kita ingin mencetak statemen log untuk

00:05:17.430 --> 00:05:20.600
item spesifik dalam list
berdasarkan nilai index.

00:05:20.600 --> 00:05:23.300
Statemen log ini memiliki tag
NumbersActivity,

00:05:23.300 --> 00:05:28.860
dan index pesan, disusul oleh variabel
index beserta nilainya,

00:05:28.860 --> 00:05:32.750
disusul oleh nilai string di posisi
tersebut pada list kata-kata.

00:05:32.750 --> 00:05:34.710
Itulah semua instruksi yang kita
butuhkan untuk tugas ini.

00:05:35.780 --> 00:05:38.353
Baik, terakhir, di dalam
badan while loop ini,

00:05:38.353 --> 00:05:40.622
kita perlu memperbarui variabel
index dengan satu.

00:05:40.622 --> 00:05:45.204
Kita belum pernah melihat
sintaksis index++ ini sebelumnya.

00:05:45.204 --> 00:05:50.060
Tapi ini adalah singkatan yang berarti
bahwa sama dengan mengatur variabel

00:05:50.060 --> 00:05:54.769
index menjadi index = index + 1.

00:05:54.769 --> 00:05:55.740
Baik, jadi

00:05:55.740 --> 00:05:58.900
sekarang Anda telah familiar dengan
cara menulis loop di Java.

00:05:58.900 --> 00:06:02.250
Lanjutkan dan terapkan apa yang Anda
pelajari untuk memperbaiki kode Miwok.

00:06:02.250 --> 00:06:04.270
Untuk membuat tampilan, textView

00:06:04.270 --> 00:06:06.170
untuk tiap elemen di list kata-kata
menggunakan while loop.

00:06:07.820 --> 00:06:11.470
Lanjutkan dari yang terakhir kali kita berhenti
di NumbersActivity di mana kita secara manual

00:06:11.470 --> 00:06:15.890
membuat tiga TextView, dan menambahkannya
ke linear layout tanpa loop,

00:06:15.890 --> 00:06:17.850
dan memodifikasinya menggunakan
while loop.

00:06:19.040 --> 00:06:22.300
Sekarang kita akan memperbarui
aplikasi Miwok agar menggunakan while loop.

00:06:22.300 --> 00:06:26.240
Untuk tugas pertama, buang pesan log
di NumbersActivity, dan

00:06:26.240 --> 00:06:27.000
metode onCreate.

00:06:28.160 --> 00:06:32.570
Untuk tugas kedua, memodifikasi
activity_numbers

00:06:32.570 --> 00:06:35.030
untuk mengubah tata letak yang relativ
menjadi linear layout.

00:06:36.280 --> 00:06:39.850
Lalu atur orientasi linear
tata letak menjadi vertikal, dan

00:06:39.850 --> 00:06:41.530
kemudian tambahkan ID view bernama rootview.

00:06:43.060 --> 00:06:46.830
Terakhir, modifikasi metode onCreate
NumbersActivity sehingga

00:06:46.830 --> 00:06:50.290
kodenya menggunakan while loop
untuk membuat dan menampilkan TextView

00:06:50.290 --> 00:06:52.340
untuk tiap elemen dalam list kata-kata.

00:06:52.340 --> 00:06:54.990
Ingat, Anda bisa memulai dari kode
terakhir kali di NumbersActivity,

00:06:54.990 --> 00:06:59.490
yang membuat tiga tulisam untuk digunakan
secara manual tanpa memakai loop.

00:07:00.610 --> 00:07:03.180
Setelah menyelesaikan langkah
satu sampai tiga,

00:07:03.180 --> 00:07:05.210
NumbersActivity di aplikasi Anda
akan tampak seperti ini.

00:07:06.390 --> 00:07:08.080
Jika Anda butuh petunjuk,

00:07:08.080 --> 00:07:11.410
saya telah menambahkan contoh
while loop di bawah dan

00:07:11.410 --> 00:07:13.940
ada contoh outputnya
juga.

00:07:13.940 --> 00:07:14.440
Selamat mencoba.

