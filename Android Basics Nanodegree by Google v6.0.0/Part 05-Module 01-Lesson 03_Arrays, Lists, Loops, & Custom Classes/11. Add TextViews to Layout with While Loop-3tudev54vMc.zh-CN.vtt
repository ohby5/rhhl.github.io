WEBVTT
Kind: captions
Language: zh-CN

00:00:00.750 --> 00:00:03.700
这道练习题的前两个任务是为了让你

00:00:03.700 --> 00:00:06.540
在观看上个视频中我做出的更改后 跟上我们的

00:00:06.540 --> 00:00:07.850
代码状态

00:00:07.850 --> 00:00:12.300
在第一项任务中 我们需要删除这段日志消息

00:00:12.300 --> 00:00:13.450
我将删了这段内容

00:00:14.650 --> 00:00:16.020
不错 很简单

00:00:16.020 --> 00:00:21.530
下一个任务是修改 activity_numbers.xml

00:00:21.530 --> 00:00:24.910
使其使用 LinearLayout 而不是 RelativeLayout

00:00:24.910 --> 00:00:27.150
同时将方向改为垂直方向

00:00:30.052 --> 00:00:34.340
同时添加一个视图 ID 我将称之为 rootView

00:00:36.560 --> 00:00:38.670
前两项任务就完成了

00:00:38.670 --> 00:00:39.950
对于第三项任务

00:00:39.950 --> 00:00:42.456
我们需要修改 NumbersActivity 中的 onCreate 方法

00:00:42.456 --> 00:00:45.800
我们需要使用 while 循环为单词列表中的每个元素

00:00:45.800 --> 00:00:49.200
创建一个 TextView 然后在屏幕上显示该 TextView

00:00:50.510 --> 00:00:53.730
这是我们发布到网上的 NumbersActivity.java

00:00:53.730 --> 00:00:55.240
版本

00:00:55.240 --> 00:00:58.420
这里的代码是用来手动创建三个 TextView

00:00:58.420 --> 00:01:02.000
而不是采用 while 循环

00:01:02.000 --> 00:01:03.350
在研究这段代码

00:01:03.350 --> 00:01:06.860
并理解背后的原理后 它将有助于我们写出 while 循环

00:01:06.860 --> 00:01:10.764
在开始写 while 循环之前 我们先来复习下

00:01:10.764 --> 00:01:14.060
在之前介绍 while 循环时讨论的三个指导问题

00:01:14.060 --> 00:01:17.311
现在我们来深入讨论下如何使用 while 循环

00:01:17.311 --> 00:01:18.700
向屏幕中添加 TextView

00:01:18.700 --> 00:01:20.850
注意 这是如何编写 while 循环的

00:01:20.850 --> 00:01:22.632
基本结构

00:01:22.632 --> 00:01:26.001
我们将讨论的三个问题可以帮助我们填写这几个方框

00:01:26.001 --> 00:01:28.560
每次我们都需要完成什么任务？

00:01:28.560 --> 00:01:32.250
从 NumbersActivity 代码可以看出 我们想要创建一个 TextView

00:01:32.250 --> 00:01:35.680
将文本设为单词列表中的某个单词

00:01:35.680 --> 00:01:37.710
然后将该 TextView 添加到 rootView 中

00:01:37.710 --> 00:01:40.650
第二个问题 我们希望重复循环多少次？

00:01:40.650 --> 00:01:42.950
在此示例中 我们想要重复 3 次

00:01:42.950 --> 00:01:45.420
即列表中的每个单词迭代一次

00:01:45.420 --> 00:01:47.490
该列表中现在有 10 个单词

00:01:47.490 --> 00:01:50.120
第三个问题是条件是什么？

00:01:50.120 --> 00:01:53.660
我们想要循环访问该列表 直到到达列表结尾处

00:01:53.660 --> 00:01:56.290
如果我们创建一个 index 变量来跟踪

00:01:56.290 --> 00:01:58.970
当前索引位置 我们的条件可以是

00:01:58.970 --> 00:02:02.480
继续循环 直到 index 变量小于 10

00:02:02.480 --> 00:02:04.730
即单词列表当前的长度

00:02:04.730 --> 00:02:07.420
这就假设 index 变量从 0 开始

00:02:07.420 --> 00:02:08.680
每次都加 1

00:02:08.680 --> 00:02:11.770
回到 NumbersActivity.java

00:02:11.770 --> 00:02:15.958
中手动创建 TextView 的位置

00:02:15.958 --> 00:02:19.520
复制这段代码

00:02:19.520 --> 00:02:22.580
在 Android Studio 中打开 NumbersActivity.java

00:02:22.580 --> 00:02:25.930
将代码复制到 onCreate 方法中

00:02:25.930 --> 00:02:28.830
这里我们执行的操作是首先为整个布局找到 rootView

00:02:28.830 --> 00:02:31.550
然后创建一个变量来跟踪

00:02:31.550 --> 00:02:34.720
单词数组列表中的当前索引位置

00:02:34.720 --> 00:02:38.740
接着创建新的 TextView 来显示每个单词

00:02:38.740 --> 00:02:41.560
并将这些 TextView 添加到我们的 rootView 中显示出来

00:02:41.560 --> 00:02:43.590
这种方法非常枯燥

00:02:43.590 --> 00:02:46.000
我们来看看如何将其改成 while 循环

00:02:46.000 --> 00:02:48.390
从第一行为整个布局查找 rootView 开始

00:02:48.390 --> 00:02:50.460
我们需要保留这行内容

00:02:50.460 --> 00:02:53.000
即使使用 while 循环也需要保留了

00:02:53.000 --> 00:02:57.010
接着就是 while 循环 我将写在这里

00:02:57.010 --> 00:03:00.490
while 循环需要设置计数器变量

00:03:00.490 --> 00:03:04.695
然后是 while 关键字 括号里是条件 紧跟着是大括号

00:03:04.695 --> 00:03:06.800
在这些括号里包含的是说明 即任务

00:03:06.800 --> 00:03:09.440
同时需要更新计数器变量

00:03:09.440 --> 00:03:11.020
这就是我们的 while 循环的结构

00:03:11.020 --> 00:03:14.310
首先需要设置计数器变量

00:03:14.310 --> 00:03:16.160
看起来我们已经在这里设置了

00:03:16.160 --> 00:03:19.640
我将这段代码替换到这里

00:03:19.640 --> 00:03:23.080
接着是 while 关键字 后面跟着小括号

00:03:23.080 --> 00:03:24.980
括号里是测试条件

00:03:24.980 --> 00:03:28.060
我们的测试条件是要求 index 变量

00:03:28.060 --> 00:03:30.980
小于 10 以便继续这一 while 循环

00:03:30.980 --> 00:03:32.850
但是 我将使用 words.size 方法

00:03:32.850 --> 00:03:35.570
而不是采用具体的 10

00:03:35.570 --> 00:03:37.478
这样的话 如果单词列表改变了

00:03:37.478 --> 00:03:39.652
我们也不需要更新这里的测试条件

00:03:39.652 --> 00:03:42.253
它会允许我们自动转到列表的结尾处

00:03:42.253 --> 00:03:43.770
无论列表有多长

00:03:43.770 --> 00:03:47.262
当这个条件为真时 我们想要创建一个 TextView

00:03:47.262 --> 00:03:50.840
并将文本设为单词列表中当前索引处的单词

00:03:50.840 --> 00:03:53.560
然后需要在屏幕上显示这些 TextView

00:03:53.560 --> 00:03:54.770
因为我已经为此编写了代码

00:03:54.770 --> 00:03:57.200
可以将这行代码移到 while 语句中

00:03:57.200 --> 00:03:59.140
并替代这里的说明部分

00:04:01.490 --> 00:04:03.641
看起来我们已经几乎要写完 while 循环了

00:04:03.641 --> 00:04:06.960
最后需要执行的操作是更新计数器变量

00:04:06.960 --> 00:04:09.832
我们需要在每次迭代后更新计数器变量

00:04:09.832 --> 00:04:13.168
以便在抵达列表结尾处时能退出循环

00:04:13.168 --> 00:04:18.125
使用之前学习的简写方法 输入 index++

00:04:18.125 --> 00:04:23.640
这个简写方法等同于 index = index +1

00:04:23.640 --> 00:04:25.960
我在旁边添加个注释

00:04:25.960 --> 00:04:26.970
帮助大家记住这一点

00:04:27.990 --> 00:04:31.200
现在我可以删除剩下的这段代码 我不再需要这些代码了

00:04:31.200 --> 00:04:32.580
因为 while 循环能执行所有这些操作

00:04:32.580 --> 00:04:35.630
我们刚刚对代码做出了好几项改动

00:04:35.630 --> 00:04:37.740
并实现了一个全新的概念 即 while 循环

00:04:37.740 --> 00:04:39.650
总结下刚刚的操作

00:04:39.650 --> 00:04:43.840
我们删除了 NumbersActivity onCreate 方法中的日志消息

00:04:43.840 --> 00:04:47.350
同时修改了 activity_numbers.xml

00:04:47.350 --> 00:04:50.870
使其使用 LinearLayout 而不是 RelativeLayout

00:04:50.870 --> 00:04:52.970
将方向设为垂直方向

00:04:52.970 --> 00:04:55.536
然后添加了一个视图 ID 叫做 rootView

00:04:55.536 --> 00:04:58.450
最后 在 NumbersActivity 的 onCreate() 方法中

00:04:58.450 --> 00:05:01.830
我们使用三个指导问题编写了 while 循环

00:05:01.830 --> 00:05:05.040
为单词列表中的每个元素创建并显示 TextView

00:05:05.040 --> 00:05:08.070
之前我们简单介绍了各种简写方法

00:05:08.070 --> 00:05:12.550
一种常见简写方法是我们在 while 循环中使用的 index++

00:05:12.550 --> 00:05:16.790
我提到它是 index = index +1 的简写

00:05:16.790 --> 00:05:19.280
还有其他几种类似的数学简写方法

00:05:19.280 --> 00:05:23.120
例如 一个变量（例如 j）加号等于

00:05:23.120 --> 00:05:26.200
某个数字（如这里的 3）

00:05:26.200 --> 00:05:31.480
它是该变量等于该变量加上该数字的简写

00:05:31.480 --> 00:05:35.340
此外 我们可以使用相减简写形式 例如某个变量加上负号负号

00:05:35.340 --> 00:05:41.470
它是 i = i-1 的简写

00:05:41.470 --> 00:05:45.450
在所有这些示例中 我们都可以替换为不同的变量和

00:05:45.450 --> 00:05:46.590
不同的数字

00:05:46.590 --> 00:05:51.970
同时一定要注意 i++ 不是等同于

00:05:51.970 --> 00:05:57.210
i + 1 部分 而是等同于整个表达式 i = i + 1

00:05:57.210 --> 00:06:01.440
即进行计算然后再重新赋值给该变量

