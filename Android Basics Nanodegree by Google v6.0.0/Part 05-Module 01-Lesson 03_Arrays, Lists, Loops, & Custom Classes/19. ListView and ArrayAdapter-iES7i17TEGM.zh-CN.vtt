WEBVTT
Kind: captions
Language: zh-CN

00:00:00.210 --> 00:00:04.070
我们来更深层次地讨论下 listView 和 ArrayAdapter

00:00:04.070 --> 00:00:05.045
之间的互动情况

00:00:05.045 --> 00:00:07.360
我们将在下个视频中详细讲解代码内容

00:00:08.610 --> 00:00:13.100
你可以将 ListView 看成由 ArrayAdapter 提供支持

00:00:13.100 --> 00:00:17.185
没有该适配器的话 ListView 就是个空的容器

00:00:17.185 --> 00:00:21.688
我说的提供支持 是指 ArrayAdapter 关系到

00:00:21.688 --> 00:00:24.060
应该显示在屏幕上的数据集

00:00:25.170 --> 00:00:29.860
例如 它可以关系到数组甚至数据列表

00:00:29.860 --> 00:00:34.420
所以 ArrayAdapter 知道如何将该数据

00:00:34.420 --> 00:00:40.030
传输或调整到列表项视图中 并在 ListView 中显示

00:00:40.030 --> 00:00:43.430
我们来详细了解下这一切的原理

00:00:43.430 --> 00:00:48.180
当你第一次将适配器与 ListView 相关联时 该 ListView 会询问

00:00:48.180 --> 00:00:50.580
你想要显示多少个项？

00:00:50.580 --> 00:00:53.180
ArrayAdapter 知道这一信息

00:00:53.180 --> 00:00:56.140
所以 ListView 对 ArrayAdapter 调用方法

00:00:56.140 --> 00:00:59.110
它将在该方法中传入一个输入参数

00:00:59.110 --> 00:01:02.770
即用户当前正在查看的列表位置

00:01:02.770 --> 00:01:07.650
这里 它会传入位置 0

00:01:07.650 --> 00:01:10.740
但用户也可能位于列表中的位置 1 处 甚至 100 处

00:01:10.740 --> 00:01:12.410
知道这一信息后

00:01:12.410 --> 00:01:16.090
ArrayAdapter 会查看数据的内部来源

00:01:16.090 --> 00:01:18.968
这里 它会查看数组

00:01:18.968 --> 00:01:22.460
它也可能会查看列表（如果列表是来源数据的话）

00:01:22.460 --> 00:01:24.350
并获取相关信息

00:01:24.350 --> 00:01:27.411
它具有说明来告诉它如何

00:01:27.411 --> 00:01:30.873
创建列表项视图并返回 ListView

00:01:30.873 --> 00:01:34.469
当屏幕被占满后 ListView 将停止向

00:01:34.469 --> 00:01:36.860
ArrayAdaptor 寻求更多的列表项

00:01:36.860 --> 00:01:40.880
列表项视图仅在需要时才创建

00:01:40.880 --> 00:01:42.740
当视图被滚动离开屏幕后

00:01:42.740 --> 00:01:45.020
它们就会被添加到这个 Scrap Pile

00:01:45.020 --> 00:01:48.529
在这个具体示例中 前两个列表项 Jane 和 Karl

00:01:48.529 --> 00:01:51.483
不再可见

00:01:51.483 --> 00:01:53.453
它们将进入 Scrap Pile

00:01:53.453 --> 00:01:56.840
然后当我们请求新的列表项时 我们可以通过

00:01:56.840 --> 00:02:00.350
将这些视图再返回到 ArrayAdaptor 重复使用它们

00:02:00.350 --> 00:02:04.170
ListView 将请求列表中特定位置的视图

00:02:04.170 --> 00:02:09.139
同时传入之前用过的视图

00:02:09.139 --> 00:02:14.860
在此例中 ListView 请求的是位置 6 处的项目

00:02:14.860 --> 00:02:19.700
并向 ArrayAdapter 传入可重复使用的以前视图

00:02:19.700 --> 00:02:22.712
ArrayAdapter 可以通过在回收的视图里放入数据

00:02:22.712 --> 00:02:25.074
使用回收的视图

00:02:25.074 --> 00:02:29.857
例如 通过调用 TextView setText() 方法来更改这里的名字

00:02:29.857 --> 00:02:34.015
看来我们可以向 ListView 返回全新的列表项

00:02:34.015 --> 00:02:37.250
以便添加到新的层级并显示到屏幕上

