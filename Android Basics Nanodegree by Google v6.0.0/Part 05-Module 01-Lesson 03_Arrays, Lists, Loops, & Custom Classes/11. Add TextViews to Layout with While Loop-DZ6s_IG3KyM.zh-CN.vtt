WEBVTT
Kind: captions
Language: zh-CN

00:00:00.810 --> 00:00:03.210
循环有各种不同的类型

00:00:03.210 --> 00:00:05.900
我们要学的第一种是 while 循环

00:00:05.900 --> 00:00:09.460
在下个测试题中 请为 while 循环写一段代码

00:00:09.460 --> 00:00:11.990
while 循环将帮助我们为单词列表中的每个元素

00:00:11.990 --> 00:00:15.530
创建一个 TextView 并将其添加到布局中

00:00:15.530 --> 00:00:19.640
在此编程任务结束时 你的应用将是这样的

00:00:19.640 --> 00:00:21.880
while 是个特殊的 Java 关键字

00:00:21.880 --> 00:00:24.650
表示只要特定的条件为真 我们就应该

00:00:24.650 --> 00:00:28.780
不断执行一段语句 在这个图表中用“说明”来表示

00:00:29.780 --> 00:00:33.030
当这个条件为真时

00:00:33.030 --> 00:00:35.350
我们就继续执行这段说明

00:00:35.350 --> 00:00:36.930
就像一个循环一样

00:00:38.350 --> 00:00:39.570
详细介绍下

00:00:40.570 --> 00:00:45.000
当括号里的条件为真时

00:00:45.000 --> 00:00:49.550
我们就执行在这两个大括号之间的代码中的所有说明

00:00:49.550 --> 00:00:52.830
然后我们再次回到该条件 看看它是否为真

00:00:52.830 --> 00:00:57.790
如果为真 就继续执行这段说明

00:00:57.790 --> 00:01:00.160
然后回到该条件

00:01:00.160 --> 00:01:04.569
看看是否为真 如果为真 再次执行这段说明

00:01:04.569 --> 00:01:06.650
然后如果我们回到该条件

00:01:06.650 --> 00:01:11.780
任何时候只要为假 那么我们就跳过这些说明

00:01:11.780 --> 00:01:15.470
并退出循环 继续执行后续代码

00:01:16.540 --> 00:01:19.270
这个条件决定了这个 while 语句块中的代码

00:01:19.270 --> 00:01:21.790
将执行多少次

00:01:21.790 --> 00:01:25.310
经常该条件将用于测试变量的状态

00:01:25.310 --> 00:01:29.060
我们可以在开始循环前 设置一个 count 变量

00:01:29.060 --> 00:01:34.130
在每次迭代结束时 执行完这段代码时 我们可以更新该变量

00:01:34.130 --> 00:01:37.570
在某个时候 变量更新后该条件将为假

00:01:37.570 --> 00:01:41.130
导致我们退出该循环

00:01:41.130 --> 00:01:43.710
举个 while 循环的例子

00:01:43.710 --> 00:01:46.720
用的是我们之前提到的 playSound

00:01:47.980 --> 00:01:50.390
何时该写这种代码呢？

00:01:50.390 --> 00:01:53.710
任何时候 当我们决定要不要写个循环时

00:01:53.710 --> 00:01:55.820
都可以问自己三个问题

00:01:55.820 --> 00:01:57.630
每次都要执行什么样的任务？

00:01:57.630 --> 00:01:59.660
我们需要重复循环多少次？

00:01:59.660 --> 00:02:02.510
循环的条件是什么？

00:02:02.510 --> 00:02:03.740
在此处

00:02:03.740 --> 00:02:08.610
对于第一个问题 每次都要执行什么任务？我们需要播放一段声音

00:02:08.610 --> 00:02:12.060
要弄明白条件是什么 我们先问下第二个问题

00:02:12.060 --> 00:02:14.160
我们要重复循环多少次？

00:02:14.160 --> 00:02:17.370
例如 假设我们想要重复 3 次

00:02:17.370 --> 00:02:18.230
如果这样的话

00:02:18.230 --> 00:02:21.440
我们可以将条件设为 count 变量必须小于 3

00:02:21.440 --> 00:02:25.470
这样就假设 count 变量初始化为 0

00:02:25.470 --> 00:02:27.280
然后每次都会更新

00:02:27.280 --> 00:02:29.620
看看这个 while 循环是如何运行的

00:02:29.620 --> 00:02:31.910
我们来跟踪下变量 count

00:02:31.910 --> 00:02:35.990
首先 count 变量初始化为 0

00:02:35.990 --> 00:02:37.860
然后我们进入 while 循环

00:02:37.860 --> 00:02:41.400
现在我们判断下条件是否为真

00:02:41.400 --> 00:02:44.640
这个条件要求 count 必须小于 3

00:02:44.640 --> 00:02:47.980
这里 0 小于 3 所以条件为真

00:02:49.110 --> 00:02:51.570
表示我们可以继续进入该 while 语句块

00:02:51.570 --> 00:02:53.280
并执行这几行代码

00:02:53.280 --> 00:02:55.950
所以调用方法 playSound

00:02:55.950 --> 00:02:59.310
假设 playSound 在别处已经定义过 是个有效方法

00:02:59.310 --> 00:03:01.340
可以在设备上播放声音

00:03:01.340 --> 00:03:05.270
之后 我们使 count 变量加 1

00:03:05.270 --> 00:03:10.720
现在 count 的值为 1 回到该条件

00:03:10.720 --> 00:03:12.750
我们检查下检验条件

00:03:12.750 --> 00:03:15.600
看看 count 变量是否依然小于 3

00:03:15.600 --> 00:03:19.530
1 小于 3

00:03:19.530 --> 00:03:21.900
所以可以回到 while 循环

00:03:21.900 --> 00:03:26.430
再次执行这些说明 播放声音 叮！

00:03:27.510 --> 00:03:30.580
然后将 count 变量更新为 2

00:03:30.580 --> 00:03:34.500
现在检验条件依然为真 因为 2 小于 3

00:03:34.500 --> 00:03:37.730
所以再次播放声音 现在将 count 变量更新为 3

00:03:37.730 --> 00:03:41.960
当我们回到该条件时 这次条件为假了

00:03:41.960 --> 00:03:44.960
因为 3 不小于 3

00:03:44.960 --> 00:03:48.390
一旦该条件为假 我们就退出循环

00:03:48.390 --> 00:03:50.470
继续执行后续代码

00:03:50.470 --> 00:03:55.860
总结下 我们执行了循环中的代码 3 次

00:03:55.860 --> 00:03:59.210
意味着我们在设备上播放了 3 次声音

00:03:59.210 --> 00:04:03.690
可以看出 通过循环 我们可以使用相同行数的代码重复一定的行为

00:04:03.690 --> 00:04:08.300
不用一遍一遍地复制粘贴相同的代码

00:04:08.300 --> 00:04:11.710
在请你自己编写代码前 再来看一个循环示例

00:04:12.710 --> 00:04:15.990
假设我们将讨论的代码将在你创建了

00:04:15.990 --> 00:04:19.550
单词列表后 在 NumbersActivity 中运行

00:04:19.550 --> 00:04:23.600
我设置了一个示例情形 其中我要重复的任务是

00:04:23.600 --> 00:04:28.280
根据索引变量为列表中的特定项输出一个日志语句

00:04:29.390 --> 00:04:31.700
假设我要重复循环 4 次

00:04:31.700 --> 00:04:34.410
条件是只要索引变量小于 4

00:04:34.410 --> 00:04:37.510
 我们就继续重复循环

00:04:37.510 --> 00:04:39.780
假设索引变量从 0 开始

00:04:39.780 --> 00:04:42.380
每次都加 1

00:04:42.380 --> 00:04:46.210
为了写这段代码 我首先创建了一个 index 变量

00:04:46.210 --> 00:04:47.860
并初始化为 0

00:04:47.860 --> 00:04:50.740
这行代码将位于循环之外

00:04:50.740 --> 00:04:54.790
当我们开始 while 语句时 我们需要使用 Java 中的 while 关键字

00:04:54.790 --> 00:04:57.720
后面是括号 括号里为相关条件

00:04:57.720 --> 00:05:00.940
条件为 index 变量应该小于 4

00:05:00.940 --> 00:05:03.240
如果我们想重复 4 次

00:05:03.240 --> 00:05:08.220
它应该为索引 0 重复 1 次 为索引 1 重复一次 为索引 2 重复 1 次

00:05:08.220 --> 00:05:12.370
最后为索引 3 重复一次 然后退出循环

00:05:12.370 --> 00:05:15.810
在 while 循环中 我们可以为相关任务编写说明

00:05:15.810 --> 00:05:17.430
我们想要根据索引值为列表中的特定项

00:05:17.430 --> 00:05:20.600
输出一个日志语句

00:05:20.600 --> 00:05:23.300
这个日志语句的标记为 NumbersActivity

00:05:23.300 --> 00:05:28.860
消息为 Index 紧跟着 index 变量即相关值

00:05:28.860 --> 00:05:32.750
然后是单词列表中该位置的值

00:05:32.750 --> 00:05:34.710
这就是这项任务所需的所有说明

00:05:35.780 --> 00:05:38.353
最后 在此 while 循环的主体中

00:05:38.353 --> 00:05:40.622
我们需要使 index 变量加 1

00:05:40.622 --> 00:05:45.204
我们之前没有见过 index++ 这个语法

00:05:45.204 --> 00:05:50.060
这是个简写 等同于将 index 变量设为

00:05:50.060 --> 00:05:54.769
index = index + 1

00:05:54.769 --> 00:05:55.740
现在

00:05:55.740 --> 00:05:58.900
你已经非常熟悉如何用 Java 编写循环语句了

00:05:58.900 --> 00:06:02.250
请运用所学的内容对 Miwok 代码做出修正

00:06:02.250 --> 00:06:04.270
使用 while 循环为单词列表中的每个元素

00:06:04.270 --> 00:06:06.170
创建并显示 TextView

00:06:07.820 --> 00:06:11.470
请从上次在 NumbersActivity 中结束的地方继续

00:06:11.470 --> 00:06:15.890
当时我们没有使用循环语句 而是手动创建了三个 TextView 并且添加到了 LinearLayout 中

00:06:15.890 --> 00:06:17.850
现在请做出修改并使用 while 循环

00:06:19.040 --> 00:06:22.300
现在我们将更新 Miwok 应用并使用 while 循环

00:06:22.300 --> 00:06:26.240
第一项任务是删除 NumberActivity 中 onCreate() 方法里的

00:06:26.240 --> 00:06:27.000
日志消息

00:06:28.160 --> 00:06:32.570
第二项任务是修改 activity_numbers.xml

00:06:32.570 --> 00:06:35.030
将 RelativeLayout 更改成 linearLayout

00:06:36.280 --> 00:06:39.850
然后将 linearLayout 方向设为垂直方向

00:06:39.850 --> 00:06:41.530
然后添加一个叫做 rootView 的视图 ID

00:06:43.060 --> 00:06:46.830
最后 修改 NumberActivity onCreate() 方法

00:06:46.830 --> 00:06:50.290
使用 while 循环为单词列表中的每个元素

00:06:50.290 --> 00:06:52.340
创建并显示 TextView

00:06:52.340 --> 00:06:54.990
你可以从上次我们在 NumberActivity 中结束的位置继续

00:06:54.990 --> 00:06:59.490
当时我们手动地创建了三个 TextView 而没有使用循环方法

00:07:00.610 --> 00:07:03.180
在完成步骤 1 到 3 之后

00:07:03.180 --> 00:07:05.210
NumberActivity 应该是这样的

00:07:06.390 --> 00:07:08.080
如果你需要提示的话

00:07:08.080 --> 00:07:11.410
我在下面提供了 while 循环示例

00:07:11.410 --> 00:07:13.940
同时还提供了输出示例

00:07:13.940 --> 00:07:14.440
祝你好运

