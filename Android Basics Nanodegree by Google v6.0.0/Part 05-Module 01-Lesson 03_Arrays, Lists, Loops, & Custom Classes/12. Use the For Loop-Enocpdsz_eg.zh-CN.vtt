WEBVTT
Kind: captions
Language: zh-CN

00:00:00.500 --> 00:00:02.640
嘿 你写出了 while 循环 很棒啊

00:00:02.640 --> 00:00:05.000
可以看出 while 循环让我们的生活便利多了

00:00:05.000 --> 00:00:08.109
我们不需要一遍又一遍地重复编写相同的代码

00:00:08.109 --> 00:00:11.640
现在我再告诉你个更好的消息

00:00:11.640 --> 00:00:15.170
我将展示 Java 中的另一种循环类型 for 循环

00:00:15.170 --> 00:00:18.380
我们可以用它来重写 while 循环 使其更简短精炼

00:00:19.480 --> 00:00:21.870
这是 while 循环和 for 循环的一般结构

00:00:21.870 --> 00:00:25.650
可以帮助我们理解二者之间的相似和不同之处

00:00:25.650 --> 00:00:26.520
注意

00:00:26.520 --> 00:00:30.110
for 循环将 while 循环的部分内容浓缩成了一行内容

00:00:30.110 --> 00:00:33.290
在 for 循环中 我们从设置计数器变量开始

00:00:33.290 --> 00:00:36.090
然后是测试条件 该条件确定了何时退出循环

00:00:36.090 --> 00:00:37.910
接着是更新计数器变量的部分

00:00:37.910 --> 00:00:41.020
当我们想要重复某个任务 直到发生了某种情况

00:00:41.020 --> 00:00:44.100
导致条件不再为真时 我们希望使用 while 循环

00:00:44.100 --> 00:00:47.370
所以 while 循环可以具有不确定的迭代次数

00:00:47.370 --> 00:00:50.320
举个现实生活中的 while 循环例子

00:00:50.320 --> 00:00:54.170
我们持续打开特定文件夹中的文件 只要里面还有文件可以打开

00:00:54.170 --> 00:00:57.080
我们不关心该文件夹中有多少个文件

00:00:57.080 --> 00:00:59.810
我们只是持续打开文件 只要还有文件可以打开

00:00:59.810 --> 00:01:00.860
当我们想要对某项任务重复特定次数时

00:01:00.860 --> 00:01:05.200
我们会希望使用 for 循环

00:01:05.200 --> 00:01:09.940
举个 for 循环的例子 我们需要打开文件夹中的前五个文件

00:01:09.940 --> 00:01:12.950
即使该文件夹中可能还存在其他文件

00:01:12.950 --> 00:01:15.820
我们只希望执行 5 次

00:01:15.820 --> 00:01:18.940
这里是这两种循环类型的一些代码示例

00:01:18.940 --> 00:01:22.140
你已经熟悉左边的代码 表示的是 while 循环

00:01:22.140 --> 00:01:24.970
但是这是你第一次看到 for 循环

00:01:24.970 --> 00:01:29.030
两段代码都执行了相同的任务 都为单词列表中的每个元素

00:01:29.030 --> 00:01:30.970
输出日志语句

00:01:30.970 --> 00:01:34.350
我们再仔细研究下这两种循环类型

00:01:34.350 --> 00:01:37.150
然后我将指出你在 while 循环中熟悉的部分

00:01:37.150 --> 00:01:39.260
对应的是 for 循环的哪个部分

00:01:39.260 --> 00:01:42.330
之前在 while 循环中 我们将 index 变量设为 0

00:01:42.330 --> 00:01:46.330
在 for 循环中 我们也可以设置计数器变量

00:01:46.330 --> 00:01:48.378
我们也在这里将其设为 0

00:01:48.378 --> 00:01:51.550
在 for 循环中 该设置位于这两个小括号中的

00:01:51.550 --> 00:01:55.580
第一部分 位于第一个分号前面

00:01:55.580 --> 00:01:59.260
这个在 for 循环中叫做初始化语句

00:01:59.260 --> 00:02:03.030
仅在循环开始前执行一次

00:02:03.030 --> 00:02:04.430
在 while 循环中

00:02:04.430 --> 00:02:07.990
这是测试条件 位于小括号里

00:02:07.990 --> 00:02:11.480
我们将继续循环 直到该条件为假

00:02:11.480 --> 00:02:12.420
在这里

00:02:12.420 --> 00:02:16.370
当 index 变量不再小于单词列表的长度

00:02:16.370 --> 00:02:17.920
类似地 在 for 循环中

00:02:17.920 --> 00:02:21.970
测试条件位于初始化语句之后

00:02:21.970 --> 00:02:25.400
前后都用分号分隔开来

00:02:25.400 --> 00:02:26.750
for 循环中的主体部分

00:02:26.750 --> 00:02:31.530
将持续执行 直到这个测试条件为假

00:02:31.530 --> 00:02:34.720
在 while 循环结束位置是这个更新语句

00:02:34.720 --> 00:02:36.760
即让 index 变量加 1

00:02:36.760 --> 00:02:40.170
这可以帮助我们确保测试条件最终为假

00:02:40.170 --> 00:02:41.370
类似地 在 for 循环中

00:02:41.370 --> 00:02:45.270
我们可以在测试条件之后写上更新语句

00:02:45.270 --> 00:02:47.800
它位于第二个分号之后

00:02:47.800 --> 00:02:50.800
在每次循环迭代之后

00:02:50.800 --> 00:02:53.140
这个更新语句将被执行

00:02:53.140 --> 00:02:56.160
意味着我们执行这里面的所有代码后

00:02:56.160 --> 00:02:57.800
然后运行更新语句

00:02:57.800 --> 00:02:59.440
然后检查测试条件

00:02:59.440 --> 00:03:03.120
如果为真 我们需要再循环一次

00:03:03.120 --> 00:03:06.530
然后检查更新语句 然后再次检查测试条件

00:03:06.530 --> 00:03:08.550
for 循环的流程就是

00:03:08.550 --> 00:03:10.180
我们进入 for 循环

00:03:10.180 --> 00:03:13.950
设置计数器变量 注意 我们只设置一次

00:03:13.950 --> 00:03:18.170
接着检查该条件 如果为真 则进入 for 循环的

00:03:18.170 --> 00:03:21.270
主体部分 并执行里面的代码

00:03:21.270 --> 00:03:24.300
接着 转到这里更新计数器变量

00:03:24.300 --> 00:03:28.240
然后检查测试条件 如果为真 则进入主体部分

00:03:28.240 --> 00:03:29.730
并执行这些说明

00:03:29.730 --> 00:03:32.250
来到这里 更新计数器变量

00:03:32.250 --> 00:03:33.480
回到该条件

00:03:33.480 --> 00:03:36.070
检查是否为真 如果为真 再执行这段代码

00:03:36.070 --> 00:03:37.420
然后回到这里

00:03:37.420 --> 00:03:39.270
再次更新计数器变量

00:03:39.270 --> 00:03:41.910
然后再回到测试条件

00:03:41.910 --> 00:03:45.350
如果为假 则完全退出 loop 循环

00:03:45.350 --> 00:03:47.820
注意 index++ 是

00:03:47.820 --> 00:03:49.920
index = index + 1 的简写

00:03:49.920 --> 00:03:52.800
即让 index 值加 1

00:03:52.800 --> 00:03:54.950
总结下 for 循环的语法

00:03:54.950 --> 00:04:00.400
是将循环的三个部分结合为一行代码 并放入这个小括号里

00:04:00.400 --> 00:04:02.265
每个部分都用分号分隔

00:04:02.265 --> 00:04:05.420
第一部分是初始化语句

00:04:05.420 --> 00:04:08.550
仅在循环开始前执行一次

00:04:08.550 --> 00:04:10.660
第二个部分是测试条件

00:04:10.660 --> 00:04:13.080
在进行下一次循环迭代前系统会检查该条件

00:04:13.080 --> 00:04:15.280
第三个部分是更新语句

00:04:15.280 --> 00:04:18.630
系统会在每次循环迭代结束时执行该语句

00:04:18.630 --> 00:04:21.880
现在你已经看过 for 循环的示例 请试着

00:04:21.880 --> 00:04:23.050
在你的 Miwok 应用中写一个 for 循环

00:04:23.050 --> 00:04:27.500
在这个练习中 请用 for 循环替代 while 循环

00:04:27.500 --> 00:04:30.670
这样可以使你的代码更简练

00:04:30.670 --> 00:04:33.470
两种循环的行为应该是一样的

00:04:33.470 --> 00:04:36.900
也就是为单词列表中的每个元素添加一个新的 TextView

00:04:36.900 --> 00:04:39.030
输出也应该是一样的

00:04:39.030 --> 00:04:41.560
这是 NumbersActivity 的屏幕截图

00:04:41.560 --> 00:04:44.550
提示下 我在下面的文本中提供了

00:04:44.550 --> 00:04:46.100
for 循环的示例

00:04:46.100 --> 00:04:48.240
完成后 请选中该方框

