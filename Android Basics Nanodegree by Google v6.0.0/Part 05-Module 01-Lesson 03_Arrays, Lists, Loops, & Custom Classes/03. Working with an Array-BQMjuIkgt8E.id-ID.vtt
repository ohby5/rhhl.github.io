WEBVTT
Kind: captions
Language: id-ID

00:00:00.660 --> 00:00:03.650
Baik, jadi tugas kita adalah memikirkan
yang mana dari keempat pilihan ini

00:00:03.650 --> 00:00:05.500
yang akan mengarah ke array yang
tampak seperti diagram ini.

00:00:06.560 --> 00:00:09.730
Sekilas, nama variabelnya
adalah soccer team dan

00:00:09.730 --> 00:00:11.910
punya 11 elemen di dalamnya.

00:00:11.910 --> 00:00:14.100
Ada elemen-elemen dengan berbagai indeks.

00:00:14.100 --> 00:00:16.460
Sangat membantu jika menulis
nomor berikutnya.

00:00:16.460 --> 00:00:18.310
Sehingga mudah diingat.

00:00:18.310 --> 00:00:22.640
Perhatikan bahwa kita mulai dari indeks 0
dan naik hingga indeks 10.

00:00:22.640 --> 00:00:28.230
Ini berarti bahwa integer 5 ada di indeks 0,
integer 10 ada di indeks 1.

00:00:28.230 --> 00:00:33.340
Nilai 23 ada di indeks 4 dan
nilai 1 ada di indeks 10.

00:00:34.380 --> 00:00:36.660
Mari kita tinjau pilihan kodenya.

00:00:36.660 --> 00:00:41.070
Opsi pertama membuat integer dengan
panjang array 11, dan
13
memiliki nama variabel soccer team.
has a variable name soccer team.

00:00:43.190 --> 00:00:45.038
Sejauh ini tampak benar.

00:00:45.038 --> 00:00:48.460
Lalu kita inisialisasi
nilai 5 di indeks 1.

00:00:48.460 --> 00:00:52.260
Tapi tunggu, kita tadi bilang bahwa
nilai 5 harus ada di indeks 0.

00:00:52.260 --> 00:00:53.748
Jadi, baris ini tidak benar.

00:00:53.748 --> 00:00:57.590
Lalu untuk baris selanjutnya kita
berikan nilai 10

00:00:57.590 --> 00:00:58.300
di indeks 2.

00:00:58.300 --> 00:01:00.510
Tapi, kembali ke diagram.

00:01:00.510 --> 00:01:02.720
Kita lihat bahwa seharusnya itu
disimpan di indeks 1.

00:01:02.720 --> 00:01:05.880
Kode ini mendemonstrasikan kesalahan
umum di kalangan pengguna.

00:01:05.880 --> 00:01:09.520
Saat pertama kali bekerja dengan array, mudah
sekali berpikir bahwa indeks dimulai dari 1

00:01:09.520 --> 00:01:13.700
hingga sepanjang array, yang
dalam hal ini adalah 11.

00:01:13.700 --> 00:01:18.960
Tapi, dalam kenyataannya, kita melihat
bahwa array merentang dari indeks 0 ke indeks 10

00:01:18.960 --> 00:01:21.020
untuk array sepanjang 11.

00:01:21.020 --> 00:01:23.550
Baik, maka ini berarti
bahwa opsi satu tidak benar.

00:01:23.550 --> 00:01:24.430
Mari kita pindah ke opsi 2.

00:01:24.430 --> 00:01:28.440
Kita mulai dengan membuat array integer
sepanjang 11.

00:01:28.440 --> 00:01:33.120
Sejauh ini, ini benar, tapi
nama variabel hanya "team".

00:01:33.120 --> 00:01:35.490
Padahal kita ingin namanya "soccer team".

00:01:35.490 --> 00:01:36.780
Maka opsi ini sudah salah.

00:01:37.800 --> 00:01:39.660
Kode lainnya juga tidak benar

00:01:39.660 --> 00:01:42.530
karena kita hanya mengambil data
array berisi indeks-indeks ini

00:01:42.530 --> 00:01:44.960
dan bukannya memberikan
nilai di tempat.

00:01:44.960 --> 00:01:47.100
Maka opsi dua juga tidak benar.

00:01:47.100 --> 00:01:49.338
Sekarang mari kita lihat opsi tiga.

00:01:49.338 --> 00:01:51.973
Kita membuat array integer
dengan panjang 11 dan

00:01:51.973 --> 00:01:56.070
variabelnya bernama "soccer team" sehingga
tampak bagus sejauh ini.

00:01:56.070 --> 00:02:00.410
Kita menginisialisasi indeks 0 untuk
nilai 5, indeks kesepuluh

00:02:00.410 --> 00:02:04.870
untuk nilai 4,
indeks kesepuluh untuk nilai 1.

00:02:04.870 --> 00:02:06.970
Indeks keempat untuk nilai 23.

00:02:06.970 --> 00:02:10.960
Dan indeks pertama untuk nilai 10.

00:02:10.960 --> 00:02:12.840
Hei, inilah yang kita inginkan.

00:02:12.840 --> 00:02:15.360
Ini cocok dengan diagram di gambar kuis.

00:02:15.360 --> 00:02:19.190
Mungkin Anda khawatir bahwa kode memberikan
nilai secara acak.

00:02:19.190 --> 00:02:23.390
Maka kita memberikan nilai elemen pertama
lalu elemen terakhir dan kemudian

00:02:23.390 --> 00:02:26.630
di tengah, tapi tidak peduli
bagaimana urutan

00:02:26.630 --> 00:02:30.410
statemennya karena baris-baris kode
independen satu sama lain.

00:02:30.410 --> 00:02:34.045
Di akhir potongan kode, jika Anda ingin
memberikan indeks ke-0 lagi,

00:02:34.045 --> 00:02:35.172
Anda boleh melakukannya.

00:02:35.172 --> 00:02:39.980
Dan array akan diperbarui berdasarkan
pembaruan terbaru di posisi itu.

00:02:39.980 --> 00:02:42.670
Bagus, maka
opsi 3 adalah jawaban yang benar.

00:02:42.670 --> 00:02:44.530
Jangan khawatir jika Anda
tidak berhasil melakukannya.

00:02:44.530 --> 00:02:46.830
Ini pertama kali Anda belajar
tentang array dan

00:02:46.830 --> 00:02:49.620
akan ada banyak kesempatan
nanti untuk Anda latihan.

00:02:49.620 --> 00:02:53.280
Jika Anda bertanya-tanya tentang opsi 4,
mari kita lihat.

00:02:53.280 --> 00:02:56.935
Di opsi empat ini, kita
membuat array integer.

00:02:56.935 --> 00:03:01.928
Tapi kita mengapitalisasi int karena tipe
data integernya adalah tipe primitif,

00:03:01.928 --> 00:03:05.160
kita harus menuliskan iNT dengan i kecil.

00:03:05.160 --> 00:03:06.260
Ini saja sudah merupakan masalah.

00:03:07.310 --> 00:03:11.070
Masalah lainnya adalah ada spasi
di antara tipe data dan

00:03:11.070 --> 00:03:12.670
tanda kurung array.

00:03:12.670 --> 00:03:15.587
Ini akan menyebabkan kesalahan di
Java karena bukan deklarasi

00:03:15.587 --> 00:03:16.860
array yang valid.

00:03:16.860 --> 00:03:20.380
Baris-baris kode berikutnya di opsi
empat juga tidak benar.

00:03:20.380 --> 00:03:23.950
Jadi, kita mengatur nilai string
ke dalam posisi-posisi indeks ini, dan

00:03:23.950 --> 00:03:27.220
Anda bisa tahu bahwa ini adalah string
karena ada tanda petik ganda.

00:03:27.220 --> 00:03:30.330
Tapi masalahnya adalah bahwa kita
ingin membuat array integer.

00:03:30.330 --> 00:03:33.667
Maka kita tidak bisa menyimpan string
di dalam elemen-elemen array ini.

00:03:33.667 --> 00:03:35.680
Karena itulah
opsi empat tidak benar.

