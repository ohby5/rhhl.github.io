WEBVTT
Kind: captions
Language: en-US

00:00:00.390 --> 00:00:04.470
Hi Catherine, there's actually
a limitation about arrays.

00:00:04.470 --> 00:00:07.780
&gt;&gt; What do you mean that's what you
wanted us to use with wrong with that?

00:00:07.780 --> 00:00:11.300
&gt;&gt; Well I've been thinking about it, and
there's actually a better data structure

00:00:11.300 --> 00:00:14.440
for us to store these words in case
we want to add more to the future.

00:00:14.440 --> 00:00:15.960
&gt;&gt; What data structures is that?

00:00:15.960 --> 00:00:20.560
&gt;&gt; Well it's something called a
arrayList and we can use these stackable

00:00:20.560 --> 00:00:23.300
boxes as an analogy
&gt;&gt; For example,

00:00:23.300 --> 00:00:28.230
if we want the arrayList to shrink size,
we just remove elements from it, and

00:00:28.230 --> 00:00:31.600
if we want to grow,
we can just add elements onto it.

00:00:31.600 --> 00:00:32.159
&gt;&gt; Okay.

00:00:32.159 --> 00:00:34.700
How big does it actually get?

00:00:34.700 --> 00:00:38.520
&gt;&gt; Well, there's actually no upper
limit to how big the arrayList can get

00:00:38.520 --> 00:00:42.190
whereas with the array once we
create It's stuck that size.

00:00:42.190 --> 00:00:42.790
Okay.

00:00:42.790 --> 00:00:43.930
So where do I put these?

00:00:43.930 --> 00:00:47.790
Because I want to put the strings one,
two, and three and there.

00:00:47.790 --> 00:00:49.990
&gt;&gt; Were we first working
on the first element.

00:00:49.990 --> 00:00:50.570
&gt;&gt; Okay.
&gt;&gt; So

00:00:50.570 --> 00:00:52.370
you're working down the second element.

00:00:52.370 --> 00:00:53.780
&gt;&gt; Okay.
&gt;&gt; And the third word we're

00:00:53.780 --> 00:00:55.100
going to third element.

00:00:55.100 --> 00:00:55.690
&gt;&gt; Okay.

00:00:55.690 --> 00:00:58.300
So can I put anything in
an element of an array list?

00:00:58.300 --> 00:01:02.710
&gt;&gt; Or we can put anything a realist
can only whole object out of types.

00:01:02.710 --> 00:01:03.910
&gt;&gt; As opposed to.

00:01:03.910 --> 00:01:07.670
&gt;&gt; Or remember primitive data types
&gt;&gt; Things like integers, bullions,

00:01:07.670 --> 00:01:08.310
and floats.

00:01:08.310 --> 00:01:10.810
&gt;&gt; But if I want to store
an integer in an element?

00:01:10.810 --> 00:01:11.680
&gt;&gt; Well it's kind of tricky.

00:01:11.680 --> 00:01:14.170
But in Java we have something
called object grabbers.

00:01:14.170 --> 00:01:18.000
They wrap around primitive data types
to help them become object data types.

00:01:18.000 --> 00:01:20.720
So, for example,
we can store the capital I integer.

00:01:20.720 --> 00:01:23.480
But we can't store
the lower case i integer.

00:01:23.480 --> 00:01:24.040
&gt;&gt; Okay. I got it. So

00:01:24.040 --> 00:01:28.410
an array list can hold object
data types not primitive types.

00:01:28.410 --> 00:01:31.060
It just seems like an array list
is a lot more flexible, because

00:01:31.060 --> 00:01:36.190
there's no wasted spots as compared to
an array which could have blank spots.

00:01:36.190 --> 00:01:38.586
So why not just always
use an array list?

00:01:38.586 --> 00:01:39.490
&gt;&gt; Glad you asked.

00:01:39.490 --> 00:01:42.550
So I have this wonderful comparison
chart that'll answer all your questions.

00:01:42.550 --> 00:01:43.570
&gt;&gt; Okay, let's check it out.

00:01:44.640 --> 00:01:49.280
Here's the table that compares and
contrasts the Array and the ArrayList.

00:01:49.280 --> 00:01:54.140
Like we mentioned earlier, an Array
cannot change size once created,

00:01:54.140 --> 00:01:56.870
whereas an ArrayList can change size.

00:01:56.870 --> 00:02:01.190
Now for the question is it a class,
an Array is not a class.

00:02:01.190 --> 00:02:03.950
It doesn't have methods to access and
modify elements.

00:02:03.950 --> 00:02:07.380
On the other hand, an array list
has a list of class definition.

00:02:07.380 --> 00:02:10.460
This means that every instance of
an array list is an object, which has

00:02:10.460 --> 00:02:15.870
methods we can use to access and modify
the data, and so that's showcase here,

00:02:15.870 --> 00:02:18.030
and what each data structure
can store is different as well.

00:02:19.060 --> 00:02:21.940
And array can contain primitive
an object out of types.

00:02:21.940 --> 00:02:25.690
However an array list can only
contain object out of types.

00:02:25.690 --> 00:02:29.130
So to help make this clearer,
let's look at some example scenarios and

00:02:29.130 --> 00:02:31.880
real Android apps
within the settings up.

00:02:31.880 --> 00:02:36.430
We have a Wi-Fi screen that shows a list
of available Wi-Fi by networks near you.

00:02:36.430 --> 00:02:40.390
In this case, we probably want to store
this information in an array list, and

00:02:40.390 --> 00:02:43.760
this is because the list of
available WiFi networks can grow or

00:02:43.760 --> 00:02:46.630
shrink depending on
where you're located.

00:02:46.630 --> 00:02:50.700
Sometimes there are no WiFi networks
near you, and other times there might be

00:02:50.700 --> 00:02:54.670
a ton, in this case it doesn't make
sense to have a fixed size array.

00:02:55.690 --> 00:02:58.590
In the YouTube app, there's a feature
that can allow you to create a playlist

00:02:58.590 --> 00:03:00.330
of videos to watch later.

00:03:00.330 --> 00:03:01.740
And this is an ideal situation for

00:03:01.740 --> 00:03:05.730
an arrayList, because we'll continue
to add videos that we want to see and

00:03:05.730 --> 00:03:09.540
remove those the we've already watched,
and since we need the data structure to

00:03:09.540 --> 00:03:13.370
dynamically change in size
we should use an arrayList.

00:03:13.370 --> 00:03:17.870
On the other hand, an alarm clock app we
have a potential use case for an array.

00:03:17.870 --> 00:03:20.750
When you specify an alarm you
specify what day of the week

00:03:20.750 --> 00:03:22.400
the alarm should repeat on.

00:03:22.400 --> 00:03:26.210
This could be a boolean array, which
source true if the alarm would happen on

00:03:26.210 --> 00:03:30.110
that day and false if the alarm
should not happen on that day.

00:03:30.110 --> 00:03:33.080
So there are only ever be
seven days in a week, so

00:03:33.080 --> 00:03:36.360
the size of our boy in array
won't need to change over time.

00:03:36.360 --> 00:03:37.650
Hence we can use in array.

00:03:38.840 --> 00:03:41.420
Another possible use case for
an array is the Google Play store App.

00:03:42.490 --> 00:03:45.240
When searching for an app you
can view a list of categories,

00:03:45.240 --> 00:03:51.175
which includes Includes businesses,
communication, education apps and more.

00:03:51.175 --> 00:03:52.245
If you scroll up and down,

00:03:52.245 --> 00:03:56.235
the number of categories in the Play
Store will stay pretty fixed over time.

00:03:56.235 --> 00:03:58.785
So in this case, will use an array
to store this information.

00:04:00.270 --> 00:04:04.690
Now to summarize array and array
list are two different types of data

00:04:04.690 --> 00:04:08.270
structures that are ideal for
different use cases.

00:04:08.270 --> 00:04:12.820
Arrays have a fixed size,
while array lists have variable size.

00:04:12.820 --> 00:04:16.070
You can store objects and
primitives in an array.

00:04:16.070 --> 00:04:19.170
While can only store object
types in an array list.

00:04:19.170 --> 00:04:22.210
Next we'll dive in and see how to
write code to create an array list.

