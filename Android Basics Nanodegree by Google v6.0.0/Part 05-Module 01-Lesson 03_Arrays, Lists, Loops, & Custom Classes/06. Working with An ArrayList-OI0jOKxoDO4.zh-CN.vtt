WEBVTT
Kind: captions
Language: zh-CN

00:00:00.390 --> 00:00:04.470
Katherine 数组实际上存在一些限制

00:00:04.470 --> 00:00:07.780
什么意思 是你要我们使用数组的啊 它存在什么问题啊？

00:00:07.780 --> 00:00:11.300
我思考了下 发现如果日后想添加单词的话

00:00:11.300 --> 00:00:14.440
实际上可以用更好的数据结构来存储这些单词

00:00:14.440 --> 00:00:15.960
什么数据结构啊？

00:00:15.960 --> 00:00:20.560
叫做数组列表 我们可以使用这些堆叠起来的盒子

00:00:20.560 --> 00:00:23.300
作为比喻 例如

00:00:23.300 --> 00:00:28.230
如果我们希望数组列表缩小大小 可以从上面拿走元素

00:00:28.230 --> 00:00:31.600
如果想增加大小 可以在上面添加元素

00:00:31.600 --> 00:00:32.159
噢

00:00:32.159 --> 00:00:34.700
最终可以变多大呢？

00:00:34.700 --> 00:00:38.520
数组列表的大小没有上限

00:00:38.520 --> 00:00:42.190
而对于数组来说 一旦创建完毕 大小就固定了

00:00:42.190 --> 00:00:42.790
噢

00:00:42.790 --> 00:00:43.930
那这些放哪里呢？

00:00:43.930 --> 00:00:47.790
我想把字符串 one two three 放进去

00:00:47.790 --> 00:00:49.990
第一个单词可以放到第一个元素里

00:00:49.990 --> 00:00:50.570
恩 第二个单词

00:00:50.570 --> 00:00:52.370
可以放到第二个元素里

00:00:52.370 --> 00:00:53.780
第三个单词可以放到

00:00:53.780 --> 00:00:55.100
第三个元素里

00:00:55.100 --> 00:00:55.690
恩

00:00:55.690 --> 00:00:58.300
我可以将任何内容放到数组列表的元素中吗？

00:00:58.300 --> 00:01:02.710
不能放任何内容 数组列表只能存储对象数据类型

00:01:02.710 --> 00:01:03.910
而不能放

00:01:03.910 --> 00:01:07.670
原始数据类型 例如整型 布尔型

00:01:07.670 --> 00:01:08.310
和浮点型数据

00:01:08.310 --> 00:01:10.810
那如果我想在元素中存储整型数据呢？

00:01:10.810 --> 00:01:11.680
那就有点麻烦

00:01:11.680 --> 00:01:14.170
在 Java 中有个功能叫做对象封装类

00:01:14.170 --> 00:01:18.000
它们会封装在原始数据类型周围 使其变成对象数据类型

00:01:18.000 --> 00:01:20.720
例如 我们可以存储首字母 I 大写的 Integer

00:01:20.720 --> 00:01:23.480
但是不能存储 i 小写的 int

00:01:23.480 --> 00:01:24.040
明白了

00:01:24.040 --> 00:01:28.410
也就是数组列表能存储对象数据类型 但是不能存储原始类型

00:01:28.410 --> 00:01:31.060
似乎数组列表更灵活

00:01:31.060 --> 00:01:36.190
因为没有浪费的位置 而数组可能存在空白的位置

00:01:36.190 --> 00:01:38.586
那么为何不始终使用数组列表呢？

00:01:38.586 --> 00:01:39.490
问的太好了

00:01:39.490 --> 00:01:42.550
我制作了个很棒的对比图表 可以回答你的问题

00:01:42.550 --> 00:01:43.570
我们来看看

00:01:44.640 --> 00:01:49.280
这个表格对数组和数组列表进行了对比

00:01:49.280 --> 00:01:54.140
正如之前提到的 数组创建好后 就不能更改大小了

00:01:54.140 --> 00:01:56.870
而数组列表可以更改大小

00:01:56.870 --> 00:02:01.190
对于问题“是类吗？”数组不是类

00:02:01.190 --> 00:02:03.950
它不需要方法来访问和修改元素

00:02:03.950 --> 00:02:07.380
而数组列表被定义成了类

00:02:07.380 --> 00:02:10.460
意味着数组列表的每个实例都是对象

00:02:10.460 --> 00:02:15.870
具有方法供我们访问和修改数据 正如这里显示的

00:02:15.870 --> 00:02:18.030
二者能存储的数据结构也不相同

00:02:19.060 --> 00:02:21.940
数组可以包含原始数据类型和对象数据类型

00:02:21.940 --> 00:02:25.690
但是数组列表只能包含对象数据类型

00:02:25.690 --> 00:02:29.130
为了帮助你理解 我们来看看一些示例情形

00:02:29.130 --> 00:02:31.880
和一些实际的 Android 应用 在设置应用中

00:02:31.880 --> 00:02:36.430
这是个 Wi-Fi 屏幕 显示了你附近可用的 Wi-Fi 网络列表

00:02:36.430 --> 00:02:40.390
在这种情况下 我们需要将该信息存储到数组列表中

00:02:40.390 --> 00:02:43.760
这是因为可用的 Wi-Fi 网络列表可能会增大或减小

00:02:43.760 --> 00:02:46.630
取决于你所在的位置

00:02:46.630 --> 00:02:50.700
有时候你附近没有 Wi-Fi 网络 其他时候

00:02:50.700 --> 00:02:54.670
可能有很多个 这样的话 就不能使用大小固定的数组

00:02:55.690 --> 00:02:58.590
在 YouTube 应用中 有个功能可以让你创建播放列表

00:02:58.590 --> 00:03:00.330
列出稍后观看的视频

00:03:00.330 --> 00:03:01.740
这是使用数组列表的理想情况

00:03:01.740 --> 00:03:05.730
我们将不断添加想要观看的视频

00:03:05.730 --> 00:03:09.540
并删掉已经看过的视频 因为我们需要数据结构

00:03:09.540 --> 00:03:13.370
动态地改变大小 所以应该使用数组列表

00:03:13.370 --> 00:03:17.870
相反 闹钟应用则属于使用数组的情形

00:03:17.870 --> 00:03:20.750
当你指定闹钟时 你指定了闹钟

00:03:20.750 --> 00:03:22.400
应该在周几重复

00:03:22.400 --> 00:03:26.210
可以使用布尔型数组 如果闹钟可以在这一天响

00:03:26.210 --> 00:03:30.110
则存储 true 如果不能在这一天响 则存储 false

00:03:30.110 --> 00:03:33.080
一周只有七天 所以这个布尔型数组的

00:03:33.080 --> 00:03:36.360
大小不会随着时间的变化而改变

00:03:36.360 --> 00:03:37.650
因此我们可以使用数组

00:03:38.840 --> 00:03:41.420
另一个数组的使用案例是 Google Play 商店应用

00:03:42.490 --> 00:03:45.240
当你搜索应用时 可以看到一个类别列表

00:03:45.240 --> 00:03:51.175
包括商业 通信 教育应用等

00:03:51.175 --> 00:03:52.245
上下滚动的话

00:03:52.245 --> 00:03:56.235
Play 商店中的类别数量基本保持不变

00:03:56.235 --> 00:03:58.785
在这种情况下 就可以使用数组来存储这一信息

00:04:00.270 --> 00:04:04.690
总结下 数组和数组列表是两种不同类型的数据结构

00:04:04.690 --> 00:04:08.270
适合不同的使用情形

00:04:08.270 --> 00:04:12.820
数组大小是固定的 而数组列表的大小可以改变

00:04:12.820 --> 00:04:16.070
你可以在数组中存储对象和原始数据类型

00:04:16.070 --> 00:04:19.170
但是只能在数组列表中存储对象类型

00:04:19.170 --> 00:04:22.210
接着 我们将深入了解如何编写代码来创建数组列表

