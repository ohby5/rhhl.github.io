WEBVTT
Kind: captions
Language: zh-CN

00:00:00.420 --> 00:00:02.610
要使单词出现在其他 Activity 中

00:00:02.610 --> 00:00:04.780
我们可以根据第一条提示操作 即复制粘贴

00:00:04.780 --> 00:00:08.310
NumbersActivity 中已经存在的代码

00:00:08.310 --> 00:00:10.570
我们复制下 NumbersActivity 中的所有这些代码

00:00:12.590 --> 00:00:14.380
首先将粘贴到 ColorsActivity 中

00:00:16.410 --> 00:00:20.806
在粘贴这些代码之前 注意 ColorsActivity 使用了

00:00:20.806 --> 00:00:23.446
activity_colors.xml 布局文件

00:00:23.446 --> 00:00:25.250
作为内容视图

00:00:25.250 --> 00:00:28.760
我们可以将 ColorsActivity 改为再次引用该布局文件

00:00:29.760 --> 00:00:33.460
但是 我们还需要将布局文件改为

00:00:33.460 --> 00:00:36.700
具有 ListView XML 布局而不是 RelativeLayout

00:00:36.700 --> 00:00:39.000
在测试题中我们提供了第二条提示

00:00:39.000 --> 00:00:42.200
即所有的 Activity 都可以使用相同的布局文件

00:00:42.200 --> 00:00:47.037
其中具有列表项元素 因为 activity_numbers.xml

00:00:47.037 --> 00:00:49.420
已经具有正确的布局

00:00:49.420 --> 00:00:51.300
我们直接使用该布局吧

00:00:51.300 --> 00:00:53.690
删掉这个 tools:context 属性

00:00:53.690 --> 00:00:57.140
该属性规定了该布局应用于哪个文件

00:00:57.140 --> 00:01:00.940
因为现在该布局将用于四个不同的 Activity

00:01:00.940 --> 00:01:04.620
接着我们需要重命名该文件 使其并不特定于 Numbers

00:01:04.620 --> 00:01:09.790
为此 右击 转到“Refactor”然后选择“Rename”

00:01:11.190 --> 00:01:12.850
取名为

00:01:12.850 --> 00:01:15.370
word_list.xml

00:01:16.370 --> 00:01:19.560
这里重构会更新代码中所有指代旧名称的

00:01:19.560 --> 00:01:21.360
相应位置

00:01:21.360 --> 00:01:23.680
并更新为新名称

00:01:23.680 --> 00:01:25.280
回到 NumbersActivity

00:01:25.280 --> 00:01:29.600
我们之前引用的是 activity_numbers 布局

00:01:29.600 --> 00:01:35.900
但现在引用的是 words_list xml 文件 即同一文件的新名称 

00:01:35.900 --> 00:01:40.220
然后转到 ColorsActivity 可以将内容视图也设为

00:01:40.220 --> 00:01:44.670
word_list xml 文件 其中包含 listView 元素

00:01:44.670 --> 00:01:47.770
然后转到 ColorsActivity 可以将内容视图也设为

00:01:47.770 --> 00:01:52.730
word_list xml 文件 其中包含 listView 元素

00:01:52.730 --> 00:01:55.960
我们确保下 ColorsActivity 中所有的代码

00:01:55.960 --> 00:01:57.630
都正确地指代 Colors 类别

00:01:57.630 --> 00:02:00.680
我们还没有剩下任何地方指代的仍然是 Numbers

00:02:00.680 --> 00:02:04.611
所以最明显要改动的地方是这里的英语和米沃克翻译

00:02:04.611 --> 00:02:07.110
我们更新为相应的颜色单词

00:02:08.840 --> 00:02:11.730
onCreate() 方法中剩下的代码看起来正确无误

00:02:11.730 --> 00:02:14.930
我们通过此颜色单词列表创建了 WordAdapter

00:02:14.930 --> 00:02:19.850
然后我们在 word_list.xml 布局中找到视图 ID 为 list 的 ListView

00:02:19.850 --> 00:02:23.930
最后将适配器设置到该 ListView 上

00:02:23.930 --> 00:02:25.760
现在我们的代码中没有错误了

00:02:25.760 --> 00:02:27.842
我们在设备上运行下应用

00:02:27.842 --> 00:02:31.170
应用启动后 点击 Colors 类别

00:02:31.170 --> 00:02:34.200
看到了颜色单词列表 不错 能正常运转

00:02:34.200 --> 00:02:37.140
米沃克颜色在上面 英语单词在下面

00:02:38.190 --> 00:02:40.920
现在对 FamilyActivity 重复相同的流程

00:02:40.920 --> 00:02:43.505
复制 ColorsActivity 文件

00:02:43.505 --> 00:02:47.245
根据提供的字典文档更新家庭单词列表

00:02:47.245 --> 00:02:50.495
在设备上运行应用时效果是这样的

00:02:50.495 --> 00:02:51.735
很棒

00:02:51.735 --> 00:02:54.275
所有类别都正确地显示了米沃克语

00:02:54.275 --> 00:02:55.545
和英语翻译

00:02:55.545 --> 00:02:58.595
还有最后一步清理操作

00:02:58.595 --> 00:03:00.455
修复我们的代码

00:03:00.455 --> 00:03:02.695
因为所有四个 Activity 只使用了一个布局文件

00:03:02.695 --> 00:03:05.320
即 word_list xml 文件

00:03:05.320 --> 00:03:08.990
所以我们可以删掉不用的布局文件

00:03:08.990 --> 00:03:13.050
我将删掉 Colors Family 和 Phrases

00:03:13.050 --> 00:03:14.070
的布局文件

00:03:14.070 --> 00:03:16.640
每次删除文件 都应该再检验一下应用

00:03:16.640 --> 00:03:20.190
确保依然能运行 没有删掉必要的文件

00:03:20.190 --> 00:03:24.060
在设备上运行应用后 看起来依然能运转

00:03:24.060 --> 00:03:26.410
恭喜下自己吧

00:03:26.410 --> 00:03:28.870
你完成了第二节课的编程任务了

00:03:28.870 --> 00:03:30.034
这是个非常重要的里程碑成就！

