WEBVTT
Kind: captions
Language: ar

00:00:00.390 --> 00:00:04.470
مرحبًا يا كاثرين، هناك حد فعلًا للمصفوفات.

00:00:04.470 --> 00:00:07.780
&gt;&gt; ماذا تعنين؟ هذا ما أردت منا استخدامه. ما الخطأ في ذلك؟

00:00:07.780 --> 00:00:11.300
&gt;&gt; حسنًا، كنت أفكر في الأمر، وتوجد فعلًا بنية بيانات أفضل

00:00:11.300 --> 00:00:14.440
لنا لتخزين تلك الكلمات في حال أردنا إضافة المزيد في المستقبل.

00:00:14.440 --> 00:00:15.960
&gt;&gt; ما بنية البيانات هذه؟

00:00:15.960 --> 00:00:20.560
&gt;&gt; حسنًا، إنها شيء يُدعى arrayList، ويمكننا استخدام تلك الصناديق

00:00:20.560 --> 00:00:23.300
المكوّمة كمثال توضيحي.
&gt;&gt; على سبيل المثال،

00:00:23.300 --> 00:00:28.230
إذا أردنا تقليص حجم arrayList، يمكننا ببساطة إزالة عناصر منها،

00:00:28.230 --> 00:00:31.600
وإذا أردنا زيادة حجمها، يمكننا ببساطة إضافة عناصر إليها.

00:00:31.600 --> 00:00:32.159
&gt;&gt; حسنًا.

00:00:32.159 --> 00:00:34.700
إلى أي مدى يزيد الحجم؟

00:00:34.700 --> 00:00:38.520
&gt;&gt; حسنًا، في الواقع لا يوجد حد أعلى لكم من الممكن أن يبلغ حجم arrayList،

00:00:38.520 --> 00:00:42.190
بينما مع المصفوفة، بمجرد الإنشاء، تظل عالقة عند هذا الحجم.

00:00:42.190 --> 00:00:42.790
حسنًا.

00:00:42.790 --> 00:00:43.930
إذن أين أضع هذه؟

00:00:43.930 --> 00:00:47.790
لأنني أريد وضع السلاسل، الأولى، والثانية، والثالثة.

00:00:47.790 --> 00:00:49.990
&gt;&gt; هل كنا نعمل في البداية على أول عنصر؟

00:00:49.990 --> 00:00:50.570
&gt;&gt; حسنًا.
&gt;&gt; لذا،

00:00:50.570 --> 00:00:52.370
أنت تعملين على العنصر الثاني.

00:00:52.370 --> 00:00:53.780
&gt;&gt; حسنًا.
&gt;&gt; والكلمة الثالثة

00:00:53.780 --> 00:00:55.100
سنذهب إلى العنصر الثالث.

00:00:55.100 --> 00:00:55.690
&gt;&gt; حسنًا.

00:00:55.690 --> 00:00:58.300
لذلك أيمكنني وضع أي شيء في عنصر قائمة المصفوفة؟

00:00:58.300 --> 00:01:02.710
&gt;&gt; أو يمكننا وضع أي شيء أو هذا يمكن أن يحمل حقًا أنواع بيانات عنصر.

00:01:02.710 --> 00:01:03.910
&gt;&gt; في مقابل.

00:01:03.910 --> 00:01:07.670
&gt;&gt; أو تذكّر أنواع البيانات الأساسية.
&gt;&gt; أشياء مثل الأعداد الطبيعية، وسبائك،

00:01:07.670 --> 00:01:08.310
وعوائم.

00:01:08.310 --> 00:01:10.810
&gt;&gt; لكن إذا أردت تخزين عدد طبيعي في عنصر؟

00:01:10.810 --> 00:01:11.680
&gt;&gt; حسنًا، إنه سؤال محير نوعًا ما.

00:01:11.680 --> 00:01:14.170
لكن في Java، لدينا شيء يُدعى ملتقطات العنصر.

00:01:14.170 --> 00:01:18.000
أنها تلتف حول أنواع البيانات البدائية لمساعدتها في ان تصبح أنواع بيانات عنصر.

00:01:18.000 --> 00:01:20.720
لذلك، على سبيل المثال، يمكننا تخزين integer بكتابة الحرف I كبيرًا.

00:01:20.720 --> 00:01:23.480
لكن لا يمكننا تخزين integer بكتابة الحرف I صغيرًا.

00:01:23.480 --> 00:01:24.040
&gt;&gt; حسنًا، فهمت ذلك. إذن

00:01:24.040 --> 00:01:28.410
يمكن لقائمة مصفوفة أن تحمل أنواع بيانات عنصر وليست أنواع بدائية.

00:01:28.410 --> 00:01:31.060
يبدو أن قائمة المصفوفة تكون أكثر مرونة، لأن

00:01:31.060 --> 00:01:36.190
لا توجد نقاط مهدرة لمصفوفة قد تحتوي على نقاط فارغة.

00:01:36.190 --> 00:01:38.586
لذلك لماذا لا نستخدم دائمًا قائمة المصفوفة فحسب؟

00:01:38.586 --> 00:01:39.490
&gt;&gt; مسرورة بسؤالك هذا السؤال.

00:01:39.490 --> 00:01:42.550
لدي مخطط مقارنة رائع سيجيب عن جميع أسئلتك.

00:01:42.550 --> 00:01:43.570
&gt;&gt; حسنًا، دعنا نتفحصه.

00:01:44.640 --> 00:01:49.280
ها هنا الجدول الذي يقارن ويباين Array وArrayList.

00:01:49.280 --> 00:01:54.140
مثلما ذكرنا سابقًا، لا يمكن للـArray أن تغيّر الحجم بمجرد إنشائها،

00:01:54.140 --> 00:01:56.870
في حين يمكن للـArrayList أن تغيّر الحجم.

00:01:56.870 --> 00:02:01.190
والآن بالنسبة لسؤال إذا ما كانت فئة، لا تعد Array فئة.

00:02:01.190 --> 00:02:03.950
إنها لا تحتوي على أساليب للوصول إلى العناصر وتعديلها.

00:02:03.950 --> 00:02:07.380
من ناحية أخرى، تحتوي قائمة المصفوفة على قائمة من تعريف الفئة.

00:02:07.380 --> 00:02:10.460
وهذا يعني أن كل مثيل لقائمة مصفوفة يعد عنصرًا، ويكون لديه

00:02:10.460 --> 00:02:15.870
أساليب يمكننا استخدامها للوصول إلى البيانات وتعديلها، وها هو عرض هنا،

00:02:15.870 --> 00:02:18.030
وتختلف كل بنية بيانات يمكن تخزينها أيضًا.

00:02:19.060 --> 00:02:21.940
ويمكن أن تحتوي المصفوفة بدائيًا على أنواع بيانات عنصر.

00:02:21.940 --> 00:02:25.690
ومع ذلك، يمكن أن تحتوي قائمة المصفوفة فقط على أنواع بيانات عنصر.

00:02:25.690 --> 00:02:29.130
لذلك للمساعدة في توضيح ذلك الأمر، دعني أطرح بعض سيناريوهات الأمثلة

00:02:29.130 --> 00:02:31.880
وتطبيقات أندرويد فعليًا داخل التنصيب.

00:02:31.880 --> 00:02:36.430
لدينا شاشة Wi-Fi تعرض قائمة من Wi-Fi متاحة عبر شبكات بالقرب منك.

00:02:36.430 --> 00:02:40.390
وفي هذه الحالة، ربما نريد تخزين تلك المعلومات في قائمة مصفوفة،

00:02:40.390 --> 00:02:43.760
وهذا يرجع إلى أن قائمة شبكات WiFi المتاحة يمكن أن تكبر

00:02:43.760 --> 00:02:46.630
أو تتقلص اعتمادًا على موقعك.

00:02:46.630 --> 00:02:50.700
أحيانًا لا توجد شبكات WiFi بالقرب منك، وفي أحيان أخرى قد يكون هناك

00:02:50.700 --> 00:02:54.670
طنًا، وفي هذه الحالة، لا يكون من المعقول امتلاك مصفوفة حجم ثابتة.

00:02:55.690 --> 00:02:58.590
في تطبيق يوتيوب، توجد ميزة يمكن أن تتيح لك إنشاء قائمة تشغيل

00:02:58.590 --> 00:03:00.330
فيديوهات أو المشاهدة لاحقًا.

00:03:00.330 --> 00:03:01.740
وهذا وضع مثالي

00:03:01.740 --> 00:03:05.730
لـarrayList، لأننا سنستمر في إضافة فيديوهات نريد رؤيتها

00:03:05.730 --> 00:03:09.540
وإزالة تلك التي شاهدناها بالفعل، وبما أننا نحتاج بنية البيانات

00:03:09.540 --> 00:03:13.370
لتغيير الحجم بطريقة ديناميكية، ينبغي لنا استخدام arrayList.

00:03:13.370 --> 00:03:17.870
ومن ناحية أخرى، في تطبيق المنبّه، لدينا حالة استخدام محتملة لمصفوفة.

00:03:17.870 --> 00:03:20.750
عندما تحدد منبّهًا، أنت تحدد أي يوم في الأسبوع

00:03:20.750 --> 00:03:22.400
ينبغي تكرار التنبيه.

00:03:22.400 --> 00:03:26.210
هذه تكون مصفوفة منطقية، التي ترسم العلامة صح إذا كان المنبه سيرن

00:03:26.210 --> 00:03:30.110
في هذا اليوم، وخطأ إذا كان ينبغي عدم رن التنبيه في ذلك اليوم.

00:03:30.110 --> 00:03:33.080
لذلك هناك سبعة أيام فقط في الأسبوع، إذن

00:03:33.080 --> 00:03:36.360
لن يحتاج حجم المصفوفة المنطقية للتغير بمرور الوقت.

00:03:36.360 --> 00:03:37.650
وبالتالي يمكننا استخدام مصفوفة.

00:03:38.840 --> 00:03:41.420
وهناك حالة استخدام ممكنة أخرى لمصفوفة هي تطبيق تخزين Google Play.

00:03:42.490 --> 00:03:45.240
عند البحث عن تطبيق، يمكنك رؤية قائمة بالفئات،

00:03:45.240 --> 00:03:51.175
التي تتضمن تطبيقات أعمال تجارية، واتصال، وتعليم وغيرها.

00:03:51.175 --> 00:03:52.245
إذا مررت لأعلى ولأسفل،

00:03:52.245 --> 00:03:56.235
سيبقى عدد الفئات في Play Store ثابتًا مع مرور الوقت.

00:03:56.235 --> 00:03:58.785
لذلك في هذه الحالة، سنستخدم مصفوفة لتخزين تلك المعلومات.

00:04:00.270 --> 00:04:04.690
والآن للتلخيص، تعد المصفوفة وقائمة المصفوفة نوعين مختلفين من بنيات البيانات

00:04:04.690 --> 00:04:08.270
المثالية لحالات الاستخدام المختلفة.

00:04:08.270 --> 00:04:12.820
يكون حجم المصفوفات ثابتًا، بينما يكون حجم قوائم المصفوفة متغيرًا.

00:04:12.820 --> 00:04:16.070
يمكنك تخزين عناصر والأوليات في مصفوفة،

00:04:16.070 --> 00:04:19.170
في حين يمكن فقط تخزين أنواع عنصر في قائمة مصفوفة.

00:04:19.170 --> 00:04:22.210
بعد ذلك سنتعمق ونرى كيفية صياغة كود لإنشاء قائمة مصفوفة.

