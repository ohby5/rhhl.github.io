WEBVTT
Kind: captions
Language: zh-CN

00:00:00.500 --> 00:00:03.560
欢迎回来 前两个练习完成的很棒

00:00:03.560 --> 00:00:08.350
对于第三个问题 我们使用的 ViewGroup 是 LinearLayout

00:00:08.350 --> 00:00:11.390
现在我们来研究下代码 看看我们是如何

00:00:11.390 --> 00:00:13.110
完成第一步和第二步的

00:00:13.110 --> 00:00:15.580
打开 list_item.xml 布局文件

00:00:15.580 --> 00:00:20.240
为了与我们的代码相匹配 我们需要添加 ID 为 miwok_text_view 的属性

00:00:21.610 --> 00:00:25.030
这个 TextView 的 ID 为 default_text_view

00:00:28.280 --> 00:00:29.050
为了进行检测

00:00:29.050 --> 00:00:32.439
我将介绍个很酷的小技巧 使用一种叫做 tools 的命名空间 

00:00:33.600 --> 00:00:38.240
在 XML 中 命名空间使元素之间没有名称冲突

00:00:38.240 --> 00:00:40.850
类似于具有唯一的姓氏

00:00:40.850 --> 00:00:43.400
这样谁都不会和你具有相同的名称

00:00:43.400 --> 00:00:49.660
即使他们可能具有相同的名字 xmlns 表示的是 xml 命名空间

00:00:49.660 --> 00:00:53.760
如果你观察这里的话 会发现我们在代码中一直使用了另一个命名空间

00:00:53.760 --> 00:00:56.380
即这个 xmlns:android

00:00:56.380 --> 00:01:00.020
我们已经在 Android 中使用的属性

00:01:00.020 --> 00:01:04.635
例如 android:layout_width 或 android:layout_height 都以 Android: 开头

00:01:04.635 --> 00:01:07.890
它们已经属于 Android 命名空间的一部分

00:01:07.890 --> 00:01:11.340
我在这里添加一个命名空间 叫做 tools 命名空间

00:01:11.340 --> 00:01:15.255
这行代码将 tools 前缀映射到这个命名空间

00:01:15.255 --> 00:01:20.600
即 schemas.android.com/tools 表示任何名称以前缀

00:01:20.600 --> 00:01:24.770
tools 开头的元素或属性都属于 tools 命名空间的一部分

00:01:24.770 --> 00:01:27.670
对于这两个 TextView 我将使用 tools 命名空间

00:01:27.670 --> 00:01:30.320
添加两个属性

00:01:32.010 --> 00:01:35.730
你可能有疑问 我是怎么从 tools 命名空间中

00:01:35.730 --> 00:01:37.590
找到这个 text 属性的

00:01:37.590 --> 00:01:41.350
tools 命名空间是由 Android 的工具团队创建的

00:01:41.350 --> 00:01:45.000
其中具有大量属性 可以帮助你编写布局

00:01:45.000 --> 00:01:47.463
我们可以通过查看在线文档 了解下他们

00:01:47.463 --> 00:01:53.350
都创建了哪些属性 我直接搜索 android tools namespace

00:01:53.350 --> 00:01:56.400
在这个页面上 我们看到了各种不同属性的列表

00:01:56.400 --> 00:01:57.850
滚动到底部

00:01:57.850 --> 00:02:01.180
我们看到 Designtime Attributes (设计时属性)部分

00:02:01.180 --> 00:02:04.450
设计时属性可以在我们开发代码时为我们提供帮助

00:02:04.450 --> 00:02:08.660
但是不会在运行时出现  我们来看看详细信息

00:02:08.660 --> 00:02:12.670
例如 如果我们在 TextView 上添加 tools:text 属性

00:02:12.670 --> 00:02:16.280
那么在 Android Studio 的设计预览中将会显示此文本

00:02:16.280 --> 00:02:18.910
但是 当应用实际运行时 此文本不会显示出来

00:02:18.910 --> 00:02:19.820
这样很好

00:02:19.820 --> 00:02:22.420
因为我们不希望所有 TextView 都始终

00:02:22.420 --> 00:02:24.400
显示我们设置的这个特定文本

00:02:24.400 --> 00:02:27.090
你可以将这个看做占位符文本 帮助我们（作为开发者）

00:02:27.090 --> 00:02:30.120
确保当我们在 Android Studio 中测试代码时

00:02:30.120 --> 00:02:31.650
代码能正常显示

00:02:31.650 --> 00:02:35.800
回到我们的代码 注意这里 我添加了

00:02:35.800 --> 00:02:40.190
两个 text 属性 一个用于 lutti 一个用于 one

00:02:40.190 --> 00:02:43.910
确保这些不在运行时显示非常重要

00:02:43.910 --> 00:02:46.800
因为列表项将在需要时

00:02:46.800 --> 00:02:48.170
动态地现场创建

00:02:48.170 --> 00:02:52.070
我们将在 Java 代码中设置英语和米沃克语单词的文本

00:02:52.070 --> 00:02:56.060
而不是直接在 XML 布局文件中硬编码和指定它们

00:02:56.060 --> 00:02:58.690
这些 TextView 中的文本将动态地更改

00:02:58.690 --> 00:03:01.750
我们不需要添加 Android text 属性

00:03:01.750 --> 00:03:05.600
只是帮助我们看看是什么样子 而不用在运行时实际地看到它们

00:03:07.668 --> 00:03:11.670
我将切回设计面板 从设计预览中

00:03:11.670 --> 00:03:14.626
你将看到文本靠着左边缘和顶部边缘

00:03:14.626 --> 00:03:15.550
显示

00:03:15.550 --> 00:03:17.020
我们将需要添加一些内边距

00:03:17.020 --> 00:03:19.810
回到文本面板 在这里添加一些内边距

00:03:19.810 --> 00:03:24.140
现在在设计面板中看看效果如何

00:03:24.140 --> 00:03:27.340
这就是作出这些更改后 列表项布局的外观

00:03:27.340 --> 00:03:28.760
虽然不是应用中的列表项的最终外观效果

00:03:28.760 --> 00:03:31.930
但是已经很棒了

00:03:31.930 --> 00:03:33.470
我们可以继续在应用中显示数字列表了

