WEBVTT
Kind: captions
Language: en-US

00:00:00.260 --> 00:00:03.280
All right so we understand that it's
important to create apps that are smart

00:00:03.280 --> 00:00:06.040
about using a device's memory resources.

00:00:06.040 --> 00:00:09.390
So now let's discuss one way to do this
by implementing an efficient memory

00:00:09.390 --> 00:00:14.755
strategy to display a long list of data
which many mobile apps will need to do.

00:00:14.755 --> 00:00:17.455
So this strategy is
called View Recycling

00:00:17.455 --> 00:00:21.675
which means reusing views that are no
longer visible on the screen anymore.

00:00:21.675 --> 00:00:26.265
And by the way, when I say view, I mean
the whole layout for a single row.

00:00:26.265 --> 00:00:29.035
The layout for a single row is
probably created by a view group.

00:00:29.035 --> 00:00:30.445
So something like a linear layout or

00:00:30.445 --> 00:00:33.640
relative layout which can
contain multiple views.

00:00:33.640 --> 00:00:37.070
However, a view group
is just a view itself.

00:00:37.070 --> 00:00:41.330
And you may hear us refer to the layout
of a single row just as a view.

00:00:41.330 --> 00:00:43.660
Now the Miwok language is really big.

00:00:43.660 --> 00:00:46.590
And one way to go about creating
the app is we could create

00:00:46.590 --> 00:00:50.600
tens of thousands of list items and
add them to a vertical in your layout.

00:00:50.600 --> 00:00:52.530
But if you have that
many vocabulary words,

00:00:52.530 --> 00:00:55.380
it can become really slow to
scroll through the entire list.

00:00:55.380 --> 00:00:58.090
And the device could crash because
it can't hold all these list

00:00:58.090 --> 00:00:59.200
items in memory.

00:00:59.200 --> 00:01:02.160
Now remember,
memory is a limited resource.

00:01:02.160 --> 00:01:03.250
And the Android system and

00:01:03.250 --> 00:01:06.560
other apps need some memory
to keep running as well.

00:01:06.560 --> 00:01:08.580
Now there's a more
efficient way to do this.

00:01:08.580 --> 00:01:13.210
Using the ListView and ArrayAdapter,
we can create just enough views,

00:01:13.210 --> 00:01:17.770
meaning list item rows, based on
what we need to fill up the screen.

00:01:17.770 --> 00:01:19.950
This means if we scroll upwards.

00:01:19.950 --> 00:01:23.250
We no longer need to see the views
at the bottom of the screen.

00:01:23.250 --> 00:01:26.440
So let's just focus on the ListView and
ArrayAdapter structure.

00:01:26.440 --> 00:01:29.250
Now furthermore, we can recycle views.

00:01:29.250 --> 00:01:32.270
This means if a view is no
longer visible on screen.

00:01:32.270 --> 00:01:34.960
We can reuse it by changing the data.

00:01:34.960 --> 00:01:39.210
So changing out the data inside the view
such as the text in a text view,

00:01:39.210 --> 00:01:41.400
changing out the image in an image view.

00:01:41.400 --> 00:01:45.350
And we don't have to waste time creating
the entire view from scratch again.

00:01:45.350 --> 00:01:47.440
Now we take these extra views and

00:01:47.440 --> 00:01:51.130
put them in a scrap pile that
can be recycled and reused.

00:01:51.130 --> 00:01:55.150
And another term you may hear people
refer to them by is scrap views.

00:01:55.150 --> 00:01:58.760
So, we keep a scrap pile, which is
a bunch of views that aren't currently

00:01:58.760 --> 00:02:02.770
being shown on the screen right
now available for reuse later.

00:02:02.770 --> 00:02:03.970
So, recycling.

00:02:03.970 --> 00:02:07.480
So, to get into more details
of how recycling works say,

00:02:07.480 --> 00:02:10.550
for example the user is
scrolling the screen.

00:02:10.550 --> 00:02:14.140
So they want to go to the top of
the list to see the latest new tweets or

00:02:14.140 --> 00:02:15.638
news feed stories.

00:02:15.638 --> 00:02:20.150
Now the ListView realizes it needs to
create more list item rows quickly.

00:02:20.150 --> 00:02:23.680
So when the user scrolls it seems
like the list items were there

00:02:23.680 --> 00:02:25.050
just all along.

00:02:25.050 --> 00:02:27.425
Now instead of creating a new
list item from scratch,

00:02:27.425 --> 00:02:30.070
it can just reuse it
from the scrap pile.

00:02:30.070 --> 00:02:31.530
If they exist.

00:02:31.530 --> 00:02:32.370
So to summarize,

00:02:32.370 --> 00:02:36.680
we've created more rows on demand
by reusing views in the scrap pile.

00:02:36.680 --> 00:02:40.530
And then it just becomes a matter of
changing the data inside the views.

00:02:40.530 --> 00:02:43.288
So it shows the correct information for
that list item.

00:02:43.288 --> 00:02:47.380
Now the ListView is also smart enough
to know that the views that were at

00:02:47.380 --> 00:02:50.520
the bottom of the screen have
been scrolled off the screen.

00:02:50.520 --> 00:02:53.190
And these views are no longer
visible to the user, so

00:02:53.190 --> 00:02:54.990
they can just be added
to the scrap file.

00:02:54.990 --> 00:02:57.580
And as the user scrolls
even farther up the list,

00:02:57.580 --> 00:03:00.680
we can use that list item row that used
to be at the bottom of the screen.

00:03:01.970 --> 00:03:04.970
Now at the top of the screen, so

00:03:04.970 --> 00:03:09.750
the goal of all these is to create
as few list items as possible.

00:03:09.750 --> 00:03:14.960
Because it's expensive to inflate
views from XML to Java objects.

00:03:14.960 --> 00:03:19.250
Now, to prove to you that view
recycling minimizes memory usage.

00:03:19.250 --> 00:03:21.370
I've prepared two versions of the app.

00:03:21.370 --> 00:03:23.370
One in the current state of the app,

00:03:23.370 --> 00:03:27.500
that's using a vertical linear layout
with one text view per list item.

00:03:27.500 --> 00:03:31.270
And a second version of the app
using the ListView and ArrayAdapter.

00:03:32.310 --> 00:03:35.190
So the memory monitor tool is
included in Android studio

00:03:35.190 --> 00:03:38.330
to help you look at the amount of
resources that your app is using.

00:03:38.330 --> 00:03:41.960
So professional developers use
this tool to help them identify

00:03:41.960 --> 00:03:45.260
ways that they can minimize
resource usage on their app.

00:03:45.260 --> 00:03:48.260
The difference in memory usage
between using a linear layout and

00:03:48.260 --> 00:03:50.880
ListView ArrayAdopter
becomes more noticeable

00:03:50.880 --> 00:03:53.550
when the number of list items increases.

00:03:53.550 --> 00:03:55.820
So I'll be demo these two examples so

00:03:55.820 --> 00:03:59.180
that each one displays
a list of 1,000 words.

00:03:59.180 --> 00:04:02.215
Now here I am in Android Studio
looking at the linearly layout

00:04:02.215 --> 00:04:03.685
version of the app.

00:04:03.685 --> 00:04:08.505
And notice the NumbersActivity is
displaying a list of 1,000 words and

00:04:08.505 --> 00:04:11.345
here's what the app will look
like when we run our device.

00:04:11.345 --> 00:04:16.115
So tapping into the NumbersActivity
displays our long list of words.

00:04:16.115 --> 00:04:18.204
Now with our device
connected to the computer,

00:04:18.204 --> 00:04:21.745
we can run the memory monitor to
check the memory usage of this app.

00:04:21.745 --> 00:04:27.340
But before I can run I need to go
up here to tools &gt; Android and

00:04:27.340 --> 00:04:29.650
enable ADB integration.

00:04:29.650 --> 00:04:32.690
So ADB here stands for
Android debug bridge.

00:04:32.690 --> 00:04:35.360
So the connection between our device and
Android Studio.

00:04:36.850 --> 00:04:40.830
So once that's enabled, go down here to
Android monitor in the runtime window.

00:04:42.000 --> 00:04:44.700
Click it open and
I'm going to pull it up and

00:04:44.700 --> 00:04:46.169
then click here on the memory tab.

00:04:47.740 --> 00:04:51.960
So, this screen will allow me to view
the memory usage of my app over time.

00:04:51.960 --> 00:04:55.336
So, I'm going to go ahead and
run the app on our device.

00:04:55.336 --> 00:04:57.264
All right, so
with their device connected,

00:04:57.264 --> 00:04:58.796
we see the memory monitor running.

00:04:58.796 --> 00:05:02.895
And we can see the amount of allocated
memory used to just displayed the list

00:05:02.895 --> 00:05:03.816
of categories.

00:05:03.816 --> 00:05:06.385
So, I put up what the screen
looks like on our device now and

00:05:06.385 --> 00:05:08.700
let's see what happens to the emulator.

00:05:08.700 --> 00:05:10.805
When I tap into the NumbersActivity.

00:05:10.805 --> 00:05:15.005
[BLANK_AUDIO]

00:05:15.005 --> 00:05:17.070
Wow, notice that jump right there.

00:05:17.070 --> 00:05:20.049
So it went from around two
megabytes to about 14 megabytes.

00:05:21.100 --> 00:05:25.300
So is this increase, this jump in
allocated memory considered good or

00:05:25.300 --> 00:05:26.550
is it not so good?

00:05:27.730 --> 00:05:31.050
Well the best way to check is to
run a different version of the code

00:05:31.050 --> 00:05:32.580
on the same device.

00:05:32.580 --> 00:05:35.340
So we're going to be running it
on the same device because it has

00:05:35.340 --> 00:05:37.480
a controlled set of resources.

00:05:37.480 --> 00:05:41.602
Now to do that I'm going to hop on over
to a new version of the code that's

00:05:41.602 --> 00:05:46.444
using the ListView and ArrayAdapter to
display the same list of 1,000 words.

00:05:46.444 --> 00:05:50.414
Now here I'm looking at the ListView and
ArrayAdapter version of the code and

00:05:50.414 --> 00:05:53.485
it's also displaying that
same list of 1,000 words.

00:05:53.485 --> 00:05:56.204
And now let's take a look at what it
looks like when we run this code on

00:05:56.204 --> 00:05:56.739
our device.

00:05:57.830 --> 00:05:59.920
So the category screen looks the same.

00:05:59.920 --> 00:06:02.380
But when we tap into
the numbers activity

00:06:02.380 --> 00:06:06.650
notice that the list of 1,000
words appears but with dividers.

00:06:06.650 --> 00:06:10.110
And so we'll talk more about how and
why this works later on.

00:06:10.110 --> 00:06:11.325
Now back in Android Studio.

00:06:11.325 --> 00:06:14.405
I'm going to launch the memory
monitor the same way I did earlier.

00:06:14.405 --> 00:06:19.130
So down to Android Monitor here, pull
it up, and then go to the Memory tab.

00:06:19.130 --> 00:06:23.540
So notice that the memory monitor ran
after my device was connected because

00:06:23.540 --> 00:06:25.570
ADB was enabled.

00:06:25.570 --> 00:06:28.115
And the amount of allocated
memory stays constant

00:06:28.115 --> 00:06:30.535
when I'm on the category screen.

00:06:30.535 --> 00:06:33.239
Now notice what happens when I
tap into the numbers activity.

00:06:33.239 --> 00:06:36.740
[BLANK_AUDIO]

00:06:36.740 --> 00:06:38.565
So notice that slight jump there.

00:06:38.565 --> 00:06:42.880
So the number went from
about 12.71 to about 12.84.

00:06:42.880 --> 00:06:47.149
So that's barely 0.1 megabyte
increase in memory going from

00:06:47.149 --> 00:06:51.310
the category screen into
the numbers activity.

00:06:51.310 --> 00:06:54.520
So this time the amount of memory
used to display the list of numbers

00:06:54.520 --> 00:06:58.840
was a lot smaller than when we use
the linear layout version of the code.

00:06:58.840 --> 00:07:02.900
And since we're using a small amount
of memory, this version of the code

00:07:02.900 --> 00:07:06.890
using the ListView and ArrayAdapter will
run more smoothly on lower end devices.

00:07:07.900 --> 00:07:11.330
Now let's take a look closer
into the memory monitor here.

00:07:11.330 --> 00:07:13.530
So it's actually showing us two things.

00:07:13.530 --> 00:07:16.300
So the dark blue section
is the allocated memory

00:07:16.300 --> 00:07:19.080
which is the memory our device
is using at any given time.

00:07:20.430 --> 00:07:23.420
And the light blue section
here is the free memory.

00:07:23.420 --> 00:07:26.040
So, that's the memory
available on the device.

00:07:26.040 --> 00:07:29.210
While it may be tempting to use up
all the free memory on your device

00:07:29.210 --> 00:07:30.910
to make your app look a little cooler,

00:07:30.910 --> 00:07:34.390
remember that your app isn't the only
one installed on the user's device.

00:07:34.390 --> 00:07:38.450
And it's important to leave as much
resources for other apps as you can.

00:07:38.450 --> 00:07:41.390
Now here are two screenshots
from the memory monitor for

00:07:41.390 --> 00:07:43.210
our two versions of the app.

00:07:43.210 --> 00:07:48.010
So this left side here is the version
one of the app using the linear layout.

00:07:48.010 --> 00:07:51.881
And the right hand side here is version
two of the app using ListView and

00:07:51.881 --> 00:07:53.120
ArrayAdapter.

00:07:53.120 --> 00:07:56.800
Remember that the allocated memory is
shown in the dark blue section and

00:07:56.800 --> 00:07:58.700
the free memory is shown
in the light blue section.

00:07:59.810 --> 00:08:04.180
Notice that in both cases the jump to
an allocated memory occurs when the user

00:08:04.180 --> 00:08:07.500
clicks on the numbers category to
navigate to that list of numbers words.

00:08:08.590 --> 00:08:11.760
So let's zoom in to the linear
layout version of the app, and

00:08:11.760 --> 00:08:16.910
we see the jump occurs from about
11 megabytes to about 14 megabytes.

00:08:16.910 --> 00:08:21.025
So this is about three megabyte usage
of memory used to display that list of

00:08:21.025 --> 00:08:21.870
1,000 words.

00:08:23.070 --> 00:08:26.450
Now compare this to when we use
the ListView and ArrayAdapter.

00:08:26.450 --> 00:08:31.400
And it's barely using 0.5 megabytes to
display an entire list of 1,000 words.

00:08:32.520 --> 00:08:34.174
So after seeing these two examples.

00:08:34.174 --> 00:08:36.799
I'd like you to check out
the links below to learn more

00:08:36.799 --> 00:08:38.659
about using the memory monitor tool.

00:08:38.659 --> 00:08:40.900
And other ways that you can
improve your app's performance.

