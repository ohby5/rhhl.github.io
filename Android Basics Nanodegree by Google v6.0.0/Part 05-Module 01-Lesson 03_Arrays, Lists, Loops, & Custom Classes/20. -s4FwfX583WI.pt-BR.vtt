WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.701
Vamos ver o código que
adicionamos no último exercício.

00:00:03.734 --> 00:00:06.901
Tem muita coisa acontecendo
só nessas 3 linhas.

00:00:06.934 --> 00:00:09.834
Em alto nível, estamos
criando um ArrayAdapter

00:00:09.868 --> 00:00:13.400
que tem uma lista de strings
como fonte de dados.

00:00:13.434 --> 00:00:15.934
Depois, buscamos
na hierarquia da exibição

00:00:15.968 --> 00:00:19.367
a ListView que foi definida
no nosso layout XML.

00:00:19.400 --> 00:00:22.701
Então associamos o ArrayAdapter
com a ListView.

00:00:22.734 --> 00:00:25.300
Para uma explicação
mais detalhada disto,

00:00:25.334 --> 00:00:27.367
vamos ver
uma linha de cada vez.

00:00:27.400 --> 00:00:29.868
Primeiro criamos um objeto
ArrayAdapter

00:00:29.901 --> 00:00:31.634
usando a palavra new

00:00:31.667 --> 00:00:34.400
e o construtor
com 3 parâmetros.

00:00:34.434 --> 00:00:36.701
O guardamos
em uma nova variável

00:00:36.734 --> 00:00:39.167
que chamamos
de itemsAdapter,

00:00:39.200 --> 00:00:42.033
que é do tipo ArrayAdapter.

00:00:42.067 --> 00:00:45.300
Como sabemos que devemos
passar esses 3 parâmetros?

00:00:45.334 --> 00:00:47.133
Vamos ver a documentação.

00:00:47.167 --> 00:00:50.767
Aqui está a documentação
para o ArrayAdapter.

00:00:50.801 --> 00:00:53.801
Se buscar na internet
por ArrayAdapter Android,

00:00:53.834 --> 00:00:55.901
você também encontra
esta página.

00:00:55.934 --> 00:00:59.234
Vamos descer
até a seção de construtores.

00:00:59.267 --> 00:01:03.467
Ela nos conta as diferentes formas
de criar um novo ArrayAdapter.

00:01:03.501 --> 00:01:06.400
Cada construtor requer
parâmetros diferentes.

00:01:06.434 --> 00:01:09.667
Temos usado
o penúltimo construtor.

00:01:09.701 --> 00:01:12.534
Este é o código
que temos usado

00:01:12.567 --> 00:01:15.133
no arquivo numbers_activity.

00:01:15.167 --> 00:01:20.734
Note que passamos o contexto,
que se refere a numbers_activity,

00:01:20.767 --> 00:01:24.968
o arquivo de layout,
e a lista de objetos.

00:01:25.000 --> 00:01:28.567
Precisamos de um contexto
porque estamos criando exibições.

00:01:28.601 --> 00:01:31.000
Como o numbers_activity
é um contexto,

00:01:31.033 --> 00:01:34.901
usamos a palavra "this" para
nos referirmos a numbers_activity.

00:01:34.934 --> 00:01:38.667
O segundo parâmetro é o arquivo
de layout do item da lista.

00:01:38.701 --> 00:01:41.734
Normalmente nos referimos
aos arquivos de layout

00:01:41.767 --> 00:01:45.133
como R.layout para
layouts que nós definimos,

00:01:45.167 --> 00:01:47.601
seguido do nome
do arquivo de layout.

00:01:47.634 --> 00:01:52.100
Neste caso, passamos
android.R.layout,

00:01:52.133 --> 00:01:56.567
porque o framework Android
tem um layout XML pré-definido,

00:01:56.601 --> 00:01:59.267
chamado simple_list_item_1,

00:01:59.300 --> 00:02:03.067
e podemos usar este
que o Android definiu para nós.

00:02:03.100 --> 00:02:05.901
O último parâmetro
é a lista de objetos

00:02:05.934 --> 00:02:09.133
que será a fonte de dados
para o ArrayAdapter.

00:02:09.167 --> 00:02:11.367
No nosso caso,
são palavras.

00:02:11.400 --> 00:02:14.701
No início da aula,
falamos de classes genéricas,

00:02:14.734 --> 00:02:17.601
quando criamos um ArrayList
de strings.

00:02:17.634 --> 00:02:20.868
Lembre que é um ArrayList,
e não um ArrayAdapter.

00:02:20.901 --> 00:02:23.734
Como ArrayList é
uma classe genérica,

00:02:23.767 --> 00:02:29.033
podemos reescrevê-la
com E dentro dos parênteses,

00:02:29.067 --> 00:02:31.534
para indicar
que é uma classe genérica.

00:02:31.567 --> 00:02:34.067
Lembre que E
é um parâmetro de tipo,

00:02:34.100 --> 00:02:38.267
um marcador que pode ser trocado
por um tipo específico de objeto,

00:02:38.300 --> 00:02:41.834
como strings, quando criamos
uma instância de ArrayList.

00:02:41.868 --> 00:02:45.868
Criar uma classe genérica
nos permite deixar a decisão

00:02:45.901 --> 00:02:49.067
de que tipo de dados ela guardará
para mais tarde,

00:02:49.100 --> 00:02:51.968
em vez de criar
muitas classes específicas,

00:02:52.000 --> 00:02:54.400
como uma classe
para lista de strings,

00:02:54.434 --> 00:02:56.534
uma para inteiros,
uma booleana,

00:02:56.567 --> 00:02:59.467
e qualquer outro tipo
de lista de objetos.

00:02:59.501 --> 00:03:03.334
Voltando à discussão
sobre o ArrayAdapter,

00:03:03.367 --> 00:03:07.100
aqui está a documentação
do ArrayAdapter.

00:03:07.133 --> 00:03:12.434
Vemos que o ArrayAdapter
tem a sintaxe &lt;T&gt;,

00:03:12.467 --> 00:03:15.434
o que indica que também
é uma classe genérica.

00:03:15.467 --> 00:03:18.334
T, assim como E,
é um parâmetro de tipo,

00:03:18.367 --> 00:03:22.033
que pode ser trocado
por um tipo específico de objeto.

00:03:22.067 --> 00:03:25.667
Especificamente,
o T é de Tipo de dados,

00:03:25.701 --> 00:03:29.501
porque diz que tipo de dados
vai estar no vetor.

00:03:29.534 --> 00:03:34.400
No nosso caso específico,
é um vetor do tipo strings.

00:03:34.434 --> 00:03:37.000
Agora estamos criando
um ArrayAdapter

00:03:37.033 --> 00:03:39.434
que recebe strings,

00:03:39.467 --> 00:03:43.934
e vamos criar itens de exibição
para cada elemento string.

00:03:43.968 --> 00:03:45.968
De volta à tabela
de comparação,

00:03:46.000 --> 00:03:49.434
que mostra por que é melhor
criar uma classe genérica

00:03:49.467 --> 00:03:53.300
do que criar uma classe
para cada tipo possível.

00:03:53.334 --> 00:03:57.601
Aqui, vemos que no ArrayAdapter
podemos substituir o T

00:03:57.634 --> 00:04:00.167
por qualquer tipo
específico de objeto.

00:04:00.200 --> 00:04:04.968
No nosso caso, vamos substituir
pelo tipo de dados string.

00:04:05.000 --> 00:04:08.234
Aconteceu muita coisa
nesta linha de código.

00:04:08.267 --> 00:04:10.200
Vamos para a segunda linha.

00:04:10.234 --> 00:04:14.601
Procuramos na hierarquia da exibição,
por uma exibição com o nome de lista,

00:04:14.634 --> 00:04:17.367
e o método findViewById
retorna uma exibição

00:04:17.400 --> 00:04:20.767
e então a colocamos
no tipo de dados ListView.

00:04:20.801 --> 00:04:24.734
Isso não funcionaria se fosse
uma exibição de texto ou de imagem.

00:04:24.767 --> 00:04:29.767
Neste caso, funciona porque
encontramos uma ListView no layout.

00:04:29.801 --> 00:04:33.133
Guardamos esta ListView
na variável chamada listView.

00:04:33.167 --> 00:04:35.801
Podemos chamar métodos
e interagir com ela

00:04:35.834 --> 00:04:37.133
enquanto o app roda.

00:04:37.167 --> 00:04:41.000
Agora vamos à última linha.
Aqui diz listView.setAdapter,

00:04:41.033 --> 00:04:43.834
e recebe itemsAdapter
como seu parâmetro.

00:04:43.868 --> 00:04:46.133
Estamos chamando
o método setAdapter

00:04:46.167 --> 00:04:49.400
do objeto ListView
que definimos na linha anterior.

00:04:49.434 --> 00:04:54.901
Indo à documentação do ListView
e procurando pelo setAdapter,

00:04:54.934 --> 00:04:58.033
vemos que este método
recebe um parâmetro.

00:04:58.067 --> 00:05:01.334
Ele requer um objeto
do tipo ListAdapter,

00:05:01.367 --> 00:05:04.267
mas no nosso código,
só temos um ArrayAdapter,

00:05:04.300 --> 00:05:05.667
e não um ListAdapter.

00:05:05.701 --> 00:05:09.100
Vamos clicar em ListAdapter
para ter mais informações.

00:05:09.133 --> 00:05:11.968
Agora estamos na documentação
do ListAdapter,

00:05:12.000 --> 00:05:14.767
e descendo um pouco
até os métodos públicos,

00:05:14.801 --> 00:05:17.133
vemos que tem
dois métodos abstratos.

00:05:17.167 --> 00:05:21.267
No topo do documento diz que
este adaptador é uma interface.

00:05:21.300 --> 00:05:24.701
Lembre que aprendemos sobre
interfaces na última aula.

00:05:24.734 --> 00:05:26.968
OnClickListener
é uma interface.

00:05:27.000 --> 00:05:30.400
Mas precisamos fornecer
uma implementação dos métodos,

00:05:30.434 --> 00:05:35.067
precisamos criar uma classe que
implemente a interface ListAdapter

00:05:35.100 --> 00:05:38.501
para colocar corretamente
um adaptador na ListView.

00:05:38.534 --> 00:05:41.868
A equipe Android
já fez isso para nós.

00:05:41.901 --> 00:05:46.000
Podemos criar nossa própria classe
que implemente a interface,

00:05:46.033 --> 00:05:48.734
mas ArrayAdapter
faz o que queremos.

00:05:48.767 --> 00:05:52.300
Vamos olhar de novo
a documentação do ArrayAdapter.

00:05:52.334 --> 00:05:55.367
Podemos ver o diagrama
de hierarquia de classes.

00:05:55.400 --> 00:05:58.601
O ArrayAdapter
se estende do BaseAdapter.

00:05:58.634 --> 00:06:00.434
Vamos olhar isso.

00:06:00.467 --> 00:06:03.734
Aqui diz que BaseAdapter
é uma classe abstrata.

00:06:03.767 --> 00:06:07.200
Veja: ela implementa
a interface ListAdapter.

00:06:07.234 --> 00:06:12.534
Então BaseAdapter pode ser usado
quando se requer uma ListAdapter.

00:06:12.567 --> 00:06:17.400
ArrayAdapter pode ser usado
quando se requer ListAdapter.

00:06:17.434 --> 00:06:21.534
Sei que seguimos muitos links
e pareceu um labirinto.

00:06:21.567 --> 00:06:23.367
Obrigada por acompanhar.

00:06:23.400 --> 00:06:27.267
Vou fazer um resumo
da informação que mencionamos.

00:06:27.300 --> 00:06:31.634
Este gráfico mostra as diferenças
entre a classe concreta,

00:06:31.667 --> 00:06:33.868
a classe abstrata,
e as interfaces.

00:06:33.901 --> 00:06:38.400
Vamos falar sobre como adaptadores
se aplicam nessas categorias.

00:06:38.434 --> 00:06:44.033
O método setAdapter da ListView
espera receber um ListAdapter.

00:06:44.067 --> 00:06:46.634
ListAdapter é uma interface.

00:06:46.667 --> 00:06:51.300
Nenhum estado é implementado
e todos os métodos são abstratos.

00:06:51.334 --> 00:06:56.601
A equipe Android também criou
uma classe BaseAdapter,

00:06:56.634 --> 00:06:59.834
uma classe abstrata
que fornece uma implementação

00:06:59.868 --> 00:07:02.734
de alguns métodos
do ListAdapter.

00:07:02.767 --> 00:07:06.000
Mas também deixa alguns métodos
como abstratos.

00:07:06.033 --> 00:07:08.567
É aqui que entra
o ArrayAdapter.

00:07:08.601 --> 00:07:11.400
ArrayAdapter
é uma classe concreta

00:07:11.434 --> 00:07:13.634
que implementa métodos.

00:07:13.667 --> 00:07:16.033
Não tem métodos abstratos

00:07:16.067 --> 00:07:19.434
e podemos criar um objeto
que instancia ArrayAdapter

00:07:19.467 --> 00:07:21.300
para usar no nosso app.

00:07:21.334 --> 00:07:24.834
Já verificamos que ArrayAdapter
é um ListAdapter,

00:07:24.868 --> 00:07:28.367
então podemos passar
a variável itemsAdapter

00:07:28.400 --> 00:07:31.868
para o método setAdapter
da ListView.

00:07:31.901 --> 00:07:36.434
Bom trabalho. Essas 3 linhas
são muito poderosas.

00:07:36.467 --> 00:07:39.167
Sei que é muita informação
ao mesmo tempo,

00:07:39.200 --> 00:07:42.501
mas vale a pena gastar tempo
para entender tudo,

00:07:42.534 --> 00:07:46.434
porque o adaptador
é um padrão comum no Android.

00:07:46.467 --> 00:07:49.300
O adaptador sabe
sobre a fonte de dados,

00:07:49.334 --> 00:07:51.667
se é um vetor ou uma lista.

00:07:51.701 --> 00:07:54.367
Ele sabe apresentar
os itens como exibição.

00:07:54.400 --> 00:07:58.200
Enquanto isso, a ListView cuida
de mostrar os itens na tela,

00:07:58.234 --> 00:08:00.767
detectar os gestos
de toque do usuário,

00:08:00.801 --> 00:08:05.267
e manter o estado de
onde o usuário está na lista.

00:08:05.300 --> 00:08:09.067
Estas 3 linhas de código
resumem esta interação

00:08:09.100 --> 00:08:11.300
entre o ListView
e o ArrayAdapter.

00:08:11.334 --> 00:08:13.200
Vamos falar mais nisso
depois.

00:08:13.234 --> 00:08:16.868
É como uma separação
entre a interface com o usuário

00:08:16.901 --> 00:08:18.801
e o modelo de dados.

00:08:18.834 --> 00:08:21.534
Não é uma separação exata,

00:08:21.567 --> 00:08:24.367
porque o adaptador
lida com as exibições,

00:08:24.400 --> 00:08:27.467
mas a ListView é mais
responsável pelos detalhes

00:08:27.501 --> 00:08:29.234
da interface com o usuário,

00:08:29.267 --> 00:08:31.234
e o adaptador pelos dados.

00:08:31.267 --> 00:08:35.400
Por ser separado, podemos trocar
uma parte por outra.

00:08:35.434 --> 00:08:39.767
Pode ligar o mesmo ArrayAdapter
em uma GridView.

00:08:39.801 --> 00:08:42.834
O ArrayAdapter permanece
exatamente o mesmo

00:08:42.868 --> 00:08:45.634
e em vez de mostrar
uma lista por linhas,

00:08:45.667 --> 00:08:48.701
a GridView agora pede
exibições de itens de tabela.

00:08:48.734 --> 00:08:53.434
Esta se torna a posição zero,
posição 1, e por aí vai.

00:08:53.467 --> 00:08:57.067
O adaptador continua fornecendo
cada uma das exibições.

00:08:57.100 --> 00:08:59.868
Você já viu
os menus do Android?

00:08:59.901 --> 00:09:02.934
Eles se chamam spinners.

00:09:02.968 --> 00:09:04.133
Adivinhe?

00:09:04.167 --> 00:09:06.434
Para povoar
os itens do menu,

00:09:06.467 --> 00:09:08.334
ligamos um adaptador a ele.

00:09:08.367 --> 00:09:12.467
Cada item do menu
vem de um item na fonte de dados.

00:09:12.501 --> 00:09:16.734
Você encontra este padrão
ao construir apps no Android.

00:09:16.767 --> 00:09:19.334
É crítico que você
entenda isso agora.

00:09:19.367 --> 00:09:22.801
Daqui a pouco, vamos ver
o padrão aparecer de novo

00:09:22.834 --> 00:09:24.100
na aula 5.

00:09:24.133 --> 00:09:25.701
Para a próxima tarefa,

00:09:25.734 --> 00:09:28.834
tente modificar o código
do ListView e do Adapter

00:09:28.868 --> 00:09:30.501
e veja o que acontece.

00:09:30.534 --> 00:09:33.834
Tente usar o GridView
em vez do ListView.

00:09:33.868 --> 00:09:36.501
O GridView
também recicla as exibições

00:09:36.534 --> 00:09:39.767
e precisa de um adaptador
para saber o que mostrar.

00:09:39.801 --> 00:09:42.167
Isso é só
para experimentar.

00:09:42.200 --> 00:09:47.167
No final da tarefa, vou pedir
para voltar a usar a ListView.

00:09:47.200 --> 00:09:49.801
Aqui estão
as instruções específicas.

00:09:49.834 --> 00:09:52.868
Em vez de usar ListView,
tente usar uma GridView

00:09:52.901 --> 00:09:55.667
para mostrar as palavras
na NumbersActivity.

00:09:55.701 --> 00:09:58.601
Pode usar o mesmo adaptador
que criamos antes.

00:09:58.634 --> 00:10:00.067
Se precisar de ajuda,

00:10:00.100 --> 00:10:02.467
pode ler o artigo
que anexei abaixo,

00:10:02.501 --> 00:10:04.067
que fala sobre GridView.

00:10:04.100 --> 00:10:07.767
Mas quero que você saiba,
antes que se perca demais,

00:10:07.801 --> 00:10:11.267
e que comece a copiar
muito código do artigo.

00:10:11.300 --> 00:10:16.634
A tarefa de trocar
de ListView para GridView

00:10:16.667 --> 00:10:20.934
pode ser feita no app miwok
só mudando algumas linhas.

00:10:20.968 --> 00:10:26.767
Depois de tentar esta tarefa,
volte a usar a ListView.

00:10:26.801 --> 00:10:29.467
Boa sorte!
Divirta-se experimentando.

