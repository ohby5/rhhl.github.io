WEBVTT
Kind: captions
Language: zh-CN

00:00:00.450 --> 00:00:04.040
现在我们来看看你在上个编程任务中添加的代码

00:00:04.040 --> 00:00:07.030
这三行代码实现了很多内容

00:00:07.030 --> 00:00:09.970
从更改层次来看 我们创建的是 ArrayAdapter

00:00:09.970 --> 00:00:12.550
并包含了字符串列表作为其数据来源

00:00:13.730 --> 00:00:16.040
然后我们搜索 ListView 的视图层级

00:00:16.040 --> 00:00:19.580
ListView 在 XML 布局中进行了定义

00:00:19.580 --> 00:00:22.050
然后我们将 ArrayAdapter 与 ListView 相关联

00:00:23.130 --> 00:00:25.470
下面详细解释下所发生的情况

00:00:25.470 --> 00:00:27.620
我们一行行地研究

00:00:27.620 --> 00:00:32.080
首先我们使用 new 关键字以及具有三个输入参数的构造函数

00:00:32.080 --> 00:00:33.650
创建了一个 ArrayAdapter 对象

00:00:35.260 --> 00:00:39.430
我们将其存储在了新的变量中 称之为 itemsAdapter

00:00:39.430 --> 00:00:42.440
其数据类型是 ArrayAdapter

00:00:42.440 --> 00:00:45.250
我们是如何知道要传入这三个输入参数的？

00:00:45.250 --> 00:00:47.300
我们来看看相关文档

00:00:47.300 --> 00:00:51.070
这是关于 ArrayAdapter 的 Android Developers 文档

00:00:51.070 --> 00:00:56.000
如果你在网上搜索 ArrayAdapter Android 也能找到该页面

00:00:56.000 --> 00:00:59.620
我们向下滚动到“Public Constructors”部分

00:00:59.620 --> 00:01:02.420
这里介绍了创建新的 ArrayAdapter 可以采用的不同方式

00:01:03.720 --> 00:01:06.580
每个构造函数都需要不同的输入参数

00:01:06.580 --> 00:01:08.670
我们使用的是这里的第二个构造函数

00:01:10.240 --> 00:01:14.070
这是我们在 NumbersActivity 文件中使用的代码

00:01:15.360 --> 00:01:21.010
我们传入了 Context（指的是 NumbersActivity）

00:01:21.010 --> 00:01:23.810
布局文件和对象列表

00:01:25.230 --> 00:01:28.790
我们需要 Context 是因为我们要创建视图

00:01:28.790 --> 00:01:31.490
因为 NumbersActivity 是个 Context

00:01:31.490 --> 00:01:35.010
我们用单词“this”来指代 NumbersActivity

00:01:35.010 --> 00:01:37.500
第二个参数是列表项布局文件

00:01:38.680 --> 00:01:43.580
通常我们用 R.layout 的格式来指代布局文件

00:01:43.580 --> 00:01:46.640
即我们定义的布局 然后是布局文件的名称

00:01:47.800 --> 00:01:53.280
在这里 我们指定为 android.R.layout 因为 Android 框架

00:01:53.280 --> 00:01:59.460
实际上预定义了一个 XML 布局文件 叫做 simple_list_item_1

00:01:59.460 --> 00:02:03.240
我们可以直接使用 Android 预定义的这个文件

00:02:03.240 --> 00:02:07.630
最后一个参数是对象列表 即 ArrayAdapter 的

00:02:07.630 --> 00:02:09.360
数据来源

00:02:09.360 --> 00:02:11.600
对我们来说是 words

00:02:11.600 --> 00:02:14.800
在这节课的之前部分 当我们创建字符串 ArrayList 时

00:02:14.800 --> 00:02:17.720
我们讨论了泛型

00:02:17.720 --> 00:02:21.088
注意这里是 ArrayList 而不是 ArrayAdapter

00:02:21.088 --> 00:02:25.240
因为 ArrayList 是个泛型类 我们可以重写成

00:02:25.240 --> 00:02:27.230
ArrayList&lt;E&gt;

00:02:27.230 --> 00:02:31.760
尖括号里的 E 表示它是个泛型类

00:02:31.760 --> 00:02:34.280
E 是类型参数或占位符

00:02:34.280 --> 00:02:38.210
可以替换为具体的对象类型

00:02:38.210 --> 00:02:42.040
例如当我们创建 ArrayList 实例时可以替换为字符串

00:02:42.040 --> 00:02:46.080
创建一个泛型类可以让我们

00:02:46.080 --> 00:02:50.730
稍后判断它将存储的数据类型

00:02:50.730 --> 00:02:55.415
而不用创建多个具体的类 例如 StringList 类 IntegerList 类

00:02:55.415 --> 00:02:59.780
Boolean 类或任何其他对象类型的列表类

00:02:59.780 --> 00:03:03.570
再回来继续讨论 ArrayAdapter

00:03:03.570 --> 00:03:07.330
这是关于 ArrayAdapter 的文档

00:03:07.330 --> 00:03:11.710
我们在这里看到 ArrayAdapter 后面跟着 &lt;T&gt;

00:03:11.710 --> 00:03:15.520
表示它也是泛型类

00:03:15.520 --> 00:03:19.780
和 E 一样 T 也是一种类型参数 可以替换为

00:03:19.780 --> 00:03:22.200
具体的数据对象类型

00:03:22.200 --> 00:03:24.870
具体来说 T 表示的是数据类型

00:03:24.870 --> 00:03:29.870
因为我们需要指出数组中的数据是什么类型

00:03:29.870 --> 00:03:34.660
对我们来说 我们的数组数据类型是字符串

00:03:34.660 --> 00:03:39.810
我们要创建一个 ArrayAdapter 传入的是字符串

00:03:39.810 --> 00:03:44.230
并且将为每个字符串元素创建列表项视图

00:03:44.230 --> 00:03:48.340
回到这个对比表格 其中展示了为何创建一种泛型类

00:03:48.340 --> 00:03:53.630
比为尽可能每种类型的列表都创建一个类要更合适

00:03:53.630 --> 00:03:55.120
这里 我们看到

00:03:55.120 --> 00:04:00.190
对于 ArrayAdapter 我们可以将 T 替换为任何其他对象数据类型

00:04:00.190 --> 00:04:04.120
对我们来说 我们将 T 替换为字符串数据类型

00:04:05.338 --> 00:04:08.330
这一行代码发生了很多内容

00:04:08.330 --> 00:04:10.350
我们再来看看第二行

00:04:10.350 --> 00:04:12.430
这里我们看到的是视图的视图层级

00:04:12.430 --> 00:04:17.550
其中 ID 名称是 list findViewById 方法返回了视图

00:04:17.550 --> 00:04:20.890
然后我们可以将其投射到 ListView 数据类型

00:04:20.890 --> 00:04:24.920
如果我们找到 TextView 或 ImageView 就能投射

00:04:24.920 --> 00:04:28.930
这里可以投射 因为我们实际上在布局中找到了

00:04:28.930 --> 00:04:29.950
ListView

00:04:29.950 --> 00:04:33.730
我们将此 ListView 存储到变量 ListView 中

00:04:33.730 --> 00:04:35.150
我们可以对其调用方法

00:04:35.150 --> 00:04:37.130
在应用运行时与其互动

00:04:37.130 --> 00:04:38.300
现在再看看最后一行代码

00:04:38.300 --> 00:04:41.210
写着 listView.setAdapter

00:04:41.210 --> 00:04:44.260
并将 itemsAdapter 作为输入参数

00:04:44.260 --> 00:04:48.010
我们对在上一行中定义的 ListView 对象

00:04:48.010 --> 00:04:49.660
调用 setAdapter() 方法

00:04:49.660 --> 00:04:55.140
现在我们转到 ListView 文档并搜索 setAdapter

00:04:55.140 --> 00:04:58.230
我们看到该方法有一个输入参数

00:04:58.230 --> 00:05:01.860
要求对象类型为 ListAdapter

00:05:01.860 --> 00:05:06.160
但在我们的代码中我们只有 ArrayAdapter 而不是 ListAdapter

00:05:06.160 --> 00:05:09.270
我们点开 ListAdapter 了解下详细信息

00:05:09.270 --> 00:05:12.890
现在我们进入了 ListAdapter 文档 稍微往下滚动下

00:05:12.890 --> 00:05:17.250
转到 Public Methods 部分 我们看到它有 2 个抽象方法

00:05:17.250 --> 00:05:21.640
转到文档顶部 这里写着该适配器是接口

00:05:21.640 --> 00:05:24.440
我们在上一节课中学习了接口

00:05:24.440 --> 00:05:27.180
知道 onClickListener 是个接口

00:05:27.180 --> 00:05:31.110
但是我们需要为方法提供实现

00:05:31.110 --> 00:05:34.590
也就是我们需要创建一个类来实现 ListAdapter 接口

00:05:34.590 --> 00:05:38.710
以便正确地在 ListView 上设置适配器

00:05:38.710 --> 00:05:42.320
幸运的是 Android 团队已经为我们这么做了

00:05:42.320 --> 00:05:46.250
我们可以随便创建自己的类来实现 ListAdapter 接口

00:05:46.250 --> 00:05:48.820
而 ArrayAdapter 正好满足我们的需求

00:05:48.820 --> 00:05:52.780
我们再回来看看 ArrayAdapter 文档

00:05:52.780 --> 00:05:55.360
我们可以看看类层级图表

00:05:55.360 --> 00:05:58.670
ArrayAdapter 继承于 BaseAdapter

00:05:58.670 --> 00:06:00.490
我们来看看 BaseAdapter

00:06:00.490 --> 00:06:03.890
文中指出 BaseAdapter 是个抽象类

00:06:03.890 --> 00:06:06.370
它实现的是 ListAdapter 接口

00:06:07.520 --> 00:06:12.760
意味着 BaseAdapter 可在需要 ListAdapter 的时候使用

00:06:12.760 --> 00:06:16.200
并且 ArrayAdapter 可在需要 ListAdapter 的时候使用

00:06:16.200 --> 00:06:20.510
我知道要打开好多的链接

00:06:20.510 --> 00:06:21.730
看起来就像个迷宫一样

00:06:21.730 --> 00:06:23.098
感谢你一直认真地聆听

00:06:23.098 --> 00:06:27.640
我将总结下刚刚讨论的信息

00:06:27.640 --> 00:06:31.960
在这个图表中 显示了具体类 抽象类和接口

00:06:31.960 --> 00:06:35.020
之间的区别

00:06:35.020 --> 00:06:38.630
我们将讨论下适配器可以如何应用到每个类别

00:06:38.630 --> 00:06:44.250
ListView.setAdapter() 方法需要 ListAdapter 作为其输入参数

00:06:44.250 --> 00:06:46.920
所以 ListAdapter 是个接口

00:06:46.920 --> 00:06:49.580
意味着没有实现任何状态

00:06:49.580 --> 00:06:51.530
所有方法都是抽象的

00:06:51.530 --> 00:06:56.800
此外 Android 团队创建了 BaseAdapter 类

00:06:56.800 --> 00:07:00.080
它是个抽象类 为 ListAdapter 的某些方法

00:07:00.080 --> 00:07:02.910
提供了实现

00:07:02.910 --> 00:07:06.190
同时让其他某些方法保留为抽象方法

00:07:06.190 --> 00:07:08.692
这时候就需要 ArrayAdapter 了

00:07:08.692 --> 00:07:13.780
ArrayAdapter 是个具体类 方法都实现了

00:07:13.780 --> 00:07:16.380
没有方法保留为抽象方法

00:07:16.380 --> 00:07:21.480
我们可以创建一个 ArrayAdapter 对象实例并用在我们的应用中

00:07:21.480 --> 00:07:25.010
因为我们已经验证了 ArrayAdapter 是个 ListAdapter

00:07:25.010 --> 00:07:28.570
我们可以将 itemsAdapter 变量传入为

00:07:28.570 --> 00:07:32.110
listView.setAdapter() 方法调用的输入参数

00:07:32.110 --> 00:07:32.990
嘿 太棒了

00:07:32.990 --> 00:07:35.560
现在你已经知道这三行代码的作用有多强大

00:07:36.720 --> 00:07:39.500
我知道一次要消化很多的信息

00:07:39.500 --> 00:07:42.720
但是绝对值得你去花时间理解所有这些知识点

00:07:42.720 --> 00:07:45.490
因为在 Android 中适配器是个非常常见的模式

00:07:46.770 --> 00:07:51.850
适配器知道数据来源是什么 例如数组或列表

00:07:51.850 --> 00:07:54.850
并且知道如何将每项呈现为视图

00:07:54.850 --> 00:07:58.460
与此同时 ListView 负责在屏幕上显示这些视图

00:07:58.460 --> 00:08:00.840
检测用户的触摸手势

00:08:00.840 --> 00:08:05.460
并跟踪用户是否位于整个列表中

00:08:05.460 --> 00:08:08.390
这三行代码总结了

00:08:08.390 --> 00:08:11.440
ListView 和 ArrayAdapter 之间的这些互动关系

00:08:11.440 --> 00:08:13.240
稍后我们将再详细讲解下

00:08:13.240 --> 00:08:17.010
暂时你可以想象成用户界面与数据模型之间

00:08:17.010 --> 00:08:17.850
是分开的

00:08:19.220 --> 00:08:21.710
分开的并不完全清晰

00:08:21.710 --> 00:08:25.070
因为 ArrayAdapter 处理的是视图

00:08:25.070 --> 00:08:28.890
但是主要是 ListView 负责处理用户界面的细节内容

00:08:28.890 --> 00:08:31.390
而适配器负责数据

00:08:31.390 --> 00:08:35.570
因为二者是分开的 你可以将某部分替换为其他内容

00:08:35.570 --> 00:08:40.010
例如 你可以将同一 ArrayAdapter 与 GridView 相关联

00:08:40.010 --> 00:08:43.200
ArrayAdapter 完全保持不变

00:08:43.200 --> 00:08:48.830
GridView 请求的是网格项视图 而不是列表项行

00:08:48.830 --> 00:08:52.160
变成位置 0 位置 1

00:08:52.160 --> 00:08:53.680
等等

00:08:53.680 --> 00:08:57.300
适配器依然负责提供这里的每个视图

00:08:57.300 --> 00:09:00.090
你看过 Android 中的下拉菜单吗？

00:09:00.090 --> 00:09:03.100
在 Android 中 这些叫做 Spinner

00:09:03.100 --> 00:09:04.190
猜怎么着？

00:09:04.190 --> 00:09:08.380
要填充下拉菜单中的每项 我们为其关联了一个适配器

00:09:08.380 --> 00:09:12.600
菜单中的每项都来自数据来源中的某项

00:09:12.600 --> 00:09:15.560
可以看出 当你构建 Android 应用时 就会遇到

00:09:15.560 --> 00:09:16.860
适配器模式

00:09:16.860 --> 00:09:19.510
所以一定要现在就明白这些内容

00:09:19.510 --> 00:09:24.080
很快 我们将在第 5 节课又会遇到该模式

00:09:24.080 --> 00:09:28.990
对于下个任务 请尝试修改下某些 ListView 适配器代码

00:09:28.990 --> 00:09:29.739
看看会发生什么情况

00:09:30.740 --> 00:09:34.040
然后尝试将 ListView 替换为 GridView

00:09:34.040 --> 00:09:37.130
GridView 也会回收视图

00:09:37.130 --> 00:09:39.360
需要适配器来知道要显示什么信息

00:09:39.360 --> 00:09:42.370
这些都是实验用途

00:09:42.370 --> 00:09:44.880
在任务结束后 请你将代码

00:09:44.880 --> 00:09:46.709
还原成使用 ListView

00:09:47.740 --> 00:09:50.120
这些就是这次练习的说明

00:09:50.120 --> 00:09:51.920
请尝试使用 GridView 来显示

00:09:51.920 --> 00:09:55.840
NumbersActivity 中的单词 而不是 ListView

00:09:55.840 --> 00:09:58.140
你可以使用我们之前创建的同一适配器

00:09:58.140 --> 00:10:00.180
如果需要帮助的话

00:10:00.180 --> 00:10:04.128
可以参考我在讨论 GridView 时在下面链接的文章

00:10:04.128 --> 00:10:08.140
但是我想提醒下 在你越陷越深

00:10:08.140 --> 00:10:11.490
从该文章中复制粘贴大量代码前

00:10:11.490 --> 00:10:16.860
你应该知道 在 Miwok 应用中从 ListView 更改为 GridView

00:10:16.860 --> 00:10:21.230
只需更改几行代码就能搞定

00:10:21.230 --> 00:10:24.430
在完成该任务后

00:10:24.430 --> 00:10:26.990
请将你的代码还原成再次使用 ListView

00:10:26.990 --> 00:10:29.180
祝你好运 希望能从中发现乐趣

