WEBVTT
Kind: captions
Language: zh-CN

00:00:00.420 --> 00:00:03.190
生活中的很多资源都是有限的

00:00:03.190 --> 00:00:04.520
例如时间和金钱

00:00:04.520 --> 00:00:07.380
我们必须要判断如何高效地使用这些资源

00:00:07.380 --> 00:00:10.280
例如 一天只有 24 小时

00:00:10.280 --> 00:00:13.980
如果我们决定花一小时的时间看一集最新的电视剧

00:00:13.980 --> 00:00:17.129
那么就不能使用这一小时的时间与朋友做一顿美食了

00:00:18.320 --> 00:00:19.720
最终意味着 我们应该要审慎地

00:00:19.720 --> 00:00:21.250
使用这段时间

00:00:22.510 --> 00:00:26.080
类似地 人的记忆力也是有限的资源

00:00:26.080 --> 00:00:28.670
我们只能在脑中记下一定数量的事物

00:00:28.670 --> 00:00:29.910
例如 在派对上

00:00:29.910 --> 00:00:32.750
我们只能记住几位新认识的人的姓名

00:00:32.750 --> 00:00:34.920
我们的移动设备具有数字类型的内存

00:00:34.920 --> 00:00:37.060
这一内存是固定的

00:00:37.060 --> 00:00:42.060
与传统笔记本或台式机相比 非常的有限

00:00:42.060 --> 00:00:45.330
移动设备上的内存可以用来存储各种类型的内容

00:00:45.330 --> 00:00:49.610
例如音乐 短信 照片等等

00:00:49.610 --> 00:00:52.780
此外 这一有限的内存

00:00:52.780 --> 00:00:56.400
还必须被 Android 操作系统中的所有其他很棒的应用占用

00:00:56.400 --> 00:01:00.440
包括我们的应用

00:01:00.440 --> 00:01:03.277
如果某个应用占用了太多的内存

00:01:03.277 --> 00:01:06.686
就会对所有其他应用的运行造成显著的影响

00:01:06.686 --> 00:01:10.135
最糟糕的是 这样会对整台设备的整体体验

00:01:10.135 --> 00:01:14.466
造成影响 可能导致糟糕的用户体验

00:01:14.466 --> 00:01:16.210
说了这么多 就是想强调下

00:01:16.210 --> 00:01:20.240
作为开发者 我们必须记住 内存是有限的资源

00:01:20.240 --> 00:01:23.390
我们创建的应用必须能有效地使用内存

00:01:23.390 --> 00:01:25.670
举个通讯录应用的例子

00:01:25.670 --> 00:01:29.095
用户可能在通讯录中存储了 1,000 个联系人和电话号码

00:01:30.476 --> 00:01:34.732
如果每个联系人都作为 TextView 存储在 LinearLayout 中

00:01:34.732 --> 00:01:39.867
手机就会占用大量的内存来创建 存储和显示 1,000 个 TextView

00:01:39.867 --> 00:01:44.740
即使所有 1,000 个联系人不一定同时显示在屏幕上

00:01:44.740 --> 00:01:48.319
如果系统中的大部分内存都用来创建和存储 1,000 个联系人

00:01:48.319 --> 00:01:51.820
那么就没有多少内存来运行手机中的其他应用了

00:01:51.820 --> 00:01:55.322
可能导致其他应用变得卡顿 甚至没法运行

00:01:55.322 --> 00:01:58.110
我们需要合理地使用内存资源

00:01:58.110 --> 00:02:00.370
以便我们的应用能与设备上的其他程序和平共处

00:02:01.450 --> 00:02:05.250
在这个通讯录应用简化版中 当用户在手机上查看通讯录时

00:02:05.250 --> 00:02:08.949
一次只能在屏幕上看到 5 个联系人

00:02:10.150 --> 00:02:13.800
位于当前在屏幕上可见的列表上方或下方的任何内容

00:02:13.800 --> 00:02:17.620
甚至都不需要存在 因为这样会占用内存资源

00:02:17.620 --> 00:02:22.410
因此不需要创建所有 1,000 个 TextView 并使其占用内存

00:02:22.410 --> 00:02:26.430
尤其是因为用户可能从来都不会滚动查看整个列表

00:02:26.430 --> 00:02:29.733
为了解决此问题 我们可以重复使用视图

00:02:29.733 --> 00:02:33.058
因为每次只有 5 到 7 个联系人可能会实际地出现在屏幕上

00:02:33.058 --> 00:02:37.110
这里的蓝色方框表示设备屏幕

00:02:37.110 --> 00:02:41.156
注意 所有的确需要显示出来的联系人

00:02:41.156 --> 00:02:43.519
可以直接使用这些预创建的视图

00:02:44.520 --> 00:02:47.410
当联系人在屏幕上不再可见时

00:02:47.410 --> 00:02:50.590
那么该视图可以用来为其他联系人显示信息

00:02:51.690 --> 00:02:54.080
这个策略就叫做视图回收

00:02:55.080 --> 00:03:00.130
我们可以通过 ListView 和 Adapter 来实现这一点

00:03:00.130 --> 00:03:03.870
我们将在下个视频中更详细地介绍下

00:03:03.870 --> 00:03:05.160
整个视图回收流程

00:03:06.180 --> 00:03:09.400
这节课的重点内容就是 请勿滥用设备的内存

00:03:09.400 --> 00:03:12.500
我们的应用所在的运行设备具有固定的内存

00:03:12.500 --> 00:03:15.250
我们的应用需要与其他应用和功能分享内存

00:03:15.250 --> 00:03:18.865
如果设备同时运行了几个应用

00:03:18.865 --> 00:03:22.095
并且内存不足 可能是因为你的应用占用了所有的资源

00:03:22.095 --> 00:03:24.825
设备需要停止运行所有其他应用

00:03:24.825 --> 00:03:26.225
以便释放存储空间

00:03:26.225 --> 00:03:27.835
了解这一知识后

00:03:27.835 --> 00:03:31.445
我们在为 Android 设备创建应用时 应该做个良好公民

00:03:31.445 --> 00:03:34.425
确保这些应用尽量有效地占用很少的内存

