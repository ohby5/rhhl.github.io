WEBVTT
Kind: captions
Language: en-US

00:00:00.210 --> 00:00:04.070
All right, so let's talk about the high
level interaction between the listView

00:00:04.070 --> 00:00:05.045
and ArrayAdapter.

00:00:05.045 --> 00:00:07.360
And then we'll dive into
the code in the next video.

00:00:08.610 --> 00:00:13.100
So you can think of a ListView as
being powered by the ArrayAdapter.

00:00:13.100 --> 00:00:17.185
So without the adapter the ListView
is just an empty container.

00:00:17.185 --> 00:00:21.688
And when I say powered by, I mean that
the ArrayAdapter holds onto the set of

00:00:21.688 --> 00:00:24.060
data that should be shown onto screen.

00:00:25.170 --> 00:00:29.860
So for example, it can hold on to
an array or even a list of data.

00:00:29.860 --> 00:00:34.420
So the ArrayAdapter knows how
to translate this data, or

00:00:34.420 --> 00:00:40.030
adapt it, into a list item view that
will be displayed in the ListView.

00:00:40.030 --> 00:00:43.430
So let's take a look at
the details of how all this works.

00:00:43.430 --> 00:00:48.180
So when you first associate an adapter
to a ListView the ListView will ask,

00:00:48.180 --> 00:00:50.580
how many items that
you expect to display?

00:00:50.580 --> 00:00:53.180
And the ArrayAdapter
knows this information.

00:00:53.180 --> 00:00:56.140
So the ListView calls
the method on the ArrayAdapter.

00:00:56.140 --> 00:00:59.110
And in this method
it'll pass in an input,

00:00:59.110 --> 00:01:02.770
which is the current position in the
list that the user is currently viewing.

00:01:02.770 --> 00:01:07.650
In this case, it passes in the position
0, but the user might be on

00:01:07.650 --> 00:01:10.740
the 1st position, or maybe even
the 100th position in the list.

00:01:10.740 --> 00:01:12.410
So knowing this information,

00:01:12.410 --> 00:01:16.090
the ArrayAdapter checks
the internal source of data.

00:01:16.090 --> 00:01:18.968
So give this case, it checks the array.

00:01:18.968 --> 00:01:22.460
It might also check a list
if that is the source data.

00:01:22.460 --> 00:01:24.350
And it gets the information out.

00:01:24.350 --> 00:01:27.411
And it has instructions
to tell it how to create

00:01:27.411 --> 00:01:30.873
a list item view that it'll
return to the ListView.

00:01:30.873 --> 00:01:34.469
Now when the screen is full,
the ListView will stop asking for

00:01:34.469 --> 00:01:36.860
more list items from the ArrayAdaptor.

00:01:36.860 --> 00:01:40.880
So the list item views are only
created on demand when needed.

00:01:40.880 --> 00:01:42.740
So when the views
are scrolled off screen,

00:01:42.740 --> 00:01:45.020
remember that they're
added to this scrap pile.

00:01:45.020 --> 00:01:48.529
So in this specific example,
remember that Jane and Karl,

00:01:48.529 --> 00:01:51.483
the first two list items,
are no longer visible.

00:01:51.483 --> 00:01:53.453
And so they'll end up in the scrap pile.

00:01:53.453 --> 00:01:56.840
And then we can actually reuse
those views by passing the back

00:01:56.840 --> 00:02:00.350
to the ArrayAdaptor when
we request a new list item.

00:02:00.350 --> 00:02:04.170
So the ListView will request the list
item view for a certain position in

00:02:04.170 --> 00:02:09.139
the list, and also pass along a view
that was previously used before.

00:02:09.139 --> 00:02:14.860
So in this example, the ListView is
requesting for the item at position 6,

00:02:14.860 --> 00:02:19.700
and passing in the reusable view
from before to the ArrayAdapter.

00:02:19.700 --> 00:02:22.712
Now, the ArrayAdapter can
use the recycled view

00:02:22.712 --> 00:02:25.074
by just placing the data inside of it.

00:02:25.074 --> 00:02:29.857
For example, by calling the text view
setText method to change the name here.

00:02:29.857 --> 00:02:34.015
And now it looks like a brand new list
item that we can return to the ListView

00:02:34.015 --> 00:02:37.250
to be added to the new hierarchy and
displayed on screen.

