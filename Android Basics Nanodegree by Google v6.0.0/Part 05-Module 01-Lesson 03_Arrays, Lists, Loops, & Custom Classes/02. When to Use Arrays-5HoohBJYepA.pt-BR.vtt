WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:01.167
Oi, Catherine.

00:00:01.200 --> 00:00:04.300
Na atividade Números, queremos poder
exibir a lista de números

00:00:04.334 --> 00:00:05.567
de 1 a 10 na tela.

00:00:05.601 --> 00:00:07.400
Tem ideia de como
podemos fazer isso?

00:00:07.434 --> 00:00:10.367
Bom, no curso passado
conversamos sobre como armazenar

00:00:10.400 --> 00:00:11.767
uma única informação
em uma variável.

00:00:11.801 --> 00:00:13.067
Isso, isso.

00:00:13.100 --> 00:00:14.334
Como no app Just Java.

00:00:14.367 --> 00:00:15.467
Usamos uma variável
integral

00:00:16.601 --> 00:00:19.234
chamada quantidade para armazenar
o número de copos de café.

00:00:19.267 --> 00:00:22.501
Tá, então... neste caso, por que não usamos
10 variáveis string?

00:00:23.334 --> 00:00:24.300
Assim.

00:00:24.334 --> 00:00:27.634
Podemos ter uma para o número 1,
uma para o número 2,

00:00:27.667 --> 00:00:29.400
para o 3,
e assim por diante.

00:00:29.434 --> 00:00:32.567
Boa ideia, mas há uma maneira
melhor de fazermos isso.

00:00:32.601 --> 00:00:33.934
Como assim, melhor?

00:00:33.968 --> 00:00:36.133
Há algo chamado array.

00:00:36.167 --> 00:00:38.467
Tá, e o que é isso?

00:00:38.501 --> 00:00:41.567
É algo que vai nos ajudar
a armazenar uma lista de variáveis

00:00:41.601 --> 00:00:45.000
e nos ajudar a manter a ordem,
porque com uma lista de números assim

00:00:45.033 --> 00:00:48.200
é fácil se confundir e exibir
as informações erradas.

00:00:48.234 --> 00:00:51.200
Tá, parece bom, mas ainda
não aprendemos sobre arrays.

00:00:51.234 --> 00:00:52.801
Vamos precisar explicar.

00:00:52.834 --> 00:00:54.567
Você tem uma analogia
ou algo assim para isso?

00:00:54.601 --> 00:00:58.834
Na verdade, tenho.
A caixa de comprimidos.

00:00:58.868 --> 00:01:00.133
De onde veio isso?

00:01:00.167 --> 00:01:03.000
Parece a caixa que minha tia
tem para vitaminas.

00:01:03.033 --> 00:01:04.701
É, ela deve ligar em breve.

00:01:04.734 --> 00:01:05.901
Tá, enfim.

00:01:05.934 --> 00:01:07.767
Como a caixa de comprimidos
se assemelha a um array?

00:01:07.801 --> 00:01:10.901
Bom, um array é como um contêiner
ou um comprimento fixo.

00:01:10.934 --> 00:01:13.901
Então quando é criado,
fica daquele tamanho

00:01:13.934 --> 00:01:15.501
e esta caixa de comprimidos
tem um comprimento de 7.

00:01:16.868 --> 00:01:18.767
Cada espaço armazena
um único valor.

00:01:18.801 --> 00:01:21.200
Espera, então posso colocar
qualquer coisa nesse espaço?

00:01:21.234 --> 00:01:23.601
Bom, não pode colocar
qualquer coisa aí.

00:01:23.634 --> 00:01:26.767
Não pode colocar os comprimidos
do seu tio na caixa dos comprimidos da tia.

00:01:26.801 --> 00:01:30.133
Então quando cria o array, todos
os valores precisam ser do mesmo tipo.

00:01:30.167 --> 00:01:31.968
Então temos
um array inteiro de strings,

00:01:32.000 --> 00:01:34.667
um array booleano,
um array de integers.

00:01:35.968 --> 00:01:38.767
Tá, mas e se eu quiser
armazenar 3 strings?

00:01:40.334 --> 00:01:41.968
-Tipo, 1, 2 e 3.
-Boa pergunta.

00:01:42.000 --> 00:01:45.100
Então, podemos colocar o 1
no 1º espaço.

00:01:45.133 --> 00:01:49.634
Tá, e no 2º podemos
armazenar a string 2.

00:01:49.667 --> 00:01:51.501
E no 3º, podemos
armazenar a string 3.

00:01:52.767 --> 00:01:55.133
É, é assim que os números
seguem, eles aumentam.

00:01:56.501 --> 00:01:59.267
Tá, então... quando tivermos
os números no espaço,

00:01:59.300 --> 00:02:01.400
podemos tirar os valores
que precisamos.

00:02:01.434 --> 00:02:04.334
-Mais tarde, quando precisarmos exibi-los.
-Exatamente.

00:02:04.367 --> 00:02:06.334
Espera, então descobrimos
um conceito poderoso.

00:02:06.367 --> 00:02:10.300
Se quiser armazenar uma lista
de informações, pode usar um array.

00:02:10.334 --> 00:02:11.334
É, isso aí.

00:02:11.367 --> 00:02:13.901
Mas é importante lembrar
que cada elemento

00:02:13.934 --> 00:02:16.067
do arranjo precisa ser
do mesmo tipo de dados.

00:02:16.100 --> 00:02:18.767
É, e às vezes você só quer armazenar
uma coisa,

00:02:18.801 --> 00:02:22.000
como uma string, então poderá
usar uma variável individual.

00:02:22.033 --> 00:02:23.133
Legal. Muito bem,
Catherine.

00:02:24.767 --> 00:02:26.067
Decidir como armazenar
seus dados

00:02:26.100 --> 00:02:28.901
é conhecido como escolher a estrutura
de dados certa para seu app.

00:02:28.934 --> 00:02:33.100
Quando precisa de um array, se precisar
de um, que tipo de array deve ser?

00:02:33.133 --> 00:02:34.868
Java é uma língua
muito tipificada.

00:02:34.901 --> 00:02:37.300
Quer dizer que quando cria
uma variável em Java,

00:02:37.334 --> 00:02:39.467
você precisa especificar
a que tipo de dados pertence.

00:02:39.501 --> 00:02:44.000
No curso passado, trabalhamos com tipos
básicos de dados como integer e booleano

00:02:44.033 --> 00:02:48.200
mas também trabalharemos com objetos
mais sofisticados, como TextView e ImageView.

00:02:48.234 --> 00:02:51.133
Você só pode fazer certas operações
com certos tipos de dados.

00:02:51.167 --> 00:02:55.000
Por exemplo, pode adicionar dois integers
com o operador mais.

00:02:55.033 --> 00:02:57.400
Mas não faz sentido somar
dois booleanos.

00:02:57.434 --> 00:02:59.934
Então quando temos que configurar
texto em uma textView,

00:02:59.968 --> 00:03:02.701
ele espera uma string como entrada,
não uma integer.

00:03:02.734 --> 00:03:03.801
Então o Java vai reclamar

00:03:03.834 --> 00:03:06.767
e mostrar erros se você tiver
dados desencontrados em seu código.

00:03:06.801 --> 00:03:09.601
Para te ajudar, criamos
este documento

00:03:09.634 --> 00:03:14.501
que discute alguns tipos primitivos de dados
e alguns tipos de dados de objetos.

00:03:14.534 --> 00:03:20.501
Você deve conhecer tipos de dados
como os 8 tipos básicos de dados

00:03:20.534 --> 00:03:26.300
e deve reconhecer algum como int,
que é um número inteiro,

00:03:26.334 --> 00:03:30.334
e booleano, que tem os valores
ou verdadeiro ou falso.

00:03:30.367 --> 00:03:33.634
Então aqui estão alguns novos
que pode não ter usado antes,

00:03:33.667 --> 00:03:35.701
mas podem ser úteis
para usar no futuro.

00:03:35.734 --> 00:03:42.100
Por exemplo, double é um decimal
e char é um único caractere.

00:03:42.133 --> 00:03:46.400
Além disso, verá que string
não está listada entre os dados primitivos.

00:03:46.434 --> 00:03:49.868
Agora deve conhecer string
como um texto de qualquer tamanho.

00:03:49.901 --> 00:03:53.634
É na verdade um tipo de dado de objeto,
e não um dado primitivo.

00:03:53.667 --> 00:03:57.434
Por isso String
aparece em maiúscula,

00:03:57.467 --> 00:04:02.501
mas não char ou booleano.

00:04:02.534 --> 00:04:06.400
Apesar de string ser um tipo de dado de objeto,
é tratada de modo especial em Java.

00:04:06.434 --> 00:04:10.400
Pode criar automaticamente uma nova string
fechando o texto em aspas

00:04:10.434 --> 00:04:13.367
em vez de chamar formalmente
este construtor com uma nova palavra-chave.

00:04:14.567 --> 00:04:16.834
Você pode ter um array
de qualquer tipo de dados,

00:04:16.868 --> 00:04:20.100
de primitivos a objetos.

00:04:20.133 --> 00:04:23.400
Por exemplo, você pode ter um array
de integers,

00:04:23.434 --> 00:04:27.100
de caracteres ou mesmo
de floats.

00:04:27.133 --> 00:04:29.701
Podemos ter também um array
de tipos de objetos.

00:04:29.734 --> 00:04:33.434
Então podemos ter um array de strings
ou mesmo objetos que não estão aqui,

00:04:33.467 --> 00:04:37.300
como textViews ou botões.

00:04:37.334 --> 00:04:39.767
Lembre-se do que você
aprendeu sobre arrays

00:04:39.801 --> 00:04:43.567
e o que revisamos sobre tipos de dados
e tente responder esta questão.

00:04:43.601 --> 00:04:45.033
Preparamos alguns cenários

00:04:45.067 --> 00:04:46.934
para apps diferentes que você talvez
encontre como desenvolvedor.

00:04:46.968 --> 00:04:50.701
É seu dever decidir como representar
essa informação no seu app.

00:04:51.701 --> 00:04:53.400
Dados esses cenários,

00:04:53.434 --> 00:04:55.801
que estrutura de dados você usaria
para armazenar os dados no app?

00:04:55.834 --> 00:05:00.200
Integer, booleano, string,

00:05:00.234 --> 00:05:04.734
um array de integers, um array de
strings, ou algo diferente?

00:05:04.767 --> 00:05:07.701
O 1º cenário é para um app
de viagens.

00:05:07.734 --> 00:05:10.200
Você está armazenando itens
para levar na viagem.

00:05:10.234 --> 00:05:11.801
o 2º é para um app do YouTube

00:05:11.834 --> 00:05:14.801
que saiba o número de pessoas
que visualizaram um vídeo.

00:05:15.834 --> 00:05:18.701
O 3º cenário é para um app
de configurações

00:05:18.734 --> 00:05:21.534
que você quer que armazene os idiomas
suportados por um dispositivo Android.

00:05:22.667 --> 00:05:25.267
O 4º é para um app
de compras.

00:05:25.300 --> 00:05:27.634
Você quer saber se um produto
está ou não no estoque.

00:05:29.067 --> 00:05:31.601
Para um 5º cenário,
um app de loteria.

00:05:31.634 --> 00:05:34.701
As combinações vencedoras
dos 5 membros para uma rodada da loteria.

00:05:34.734 --> 00:05:38.801
No último cenário para determinar
que estrutura de dados usar,

00:05:38.834 --> 00:05:40.133
é um app de controle
de saúde.

00:05:40.167 --> 00:05:43.100
O número de milhas ou quilômetros
caminhados cada dia desta semana.

