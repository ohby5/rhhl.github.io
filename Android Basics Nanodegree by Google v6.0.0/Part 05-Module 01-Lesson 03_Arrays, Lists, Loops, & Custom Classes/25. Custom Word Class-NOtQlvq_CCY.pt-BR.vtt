WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:02.934
Bom trabalho com a ajuda
com a estrutura de dados.

00:00:02.968 --> 00:00:04.667
Queremos criar
uma classe Word

00:00:04.701 --> 00:00:07.367
que tem as traduções
em inglês e em Miwok

00:00:07.400 --> 00:00:08.634
da mesma palavra.

00:00:08.667 --> 00:00:12.601
Isto é como a planta,
na analogia do outro curso.

00:00:12.634 --> 00:00:16.400
Exato. Com a mesma planta,
podemos criar objetos diferentes.

00:00:16.434 --> 00:00:17.501
Tudo bem.

00:00:17.534 --> 00:00:19.868
Assim!
Este é um objeto.

00:00:19.901 --> 00:00:22.067
Ele representa o número 1.

00:00:22.100 --> 00:00:24.667
Dentro do objeto, temos
duas variáveis string.

00:00:24.701 --> 00:00:28.133
Uma para a tradução Miwok,
que é "lutti",

00:00:28.167 --> 00:00:31.300
e uma para a tradução
em inglês, que é "one".

00:00:31.334 --> 00:00:33.968
Como este objeto
foi criado com esta classe,

00:00:34.000 --> 00:00:35.834
ele tem
esses dois métodos.

00:00:35.868 --> 00:00:38.701
-O método getMiwokTranslation...
-Retorna essa string.

00:00:38.734 --> 00:00:41.767
-O método getDefaultTranslation...
-Retorna essa string.

00:00:41.801 --> 00:00:44.067
Legal. Isso parece bom.

00:00:44.100 --> 00:00:46.534
Muito bem.
Com a mesma planta,

00:00:46.567 --> 00:00:49.634
podemos criar mais e mais
objetos palavra!

00:00:49.667 --> 00:00:52.100
Uma palavra para "dois",

00:00:52.133 --> 00:00:54.200
e uma para "três".

00:00:54.234 --> 00:00:57.000
Meu Deus!
Quantos objetos!

00:00:57.033 --> 00:01:01.367
No próximo quiz, vamos ver
como escrever a definição da classe.

00:01:01.400 --> 00:01:02.567
É isso aí.

00:01:02.601 --> 00:01:03.634
Se precisar de ajuda,

00:01:03.667 --> 00:01:06.267
pode ver a versão simplificada
da classe TextView

00:01:06.300 --> 00:01:08.267
que mostramos
no último curso.

00:01:08.300 --> 00:01:11.734
Precisamos de um construtor
para a classe Word.

00:01:11.767 --> 00:01:14.701
O construtor parece
uma declaração de método,

00:01:14.734 --> 00:01:19.033
mas o nome do método precisa
bater com o nome da classe.

00:01:19.067 --> 00:01:20.601
Maiúsculas e tudo.

00:01:20.634 --> 00:01:21.734
Neste caso,

00:01:21.767 --> 00:01:25.901
temos o T maiúsculo de Text,
e V maiúsculo de View,

00:01:25.934 --> 00:01:30.234
sem nenhum espaço,
como o nome da classe, TextView.

00:01:30.267 --> 00:01:33.133
O construtor também
não tem tipo de retorno.

00:01:33.167 --> 00:01:36.267
Olhando de perto o construtor
da classe TextView,

00:01:36.300 --> 00:01:39.067
vemos que tem aqui
a palavra-chave public.

00:01:39.100 --> 00:01:41.667
Esta palavra diz
que uma classe de fora

00:01:41.701 --> 00:01:43.501
pode acessar
este construtor.

00:01:43.534 --> 00:01:46.868
Por exemplo, uma chamada de fora,
na MainActivity,

00:01:46.901 --> 00:01:50.367
pode chamar este construtor
usando a palavra-chave new,

00:01:50.400 --> 00:01:52.968
e passar este parâmetro

00:01:53.000 --> 00:01:55.200
para criar um novo
objeto TextView.

00:01:55.234 --> 00:01:58.634
Você pode criar
vários construtores para a classe

00:01:58.667 --> 00:02:01.100
tendo parâmetros
diferentes.

00:02:01.133 --> 00:02:04.534
Qualquer chamada de fora
pode criar um objeto TextView

00:02:04.567 --> 00:02:06.000
de formas diferentes,

00:02:06.033 --> 00:02:08.934
dependendo dos parâmetros
que possam fornecer.

00:02:08.968 --> 00:02:13.667
Na próxima aula, vamos ver como criar
vários construtores para uma classe.

00:02:13.701 --> 00:02:15.133
Como dissemos antes,

00:02:15.167 --> 00:02:17.767
estas palavras-chave
private e public

00:02:17.801 --> 00:02:20.100
são chamadas
variáveis de acesso.

00:02:20.133 --> 00:02:23.033
Aprendemos sobre isso
no último curso.

00:02:23.067 --> 00:02:26.033
Elas definem quem tem acesso
a esses métodos

00:02:26.067 --> 00:02:28.033
ou construtores,

00:02:28.067 --> 00:02:29.968
ou até para a classe toda.

00:02:30.000 --> 00:02:31.634
Se um método for privado,

00:02:31.667 --> 00:02:34.634
só pode ser chamado
de dentro da classe.

00:02:34.667 --> 00:02:36.501
Se algo for público,

00:02:36.534 --> 00:02:39.601
pode ser acessado
de fora da classe.

00:02:39.634 --> 00:02:43.234
Se MainActivity quer criar
um novo objeto TextView,

00:02:43.267 --> 00:02:46.901
ela pode,
porque a classe é pública.

00:02:46.934 --> 00:02:49.801
E também tem
um construtor público.

00:02:49.834 --> 00:02:53.868
Se alguma dessas variáveis
ou desses métodos forem públicos,

00:02:53.901 --> 00:02:57.267
a MainActivity
pode chamá-los também.

00:02:57.300 --> 00:03:00.934
Aqui está o diagrama
do último curso.

00:03:00.968 --> 00:03:03.701
Se o método TextView
for público,

00:03:03.734 --> 00:03:06.968
podemos chamar tanto
de dentro da classe TextView

00:03:08.234 --> 00:03:09.601
quanto de fora;

00:03:09.634 --> 00:03:13.367
a MainActivity
pode acessar.

00:03:14.267 --> 00:03:17.100
Em geral, é melhor fazer
as variáveis do app,

00:03:17.133 --> 00:03:19.200
que controlam
o estado do objeto,

00:03:19.234 --> 00:03:20.400
serem privadas.

00:03:20.434 --> 00:03:22.701
Você pode expor
os métodos públicos

00:03:22.734 --> 00:03:25.300
que modificam ou acessam
essas variáveis.

00:03:25.334 --> 00:03:28.667
São métodos
getter e setter,

00:03:28.701 --> 00:03:30.167
e você tem controle

00:03:30.200 --> 00:03:33.367
de como as variáveis
são acessadas ou modificadas.

00:03:33.400 --> 00:03:34.400
Por exemplo,

00:03:34.434 --> 00:03:36.634
se estas variáveis
fossem públicas,

00:03:36.667 --> 00:03:40.667
alguém poderia colocar um valor
inválido de cor no TextView.

00:03:40.701 --> 00:03:44.000
Isso causaria um comportamento
inesperado na classe,

00:03:44.033 --> 00:03:46.567
e talvez o app até voasse.

00:03:46.601 --> 00:03:50.200
Por outro lado,
se a variável é privada,

00:03:50.234 --> 00:03:52.734
com um método público
para modificá-la,

00:03:52.767 --> 00:03:55.234
você confere
se a cor passada é válida

00:03:55.267 --> 00:03:56.868
antes de mudar o estado.

00:03:56.901 --> 00:04:00.601
Agora vá para o teste,
onde criará a classe Word.

