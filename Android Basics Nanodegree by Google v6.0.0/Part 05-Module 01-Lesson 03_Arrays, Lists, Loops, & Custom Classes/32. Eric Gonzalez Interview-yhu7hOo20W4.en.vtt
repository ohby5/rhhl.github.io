WEBVTT
Kind: captions
Language: en

00:00:00.328 --> 00:00:05.570
So we use arrays in the Udacity app, for
instance, for course enrollment, right?

00:00:05.570 --> 00:00:09.688
Ideally, you'll have more than
one course that you're taking, or

00:00:09.688 --> 00:00:13.809
you might be enrolled in a nanodegree,
or set of nanodegrees, and so

00:00:13.809 --> 00:00:17.200
those are all stored as
arrays when they come back.

00:00:17.200 --> 00:00:19.140
So, I might say that you're in CS 101,
and

00:00:19.140 --> 00:00:22.240
you're in an Android course,
for instance.

00:00:22.240 --> 00:00:25.580
And both of those will show up as
an array that I parsed through.

00:00:25.580 --> 00:00:28.700
Arrays are useful just because when
you have a, like, for instance,

00:00:28.700 --> 00:00:29.890
a list of items.

00:00:29.890 --> 00:00:33.389
A list of items translates very well
to like a list view or something else.

00:00:34.450 --> 00:00:38.920
Generally those are stored in some
type of array data structure.

00:00:38.920 --> 00:00:40.760
So I don't use primitive arrays.

00:00:40.760 --> 00:00:45.850
But I will use array list for
instance because a lot of the responses

00:00:45.850 --> 00:00:50.150
I receive are from the server and
I don't know the exact size of them.

00:00:50.150 --> 00:00:52.875
There is a case where maybe a student's
only enrolled in one course but

00:00:52.875 --> 00:00:54.503
they could be also
enrolled in a hundred.

00:00:54.503 --> 00:00:58.569
So I need to be able to accommodate both
cases and so an array list will allow it

00:00:58.569 --> 00:01:01.824
to grow or shrink based on
the response I get from the server.

00:01:01.824 --> 00:01:03.577
So, there's several lists we use.

00:01:03.577 --> 00:01:06.256
There's a lot of linear lists,
horizontal list,

00:01:06.256 --> 00:01:08.950
you see list everywhere
pretty much in it.

00:01:08.950 --> 00:01:13.370
So if you think of your again to
enrollments, enrollments is a list view.

00:01:13.370 --> 00:01:16.290
If you have a nanodegree,

00:01:16.290 --> 00:01:19.960
there's a special nanodegree view
that's also a list view in that case.

00:01:19.960 --> 00:01:21.342
And so they're in several places.

00:01:21.342 --> 00:01:25.390
Also tracks, tracks within the app
if you are scrolling horizontally.

00:01:25.390 --> 00:01:27.270
That's a list view in itself as well.

00:01:27.270 --> 00:01:30.650
So recycling views are important because
you want to try to use as little memory

00:01:30.650 --> 00:01:31.860
as possible.

00:01:31.860 --> 00:01:36.450
So you really only want to render
the views that are on screen in a moment

00:01:36.450 --> 00:01:39.460
because a list could potentially
be very large, and so

00:01:39.460 --> 00:01:42.260
as you're scrolling through, you're
recycling the views to make sure you're

00:01:42.260 --> 00:01:44.790
only rendering what can
fit on that screen.

00:01:44.790 --> 00:01:48.300
The way we structure data in
the application is very much

00:01:48.300 --> 00:01:50.760
still based on the concepts
you go through in the class.

00:01:50.760 --> 00:01:54.330
So we do have the notion of
there's a nanodegree class,

00:01:54.330 --> 00:01:59.250
there's a lesson class, there's morsels,
there's all these individual

00:01:59.250 --> 00:02:03.970
units that we model as Java
objects within the application.

00:02:03.970 --> 00:02:06.450
A lot of times this is kind of,
especially working with an API,

00:02:06.450 --> 00:02:09.699
many of those decisions were
already made beforehand,

00:02:09.699 --> 00:02:14.000
so because you're consuming an API, it's
already been modeled in a certain sense.

00:02:14.000 --> 00:02:17.210
You know what endpoints you're hitting,
you know what the responses are, and

00:02:17.210 --> 00:02:20.560
those responses generally are grouped
logically by some type of object.

