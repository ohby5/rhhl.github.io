WEBVTT
Kind: captions
Language: ar

00:00:00.810 --> 00:00:03.210
حسنًا، هناك الكثير من أنواع الحلقات المختلفة،

00:00:03.210 --> 00:00:05.900
الأولى سوف نتعرّف عليها وهي حلقة while.

00:00:05.900 --> 00:00:09.460
وفي هذا الامتحان الموجز، سوف تكتب كودًا لحلقة
while،

00:00:09.460 --> 00:00:11.990
وسوف تساعدنا حلقة while على إنشاء واجهة نص

00:00:11.990 --> 00:00:15.530
لكل عنصر من قائمة الكلمات، وإضافتها إلى المخطط.

00:00:15.530 --> 00:00:19.640
وبحلول نهاية مهمة الترميز هذه، سيكون شكل التطبيق
الخاص بك هكذا،

00:00:19.640 --> 00:00:21.880
الوقت عبارة عن كلمة أساسية خاصة بجافا.

00:00:21.880 --> 00:00:24.650
ويعني أنه يجب علينا مواصلة تنفيذ مجموعة من الجمل

00:00:24.650 --> 00:00:28.780
المشار اليها بالتعليمات في هذا الرسم التخطيطي، طالما
كان الشرط المعين صحيحًا.

00:00:29.780 --> 00:00:33.030
لذلك نواصل تنفيذ مجموعه من التعليمات،

00:00:33.030 --> 00:00:35.350
طالما كان الشرط صحيحًا.

00:00:35.350 --> 00:00:36.930
وتتحرك أساسًا من خلال ذلك في حلقة.

00:00:38.350 --> 00:00:39.570
فلنذهب إلى مزيد من التفاصيل،

00:00:40.570 --> 00:00:45.000
وطالما أن الشرط الموجود بين الأقواس صحيح، نقوم
بتنفيذ

00:00:45.000 --> 00:00:49.550
كل التعليمات الموجودة في مجموعة الأكواد هذه التي
توجد بين القوسين.

00:00:49.550 --> 00:00:52.830
ثم نعود بعد ذلك إلى الشرط مرة أخرى، ومن ثم التحقق
لمعرفة

00:00:52.830 --> 00:00:57.790
ما إذا كان صحيحًا، وإذا كان صحيحًا سنقوم بتنفيذ هذه
المجموعة من التعليمات مرة أخرى.

00:00:57.790 --> 00:01:00.160
ثم نعود إلى الشرط.

00:01:00.160 --> 00:01:04.569
تتحقق ما إذا كان الشرط صحيحًا، وإذا كان كذلك فسنقوم
بتنفيذ مجموعة من التعليمات مرة أخرى.

00:01:04.569 --> 00:01:06.650
ومن ثمّ نعود إلى الشرط.

00:01:06.650 --> 00:01:11.780
وعند حدوث أي نقطة خطأ، نتجاوزها لنضع أنفسنا في موقف
صعب،

00:01:11.780 --> 00:01:15.470
ثم نخرج من الحلقة ونواصل بقية الكود الذي يأتي بعد
ذلك.

00:01:16.540 --> 00:01:19.270
لذا يحدد هذا الشرط عدد المرات التي سيتم فيها

00:01:19.270 --> 00:01:21.790
تنفيذ التعليمات البرمجية داخل المجموعة البدائية
هذه.

00:01:21.790 --> 00:01:25.310
وغالبًا ما يقوم الشرط باختبار حالة المتغير.

00:01:25.310 --> 00:01:29.060
حتى نتمكن من تنصيب متغير عداد قبل أن نبدأ حلقة،
وفكرّت في نهاية

00:01:29.060 --> 00:01:34.130
كل تكرار، لذلك من خلال الحركة يمكننا تحديث هذا
المتغير.

00:01:34.130 --> 00:01:37.570
وعند نقطة ما سنقوم بتحديث المتغير كأن يكون الشرط

00:01:37.570 --> 00:01:41.130
خطأ وهذا يسبب لنا الخروج من الحلقة.

00:01:41.130 --> 00:01:43.710
فيما يلي مثال على حلقة while

00:01:43.710 --> 00:01:46.720
وهو يشابه مثال صوت المكان الذي ذكرناه من قبل.

00:01:47.980 --> 00:01:50.390
كيف نصل إلى هذا الكود؟

00:01:50.390 --> 00:01:53.710
ومهما حدثتنا أنفسنا بكتابة حلقة أو عدم القيام بذلك

00:01:53.710 --> 00:01:55.820
فعلينا ان نسأل أنفسنا ثلاثة أسئلة.

00:01:55.820 --> 00:01:57.630
ما الاختبارات التي نحاول القيام بها في كل مرة؟

00:01:57.630 --> 00:01:59.660
كم عدد المرات التي نحتاج فيها إلى تكرار الحلقة؟

00:01:59.660 --> 00:02:02.510
ونتيجة لذلك ما هو شرط الحلقة.

00:02:02.510 --> 00:02:03.740
لذا في هذه الحالة بالنسبة

00:02:03.740 --> 00:02:08.610
للسؤال الأول ومفاده ما الاختبار الذي نقوم به في كل
مرة نحتاج فيها إلى تشغيل صوت.

00:02:08.610 --> 00:02:12.060
لمعرفة الشرط نطرح على أنفسنا السؤال الثاني.

00:02:12.060 --> 00:02:14.160
كم عدد المرات التي نقوم فيها بتكرار الحلقة؟

00:02:14.160 --> 00:02:17.370
على سبيل المثال، قل أننا نريد تكرار الحلقة ثلاث
مرات.

00:02:17.370 --> 00:02:18.230
إذا كان الوضع كذلك،

00:02:18.230 --> 00:02:21.440
فيمكننا أن نجعل الشرط كذلك ويجب أن يكون متغيّر العدد
أقل من ثلاثة.

00:02:21.440 --> 00:02:25.470
ويُفترض أن متغيّر العدد تمت تهيئته عند الصفر وبعد
ذلك

00:02:25.470 --> 00:02:27.280
يتم تحديثه كل مرة.

00:02:27.280 --> 00:02:29.620
بالتالي نرى كيفية تشغيل حلقة while.

00:02:29.620 --> 00:02:31.910
دعونا نتتبع عدد المتغير لدينا.

00:02:31.910 --> 00:02:35.990
أولاً تتم تهيئة متغيّر العدد عند الصفر وبعد ذلك

00:02:35.990 --> 00:02:37.860
ندخل حلقة while.

00:02:37.860 --> 00:02:41.400
الآن نحدد ما إذا كان الشرط صحيحًا أم خاطئًا،

00:02:41.400 --> 00:02:44.640
ويستلزم هذا الشرط أن يكون العدد أقل من ثلاثة.

00:02:44.640 --> 00:02:47.980
في الحالة التي معنا، الصفر أقل من ثلاثة، وبالتالي
فإن الشرط صحيح.

00:02:49.110 --> 00:02:51.570
وهذا يعني أنه بإمكاننا الاستمرار في مجموعة while

00:02:51.570 --> 00:02:53.280
وتنفيذ هذه الأسطر من الكود.

00:02:53.280 --> 00:02:55.950
لذلك نحن نسمي الطريقة playSound،

00:02:55.950 --> 00:02:59.310
ونتخيل playSound كأنها طريقة صالحة محددة في مكان ما
آخر.

00:02:59.310 --> 00:03:01.340
يعمل هذا الأمر على تشغيل صوت على الجهاز.

00:03:01.340 --> 00:03:05.270
بعد ذلك نقوم بتحديث متغير العدد ليصبح 1،

00:03:05.270 --> 00:03:10.720
والآن تصبح قيمة العدد 1 ونعود إلى التحقق من الشرط
مرة أخرى.

00:03:10.720 --> 00:03:12.750
نتحقق من حالة الاختبار لدينا

00:03:12.750 --> 00:03:15.600
ونتحقق من أن متغيّر العدد لا يزال أقل من 3.

00:03:15.600 --> 00:03:19.530
حسنًا، 1 أقل من 3 لذا الأمر على ما يرام ويمكننا

00:03:19.530 --> 00:03:21.900
الاستمرار مرة أخرى مع حلقة while.

00:03:21.900 --> 00:03:26.430
لذلك نحن نقوم بتنفيذ هذه المجموعة من التعليمات مرة
أخرى، نقوم بتشغيل صوت، أشبه بصوت الرنين!

00:03:27.510 --> 00:03:30.580
بعد ذلك نقوم بتحديث متغير العدد ليصبح 2،

00:03:30.580 --> 00:03:34.500
شرط الاختبار لا يزال صحيحًا لأن 2 أقل من 3.

00:03:34.500 --> 00:03:37.730
وبالتالي نقوم بتشغيل الصوت مرة أخرى، والآن نقوم
بتحديث متغيّر العدد ليصبح 3.

00:03:37.730 --> 00:03:41.960
وعندما نرجع إلى الشرط، نجده خطئًا هذه المرة.

00:03:41.960 --> 00:03:44.960
لأن الرقم ثلاثة ليس أقل من ثلاثة.

00:03:44.960 --> 00:03:48.390
بمجرد ما يصبح الشرط خطئًا نخرج من الحلقة

00:03:48.390 --> 00:03:50.470
ونواصل التعامل مع الكود الذي يأتي بعد ذلك.

00:03:50.470 --> 00:03:55.860
باختصار قد قمنا بتنفيذ الكود داخل الحلقة ثلاث مرات

00:03:55.860 --> 00:03:59.210
وهذا يعني اننا قمنا بتشغيل الصوت ثلاث مرات على
الجهاز.

00:03:59.210 --> 00:04:03.690
وكما ترى تتيح لنا الحلقة إمكانية تكرار الإجراء بعدد
قليل من

00:04:03.690 --> 00:04:08.300
السطور بدون نسخ ولصق نفس الكود مرارًا وتكرارًا.

00:04:08.300 --> 00:04:11.710
فيما يلي مثال آخر على حلقات while قبل أن أطلب منكم
كتابة مثال بأنفسكم

00:04:12.710 --> 00:04:15.990
بفرض أن الكود الذي سنتحدث عنه سيعمل

00:04:15.990 --> 00:04:19.550
داخل نشاط الأرقام بعد قيامك بإنشاء قائمة الكلمات.

00:04:19.550 --> 00:04:23.600
لقد أعددت سيناريو مثال تكون فيه المهمة التي أريد
تكرارها هي طباعة

00:04:23.600 --> 00:04:28.280
عبارة طويلة لعنصر معيّن في القائمة، استنادًا إلى
متغيّر فهرس.

00:04:29.390 --> 00:04:31.700
وأرغب في تكرار الحلقة أربع مرات.

00:04:31.700 --> 00:04:34.410
لذا الشرط يتمثل في أننا نحافظ على تكرار الحلقة

00:04:34.410 --> 00:04:37.510
طالما متغير مؤشر أقل من أربعة.

00:04:37.510 --> 00:04:39.780
بافتراض أن متغير الفهرس يبدأ عند الصفر

00:04:39.780 --> 00:04:42.380
ثم يزداد واحد في المرة الواحدة.

00:04:42.380 --> 00:04:46.210
لكتابة هذا الكود، نقوم بإنشاء متغيّر الفهرس أولا

00:04:46.210 --> 00:04:47.860
وتهيئته عند الصفر.

00:04:47.860 --> 00:04:50.740
سيكون سطر الكود هذا خارج الحلقة.

00:04:50.740 --> 00:04:54.790
عندما نبدأ عبارة while نحتاج إلى استخدام حلقة while
التي يستخدمها في جافا

00:04:54.790 --> 00:04:57.720
بين أقواس دائرية للشرط.

00:04:57.720 --> 00:05:00.940
لذا فإن الشرط هو أن عدد مرات التجربة يجب أن يكون
أقل من 4

00:05:00.940 --> 00:05:03.240
إذا أردنا أن نكرر ذلك أربع مرات.

00:05:03.240 --> 00:05:08.220
يجب أن تكرر مرة واحدة للفهرس 0، ومرة أخرى للفهرس 1،
ومرة أخرى للفهرس 2،

00:05:08.220 --> 00:05:12.370
ثم أخيرًا للفهرس 3 قبل الخروج من الحلقة.

00:05:12.370 --> 00:05:15.810
والآن داخل حلقة while، يمكننا كتابة التعليمات الخاصة
بالمهمة.

00:05:15.810 --> 00:05:17.430
نرغب في طباعة عبارة سجل

00:05:17.430 --> 00:05:20.600
لعنصر محدد في القائمة استنادًا إلى قيمة الفهرس.

00:05:20.600 --> 00:05:23.300
عبارة السجل هذه تحتوي على وسم NumbersActivity.

00:05:23.300 --> 00:05:28.860
ومؤشر الرسائل، متبوعا بمتغيّر الفهرس، بالإضافة إلى
القيمة.

00:05:28.860 --> 00:05:32.750
تليها قيمة السلسلة في هذا الموضع في قائمة الكلمات.

00:05:32.750 --> 00:05:34.710
وهذه هي كل التعليمات التي نحتاجها لهذه المهمة.

00:05:35.780 --> 00:05:38.353
حسنًا، أخيرًا داخل حلقة while هذه،

00:05:38.353 --> 00:05:40.622
ما نحتاج إليه هو تحديث متغيّر الفهرس بإضافة واحد.

00:05:40.622 --> 00:05:45.204
لذلك لم نر هذا التركيب قبل الفهرس ++.

00:05:45.204 --> 00:05:50.060
لكن هذا اختصار يعني نفس الشيء مثل إعداد المؤشر

00:05:50.060 --> 00:05:54.769
متغيّر ليصبح مؤشر = مؤشر + 1.

00:05:54.769 --> 00:05:55.740
حسنًا، لذلك

00:05:55.740 --> 00:05:58.900
أنت الآن على دراية ممتازة بكيفية كتابة حلقة في
جافا.

00:05:58.900 --> 00:06:02.250
استمر وطبّق ما تعلمته لإصلاح كود walk up.

00:06:02.250 --> 00:06:04.270
لإنشاء عرض، راسلني بخصوص

00:06:04.270 --> 00:06:06.170
كل عنصر في قائمة الكلمات باستخدام حلقة while.

00:06:07.820 --> 00:06:11.470
ميّز المكان الذي توقفنا فيه في نشاط الأرقام حيث كنا
نقوم

00:06:11.470 --> 00:06:15.890
بإنشاء ثلاث وجهات نظر للنص، وإضافتهم إلى المخطط بدون
حلقة،

00:06:15.890 --> 00:06:17.850
وقم بتعديلها بحيث يتم استخدام حلقة while.

00:06:19.040 --> 00:06:22.300
الآن نحن بصدد تحديث تطبيق Miwok لاستخدام حلقة
while.

00:06:22.300 --> 00:06:26.240
بخصوص أول مهمة قم بإزالة رسائل السجل في نشاط
الأرقام

00:06:26.240 --> 00:06:27.000
والاستمرار لإنشاء طريقة.

00:06:28.160 --> 00:06:32.570
وتتمثل المهمة الثانية في تعديل أرقام الشرط السفلية
للنشاط

00:06:32.570 --> 00:06:35.030
لتغيير المخطط النسبي ليصبح مخطط خطي.

00:06:36.280 --> 00:06:39.850
ثم قم بتعيين الاتجاه الخطي ليكون رأسيا،

00:06:39.850 --> 00:06:41.530
ثم إضافة معرّف عرض يسمى الجذر.

00:06:43.060 --> 00:06:46.830
واخيرًا قم بتعديل طريقة إنشاء نشاط الأرقام بحيث

00:06:46.830 --> 00:06:50.290
يستخدم الكود حلقة while لعرض textview وإنشائه

00:06:50.290 --> 00:06:52.340
لكل عنصر في قائمة الكلمات.

00:06:52.340 --> 00:06:54.990
ذكر يمكنك البدء من حيث توقفنا آخر مع الكود الخاص
بنشاط الأرقام

00:06:54.990 --> 00:06:59.490
الذي يقوم بإنشاء ثلاثة نصوص لاستخدامها يدويًا دون
استخدام حلقة.

00:07:00.610 --> 00:07:03.180
لذا بعد استكمال الخطوات من 1 حتى 3.

00:07:03.180 --> 00:07:05.210
يجب أن يبدو نشاط الأرقام في تطبيقك على هذا النحو.

00:07:06.390 --> 00:07:08.080
لذلك، إذا كنت بحاجة إلى تلميح.

00:07:08.080 --> 00:07:11.410
فقد قمت بإضافة مثال على حلقة while بالأسفل

00:07:11.410 --> 00:07:13.940
ويوجد أيضًا مثال على الناتج كذلك.

00:07:13.940 --> 00:07:14.440
بالتوفيق.

