WEBVTT
Kind: captions
Language: pt-BR

00:00:00.667 --> 00:00:03.601
Certo, precisávamos descobrir
qual dessas 4 opções

00:00:03.634 --> 00:00:05.501
levariam a um array que se pareça
com esse diagrama.

00:00:06.567 --> 00:00:09.701
À 1ª vista, o nome da variável
é "time de futebol"

00:00:09.734 --> 00:00:11.868
e tem 11 elementos.

00:00:11.901 --> 00:00:14.067
Há elementos
em vários índices,

00:00:14.100 --> 00:00:16.434
então é bom anotar
o número do índice,

00:00:16.467 --> 00:00:18.267
para ficar fácil
de lembrar.

00:00:18.300 --> 00:00:22.601
Note que começamos no índice 0
e vamos até o 10.

00:00:22.634 --> 00:00:28.200
Isso significa que o integer 5 está
no índice 0, integer 10 está no índice 1.

00:00:28.234 --> 00:00:33.334
O valor 23 está no índice 4
e o valor 1, no índice 10.

00:00:34.367 --> 00:00:36.634
Agora vamos revisar
as opções de código.

00:00:36.667 --> 00:00:41.033
Esta 1ª opção cria um integer
de array de tamanho 11,

00:00:41.067 --> 00:00:43.167
e tem uma variável
chamada time de futebol.

00:00:43.200 --> 00:00:45.000
Então até agora
parece certo.

00:00:45.033 --> 00:00:48.434
Depois inicializamos
o valor 5 no índice 1.

00:00:48.467 --> 00:00:52.234
Mas espere, acabamos de dizer
que o valor 5 deve ficar no índice 0.

00:00:52.267 --> 00:00:53.701
Então esta linha
está incorreta.

00:00:53.734 --> 00:00:58.267
Na próxima linha,
atribuímos o valor 10 no índice 2.

00:00:58.300 --> 00:01:00.467
De volta ao diagrama,

00:01:00.501 --> 00:01:02.701
vimos que ele deve ficar
no índice 1.

00:01:02.734 --> 00:01:05.834
Este código demonstra um erro
comum para iniciantes.

00:01:05.868 --> 00:01:09.501
Quando começamos a trabalhar com arrays,
é fácil pensar que os índices vão de 1

00:01:09.534 --> 00:01:13.667
até o comprimento do array,
que neste caso é 11.

00:01:13.701 --> 00:01:18.934
Porém, na verdade vemos que ele
vai do índice 0 ao índice 10

00:01:18.968 --> 00:01:21.000
em um array
de comprimento 11.

00:01:21.033 --> 00:01:23.501
Certo, isto quer dizer
que a opção 1 está incorreta.

00:01:23.534 --> 00:01:24.501
Então vamos para a opção 2.

00:01:24.534 --> 00:01:28.400
Começamos criando um array integer
de comprimento 11.

00:01:28.434 --> 00:01:33.100
Até agora está correto, mas o nome
da variável é apenas "time"

00:01:33.133 --> 00:01:35.467
e queremos que se chame
"time de futebol".

00:01:35.501 --> 00:01:36.767
Então esta opção
já está errada.

00:01:37.801 --> 00:01:39.634
O resto do código
também está incorreto,

00:01:39.667 --> 00:01:42.501
porque estamos apenas recebendo
o valor do array nestes índices,

00:01:42.534 --> 00:01:44.934
em vez de atribuir valores
aos espaços.

00:01:44.968 --> 00:01:47.067
Então a opção 2
também está incorreta.

00:01:47.100 --> 00:01:49.300
Agora vamos ver a opção 3.

00:01:49.334 --> 00:01:51.934
Estamos criando um array integer
de comprimento 11

00:01:51.968 --> 00:01:56.033
e a variável se chama "time de futebol",
então até agora parece bom.

00:01:56.067 --> 00:02:00.367
Iniciamos o índice 0 para ter o valor 5,
o 10º índice

00:02:00.400 --> 00:02:04.834
para ter valor 4, o 10º índice
para ter o valor 1,

00:02:04.868 --> 00:02:06.934
o 4º índice para ter
o valor 23,

00:02:06.968 --> 00:02:10.934
e o 1º índice
para ter o valor 10.

00:02:10.968 --> 00:02:12.801
Ei, é isso mesmo
que queremos.

00:02:12.834 --> 00:02:15.334
Isso combina com o diagrama
na questão.

00:02:15.367 --> 00:02:19.167
Você pode ter se preocupado que o código
atribui valores em uma ordem aleatória,

00:02:19.200 --> 00:02:23.367
então atribuímos o valor do 1º elemento
e depois o último elemento

00:02:23.400 --> 00:02:26.601
e depois alguns do meio,
mas não importa qual a ordem

00:02:26.634 --> 00:02:30.367
das declarações, porque as linhas
de código independem umas das outras.

00:02:30.400 --> 00:02:34.000
No fim do fragmento do código,
se quiser atribuir o índice 0 de novo,

00:02:34.033 --> 00:02:35.133
pode fazê-lo.

00:02:35.167 --> 00:02:39.934
O array vai apenas atualizar baseado
na atualização mais recente dessa posição.

00:02:39.968 --> 00:02:42.634
Ótimo, a opção 3
é a resposta correta.

00:02:42.667 --> 00:02:44.501
Não se preocupe
se não acertou.

00:02:44.534 --> 00:02:46.801
É a 1ª vez que você
aprendeu sobre arrays

00:02:46.834 --> 00:02:49.601
e haverá mais chances
de você praticar.

00:02:49.634 --> 00:02:53.234
Se estiver com dúvidas sobre
a opção 4, vamos dar uma olhada.

00:02:53.267 --> 00:02:56.901
Nesta opção, você cria
um array integer.

00:02:56.934 --> 00:03:01.901
Mas estamos escrevendo Int com I.
O tipo de dados integer é primitivo,

00:03:01.934 --> 00:03:05.133
então devemos escrevê-lo
com i minúsculo.

00:03:05.167 --> 00:03:06.267
Então já temos um problema.

00:03:07.300 --> 00:03:11.033
Outro problema é que há um espaço
entre o tipo de dados

00:03:11.067 --> 00:03:12.634
e os colchetes do array.

00:03:12.667 --> 00:03:16.834
Isso nos dará um erro no Java,
porque não é uma declaração de array válida.

00:03:16.868 --> 00:03:20.334
As próximas linhas de código
na opção 4 também estão incorretas.

00:03:20.367 --> 00:03:23.901
Então estamos colocando valores de string
nessas posições de índice,

00:03:23.934 --> 00:03:27.200
e pode ver que são strings
porque têm aspas duplas.

00:03:27.234 --> 00:03:30.300
Mas o problema é que queríamos
um array integer.

00:03:30.334 --> 00:03:33.634
Então não podemos armazenar strings
nos elementos deste array.

00:03:33.667 --> 00:03:35.667
Por isso, a opção 4
está incorreta.

