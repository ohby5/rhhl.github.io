WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:03.650
All right, so our job was to figure
out which of these four options

00:00:03.650 --> 00:00:05.500
would lead to an array that
looks like this diagram.

00:00:06.560 --> 00:00:09.730
At a quick glance,
the variable name is soccer team and

00:00:09.730 --> 00:00:11.910
it has 11 elements in it.

00:00:11.910 --> 00:00:14.100
There are elements at various indices.

00:00:14.100 --> 00:00:16.460
So it's helpful to write
down the next number.

00:00:16.460 --> 00:00:18.310
So it's just easy to remember.

00:00:18.310 --> 00:00:22.640
Now note that we start at index 0 and
go up to index 10.

00:00:22.640 --> 00:00:28.230
This means that the integer 5 is at
index 0, integer 10 is at index 1.

00:00:28.230 --> 00:00:33.340
The value 23 is at index 4 and
the value 1 is at index 10.

00:00:34.380 --> 00:00:36.660
Now let's review the code options.

00:00:36.660 --> 00:00:41.070
So this first option creates
an integer of a ray length 11, and

00:00:41.070 --> 00:00:43.190
has a variable name soccer team.

00:00:43.190 --> 00:00:45.038
So so far it's looking correct.

00:00:45.038 --> 00:00:48.460
Then we initialize
the value 5 at index o1.

00:00:48.460 --> 00:00:52.260
But wait a minute we just said that
the value 5 should be at index 0.

00:00:52.260 --> 00:00:53.748
So this lines incorrect.

00:00:53.748 --> 00:00:57.590
And then the next line we're
assigning the value 10.

00:00:57.590 --> 00:00:58.300
At the index 2.

00:00:58.300 --> 00:01:00.510
But back to the diagram.

00:01:00.510 --> 00:01:02.720
We saw that it should
be stored at index 1.

00:01:02.720 --> 00:01:05.880
This code demonstrates a common
mistake for beginners.

00:01:05.880 --> 00:01:09.520
When first working with arrays, it's
easy to think that the indices go from 1

00:01:09.520 --> 00:01:13.700
until the length of the array,
which is 11 in this case.

00:01:13.700 --> 00:01:18.960
However, in reality we see that it
goes from index 0 to index 10 for

00:01:18.960 --> 00:01:21.020
an array of length 11.

00:01:21.020 --> 00:01:23.550
All right so
this means that option 1 is incorrect.

00:01:23.550 --> 00:01:24.430
So let's move to option 2.

00:01:24.430 --> 00:01:28.440
We start off by creating
an integer array of length 11.

00:01:28.440 --> 00:01:33.120
This is correct so far but
the variable name is just team and

00:01:33.120 --> 00:01:35.490
we wanted it to be called soccer team.

00:01:35.490 --> 00:01:36.780
So this option is already wrong.

00:01:37.800 --> 00:01:39.660
The rest of the code is also incorrect.

00:01:39.660 --> 00:01:42.530
Because we're just retrieving the value
of the array of these indices

00:01:42.530 --> 00:01:44.960
instead of assigning
values to the spots.

00:01:44.960 --> 00:01:47.100
So option two is also incorrect.

00:01:47.100 --> 00:01:49.338
Now let's take a look at option three.

00:01:49.338 --> 00:01:51.973
We're creating an integer
array of length 11 and

00:01:51.973 --> 00:01:56.070
the variable's called soccer team so
it's look good so far.

00:01:56.070 --> 00:02:00.410
We initialize a 0 index to be
the value 5 the tenth index

00:02:00.410 --> 00:02:04.870
to be value 4,
the tenth index to be the value 1.

00:02:04.870 --> 00:02:06.970
The fourth index to be the value 23.

00:02:06.970 --> 00:02:10.960
And the first index to be the value 10.

00:02:10.960 --> 00:02:12.840
Hey, and that's exactly what we want.

00:02:12.840 --> 00:02:15.360
So it matches diagram in the quiz image.

00:02:15.360 --> 00:02:19.190
You may have been concerned that the
code assigns values in a random order.

00:02:19.190 --> 00:02:23.390
So we assign the value of the first
element and then the last element and

00:02:23.390 --> 00:02:26.630
then some of the middle ones But
it doesn't matter what the order of

00:02:26.630 --> 00:02:30.410
the statements are because the lines of
code are independent from each other.

00:02:30.410 --> 00:02:34.045
At the end of the code snippet, if you
want to assign to zeroth index again,

00:02:34.045 --> 00:02:35.172
you're free to do so.

00:02:35.172 --> 00:02:39.980
And the array will just update based on
the most recent update to that position.

00:02:39.980 --> 00:02:42.670
Great, so
Option 3 is the correct answer.

00:02:42.670 --> 00:02:44.530
And don't worry if you
didn't get this correct.

00:02:44.530 --> 00:02:46.830
This is the first time you're
learning about arrays and

00:02:46.830 --> 00:02:49.620
there'll be a lot more chances
coming up for your practice.

00:02:49.620 --> 00:02:53.280
In case you were wondering about Option
4, let's still take a look at it.

00:02:53.280 --> 00:02:56.935
So here in option four we're
creating an integer array.

00:02:56.935 --> 00:03:01.928
But we're capitalizing int since it
integer data type is a primitive type,

00:03:01.928 --> 00:03:05.160
we need to type in iNT with i lowercase.

00:03:05.160 --> 00:03:06.260
So this is a problem already.

00:03:07.310 --> 00:03:11.070
And another problem is that there's
a space between the data type and

00:03:11.070 --> 00:03:12.670
the array brackets.

00:03:12.670 --> 00:03:15.587
And this will give us an error in
Java because it's not a valid array

00:03:15.587 --> 00:03:16.860
declaration.

00:03:16.860 --> 00:03:20.380
The subsequent lines of code in
option four are also incorrect.

00:03:20.380 --> 00:03:23.950
So we're setting string values
into these index positions, and

00:03:23.950 --> 00:03:27.220
you can tell these are strings
because they have double quotes.

00:03:27.220 --> 00:03:30.330
But the problem is that we
intended to have an integer array.

00:03:30.330 --> 00:03:33.667
So we can't store strings inside
of the elements of this array.

00:03:33.667 --> 00:03:35.680
And so because of that
option four is incorrect.

