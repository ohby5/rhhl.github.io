WEBVTT
Kind: captions
Language: zh-CN

00:00:00.400 --> 00:00:01.550
嘿 Jess 关于数据结构的知识

00:00:01.550 --> 00:00:03.060
你讲得很不错啊

00:00:03.060 --> 00:00:06.100
嗯 我们想要创建一个 word 类

00:00:06.100 --> 00:00:09.070
具有同一单词的英语和米沃克语翻译

00:00:09.070 --> 00:00:10.710
就像我们在上一门课程中

00:00:10.710 --> 00:00:12.900
使用的平面图或蓝图比喻

00:00:12.900 --> 00:00:14.574
是的 我们可以使用同一平面图

00:00:14.574 --> 00:00:16.452
创建很多不同的 Word 对象

00:00:16.452 --> 00:00:17.160
对

00:00:17.160 --> 00:00:18.518
就像这样

00:00:18.518 --> 00:00:22.310
这是一个 Word 对象 表示的是数字 one

00:00:22.310 --> 00:00:24.890
在这个 Word 对象里有两个字符串变量

00:00:24.890 --> 00:00:29.363
一个字符串变量表示米沃克语翻译 即 lutti

00:00:29.363 --> 00:00:31.580
另一个字符串变量表示英语翻译 即 one

00:00:31.580 --> 00:00:33.855
因为这个 Word 对象是用这个 Word 类创建的

00:00:33.855 --> 00:00:36.020
所以它将具有这两个方法

00:00:36.020 --> 00:00:37.525
getMiwokTranslation 方法

00:00:37.525 --> 00:00:38.836
将翻译这个字符串

00:00:38.836 --> 00:00:40.333
以及 getDefaultTranslation 方法

00:00:40.333 --> 00:00:41.644
将翻译这个字符串

00:00:41.644 --> 00:00:42.888
太酷了

00:00:42.888 --> 00:00:44.490
听起来不错

00:00:44.490 --> 00:00:48.380
我们可以通过同一平面图

00:00:48.380 --> 00:00:49.850
创建越来越多的单词

00:00:49.850 --> 00:00:54.760
用于单词 two 用于单词 three

00:00:54.760 --> 00:00:57.420
天啦 好多 Word 对象啊

00:00:57.420 --> 00:00:58.699
在下一节课中

00:00:58.699 --> 00:01:01.138
我们将讨论下如何写这个类定义

00:01:01.138 --> 00:01:02.760
Word

00:01:02.760 --> 00:01:06.040
如果你需要帮助的话 可以参考我们在上一门课程中展示的

00:01:06.040 --> 00:01:07.825
TextView 类的简化版本

00:01:07.825 --> 00:01:12.030
我们需要为 Word 类提供一个构造函数

00:01:12.030 --> 00:01:15.730
构造函数看起来就像方法定义

00:01:15.730 --> 00:01:20.710
但是方法名称必须和类的名称完全一样 大小写等必须都要一样

00:01:20.710 --> 00:01:25.570
这里 text 的 t 要大写

00:01:25.570 --> 00:01:30.490
view 的 v 要大写 中间没有空格 与类 TextView 的名称完全一样

00:01:30.490 --> 00:01:33.370
同时注意 该构造函数没有返回类型

00:01:33.370 --> 00:01:36.929
再仔细看看 TextView 类的构造函数

00:01:36.929 --> 00:01:38.902
我们看到这里有个关键字“public”

00:01:38.902 --> 00:01:42.291
这个关键字“public”表示外部类可以访问

00:01:42.291 --> 00:01:43.730
这个构造函数

00:01:43.730 --> 00:01:47.230
例如外部类 MainActivity

00:01:47.230 --> 00:01:50.660
可以使用关键字“new”调用该构造函数

00:01:50.660 --> 00:01:55.440
并传入这个输入参数来创建新的 TextView 对象

00:01:55.440 --> 00:01:57.950
你可以为你的类创建多个不同的构造函数

00:01:57.950 --> 00:02:01.280
并具有不同的输入参数

00:02:01.280 --> 00:02:05.320
这样的话 任何外部类都可以根据它们能提供的输入参数

00:02:05.320 --> 00:02:08.910
以多种不同的方式创建 TextView 对象

00:02:08.910 --> 00:02:09.884
在下节课中

00:02:09.884 --> 00:02:13.850
我们将具体讲解下你可以如何为类创建多个构造函数

00:02:13.850 --> 00:02:16.960
正如之前提到的 这些“private”和“public”

00:02:16.960 --> 00:02:20.330
字眼称为访问变量

00:02:20.330 --> 00:02:23.290
我们在上一门课程中第一次了解到这一知识

00:02:23.290 --> 00:02:27.859
它们定义了谁可以访问这些方法或构造函数

00:02:27.859 --> 00:02:30.260
甚至整个类

00:02:30.260 --> 00:02:31.770
如果某个方法被标记为 private

00:02:31.770 --> 00:02:34.880
那么只能在封装类中被调用

00:02:34.880 --> 00:02:39.870
如果被标记为 public 则可以从类外部访问

00:02:39.870 --> 00:02:43.380
如果 MainActivity 想要创建一个新的 text 对象

00:02:43.380 --> 00:02:45.830
那么就可以创建 因为这个类被标记为 public

00:02:47.410 --> 00:02:49.120
并且有一个 public 构造函数

00:02:50.120 --> 00:02:53.629
如果这些变量或方法为 public

00:02:53.629 --> 00:02:56.639
那么 MainActivity 也可以调用它们

00:02:56.639 --> 00:02:59.750
这是上一门课程提到的图表

00:03:01.150 --> 00:03:03.870
如果 TextView 方法被标为 public

00:03:03.870 --> 00:03:09.660
则我们可以从 TextView 类中或外部访问它

00:03:09.660 --> 00:03:12.440
例如 MainActivity 可以访问它

00:03:14.490 --> 00:03:17.320
通常 最好将用来控制对象状态的

00:03:17.320 --> 00:03:20.510
应用变量设为 private

00:03:20.510 --> 00:03:23.750
这样 你可以暴露用来修改或访问

00:03:23.750 --> 00:03:25.400
这些变量的 public 方法

00:03:25.400 --> 00:03:27.889
这些方法叫做 getter 和 setter 方法

00:03:29.160 --> 00:03:32.600
它们使你能够更紧密地控制这些变量可以如何被

00:03:32.600 --> 00:03:33.380
修改或访问

00:03:33.380 --> 00:03:37.410
例如 如果这些状态变量被标为 public

00:03:37.410 --> 00:03:41.250
有人可能会在 TextView 上对其设置无效的颜色值

00:03:41.250 --> 00:03:44.240
这可能会导致你的类出现意外行为

00:03:44.240 --> 00:03:45.740
甚至导致应用出现崩溃

00:03:47.030 --> 00:03:48.260
另一方面

00:03:48.260 --> 00:03:52.780
如果有一个 private color 变量并具有 public setter 方法

00:03:52.780 --> 00:03:57.110
你就可以检查下传入的颜色是否有效 然后再更新状态

00:03:57.110 --> 00:04:00.660
现在进入下一道测试题 创建 Word 类

