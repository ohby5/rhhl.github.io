WEBVTT
Kind: captions
Language: zh-CN

00:00:00.330 --> 00:00:03.230
当我们在上次的提问中讨论如何定位视图时

00:00:03.230 --> 00:00:05.160
你可能已经提到了使用 RelativeLayout

00:00:05.160 --> 00:00:06.850
我知道我们做到了

00:00:06.850 --> 00:00:09.670
但是 我想给你介绍另一种创建布局的方式

00:00:09.670 --> 00:00:13.890
使用 Nested Viewgroups (嵌套视图组）使应用变得更为理想

00:00:13.890 --> 00:00:18.120
Nested Viewgroups 是将 ViewGroup 嵌套到另一个 ViewGroup 中

00:00:18.120 --> 00:00:22.150
这样你可以创建更有趣更复杂的布局 像这样

00:00:22.150 --> 00:00:24.050
让我们看看你会怎样创建其中一个布局的吧

00:00:25.240 --> 00:00:28.620
例如 你有一个由三个 View 组成的垂直 LinearLayout

00:00:28.620 --> 00:00:30.840
为一个 ImageView 和两个 TextView

00:00:30.840 --> 00:00:34.000
如果你想要在这个图片的顶部覆盖一些文字要怎么做呢？

00:00:34.000 --> 00:00:36.470
好了 用LinearLayout 你不能与视图重叠

00:00:36.470 --> 00:00:38.390
但是 你可以使用 RelativeLayout 

00:00:38.390 --> 00:00:42.470
我们可以用一个 RelativeLayout 来代替这个子类

00:00:42.470 --> 00:00:45.750
然后 我们把 ImageView 嵌套到这个 RelativeLayout 中

00:00:45.750 --> 00:00:49.950
这个 ImageView 现在与父 RelativeLayout的 每条边对齐

00:00:49.950 --> 00:00:53.410
现在你看到了一个 RelativeLayout 的例子

00:00:53.410 --> 00:00:54.899
它包含在一个较大的 LinearLayout 中

00:00:55.970 --> 00:00:59.850
你可以将多个 ViewGroup 组合放到别的 ViewGroup 中

00:00:59.850 --> 00:01:03.900
例如 你可以用一个 RelativeLayout 做为应用的一个根 View

00:01:03.900 --> 00:01:07.270
它可以包含一些 View 像一个 ImageView 和两个 TextView

00:01:08.350 --> 00:01:12.910
你也可以添加一个 LinearLayout 作为这个大的 RelativeLayout 的子类

00:01:14.100 --> 00:01:18.490
这个 LinearLayout 自己也可以包含像两个 ImageView 的其他子类

00:01:19.860 --> 00:01:23.340
你也可以嵌套一些 ViewGroup 到你想要的其他 ViewGroup 中

00:01:23.340 --> 00:01:26.540
但是 要仔细 因为你嵌套的越多

00:01:26.540 --> 00:01:29.810
对于你的应用在屏幕上的布局 它会变得更复杂

00:01:31.040 --> 00:01:34.990
特别地 RelativeLayout 是一个非常灵活的布局 但是它也是非常复杂的

00:01:34.990 --> 00:01:39.490
因为要计算每个 View 相对于其他 View 的位置

00:01:39.490 --> 00:01:42.380
所以 建议不要在一个 LinearLayout 内嵌套

00:01:42.380 --> 00:01:43.380
太多的层次

00:01:45.040 --> 00:01:48.730
我用一些现实生活中 Google 应用的例子来表明

00:01:48.730 --> 00:01:51.840
使用嵌套 ViewGroup 是有用的

00:01:51.840 --> 00:01:55.060
Google Now 应用显示一些相关信息

00:01:55.060 --> 00:01:59.250
基于你当前的情况 比如当前的时间或当前的定位

00:01:59.250 --> 00:02:01.310
如果你喜欢某支球队像 Red Sox

00:02:01.310 --> 00:02:04.040
是个不错的选择 然后它可以给你显示最新的比赛的得分

00:02:05.040 --> 00:02:08.570
为这个插件创建布局 你可以想象使用一个垂直 LinearLayout

00:02:08.570 --> 00:02:12.160
因为信息是按行显示的

00:02:12.160 --> 00:02:16.130
然而 在垂直 LinearLayout 里的第一项不仅是一个单一的 TextView

00:02:16.130 --> 00:02:18.380
它是由多个View构成的

00:02:19.410 --> 00:02:22.562
事实上 你会首先创建第一项作为一个水平 LinearLayout

00:02:22.562 --> 00:02:25.325
它由一个 ImageView 和一个 TextView 构成

00:02:25.325 --> 00:02:28.085
同样 在这个垂直 LinearLayout 的第二项

00:02:28.085 --> 00:02:31.205
你将会创建一个包含一个 ImageView 和一个 TextView 的

00:02:31.205 --> 00:02:32.865
水平 LinearLayout

00:02:32.865 --> 00:02:35.785
在 Google Now 应用里的另一个插件显示相关的股票信息

00:02:35.785 --> 00:02:37.315
这些东西可能是你感兴趣的

00:02:37.315 --> 00:02:39.710
我希望 Google 的股票仍然是现在的价格

00:02:39.710 --> 00:02:43.390
不管怎么说 你可以创建出像这样的垂直 LinearLayout

00:02:43.390 --> 00:02:45.740
因为你可以想象这也是按行排列的

00:02:45.740 --> 00:02:48.410
除了这些中间项 不仅是一个单一的 TextView

00:02:48.410 --> 00:02:50.640
它们是由多个 TextView 够成的

00:02:50.640 --> 00:02:53.280
对于 Google 股票价格的这一行

00:02:53.280 --> 00:02:57.340
你可能使用一个水平 LinearLayout 并用四个 TextView 填充它

00:02:57.340 --> 00:02:59.670
其他的股票价格也是如此

00:02:59.670 --> 00:03:02.690
这些水平 LinearLayout 是这个

00:03:02.690 --> 00:03:03.620
垂直 LinearLayout 的子类

00:03:03.620 --> 00:03:09.050
在 Google Play music 应用里 当然 你可以听音乐

00:03:09.050 --> 00:03:11.260
虽然这看起来像要创建一个复杂的布局

00:03:11.260 --> 00:03:14.850
实际上 你可以把它分解成你认识的小的 ViewGroup

00:03:14.850 --> 00:03:17.530
这个模式感觉像有三个不同子类的

00:03:17.530 --> 00:03:19.260
垂直 LinearLayout

00:03:19.260 --> 00:03:22.620
第一个子类通过使用一个 RelativeLayout 来创建

00:03:22.620 --> 00:03:24.200
因为 View 是相对的

00:03:25.390 --> 00:03:28.360
第二个子类也使用一个 RelativeLayout 来创建

00:03:28.360 --> 00:03:30.990
因为 View 相互重叠

00:03:30.990 --> 00:03:34.800
这里的第三个类点看起来像一个水平 LinearLayout

00:03:34.800 --> 00:03:37.080
由5个不同的按钮构成

00:03:37.080 --> 00:03:40.480
同样 我们可以使用嵌套 ViewGroup 来构建这个屏幕

00:03:40.480 --> 00:03:41.970
这只是创建布局的一种方式

00:03:41.970 --> 00:03:44.318
你也可以用很多其他的方法创建它

00:03:45.351 --> 00:03:48.667
在 Google Maps 应用里 前面我们看到个别位置的详细页面

00:03:48.667 --> 00:03:51.500
如餐厅

00:03:51.500 --> 00:03:55.150
你不可能构建这个屏幕 仅使用单一的一个 LinearLayout 或

00:03:55.150 --> 00:03:56.420
单一的 RelativeLayout

00:03:56.420 --> 00:03:58.740
你需要嵌套一些 ViewGroup 在一起

00:03:58.740 --> 00:03:59.500
在广泛的范围内

00:03:59.500 --> 00:04:02.860
我们可以看到信息几乎是按行排列的

00:04:02.860 --> 00:04:05.400
所以 我们可以使用一个垂直的 LinearLayout作为父View

00:04:05.400 --> 00:04:07.900
一个子类可能是这里的整个布局

00:04:07.900 --> 00:04:10.330
另一个子类可能是这一行的按钮

00:04:10.330 --> 00:04:12.725
另一个子类可能是这个描述 等等

00:04:13.985 --> 00:04:16.894
但是每个子类不仅是一个单一的View

00:04:16.894 --> 00:04:18.935
我们有多个View

00:04:18.935 --> 00:04:23.762
在大范围 LinearLayout里的子类由三个独立的ViewGroup成

00:04:23.762 --> 00:04:26.472
你可以使用一个对于每个View权重相同的水平 LinearLayout

00:04:26.472 --> 00:04:30.042
这样它们可以均匀分布

00:04:31.042 --> 00:04:34.662
在大范围的垂直LinearLayout里的这个子类也可以由

00:04:34.662 --> 00:04:37.636
带有一个 ImageView 和一个 TextView 构成

00:04:37.636 --> 00:04:43.036
如果你继续滚动这个页面 你可以看到更多关于餐厅的详细信息

00:04:43.036 --> 00:04:47.276
同样 我能想象这里的各个行信息

00:04:47.276 --> 00:04:49.873
使用垂直LinearLayout 所有的信息仍然有效

00:04:49.873 --> 00:04:54.503
并且 一些行比单一的 TextView 更复杂

00:04:54.503 --> 00:04:58.313
这一行显示的是一些你可以预约的时间

00:04:58.313 --> 00:05:01.143
它是由三个不同的按钮构成的

00:05:01.143 --> 00:05:03.063
你可以使用一个水平的LinearLayout来安排它们

00:05:03.063 --> 00:05:07.563
图片这一行也可以用一个水平LinearLayout构造

00:05:07.563 --> 00:05:10.383
实际上 在这个水平LinearLayout里

00:05:10.383 --> 00:05:13.360
第一个子类不仅是一个单一的 ImageView

00:05:13.360 --> 00:05:15.230
它是一个带有 TextView 的 ImageView

00:05:15.230 --> 00:05:18.680
所以 你可以使用 RelativeLayout 来创建这个子类

00:05:18.680 --> 00:05:22.520
你可以看到这个 ViewGroup 嵌套在这个 ViewGroup里

00:05:22.520 --> 00:05:24.100
再嵌套在这个 ViewGroup 里

00:05:24.100 --> 00:05:26.790
事实上有更多的ViewGroup在 RelativeLayout 和 LinearLayout 之外

00:05:26.790 --> 00:05:30.905
这里还有框架布局和网格布局

00:05:30.905 --> 00:05:33.705
在这节课里 我们不打算花时间去讲解它们 

00:05:33.705 --> 00:05:37.215
但是我强烈建议你们找时间学习一下 

00:05:37.215 --> 00:05:39.796
因为有时候这些比仅使用 RelativeLayout 和 LinearLayout 更好

