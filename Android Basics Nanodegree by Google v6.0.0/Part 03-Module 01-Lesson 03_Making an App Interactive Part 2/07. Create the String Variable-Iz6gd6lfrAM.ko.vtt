WEBVTT
Kind: captions
Language: ko

00:00:00.630 --> 00:00:02.790
이전의 강의에서 우리는
정수 변수를 지정하거나

00:00:02.790 --> 00:00:04.628
생성하는 방법에 대해 배웠습니다.

00:00:04.628 --> 00:00:07.390
변수를 생성하기 위해서
우리는 같은 형식을 따르겠지만,

00:00:07.390 --> 00:00:11.480
이번에는 그 변수가 스트링이기 때문에
텍스트를 가지게 됩니다.

00:00:11.480 --> 00:00:13.815
이것은 우리의 앱에 추가한
그 코드입니다.

00:00:13.815 --> 00:00:16.995
이것은 priceMessage라고 하는 
새로운 문자열 변수를 생성합니다.

00:00:16.995 --> 00:00:20.315
그리고 그것이 보유하는 변수는
텍스트인 'Free'입니다.

00:00:20.825 --> 00:00:24.605
그것은 Java의 문법 규칙에 의거한
특정한 형식을 따릅니다.

00:00:24.605 --> 00:00:26.025
먼저, 우리는 
데이터 유형을 지정합니다.

00:00:26.025 --> 00:00:28.515
이 경우에는, 그것은 문자열이죠.

00:00:28.515 --> 00:00:31.485
문자열은 단지 문자의 
배열이라는 걸 기억하세요.

00:00:31.485 --> 00:00:35.439
그 다음에는 변수 이름이 따르는데,
이 경우에는 priceMessage이죠.

00:00:36.080 --> 00:00:38.850
그 다음에는 등호와 초기 값,

00:00:38.850 --> 00:00:41.330
그리고 세미콜론이 진술문이 
끝났음을 나타내기 위해 따릅니다.

00:00:42.490 --> 00:00:44.480
데이터 유형이 문자열이라는 것은

00:00:44.480 --> 00:00:47.780
이 변수의 안에 들어갈 수 있는 
정보의 유형이 제한됨을 의미합니다.

00:00:47.780 --> 00:00:50.780
한번에 단 하나의 문자열만
저장될 수 있습니다.

00:00:50.780 --> 00:00:54.030
문자열은 문자들, 숫자들, 
또는 기호들로 이루어질 수 있습니다.

00:00:54.860 --> 00:00:58.770
변수의 이름은 우리가 이 변수에
붙인 이름이라는 걸 기억할 겁니다.

00:00:58.770 --> 00:01:03.160
우리는 나중에 변수를 얻거나 값을
업데이트하기 위해 그걸 참조할 수 있죠.

00:01:03.160 --> 00:01:05.000
그것은 변수에 이름표를
붙이는 것과 같습니다.

00:01:05.920 --> 00:01:08.620
당신이 변수의 이름을 고를 때
중요한 것은 그것이

00:01:08.620 --> 00:01:12.950
어떠한 유형의 정보를 가지게 될지를
기술하는 기술적인 것을 골라야 합니다.

00:01:12.950 --> 00:01:15.430
저는 이 변수 이름을 
캐서린이라고 부를 수 있지만

00:01:15.430 --> 00:01:18.520
그것은 그것 안에 있는 정보를
실제로 반영하지 않죠.

00:01:18.520 --> 00:01:20.530
제 코드 읽기를
더 힘들게 만들기도 합니다.

00:01:20.530 --> 00:01:24.550
왜냐면 캐서린이라고 불리는 문자열
변수가 왜 있는지 아무도 모르니까요.

00:01:24.550 --> 00:01:25.620
또 한편으로는,

00:01:25.620 --> 00:01:28.990
priceMessage같은 이름의 변수는
약간 더 편리합니다. 왜냐하면 당신이

00:01:28.990 --> 00:01:32.530
그것 안에 아마도 가격과 연관된 
메시지가 있다는 걸 알게 되니까요.

00:01:32.530 --> 00:01:36.190
우리가 이것을 이전에 살폈지만, 
변수이름을 짓는 데는 관례가 있어요.

00:01:36.190 --> 00:01:38.990
그것들이 무엇인지 당신이 잊으셨다면,
언제든 다시 찾아볼 수 있습니다.

00:01:38.990 --> 00:01:42.350
저는 그냥 Google에서
'변수 이름 Java'를 검색합니다.

00:01:42.350 --> 00:01:45.690
저는 여기에서 이름짓기에 관해 
언급된 곳으로 스크롤 다운할 수 있죠.

00:01:45.690 --> 00:01:47.780
변수이름은 대소문자를
구분한다고 되어 있는데,

00:01:47.780 --> 00:01:49.850
보통은 소문자로 된 글자로 시작합니다.

00:01:49.850 --> 00:01:52.790
그 다음에 여러 단어가 있다면
카멜 케이스를 이용합니다.

00:01:53.950 --> 00:01:57.420
다음에 우리는 과제 실행기,
또는 등호가 여기 있습니다.

00:01:57.420 --> 00:02:00.830
이 실행기는 변수에 
값을 지정하는 책임을 맡죠.

00:02:00.830 --> 00:02:02.860
그래서 오른쪽에 있는 이 값을 취해

00:02:02.860 --> 00:02:04.910
그 변수인 priceMessage 안으로
그것을 지정합니다.

00:02:06.100 --> 00:02:09.400
우리는 이 문자열의 초기 값가
텍스트인 것과

00:02:09.400 --> 00:02:10.949
큰 따옴표를 지정합니다.

00:02:10.949 --> 00:02:15.800
이것은 '문자열 그대로'라고 부르는데
'그대로'는 고정값을 지니고 있기 때문이죠.

00:02:15.800 --> 00:02:20.060
우리는 먼저 정수 변수에 관해 배울 때
'그대로'에 대해서 들었습니다.

00:02:20.060 --> 00:02:24.190
2, 5, 또는 10 같은 고정값은 모두
정수 그대로입니다.

00:02:24.190 --> 00:02:29.060
왜냐하면 바뀌는 변수와 반대로
그것들은 바뀌지 않으니까요.

00:02:29.060 --> 00:02:31.480
상자의 비유로 돌아가자면,
그 값,

00:02:31.480 --> 00:02:34.020
'Free'가 이 변수 안으로
들어갈 것입니다.

00:02:34.020 --> 00:02:36.830
마지막으로 말하지만 중요한데, 
진술문의 끝에는 세미콜론도 있습니다.

00:02:38.040 --> 00:02:41.310
이제 우리가 코드에 관한 이 맥락을
좀 더 이해하니, 진행해서

00:02:41.310 --> 00:02:43.860
다른 값들로 실험을 해 보세요.

00:02:43.860 --> 00:02:47.890
여기에서 초기값을 바꾸거나 변수이름을
바꾸려 시도해 볼 수 있습니다.

00:02:47.890 --> 00:02:50.420
예륻 들어, 여러분은 'Free'와 같은 
짧은 문자열이나

00:02:50.420 --> 00:02:52.460
또는 그것을 
긴 문자열로 바꿀 수 있습니다.

00:02:52.460 --> 00:02:55.220
당신은 또한 완전히 비어있는
문자열도 만들 수 있는데,

00:02:55.220 --> 00:02:58.830
그것은 큰 따옴표 사이에
어떤 글자도 남기지 않는 겁니다.

00:02:58.830 --> 00:03:03.120
공백을 추가하거나
숫자를 추가할 수도 있고

00:03:03.120 --> 00:03:04.250
혹은 기호를 추가할 수도 있습니다.

00:03:05.920 --> 00:03:08.930
당신이 '문자열 그대로'를 생성한다면,
단지 주의하시기 바라는데,

00:03:08.930 --> 00:03:12.640
특별하게 대처해야 하는 
특정한 글자들이 있으니까요.

00:03:12.640 --> 00:03:16.040
예를 들어, 만일 당신의 문자열에
따옴표를 사용하려 한다면,

00:03:16.040 --> 00:03:18.970
그 다음에는 다음같은 
에러 메시지가 뜰겁니다.

00:03:18.970 --> 00:03:24.090
달러기호를 해결할 수 없고
세미콜론을 예상한다구요.

00:03:24.090 --> 00:03:26.640
이것은 그 컴파일러는 그 문자열 전체가

00:03:26.640 --> 00:03:29.150
이 전체가 될 것으로 추정된다는 걸
모르기 때문입니다.

00:03:29.150 --> 00:03:30.950
이 문제를 해결하기 위해서,
Google 검색을 합시다.

00:03:32.190 --> 00:03:34.720
Google에서 Java escape
글자들을 검색하세요.

00:03:38.090 --> 00:03:41.750
그리고 escape sequences라고 부르는
부분으로 스크롤 다운합니다.

00:03:41.750 --> 00:03:44.920
Java에서는 특정 글자는 
특별한 것을 의미합니다.

00:03:44.920 --> 00:03:49.210
처음과 끝의 기호는 Java에서 
문자열을 표시하기 위한 것이지만

00:03:49.210 --> 00:03:52.160
만일 당신이 실제로 
문자열에 인용구를 넣고 싶다면

00:03:52.160 --> 00:03:55.090
escape sequences를 
사용해야 할 필요가 있죠.

00:03:55.090 --> 00:03:59.330
escape sequences는
백 슬래시 기호 앞에 오고

00:03:59.330 --> 00:04:01.990
Java compiler는 특별한 방식으로
그것을 통역할 것입니다.

00:04:03.030 --> 00:04:06.520
만일 우리가 큰 따옴표로 백슬래시를
사용하면, 그게 나타내는 뜻은 실제로

00:04:06.520 --> 00:04:11.460
따옴표를 사용하고 싶고 텍스트 문자열을
의미하는 따옴표가 아니라는 겁니다.

00:04:11.460 --> 00:04:12.350
제 말이 무슨 뜻인지 보여드리죠.

00:04:13.480 --> 00:04:16.160
Android Studio에서 저는
텍스트에서 나타나기를 바라는

00:04:16.160 --> 00:04:19.079
각 따옴표 앞에 백슬래시를
추가할 수 있습니다.

00:04:20.200 --> 00:04:24.520
자, 이 변수의 전체 초기 값은
이 전체의 문자열이 될 겁니다,

00:04:24.520 --> 00:04:27.590
왜냐하면 그것은 특정한 종결
따옴표로 표시가 되었기 때문이죠.

00:04:28.570 --> 00:04:31.390
그리고 그 텍스트 문자열 안에서,
저는 또한 따옴표를 쓰고 싶지만

00:04:31.390 --> 00:04:35.050
저는 그것들을 각 따옴표 앞에서
백슬래시를 이용해서 표시합니다.

00:04:35.760 --> 00:04:39.220
만일 제 기구를 작동시킨다면,
저는 1달러 주변에 따옴표를 보지만

00:04:39.220 --> 00:04:42.440
전체 주변에는 따옴표가 안 보이는데,
그게 우리가 기대하는 것입니다.

00:04:43.240 --> 00:04:46.510
알면 유용한 다른 escape sequence는
이 backslash n인데,

00:04:46.510 --> 00:04:50.900
새로운 선을 삽입하여 텍스트가
다음줄로 계속 연결되게 합니다.

00:04:51.610 --> 00:04:53.750
당신의 코드에서도 
이것을 시도해 볼 수 있습니다.

00:04:54.230 --> 00:04:57.730
그 세미콜론은 항상 진술문의
마지막에 와야 한다는 걸 기억하세요.

00:04:57.730 --> 00:05:00.010
영어에서는 따옴표안에 구두점을
찍는 것이 문법적으로 맞지만

00:05:00.010 --> 00:05:04.050
그것을 따옴표의 밖에 두어야 합니다.

00:05:04.050 --> 00:05:07.620
이 사이의 어떤 것이든지
텍스트 문자열의 일부입니다.

00:05:07.620 --> 00:05:11.110
그리고 당신은 Java compiler를 위해서
세미콜론을 밖에 찍어야 합니다.

00:05:11.110 --> 00:05:13.360
당신은 또한 변수 이름을
변경시킬 수 있습니다.

00:05:13.360 --> 00:05:17.440
만일 제가 이것을 메시지 같은 것으로
바꾸면, 이것은 여기 에러가 납니다.

00:05:17.440 --> 00:05:20.200
왜냐하면 그것은 priceMessage
부호를 해결할 수 없기 때문이죠.

00:05:20.200 --> 00:05:22.150
그래서 저는 또한 그냥 그걸 
복사해서 여기에 내려놓아야 합니다.

00:05:22.150 --> 00:05:24.440
그러면 이것은 당신의 기기에서
실행될 것입니다.

00:05:24.790 --> 00:05:26.860
하지만 그 데이터 유형을
바꿀 수는 없습니다.

00:05:26.860 --> 00:05:30.110
문자열은 반드시 이것과 
똑같이 철자를 써야 합니다.

00:05:30.110 --> 00:05:32.245
문자열은 여기에서 대문자로 쓰였는데
그것이 사물이기 때문입니다.

00:05:32.245 --> 00:05:34.700
우리는 사물에 관해서
3과에서 배울겁니다.

00:05:34.700 --> 00:05:37.230
하지만 지금은 그냥 문자열을
대문자 S로 활자를 치세요.

00:05:37.230 --> 00:05:38.960
우리가 이전에 정수로 작업할 때,

00:05:38.960 --> 00:05:42.409
우리는 int를 위해 소문자 i로
정수를 지정했습니다.

00:05:42.960 --> 00:05:45.570
그것은 그게 원초적인 데이터
유형이므로 소문자인데,

00:05:45.570 --> 00:05:49.260
원초적이라는 뜻은 그게 기초적인
java의 데이터 유형이라는 뜻이죠.

00:05:49.730 --> 00:05:52.320
다른 변수 이름과 초기 값으로
시험해보기 바랍니다.

00:05:52.320 --> 00:05:54.980
당신이 문자열 변수를 생성하는 것에
친숙해 질 때까지말이죠.

00:05:54.980 --> 00:05:57.680
저에게 아래에 나열된
이 문자열 지정의 각각에 대해

00:05:57.680 --> 00:05:59.670
무엇이 잘못되었는지
말해주세요.

00:05:59.670 --> 00:06:02.900
이 코드 행들에 있는 
각각의 에러를 지적해주세요.

