WEBVTT
Kind: captions
Language: zh-CN

00:00:00.300 --> 00:00:03.260
让我们看看嵌套 ViewGroup 是如何应用于我们的应用的

00:00:03.260 --> 00:00:06.540
我们应用中的信息看起来是垂直排列成一列的

00:00:06.540 --> 00:00:09.120
所以我们可以使用一个垂直 LinearLayout

00:00:09.120 --> 00:00:09.770
到目前为止这看起来不错

00:00:09.770 --> 00:00:14.140
因为垂直 LinearLayout 中每行只有一个 View 

00:00:14.140 --> 00:00:17.630
然而当我们进入这一行 它实际上是由多个 View 组成的

00:00:17.630 --> 00:00:21.640
我们可以使用一个水平 LinearLayout 构建这一行的一个按钮

00:00:21.640 --> 00:00:23.080
一个 TextView 和一个按钮

00:00:23.080 --> 00:00:25.711
所以这个LinearLayout 可以是第二个子类

00:00:25.711 --> 00:00:27.710
在一个更大的垂直 LinearLayout 里

00:00:28.910 --> 00:00:32.030
一会儿 我将向你展示三个不同的 XML布局文件 并且

00:00:32.030 --> 00:00:35.050
我想问你 你认为哪一个确实能构建

00:00:35.050 --> 00:00:36.860
我们想要的布局

00:00:36.860 --> 00:00:38.860
我不希望你复制这些文件并且

00:00:38.860 --> 00:00:40.460
在Android Studio 运行

00:00:40.460 --> 00:00:43.160
我希望你基于对这个代码的阅读和理解

00:00:43.160 --> 00:00:44.239
做一个猜测

00:00:45.460 --> 00:00:47.940
你可以在讲师注释中找到这个链接

00:00:47.940 --> 00:00:54.950
它有三个选项  A B C

00:00:54.950 --> 00:00:57.960
三者中只有一个可以正确构建我们想要的布局

00:00:59.500 --> 00:01:02.460
这将是一个挑战因为我们之前没有见过

00:01:02.460 --> 00:01:04.000
包含嵌套 ViewGroup 的 XML

00:01:04.000 --> 00:01:07.440
我们将要把这个挑战分为两个测试

00:01:07.440 --> 00:01:09.800
我不要求你做出选择

00:01:09.800 --> 00:01:13.390
第一个测试 我希望你画出每一个 XML 文件的

00:01:13.390 --> 00:01:15.600
View 层次结构草图

00:01:15.600 --> 00:01:18.550
这里稍微解释一下什么是 View 层次结构

00:01:19.860 --> 00:01:20.720
你需要纸和

00:01:20.720 --> 00:01:23.940
笔以便于勾勒出这些图

00:01:23.940 --> 00:01:28.340
Android 管理屏幕上所有 View 的方式是通过 View 层次

00:01:28.340 --> 00:01:30.650
或者一个 View 树状结构

00:01:30.650 --> 00:01:34.010
这是一个简单的表现 View 层次的结构图

00:01:34.010 --> 00:01:37.870
它显示了 View 间的父子关系

00:01:37.870 --> 00:01:41.720
整个布局的根 View 是一个 LinearLayout 

00:01:41.720 --> 00:01:45.770
它有三个子类 一个 RelativeLayout  一个 TextView  和另一个 TextView 

00:01:45.770 --> 00:01:49.842
并且这时这个 RelativeLayout 同样有它自己的子类 一个ImageView 和

00:01:49.842 --> 00:01:51.450
一个TextView 

00:01:51.450 --> 00:01:53.170
对于我们的 Puddles the Pig 应用

00:01:53.170 --> 00:01:56.620
这是 Android 创建的 View 层次结构

00:01:56.620 --> 00:02:00.999
我们有一个 RelativeLayout 作为根 View 它有四个子类 一个 ImageView 

00:02:00.999 --> 00:02:03.606
两个 TextView 和一个 LinearLayout

00:02:03.606 --> 00:02:07.210
并且这个LinearLayout  反过来 有两个 ImageView 作为子类

00:02:08.820 --> 00:02:11.540
现在你明白 View 层次结构是什么了

00:02:11.540 --> 00:02:14.800
通过勾勒出每一个 XML 布局的层次结构

00:02:14.800 --> 00:02:19.650
你可以更好的明白哪个 View 是父 View 哪个是子 View

00:02:19.650 --> 00:02:21.830
并且这些子 View 是否还有子 View

00:02:23.230 --> 00:02:27.520
如果你还需要一些提示 这有一些通过 XML 布局

00:02:27.520 --> 00:02:29.050
怎样画出 View 层次结构图的例子

00:02:30.200 --> 00:02:33.250
在这个布局 我们有一个 LinearLayout 的根 View

00:02:33.250 --> 00:02:34.130
顺便 在这里我添加这些省略号

00:02:34.130 --> 00:02:36.650
因为我不能在这写下所有代码

00:02:36.650 --> 00:02:39.800
有一个 LinearLayout 作为根 View  你画这个在树的顶部

00:02:40.900 --> 00:02:43.250
这时它包含两个子 TextView  所以

00:02:43.250 --> 00:02:46.970
你把它们放在下面作为子 View 这就好了

00:02:46.970 --> 00:02:49.230
这是一个更复杂的布局

00:02:49.230 --> 00:02:51.602
有一个 LinearLayout 作为根 View

00:02:51.602 --> 00:02:55.636
它包含了三个直属子 View  两个 TextView  一个 RelativeLayout 

00:02:55.636 --> 00:02:59.870
这时在 RelativeLayout 内 我们有一个 ImageView 和一个 TextView 作为子类

00:02:59.870 --> 00:03:03.100
当你为每一个选项画完了 View 层次结构图

00:03:03.100 --> 00:03:06.030
勾选每一个选项后继续

00:03:06.030 --> 00:03:09.230
在接下来的测试里 我将让你做选择

00:03:09.230 --> 00:03:12.440
决定哪个选项最好 不过现在 你暂时不用决定

