WEBVTT
Kind: captions
Language: zh-TW

00:00:00.630 --> 00:00:02.790
在之前的課程中，我們學習了如何聲明或

00:00:02.790 --> 00:00:04.088
建立整數變量。

00:00:04.088 --> 00:00:07.520
我們將以相同格式建立變量，但

00:00:07.520 --> 00:00:11.480
這次變量包含文本，因為它是個字串。

00:00:11.480 --> 00:00:13.815
這是我們添加到應用程式的代碼。

00:00:13.815 --> 00:00:16.995
這建立一個稱為
priceMessage的新字串變量。

00:00:16.995 --> 00:00:19.715
它所包含的值是文本Free。

00:00:20.825 --> 00:00:24.605
它按照Java的語法規則，有規定的格式。

00:00:24.605 --> 00:00:26.025
首先，我們指定數據類型。

00:00:26.025 --> 00:00:28.515
這裡是字串。

00:00:28.515 --> 00:00:31.485
記得字串只是一系列的字元。

00:00:31.485 --> 00:00:34.939
然後跟變量名稱，
這裡是priceMessage。

00:00:36.080 --> 00:00:38.850
然後跟等號、初始值，

00:00:38.850 --> 00:00:41.330
以及分號指示語句的結束。

00:00:42.490 --> 00:00:46.280
聲明數據類型是字串能限制什麽類型的資訊

00:00:46.280 --> 00:00:47.780
可包含在此變量中。

00:00:47.780 --> 00:00:50.780
一次只可儲存一個字串在其中。

00:00:50.780 --> 00:00:53.830
一個字串可由字母、數字或符號組成。

00:00:54.860 --> 00:00:58.770
你可能記得變量名稱是我們給此變量起的名稱，

00:00:58.770 --> 00:01:03.160
以便我們以后引用它，來取出數值或更新數值。

00:01:03.160 --> 00:01:04.650
這就像給變量一個名稱標籤。

00:01:05.920 --> 00:01:08.620
當你取變量名稱時，要選擇某個描述性的名稱，

00:01:08.620 --> 00:01:12.950
來描述它將包含什麽類型的資訊。

00:01:12.950 --> 00:01:15.660
我可以稱此變量名稱為Catherine，

00:01:15.660 --> 00:01:18.520
但它並沒有真正反映其中包含的資訊。

00:01:18.520 --> 00:01:20.530
它也會讓我的代碼難以讀懂，

00:01:20.530 --> 00:01:24.820
因為沒人知道為什麽會有個
稱為Catherine的字串變量。

00:01:24.820 --> 00:01:25.450
另一方面，

00:01:25.450 --> 00:01:28.990
類似priceMessage這樣的變量名稱
就有點幫助，因為

00:01:28.990 --> 00:01:32.530
你知道在裡面可能有與價格相關的訊息。

00:01:32.530 --> 00:01:36.280
我們在這之前已經看過它，
但變量名稱有命名規則。

00:01:36.280 --> 00:01:38.990
如果你忘記了那些規則，你總是可以查看它們。

00:01:38.990 --> 00:01:42.350
我在谷歌搜索中搜索
variable name Java。

00:01:42.350 --> 00:01:45.690
我可以下滾到談關於命名的這裡。

00:01:45.690 --> 00:01:47.780
它說變量名稱是區分大小寫的，並且

00:01:47.780 --> 00:01:49.850
你通常以小寫字母開頭。

00:01:49.850 --> 00:01:52.520
然後如果有多個詞的話，你使用駝峰式大小寫。

00:01:53.950 --> 00:01:57.420
接下來是賦值操作符，或這裡的等號。

00:01:57.420 --> 00:02:00.830
此操作符掌管賦值給變量。

00:02:00.830 --> 00:02:02.860
它取右側的這個值並

00:02:02.860 --> 00:02:04.910
賦值給變量priceMessage。

00:02:06.100 --> 00:02:09.400
我們指定此字串的初始值為某些文字和

00:02:09.400 --> 00:02:10.949
雙引號。

00:02:10.949 --> 00:02:15.800
這稱為字串即值，因為即值有固定的值。

00:02:15.800 --> 00:02:20.060
我們第一次聽到即值是在學習有關整數變量時。

00:02:20.060 --> 00:02:24.190
諸如2、5或10這樣的固定值都是整數即值，

00:02:24.190 --> 00:02:29.060
因為它們不會改變，相對應的是會改變的變量。

00:02:29.060 --> 00:02:31.480
回到我們的盒子比喻，值

00:02:31.480 --> 00:02:34.020
Free將進入此變量中。

00:02:34.020 --> 00:02:36.830
最後但也是重要的，在語句的結尾有一個分號。

00:02:38.040 --> 00:02:41.310
現在我們更加理解此行代碼了，可

00:02:41.310 --> 00:02:43.860
進一步嘗試不同的值。

00:02:43.860 --> 00:02:47.890
你可以嘗試變更這裡的初始值或更改變量名稱。

00:02:47.890 --> 00:02:50.420
例如，你可以使用象Free這樣的短字串，或

00:02:50.420 --> 00:02:52.460
將它更改為較長的字串。

00:02:52.460 --> 00:02:55.220
你也可以將它變為完全空白的字串，

00:02:55.220 --> 00:02:58.830
也就是在兩個引號之間不留字元。

00:02:58.830 --> 00:03:03.120
你可以添加空格，也可以添加數字，或者

00:03:03.120 --> 00:03:04.250
可以添加符號。

00:03:05.920 --> 00:03:08.930
當你建立字串即值時，要小心

00:03:08.930 --> 00:03:12.640
有些字元需要特別處理。

00:03:12.640 --> 00:03:16.040
例如，如果你在字串中使用引號，

00:03:16.040 --> 00:03:18.970
則你將會遇到錯誤，說

00:03:18.970 --> 00:03:24.090
不能解析美元符和需要有一個分號。

00:03:24.090 --> 00:03:27.360
這是因為編譯器不知道整個字串應當

00:03:27.360 --> 00:03:29.150
是包含這一整個的。

00:03:29.150 --> 00:03:30.950
要解決此問題，我們進行谷歌搜索。

00:03:32.190 --> 00:03:34.720
在谷歌中搜索
Java escape characters。

00:03:38.090 --> 00:03:41.750
並且向下滾動到叫做
escape sequences的部份。

00:03:41.750 --> 00:03:44.920
在Java中，某些字元有特殊意義。

00:03:44.920 --> 00:03:49.210
開頭和結尾引號在Java中定義一個字串，但

00:03:49.210 --> 00:03:52.160
如果你想要將引號實際放入字串中，

00:03:52.160 --> 00:03:55.090
你將需要使用轉義序列。

00:03:55.090 --> 00:03:59.330
轉義序列是一個前綴反斜線的字元，

00:03:59.330 --> 00:04:01.990
Java編譯器將以特殊方式來解釋它。

00:04:03.030 --> 00:04:06.520
如果我們使用反斜線帶雙引號，這指示我們

00:04:06.520 --> 00:04:11.460
實際想要使用引號，而不是表示是字串的引號。

00:04:11.460 --> 00:04:12.350
讓我說明意思。

00:04:13.480 --> 00:04:16.160
在Android Studio中，我可以在

00:04:16.160 --> 00:04:19.079
實際想要出現在文本中的各引號之前加反斜線。

00:04:20.200 --> 00:04:24.520
現在，此變量的整個初始值將是這一整個字串。

00:04:24.520 --> 00:04:26.880
因為它被這特定的結尾引號標記結束。

00:04:28.570 --> 00:04:31.390
在那個字串中，我也想要使用引號，但

00:04:31.390 --> 00:04:34.720
我通過在各引號之前使用反斜線來標記它們。

00:04:35.760 --> 00:04:39.220
如果在設備上運行，我看到
one dollar兩邊有引號，但

00:04:39.220 --> 00:04:42.130
在整個的兩邊沒有引號，這是我所期望的。

00:04:43.240 --> 00:04:46.510
另一個要知道的有用轉義序列是此反斜線n，

00:04:46.510 --> 00:04:50.360
它插入一新行，以使文本繼續到下一行。

00:04:51.610 --> 00:04:53.180
你也可以在你的代碼中試試這。

00:04:54.230 --> 00:04:57.730
要記住分號始終是在語句的結尾。

00:04:57.730 --> 00:04:59.700
雖然英文中將標點符號放在引號之內

00:04:59.700 --> 00:05:04.050
語法上是正確的，但你需要將它放在引號之外。

00:05:04.050 --> 00:05:07.620
在這之間的任何東西都是字串的一部份。

00:05:07.620 --> 00:05:10.540
對於Java編譯器，你需要將分號放在外面。

00:05:10.540 --> 00:05:13.360
你也可以修改變量名稱。

00:05:13.360 --> 00:05:17.440
如果我將這更改為諸如message，
則這裡會出錯，

00:05:17.440 --> 00:05:20.200
因為它不能解析priceMessage。

00:05:20.200 --> 00:05:22.150
因此我只需拷貝它並且也放在這裡。

00:05:22.150 --> 00:05:23.790
這應當可在你的設備上運行。

00:05:24.790 --> 00:05:26.860
但你不能變更數據類型。

00:05:26.860 --> 00:05:30.110
String必須完全照樣拼寫。

00:05:30.110 --> 00:05:32.245
這裡的String大寫，因為是對象。

00:05:32.245 --> 00:05:34.700
我們將在第3課中學習關於對象，但目前的話

00:05:34.700 --> 00:05:37.230
只需輸入S大寫的String。

00:05:37.230 --> 00:05:38.960
我們在之前使用整數時，

00:05:38.960 --> 00:05:41.889
我們用i小寫的int來聲明整數。

00:05:42.960 --> 00:05:45.570
小寫是因為它是原始數據類型，

00:05:45.570 --> 00:05:48.540
原始是說它是基本Java數據類型之一。

00:05:49.730 --> 00:05:51.470
請嘗試不同的變量名稱和

00:05:51.470 --> 00:05:54.980
初始值直到你能熟練地建立字串變量。

00:05:54.980 --> 00:05:57.680
然後我要你告訴我以下列出的各字串聲明

00:05:57.680 --> 00:05:59.670
什麽地方錯了。

00:05:59.670 --> 00:06:02.320
我要你指出這些行代碼中各自的錯誤。

