WEBVTT
Kind: captions
Language: fr

00:00:00.630 --> 00:00:02.790
Plus tôt dans la leçon que nous avons appris
sur la façon de déclarer ou

00:00:02.790 --> 00:00:04.088
Créer une variable entière.

00:00:04.088 --> 00:00:07.520
Nous allons suivre la même
format à créer une variable, mais

00:00:07.520 --> 00:00:11.480
Cette fois la variable détient
texte, car il est une chaîne.

00:00:11.480 --> 00:00:13.815
Ceci est le code, nous avons ajouté à notre application.

00:00:13.815 --> 00:00:16.995
Cela crée une nouvelle chaîne
variable appelée priceMessage.

00:00:16.995 --> 00:00:19.715
Et la valeur qu'il détient
est le texte gratuit.

00:00:20.825 --> 00:00:24.605
Il suit un format spécifique selon
aux règles de syntaxe de Java.

00:00:24.605 --> 00:00:26.025
Abord, nous spécifier le type de données.

00:00:26.025 --> 00:00:28.515
Dans ce cas, il est une chaîne.

00:00:28.515 --> 00:00:31.485
Rappelez-vous qu'une chaîne est juste
une séquence de caractères.

00:00:31.485 --> 00:00:34.939
Puis il est suivi par le nom de la variable,
qui est priceMessage dans ce cas.

00:00:36.080 --> 00:00:38.850
Puis elle est suivie par un signe égal,
valeur initiale,

00:00:38.850 --> 00:00:41.330
Et un point-virgule pour indiquer
la fin de la déclaration.

00:00:42.490 --> 00:00:46.280
Dire que le type de données est une chaîne
limites ce type d'information peut aller

00:00:46.280 --> 00:00:47.780
L'intérieur de cette variable.

00:00:47.780 --> 00:00:50.780
Seule chaîne peut être stocké dans
à un moment.

00:00:50.780 --> 00:00:53.830
Une chaîne peut être composé de lettres,
chiffres ou symboles.

00:00:54.860 --> 00:00:58.770
Vous pouvez rappeler qu'un nom de variable est
le nom que nous donnons cette variable, donc

00:00:58.770 --> 00:01:03.160
Nous pouvons nous référer à lui plus tard, pour obtenir la valeur
out ou de mettre à jour la valeur.

00:01:03.160 --> 00:01:04.650
Il est comme donner
la variable d'une balise de nom.

00:01:05.920 --> 00:01:08.620
Lorsque vous ramassez un nom de variable,
il est important de choisir quelque chose

00:01:08.620 --> 00:01:12.950
Qui est descriptive, qui décrit ce que
type d'information qu'il tiendra.

00:01:12.950 --> 00:01:15.660
Je pourrais appeler cette variable
nom Catherine, mais

00:01:15.660 --> 00:01:18.520
Il ne reflète pas vraiment
l'information à l'intérieur de celui-ci.

00:01:18.520 --> 00:01:20.530
Il rend mon code plus difficile à lire ainsi,

00:01:20.530 --> 00:01:24.820
Parce que personne ne sait pourquoi il ya
une variable de chaîne appelée Catherine.

00:01:24.820 --> 00:01:25.450
D'autre part,

00:01:25.450 --> 00:01:28.990
Un nom de variable comme priceMessage est
un peu plus utile, parce que vous savez

00:01:28.990 --> 00:01:32.530
Il ya un message à l'intérieur de celui-ci qui est
lié au prix sans doute.

00:01:32.530 --> 00:01:36.280
Nous avons regardé cela plus tôt, mais il ya
conventions de nommage pour les noms de variables.

00:01:36.280 --> 00:01:38.990
Si vous oubliez ce que ceux-ci sont,
vous pouvez toujours regarder vers le haut.

00:01:38.990 --> 00:01:42.350
Je viens cherche
nom de la variable Java dans Google Search.

00:01:42.350 --> 00:01:45.690
Je peux faire défiler ici pour
où il parle de nommer.

00:01:45.690 --> 00:01:47.780
Il dit que les noms de variables
sont sensibles à la casse, et

00:01:47.780 --> 00:01:49.850
Vous commencez généralement avec
une lettre minuscule.

00:01:49.850 --> 00:01:52.520
Et puis vous utilisez cas de chameau
si il ya plusieurs mots.

00:01:53.950 --> 00:01:57.420
Ensuite, nous avons l'opérateur d'affectation,
ou le signe égal ici.

00:01:57.420 --> 00:02:00.830
Cet opérateur est en charge de la
attribuer une valeur à une variable.

00:02:00.830 --> 00:02:02.860
Vous prenez donc cette valeur sur
la droite et

00:02:02.860 --> 00:02:04.910
Vous attribuez dans l'
priceMessage variable.

00:02:06.100 --> 00:02:09.400
Nous spécifions la valeur initiale de
cette chaîne pour être un texte et

00:02:09.400 --> 00:02:10.949
Guillemets.

00:02:10.949 --> 00:02:15.800
Ceci est appelé une chaîne littérale, parce
un littéral a une valeur fixe.

00:02:15.800 --> 00:02:20.060
Nous avons d'abord entendu parler de littéraux quand nous
apprenaient variables entières.

00:02:20.060 --> 00:02:24.190
Une valeur fixe comme deux, cinq ou dix
sont tous littéral entier

00:02:24.190 --> 00:02:29.060
Valeurs car elles ne changent pas, comme
opposition à une variable qui ne change.

00:02:29.060 --> 00:02:31.480
Pour en revenir à notre boîte analogie,
la valeur,

00:02:31.480 --> 00:02:34.020
Gratuit, serait aller à l'intérieur de cette variable.

00:02:34.020 --> 00:02:36.830
Et last but not least, nous avons aussi
un point-virgule à la fin de l'instruction.

00:02:38.040 --> 00:02:41.310
Maintenant que nous comprenons cette ligne de
Code un peu mieux, aller de l'avant et

00:02:41.310 --> 00:02:43.860
Essayer d'expérimenter avec des valeurs différentes.

00:02:43.860 --> 00:02:47.890
Vous pouvez essayer de changer la valeur initiale
ici ou changer le nom de la variable.

00:02:47.890 --> 00:02:50.420
Par exemple, vous pouvez utiliser
une courte chaîne comme Free ou

00:02:50.420 --> 00:02:52.460
Changer pour être une chaîne plus longue.

00:02:52.460 --> 00:02:55.220
Vous pourriez en faire une chaîne vide complètement
ainsi,

00:02:55.220 --> 00:02:58.830
Qui ne laisse pas de caractères
entre les deux signes de citation.

00:02:58.830 --> 00:03:03.120
Vous pouvez ajouter un espace, ou
vous pouvez ajouter des numéros aussi bien, ou

00:03:03.120 --> 00:03:04.250
Vous pourriez ajouter des symboles.

00:03:05.920 --> 00:03:08.930
Lorsque vous créez votre chaîne de
littérale, juste faire attention

00:03:08.930 --> 00:03:12.640
Qu'il ya certains personnages
que vous avez besoin pour faire face à spécialement.

00:03:12.640 --> 00:03:16.040
Par exemple, si vous utilisez
le signe de devis dans votre chaîne,

00:03:16.040 --> 00:03:18.970
Alors vous allez courir
dans une erreur qui dit:

00:03:18.970 --> 00:03:24.090
Ne peut pas résoudre le symbole dollar et
un point-virgule est attendue.

00:03:24.090 --> 00:03:27.360
Ceci est parce que le compilateur ne sait pas
que l'ensemble de la chaîne est censée

00:03:27.360 --> 00:03:29.150
Être tout cela.

00:03:29.150 --> 00:03:30.950
Pour résoudre ce problème,
faisons une recherche Google.

00:03:32.190 --> 00:03:34.720
Dans Google, recherchez
caractères d'échappement Java.

00:03:38.090 --> 00:03:41.750
Et faites défiler jusqu'à une section
appelés des séquences d'échappement.

00:03:41.750 --> 00:03:44.920
En Java,
certains caractères signifient des choses spéciales.

00:03:44.920 --> 00:03:49.210
Les symboles de devis début et de fin sont
pour désigner une chaîne en Java, mais

00:03:49.210 --> 00:03:52.160
Si vous voulez mettre réellement
une citation à l'intérieur de votre chaîne,

00:03:52.160 --> 00:03:55.090
Vous aurez besoin d'utiliser une séquence d'échappement.

00:03:55.090 --> 00:03:59.330
Une séquence d'échappement est un personnage
précédé par une barre oblique inverse, et

00:03:59.330 --> 00:04:01.990
Le compilateur Java
interpréter d'une manière spéciale.

00:04:03.030 --> 00:04:06.520
Si nous utilisons une barre oblique inverse avec un double
citation, qui indique que nous avons effectivement

00:04:06.520 --> 00:04:11.460
Vouloir utiliser le symbole de devis, pas
la citation qui signifie qu'il est une chaîne de texte.

00:04:11.460 --> 00:04:12.350
Permettez-moi de vous montrer ce que je veux dire.

00:04:13.480 --> 00:04:16.160
Dans Android Studio Je peux ajouter
une barre oblique inverse avant chaque

00:04:16.160 --> 00:04:19.079
Guillemet que je veux réellement
à apparaître dans le texte.

00:04:20.200 --> 00:04:24.520
Maintenant, toute la valeur initiale de ce
variables sera toute cette chaîne,

00:04:24.520 --> 00:04:26.880
Parce qu'elle est délimitée par les
certaines citations finaux.

00:04:28.570 --> 00:04:31.390
Et à l'intérieur de cette chaîne de texte,
Je tiens également à utiliser des guillemets, mais

00:04:31.390 --> 00:04:34.720
Je marque les en utilisant une barre oblique inverse
en face de chaque citation.

00:04:35.760 --> 00:04:39.220
Si je cours sur mon appareil,
Je vois les guillemets autour de un dollar, mais

00:04:39.220 --> 00:04:42.130
Je ne vois pas les guillemets autour de la pleine
chose, qui est ce que nous attendons.

00:04:43.240 --> 00:04:46.510
Une autre séquence d'échappement utile
à savoir est ce n barre oblique inverse,

00:04:46.510 --> 00:04:50.360
Qui insère une nouvelle ligne afin que le texte de
continuera sur la ligne suivante.

00:04:51.610 --> 00:04:53.180
Vous pouvez essayer celui-ci dehors
dans votre code ainsi.

00:04:54.230 --> 00:04:57.730
Rappelez-vous que le point-virgule devrait
toujours à la fin de l'instruction.

00:04:57.730 --> 00:04:59.700
Même si en anglais, il est
grammaticalement correct de mettre le

00:04:59.700 --> 00:05:04.050
Ponctuation à l'intérieur du devis, vous voulez
de le mettre sur l'extérieur de la citation.

00:05:04.050 --> 00:05:07.620
Quelque chose entre ici
fait partie de la chaîne de texte.

00:05:07.620 --> 00:05:10.540
Et vous avez besoin de mettre le point-virgule sur
l'extérieur pour le compilateur Java.

00:05:10.540 --> 00:05:13.360
Vous pouvez également modifier le nom de la variable.

00:05:13.360 --> 00:05:17.440
Si je change cela pour quelque chose comme
message, puis cela me donne une erreur

00:05:17.440 --> 00:05:20.200
Ici, parce qu'il ne peut pas résoudre
le message des prix de symbole.

00:05:20.200 --> 00:05:22.150
Donc, je dois juste le copier et le
mettre bas ici aussi.

00:05:22.150 --> 00:05:23.790
Et cela devrait fonctionner sur votre appareil.

00:05:24.790 --> 00:05:26.860
Vous ne pouvez pas changer le type de données, cependant.

00:05:26.860 --> 00:05:30.110
Il doit être orthographié chaîne
exactement comme cela.

00:05:30.110 --> 00:05:32.245
String est capitalisé ici
car il est un objet.

00:05:32.245 --> 00:05:34.700
Nous en apprendrons sur les objets dans la leçon 3, mais pour

00:05:34.700 --> 00:05:37.230
Maintenant il suffit de taper la chaîne avec un capital S.

00:05:37.230 --> 00:05:38.960
Lorsque nous travaillions
avec des entiers plus tôt,

00:05:38.960 --> 00:05:41.889
Nous déclarer entiers
avec un i minuscule pour int.

00:05:42.960 --> 00:05:45.570
Il est minuscule, car il est
un type de données primitive,

00:05:45.570 --> 00:05:48.540
Primitive où il est l'un des moyens
de types de données de base de Java.

00:05:49.730 --> 00:05:51.470
Expérimentez avec différents noms de variables et

00:05:51.470 --> 00:05:54.980
Valeurs initiales jusqu'à ce que vous sont à l'aise avec la création
variables de chaîne.

00:05:54.980 --> 00:05:57.680
Ensuite, je veux que vous me disiez ce qui est
incorrecte sur chacun de ces cordes

00:05:57.680 --> 00:05:59.670
Déclarations énumérées ci-dessous.

00:05:59.670 --> 00:06:02.320
Je veux que vous soulignez l'
d'erreur dans chacune de ces lignes de code.

