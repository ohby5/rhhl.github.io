WEBVTT
Kind: captions
Language: ja

00:00:00.630 --> 00:00:02.050
以前のレッスンでは宣言の仕方

00:00:02.050 --> 00:00:04.268
整数型変数の作成について学びました

00:00:04.688 --> 00:00:07.360
今回は同様に変数を作成しますが

00:00:07.360 --> 00:00:11.480
今回は変数に文字が入ります
文字列型の変数ですね

00:00:11.480 --> 00:00:13.815
こちらは アプリに追加したコードです

00:00:13.815 --> 00:00:16.995
これで 新たな文字列を
priceMessage という変数にします

00:00:16.995 --> 00:00:19.915
変数の値は Free という文字列です

00:00:20.655 --> 00:00:24.605
これは Java の構文規則に従っています

00:00:24.605 --> 00:00:26.615
まず データ型を明示します

00:00:26.615 --> 00:00:28.515
この場合は String （文字列）です

00:00:28.515 --> 00:00:31.485
文字列とは 並んでいる文字のことです

00:00:31.485 --> 00:00:34.939
次に来るのは変数名で
ここでは priceMessage ですね

00:00:36.080 --> 00:00:38.850
そして = と初期値が続き

00:00:38.850 --> 00:00:41.330
セミコロンで命令文を終了します

00:00:42.490 --> 00:00:45.140
つまり この変数に入れられる

00:00:45.140 --> 00:00:47.590
情報のデータ型は文字列です

00:00:47.590 --> 00:00:50.520
そして 一度に入れられる文字列は
１つだけです

00:00:50.520 --> 00:00:54.080
文字列は 文字 数字 
記号で作成できます

00:00:54.720 --> 00:00:58.770
変数名とは変数に与えた名前で

00:00:58.770 --> 00:01:03.160
後で参照して 値を更新できるものでしたね

00:01:03.160 --> 00:01:04.960
ちょうど 変数に名札を付けるようなものです

00:01:05.660 --> 00:01:08.620
変数名を付けるときに気を付けたいのは

00:01:08.620 --> 00:01:12.950
どんな情報を持っているのか
分かりやすい名にすることでした

00:01:12.950 --> 00:01:15.660
この変数名を Catherine に
することもできましたが

00:01:15.660 --> 00:01:18.520
それでは どんな情報なのか分かりませんね

00:01:18.520 --> 00:01:20.530
これでは コードを読むのが難しくなります

00:01:20.530 --> 00:01:24.830
なぜ 変数が Catherine という名前なのか
見当がつかないからです

00:01:24.830 --> 00:01:28.990
一方 priceMessage という名前ならば
便利ですね

00:01:28.990 --> 00:01:32.530
これなら価格に関するものだろうと
見当がつきます

00:01:32.530 --> 00:01:36.280
変数の命名規則は
前にも取り上げましたが

00:01:36.280 --> 00:01:38.990
忘れていたら 自分で探してみましょう

00:01:38.990 --> 00:01:42.350
variable name Java で
検索しています

00:01:42.350 --> 00:01:45.690
ネーミングについてを探します

00:01:45.690 --> 00:01:47.780
変数は大文字と小文字を区別し

00:01:47.780 --> 00:01:49.850
通常 小文字で開始すると書いてあります

00:01:49.850 --> 00:01:52.520
複数の言葉を含む場合は
キャメルケースを使います

00:01:53.950 --> 00:01:57.420
次に代入演算子
この = 記号があります

00:01:57.420 --> 00:02:00.830
この演算子で値を変数にします

00:02:00.830 --> 00:02:02.860
これで 右式にある値を―

00:02:02.860 --> 00:02:05.170
変数 priceMessage に割り当てます

00:02:05.930 --> 00:02:08.460
文字列の初期値は文字と

00:02:08.460 --> 00:02:10.949
二重引用符2つで表します

00:02:10.949 --> 00:02:15.800
これは 文字列リテラルと呼ばれます
リテラルは固定値だからです

00:02:15.800 --> 00:02:20.060
整数型変数を学んだ時に
リテラルが初めて出てきました

00:02:20.060 --> 00:02:24.660
２や５や10 といった固定値は
すべて整数リテラル値です

00:02:24.660 --> 00:02:29.060
変数とは対照的に
変化しないからです

00:02:29.060 --> 00:02:31.480
箱の例に戻りましょう

00:02:31.480 --> 00:02:34.020
値である Free がこの変数の中に入ります

00:02:34.020 --> 00:02:37.110
命令文の最後にはセミコロンがあります

00:02:37.910 --> 00:02:41.310
これで コードのこの行を
理解できたと思います

00:02:41.310 --> 00:02:43.860
他の値も試してみましょう

00:02:43.860 --> 00:02:47.890
この初期値を変更したり
変数名を変更してみてください

00:02:47.890 --> 00:02:50.420
例えば Free のような短い文字列を―

00:02:50.420 --> 00:02:52.460
もっと長い文字列にも変更できます

00:02:52.460 --> 00:02:55.220
空の文字列にしても構いません

00:02:55.220 --> 00:02:58.830
つまり 二重引用符の間に
何も文字を入れないのです

00:02:58.830 --> 00:03:02.930
また スペースや数字を加えたり

00:03:02.930 --> 00:03:04.250
記号も加えられます

00:03:05.920 --> 00:03:08.930
文字列リテラルを作成するときに

00:03:08.930 --> 00:03:12.640
注意が必要な文字があります

00:03:12.640 --> 00:03:16.040
例えば 文字列の中に
引用符を入れると

00:03:16.040 --> 00:03:18.970
エラーメッセージが発生します

00:03:18.970 --> 00:03:24.090
dollar という記号を解決できません 
セミコロンが必要です

00:03:24.090 --> 00:03:25.770
これが起きる理由は―

00:03:25.770 --> 00:03:29.150
コンパイラがこの部分全部が文字列だと
理解できないからです

00:03:29.150 --> 00:03:31.260
検索して この問題を解決しましょう

00:03:31.990 --> 00:03:35.170
Java escape characters を
Google で検索してください

00:03:38.090 --> 00:03:41.560
エスケープシーケンスの章を探します

00:03:41.560 --> 00:03:44.750
Java では 特定の文字に
特別な意味があります

00:03:44.750 --> 00:03:48.960
開始引用符と終了引用符は
Java では文字列を示すのに使います

00:03:48.960 --> 00:03:52.030
しかし ここでは文字列に
引用符を入れたいので

00:03:52.030 --> 00:03:54.990
エスケープシーケンスが必要です

00:03:54.990 --> 00:03:59.210
エスケープシークエンスは
バックスラッシュに続く文字で表され

00:03:59.210 --> 00:04:02.210
これで Java コンパイラは
特殊な方法だと解釈します

00:04:02.910 --> 00:04:05.210
バックスラッシュと
二重引用符を使うと

00:04:05.210 --> 00:04:11.270
これは文字列を意味するのではなく
引用記号として使いたいのだと分かります

00:04:11.270 --> 00:04:12.720
具体例をお見せしましょう

00:04:13.340 --> 00:04:16.160
Android Studio で バックスラッシュを

00:04:16.160 --> 00:04:19.359
実際に文字として表示したい
各引用符の前に加えます

00:04:20.070 --> 00:04:24.520
これで変数の初期値全体が
文字列となります

00:04:24.520 --> 00:04:27.380
これは特定の終了引用符で
無効にしたからです

00:04:28.430 --> 00:04:31.390
文字列の中では
引用符を使いたいので

00:04:31.390 --> 00:04:35.040
ここではバックスラッシュを
各引用符の前に置きます

00:04:35.760 --> 00:04:39.220
そして デバイスを起動すると
1 dollar の前後に引用符が見えます

00:04:39.220 --> 00:04:42.500
でも文字列全体の前後には引用符が見えません
これが期待した挙動です

00:04:43.110 --> 00:04:46.510
他の便利なエスケープシーケンスは
\n で

00:04:46.510 --> 00:04:50.600
これで新しい行を挿入して
テキストが改行されます

00:04:51.430 --> 00:04:53.360
これもコードで試してみてください

00:04:54.030 --> 00:04:57.730
命令文の最後のセミコロンを忘れずに

00:04:57.730 --> 00:05:01.650
英文法では句読点は
引用文の中に入れるのが正しいのですが

00:05:01.650 --> 00:05:03.990
引用文の外に出しましょう

00:05:03.990 --> 00:05:07.450
この間はすべてテキスト文字列の一部です

00:05:07.450 --> 00:05:10.860
Java コンパイラが分かるように
セミコロンは必ず外に置きます

00:05:11.370 --> 00:05:13.360
変数名も変更してみましょう

00:05:13.360 --> 00:05:17.600
message のような名前に
変更するとエラーになります

00:05:17.600 --> 00:05:20.200
priceMessage を
解決できなくなるからです

00:05:20.200 --> 00:05:22.560
ですから コピーしてこちらにも置きます

00:05:22.560 --> 00:05:24.180
デバイスで実行してみましょう

00:05:24.650 --> 00:05:26.750
しかし データ型は変更できません

00:05:26.750 --> 00:05:30.110
この通りにつづってください

00:05:30.110 --> 00:05:32.465
オブジェクトである String は
大文字で始めます

00:05:32.465 --> 00:05:34.480
オブジェクトについては
レッスン３で学びますが

00:05:34.480 --> 00:05:37.110
今は大文字の S で String
とだけ覚えましょう

00:05:37.110 --> 00:05:38.960
以前 整数で作業した時は―

00:05:38.960 --> 00:05:42.219
小文字の i で始まる
int で整数を宣言しました

00:05:42.730 --> 00:05:45.480
小文字なのは
プリミティブ型のデータだからで

00:05:45.480 --> 00:05:48.740
プリミティブというのは
Java の基本データ型のことです

00:05:49.540 --> 00:05:52.300
さまざまな変数名と初期値を試して

00:05:52.300 --> 00:05:54.830
文字列変数の作成に慣れてください

00:05:54.830 --> 00:05:56.880
それから 下記にある―

00:05:56.880 --> 00:05:59.670
文字列宣言の誤りを見つけてください

00:05:59.670 --> 00:06:03.000
コードの各行のエラーを示してください

