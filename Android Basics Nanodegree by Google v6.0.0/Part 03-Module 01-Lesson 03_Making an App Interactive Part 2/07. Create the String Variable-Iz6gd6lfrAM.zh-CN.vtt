WEBVTT
Kind: captions
Language: zh-CN

00:00:00.630 --> 00:00:02.790
在之前的课程中 我们已经学过如何声明或者

00:00:02.790 --> 00:00:04.088
创建一个整型变量

00:00:04.088 --> 00:00:07.520
我们按照同样的格式来创建一个变量 但是

00:00:07.520 --> 00:00:11.480
变量保持文本格式 因为它是一个字符串

00:00:11.480 --> 00:00:13.815
这是我们加在应用中的代码

00:00:13.815 --> 00:00:16.995
创建一个叫做 priceMessage 的字符串变量

00:00:16.995 --> 00:00:19.715
变量值是文本 Free

00:00:20.825 --> 00:00:24.605
根据 Java 语法规则它遵循特定的格式

00:00:24.605 --> 00:00:26.025
首先 我们指定的数据类型

00:00:26.025 --> 00:00:28.515
这里 我们指定为 String 字符串类型

00:00:28.515 --> 00:00:31.485
记住 String 字符串就是一些字符的序列

00:00:31.485 --> 00:00:34.939
在类型的后面是变量名 这里变量名是 priceMessage

00:00:36.080 --> 00:00:38.850
后面是 = 及初始值

00:00:38.850 --> 00:00:41.330
和一个用来标记声明结束的分号

00:00:42.490 --> 00:00:46.280
声明数据类型为 String 就限定了

00:00:46.280 --> 00:00:47.780
这个变量可以保存的信息种类

00:00:47.780 --> 00:00:50.780
变量一次只能存放一个字符串

00:00:50.780 --> 00:00:53.830
一个字符串可以有字母、数字、符号构成

00:00:54.860 --> 00:00:58.770
你可能还记得 变量名就是我们赋予变量的名称

00:00:58.770 --> 00:01:03.160
后面我们可以引用它 来读取变量的值或者更新变量的值

00:01:03.160 --> 00:01:04.650
就像是给了变量一个标记

00:01:05.920 --> 00:01:08.620
当你选择变量名时 你要选择

00:01:08.620 --> 00:01:12.950
表述性强的名称 使得它能够反映变量存储的信息类型

00:01:12.950 --> 00:01:15.660
我可以把这个变量名设为 Catherine 但是

00:01:15.660 --> 00:01:18.520
它不能够反映变量中储存的信息

00:01:18.520 --> 00:01:20.530
这使得我的代码很难被读懂

00:01:20.530 --> 00:01:24.820
因为没有人知道为什么会有一个叫 Catherine 的变量

00:01:24.820 --> 00:01:25.450
另一方面

00:01:25.450 --> 00:01:28.990
变量名称叫 priceMessage 是非常有意义的 因为这样你就知道

00:01:28.990 --> 00:01:32.530
变量中存储的信息是与价格有关的

00:01:32.530 --> 00:01:36.280
这是我们所期待的 但是变量的命名是有规则的

00:01:36.280 --> 00:01:38.990
如果你忘了命名规则 你可以搜一搜

00:01:38.990 --> 00:01:42.350
我在 Google 搜索里搜 variable name Java

00:01:42.350 --> 00:01:45.690
拖动滚动条 拖到Naming 这里

00:01:45.690 --> 00:01:47.780
它说 变量名是区分大小写的 并且

00:01:47.780 --> 00:01:49.850
通常以小写字母开头

00:01:49.850 --> 00:01:52.520
如果有多个单词 就用骆驼命名法则

00:01:53.950 --> 00:01:57.420
然后使用赋值符号也就是等于号

00:01:57.420 --> 00:02:00.830
这个符号是用来给变量赋值的

00:02:00.830 --> 00:02:02.860
将右边的值

00:02:02.860 --> 00:02:04.910
赋给变量 priceMessage

00:02:06.100 --> 00:02:09.400
我们指定此字符串的初始值是一些文本

00:02:09.400 --> 00:02:10.949
用双引号括起来

00:02:10.949 --> 00:02:15.800
这就是所谓的字面量 因为字面量有一个固定的值

00:02:15.800 --> 00:02:20.060
我们学习整型变量的时候就听过字面量

00:02:20.060 --> 00:02:24.190
一个固定的值比如2、5、10都是整型字面量值

00:02:24.190 --> 00:02:29.060
因为它们都是不变的 与变量不同

00:02:29.060 --> 00:02:31.480
回到我们的盒子这里 这个值

00:02:31.480 --> 00:02:34.020
Free 会储存在这个变量里

00:02:34.020 --> 00:02:36.830
最后很重要的一条是 在这条声明的最后要加一个分号

00:02:38.040 --> 00:02:41.310
现在我们能更好的理解这行代码了 继续

00:02:41.310 --> 00:02:43.860
尝试不同的值

00:02:43.860 --> 00:02:47.890
你可以试着改变初始值或者改变变量名

00:02:47.890 --> 00:02:50.420
例如 你可以使用一个短字符串 比如 Free

00:02:50.420 --> 00:02:52.460
或者把它改为长点的字符串

00:02:52.460 --> 00:02:55.220
你也可以设为空字符串

00:02:55.220 --> 00:02:58.830
空字符串的两个引号之间不包含任何字符

00:02:58.830 --> 00:03:03.120
你也可以加入空格 或者数字 或者

00:03:03.120 --> 00:03:04.250
加入符号

00:03:05.920 --> 00:03:08.930
当你在创建字符串时

00:03:08.930 --> 00:03:12.640
有一些字符你需要特别处理

00:03:12.640 --> 00:03:16.040
例如 在字符串里使用引号

00:03:16.040 --> 00:03:18.970
这时会显示一个错误

00:03:18.970 --> 00:03:24.090
就是无法识别 dollar 或者没有添加引号

00:03:24.090 --> 00:03:27.360
这是因为编译器不知道整个字符串就是

00:03:27.360 --> 00:03:29.150
这些内容

00:03:29.150 --> 00:03:30.950
为了解决这个问题 我们去 Google 中搜一下

00:03:32.190 --> 00:03:34.720
在 Google 里搜 Java escape characters

00:03:38.090 --> 00:03:41.750
向下拖滚动条找到 Escape Sequences 的部分

00:03:41.750 --> 00:03:44.920
在 Java 中 一些字符有特殊的意义

00:03:44.920 --> 00:03:49.210
在 Java 中双引号之间的内容表示字符串 但是

00:03:49.210 --> 00:03:52.160
如果你想把双引号加入到你的字符串中

00:03:52.160 --> 00:03:55.090
你需要一个 Escape Sequence （转义序列）

00:03:55.090 --> 00:03:59.330
转义序列就是反斜杠后面加一个字符

00:03:59.330 --> 00:04:01.990
Java 编译器会用一种特殊的方式编译它

00:04:03.030 --> 00:04:06.520
如果我们用一个反斜杠和一个双引号 那就意味着

00:04:06.520 --> 00:04:11.460
我们想要使用引号 而不是用它来表示一个字符串

00:04:11.460 --> 00:04:12.350
我来演示一下

00:04:13.480 --> 00:04:16.160
在 Android Studio 我可以在每一个引号前

00:04:16.160 --> 00:04:19.079
添加反斜杠来表示我们想在文本里显示引号

00:04:20.200 --> 00:04:24.520
现在 变量的初始值就是这整个字符串

00:04:24.520 --> 00:04:26.880
因为它被某个后引号标记

00:04:28.570 --> 00:04:31.390
在那个文本字符串中 我也想用引号 但是

00:04:31.390 --> 00:04:34.720
我在每个引号前加一个反斜杠 (\)

00:04:35.760 --> 00:04:39.220
在设备上运行 我看到在 “1 dollar” 这有引号

00:04:39.220 --> 00:04:42.130
但是没有看到括住字符串的引号 这就是我们想要的

00:04:43.240 --> 00:04:46.510
另一个有用的转义序列 是反斜杠 \n

00:04:46.510 --> 00:04:50.360
它使用来插入新的一行 使得文本在下一行继续

00:04:51.610 --> 00:04:53.180
你可以在你的代码中添加这个转义序列

00:04:54.230 --> 00:04:57.730
声明的末尾要有引号

00:04:57.730 --> 00:04:59.700
尽管英语语法允许 将这个符号放在

00:04:59.700 --> 00:05:04.050
引号中间 你也必须把它放在引号的外面

00:05:04.050 --> 00:05:07.620
引号之间的所有字符都是文本的一部分

00:05:07.620 --> 00:05:10.540
为了编译需要 要在外面加上引号

00:05:10.540 --> 00:05:13.360
你也可以改变这个变量名称

00:05:13.360 --> 00:05:17.440
如果我改成 message 这里就会报错

00:05:17.440 --> 00:05:20.200
因为无法识别 priceMessage

00:05:20.200 --> 00:05:22.150
所以我要复制它并且粘贴在这里

00:05:22.150 --> 00:05:23.790
这样就可以运行了

00:05:24.790 --> 00:05:26.860
你不能改变数据类型

00:05:26.860 --> 00:05:30.110
String 必须这样拼写

00:05:30.110 --> 00:05:32.245
String 要大写 因为它是一个对象

00:05:32.245 --> 00:05:34.700
在第三课我们将学习对象

00:05:34.700 --> 00:05:37.230
但是现在 就先使用大写字母 S 开头的 String

00:05:37.230 --> 00:05:38.960
当我们使用整型时

00:05:38.960 --> 00:05:41.889
声明整型 就用 小写字母开头的 int

00:05:42.960 --> 00:05:45.570
用小写字母开头是因为它是原始数据类型

00:05:45.570 --> 00:05:48.540
原始意味着它是 Java 的基本数据类型

00:05:49.730 --> 00:05:51.470
多练习一下不同变量名称和

00:05:51.470 --> 00:05:54.980
不同的初始值 直到你能熟练创建字符串变量

00:05:54.980 --> 00:05:57.680
我希望你能告诉我下面这些字符串的声明

00:05:57.680 --> 00:05:59.670
有什么错误

00:05:59.670 --> 00:06:02.320
我希望你能指出每行代码的错误

