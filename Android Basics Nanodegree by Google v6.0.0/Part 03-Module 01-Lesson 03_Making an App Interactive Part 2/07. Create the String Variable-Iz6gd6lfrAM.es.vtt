WEBVTT
Kind: captions
Language: es

00:00:00.630 --> 00:00:02.608
Antes aprendimos cómo declarar

00:00:02.687 --> 00:00:04.352
o crear una variable entera.

00:00:05.040 --> 00:00:07.248
Vamos a seguir el mismo patrón
para crear una variable,

00:00:07.440 --> 00:00:10.800
pero esta vez la variable contiene texto,
porque es una string.

00:00:11.480 --> 00:00:13.264
Este es el código
que añadimos a nuestra app.

00:00:13.810 --> 00:00:16.688
Esto crea una nueva variable
de string llamada <i>priceMessage</i>

00:00:16.944 --> 00:00:19.808
y el valor que contiene es
el texto <i>Free</i> (gratis).

00:00:20.820 --> 00:00:23.888
Sigue un formato específico
de acuerdo las reglas sintácticas de Java.

00:00:24.600 --> 00:00:26.208
Primero, especificamos el tipo de dato.

00:00:26.576 --> 00:00:27.824
En este caso,
es una string.

00:00:28.448 --> 00:00:31.072
Recuerda que una string es
simplemente una secuencia de caracteres.

00:00:31.480 --> 00:00:35.120
A eso le sigue el nombre de la variable,
que es <i>priceMessage</i> en este caso.

00:00:36.080 --> 00:00:38.850
Y después viene un signo <i>igual</i>,
<i>initial value</i> (valor inicial)

00:00:38.850 --> 00:00:41.330
y un punto y coma que indica
el final del <i>statement</i> (frase).

00:00:42.490 --> 00:00:44.368
Decir que el tipo de dato es una string

00:00:44.624 --> 00:00:47.280
limita qué tipo de información
puede ir dentro de esta variable.

00:00:47.780 --> 00:00:50.144
Solo puede almacenarse
en ella una string cada vez.

00:00:50.780 --> 00:00:53.830
Una string puede estar compuesta
de letras, números o símbolos.

00:00:54.860 --> 00:00:58.416
Quizá recuerdes que un nombre de variable
es el nombre que damos a una variable

00:00:58.640 --> 00:01:02.600
para poder referirnos a ella más tarde,
para sacar un valor o actualizar un valor.

00:01:03.160 --> 00:01:04.959
Es como ponerle
una etiqueta a una variable.

00:01:05.920 --> 00:01:07.392
Cuando elijas un nombre de variable,

00:01:07.530 --> 00:01:09.616
es importante que elijas
algo que sea descriptivo,

00:01:09.824 --> 00:01:12.410
que indique qué tipo
de información contiene.

00:01:12.880 --> 00:01:15.152
Podría elegir como nombre
para esta variable <i>Katherine</i>,

00:01:15.392 --> 00:01:18.272
pero eso no refleja
qué tipo de información contiene.

00:01:18.520 --> 00:01:20.530
También hace mi código
más difícil de leer,

00:01:20.544 --> 00:01:24.352
porque nadie sabe por qué hay
una variable de string llamada <i>Katherine</i>.

00:01:24.820 --> 00:01:28.192
Por otro lado, un nombre de variable
como priceMessage es más útil,

00:01:28.256 --> 00:01:32.112
porque sabes que contiene un mensaje,
relacionado con el precio, probablemente.

00:01:32.530 --> 00:01:36.000
Ya vimos esto antes, pero hay convenciones
para los nombres de variables.

00:01:36.280 --> 00:01:38.384
Si olvidas cuáles son,
siempre puedes buscarlas.

00:01:38.990 --> 00:01:41.984
Acabo de buscar <i>nombre
de variable Java</i> en Google.

00:01:42.350 --> 00:01:45.200
Puedo bajar hasta donde
habla de poner nombres.

00:01:45.648 --> 00:01:48.170
Los nombres de variables son
sensibles a mayúsculas y minúsculas

00:01:48.272 --> 00:01:49.664
y se suele empezar con minúscula.

00:01:49.850 --> 00:01:52.520
Y se usa camel-case
si hay más de una palabra.

00:01:53.950 --> 00:01:56.784
Luego tenemos el operador de asignación,
o el signo <i>igual </i>aquí.

00:01:57.420 --> 00:02:00.480
Este operador se encarga
de asignar un valor a una variable.

00:02:00.830 --> 00:02:02.672
Así que coges este valor de la derecha

00:02:02.860 --> 00:02:05.104
y lo asignas a la variable <i>priceMessage</i>.

00:02:06.100 --> 00:02:08.208
Especificamos que el valor inicial
de esta string

00:02:08.383 --> 00:02:10.320
es un texto entre comillas dobles.

00:02:10.940 --> 00:02:15.120
Esto se llama <i>literal de string</i>,
porque un literal tiene un valor fjio.

00:02:15.800 --> 00:02:19.280
Hablamos de los literales por primera vez
cuando aprendimos las variables enteras.

00:02:20.060 --> 00:02:24.688
Valores fijos, como 2, 5 o 10,
son todos valores de literales enteros

00:02:24.752 --> 00:02:28.416
porque no cambian, al contrario
que una variable que sí cambia.

00:02:29.060 --> 00:02:30.416
Volviendo a la analogía de la caja,

00:02:30.800 --> 00:02:33.440
el valor <i>Free</i> iría
dentro de esta variable.

00:02:34.020 --> 00:02:36.830
Y por último, tenemos un punto y coma
al final de la frase.

00:02:38.040 --> 00:02:40.752
Ahora que entendemos
esta línea de código un poco mejor,

00:02:40.944 --> 00:02:43.328
lánzate a experimentar
con diferentes valores.

00:02:43.860 --> 00:02:47.296
Puedes intentar cambiar el valor inicial
aquí o cambiar el nombre de la variable.

00:02:47.890 --> 00:02:50.048
Por ejemplo, puedes usar
una string corta como <i>Free</i>

00:02:50.272 --> 00:02:51.744
o cambiarla para que sea más larga.

00:02:52.384 --> 00:02:54.912
Podrías convertirla
en una string completamenta vacía,

00:02:55.220 --> 00:02:58.352
lo que no deja caracteres
entre las comillas dobles.

00:02:58.830 --> 00:03:02.112
Podrías añadir un espacio,
o números también.

00:03:02.976 --> 00:03:04.160
O podrías añadir símbolos.

00:03:05.920 --> 00:03:08.800
Cuando crees un literal de string,
ten cuidado,

00:03:08.930 --> 00:03:12.640
porque hay ciertos caracteres
a los que hay que prestar mucha atención.

00:03:12.640 --> 00:03:16.000
Por ejemplo, si usas el símbolo
de las comillas en tu string,

00:03:16.080 --> 00:03:18.576
entonces cometerás un error que dice

00:03:18.970 --> 00:03:23.136
<i>no puede resolverse el símbolo
'dollar'</i> y <i>se espera un ';'</i>.

00:03:24.090 --> 00:03:26.240
Esto pasa porque el compilador no sabe

00:03:26.320 --> 00:03:28.288
que la string entera se supone
que es todo esto.

00:03:29.150 --> 00:03:31.280
Para solucionar esto,
hagamos una búsqueda en Google.

00:03:32.190 --> 00:03:34.720
En Google, buscamos
los caracteres de escape de Java

00:03:38.090 --> 00:03:41.120
y bajamos hasta una sección
llamada secuencias de escape.

00:03:41.750 --> 00:03:44.176
En Java, ciertos caracteres significan
cosas especiales.

00:03:44.920 --> 00:03:48.336
Las comillas de principio y final denotan
a una string en Java,

00:03:49.136 --> 00:03:51.856
pero si quieres poner comillas
dentro de tu string,

00:03:52.160 --> 00:03:54.576
necesitarás usar una secuencia de escape.

00:03:55.090 --> 00:03:58.160
Una secuencia de escape es un caracter
precedido de una barra invertida

00:03:59.216 --> 00:04:02.176
y el compilador de Java la interpretará
de una manera especial.

00:04:03.030 --> 00:04:05.728
Si usamos una barra invertida
con comillas dobles, eso indica

00:04:05.800 --> 00:04:07.936
que queremos usar las comillas de verdad,

00:04:08.352 --> 00:04:10.780
no las comillas que denotan
a una string de texto.

00:04:11.460 --> 00:04:12.460
Te lo muestro ahora.

00:04:13.480 --> 00:04:16.591
En Android Studio puedo añadir
una barra invertida ante las comillas

00:04:16.656 --> 00:04:19.070
que realmente quiero
que aparezcan en el texto.

00:04:20.200 --> 00:04:24.288
Ahora, el valor inicial completo
de esta variable será toda esta string,

00:04:24.520 --> 00:04:27.056
porque está entre las comillas
de cierre verdaderas.

00:04:28.570 --> 00:04:31.200
Y dentro de esa string de texto,
también quiero usar comillas,

00:04:31.296 --> 00:04:34.720
pero las marco colocando delante
de cada una una barra invertida.

00:04:35.760 --> 00:04:38.944
Si la ejecuto en mi dispositivo,
veo comillas alrededor de <i>1 dollar</i>,

00:04:39.136 --> 00:04:42.130
pero no veo las comillas alrededor
de todo, que es lo que esperamos.

00:04:43.240 --> 00:04:46.304
Otra secuencia de escape que deberías
conocer es <i>barra invertida n minúscula</i>,

00:04:46.510 --> 00:04:50.360
que inserta una nueva línea y hace
que el texto siga en la siguiente línea.

00:04:51.610 --> 00:04:53.328
Puedes probar esta en tu código también.

00:04:54.230 --> 00:04:57.024
Recuerda que el punto y coma siempre
debería ir al final de la frase.

00:04:57.648 --> 00:04:59.610
Aunque en inglés es
gramaticalmente correcto poner

00:04:59.664 --> 00:05:03.696
la puntuación dentro de las comillas,
aquí necesitas ponerla fuera.

00:05:04.050 --> 00:05:07.232
Todo lo que queda aquí dentro es
parte de la string de texto

00:05:07.620 --> 00:05:10.720
y tienes que ponerle el punto y coma
fuera al compilador de Java.

00:05:11.264 --> 00:05:13.248
También puedes modificar
el nombre de la variable.

00:05:13.328 --> 00:05:15.568
Si cambio esto a algo como <i>message</i>,

00:05:16.288 --> 00:05:19.952
entonces me da error, porque <i>no puede
resolverse el símbolo </i>priceMessage<i>,</i>

00:05:20.256 --> 00:05:22.384
Así que necesito copiarlo
y ponerlo aquí también.

00:05:22.768 --> 00:05:24.016
Y esto debería poder ejecutarse.

00:05:24.736 --> 00:05:26.624
Sin embargo, no puede cambiarse
el tipo de dato.

00:05:26.860 --> 00:05:29.328
Hay que escribirlo <i>String</i>,
exactamente así.

00:05:30.110 --> 00:05:32.245
<i>String</i> lleva mayúscula
porque es un objeto.

00:05:32.704 --> 00:05:34.288
Hablaremos sobre objetos en la lección 3,

00:05:34.464 --> 00:05:36.960
pero por ahora, por favor
escribe <i>String</i> con mayúscula inicial.

00:05:37.230 --> 00:05:39.088
Antes, cuando estuvimos
trabajando con enteros,

00:05:39.216 --> 00:05:42.080
declarábamos integers (enteros)
con una <i>i </i>minúscula en <i>int</i>.

00:05:42.960 --> 00:05:45.168
Va en minúscula
porque es un tipo de dato primitivo.

00:05:45.570 --> 00:05:48.656
Por <i>primitivo</i>, queremos decir que es
uno de los tipos de dato básicos de Java.

00:05:49.568 --> 00:05:51.400
Experimenta con nombres
de variable diferentes

00:05:51.470 --> 00:05:54.576
y con valores iniciales hasta que estés
cómodo creando variables de string.

00:05:54.976 --> 00:05:56.600
Ahora quiero que me digas
qué está mal

00:05:56.688 --> 00:05:59.136
en cada una de las frases
de strings que hay debajo.

00:05:59.670 --> 00:06:02.400
Quiero que señales el error
en cada una de estas líneas de código.

