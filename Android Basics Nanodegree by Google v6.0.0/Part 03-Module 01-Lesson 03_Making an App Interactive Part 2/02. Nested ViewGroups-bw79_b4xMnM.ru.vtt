WEBVTT
Kind: captions
Language: ru

00:00:00.330 --> 00:00:03.230
Обсуждая во время последнего теста,
как расположить представления,

00:00:03.230 --> 00:00:05.160
вы, возможно, упомянули <b>RelativeLayout</b>.

00:00:05.160 --> 00:00:06.850
Я знаю, что упомянули.

00:00:06.850 --> 00:00:09.670
Я хочу представить вам другой,
более совершенный, способ построения

00:00:09.670 --> 00:00:13.890
layout приложения,
при помощи вложенных <b>ViewGroups</b>.

00:00:13.890 --> 00:00:18.120
Вложенные <b>ViewGroups</b> - это <b>ViewGroups</b>,
вложенные в другие <b>ViewGroups</b>.

00:00:18.120 --> 00:00:22.150
Так вы можете выстроить более интересные
и комплексные <b>layouts</b>, вроде этого.

00:00:22.150 --> 00:00:24.050
Посмотрим, как построить
один из таких <b>layouts</b>.

00:00:25.240 --> 00:00:28.620
Вот пример вертикального линейного <b>layout</b>
с тремя представлениями -

00:00:28.620 --> 00:00:30.840
один <b>ImageView</b> и два <b>TextView</b>.

00:00:30.840 --> 00:00:34.000
Что будет, если мы хотим наложить
некоторый текст поверх этого изображения?

00:00:34.000 --> 00:00:36.470
При линейном <b>layout</b> нельзя
наложить представления друг на друга.

00:00:36.470 --> 00:00:38.390
Однако, при <b>RelativeLayout</b> это возможно,

00:00:38.390 --> 00:00:42.470
мы можем заменить этот дочерний элемент
на <b>RelativeLayout</b>.

00:00:42.470 --> 00:00:45.750
Затем поместим данное <b>ImageView</b>
внутрь этого <b>RelativeLayout</b>.

00:00:45.750 --> 00:00:49.950
Теперь <b>ImageView</b> выравнено по отношению
к краям родительского <b>RelativeLayout</b>.

00:00:49.950 --> 00:00:53.410
Итак, это пример <b>RelativeLayout</b>,
который содержится внутри

00:00:53.410 --> 00:00:54.899
более крупного линейного <b>Layout</b>.

00:00:55.970 --> 00:00:59.850
У вас может быть много комбинаций из
<b>ViewGroups</b>, вложенных в другие <b>ViewGroups</b>.

00:00:59.850 --> 00:01:03.900
Например, <b>RelativeLayout</b> в качестве
корневого представления приложения.

00:01:03.900 --> 00:01:07.270
Он может содержать пару представлений,
например, один <b>ImageView</b> и два <b>TextView</b>.

00:01:08.350 --> 00:01:12.910
Можно добавить дочерний линейный <b>layout</b>
к более широкому <b>RelativeLayout</b>.

00:01:14.100 --> 00:01:18.490
Этот линейный <b>layout</b> сам может содержать
вложения, как эти два <b>ImageView</b>.

00:01:19.860 --> 00:01:23.340
Вы можете вложить столько <b>ViewGroups</b>
в другие <b>ViewGroups</b>, сколько захотите.

00:01:23.340 --> 00:01:26.540
Однако, будьте осторожны, так как,
чем больше вложений вы делаете,

00:01:26.540 --> 00:01:29.810
тем дороже будет обходиться
выведение вашего приложения на экран.

00:01:31.040 --> 00:01:34.990
<b>RelativeLayout</b> очень пластичный,
но вычисление относительных позиций

00:01:34.990 --> 00:01:39.490
каждого из представлений
может быть очень сложным.

00:01:39.490 --> 00:01:42.380
Так что рекомендуется не делать
слишком много уровней вложений

00:01:42.380 --> 00:01:43.380
внутри <b>RelativeLayout</b>.

00:01:45.040 --> 00:01:48.730
Вот несколько реальных примеров
приложений Google, демонстрирующих,

00:01:48.730 --> 00:01:51.840
когда будет полезно
использовать вложенные <b>ViewGroups</b>.

00:01:51.840 --> 00:01:55.060
Приложение <b>Google Now</b> показывает
карточки с релевантной информацией,

00:01:55.060 --> 00:01:59.250
основанной на вашей текущей ситуации,
как текущее время и расположение.

00:01:59.250 --> 00:02:01.710
Если вам нравится определенная команда,
Red Sox, к примеру,

00:02:01.711 --> 00:02:04.040
то вам покажут счет их последней игры.

00:02:05.040 --> 00:02:08.570
Для построения <b>layout</b> здесь
можно взять вертикальный линейный тип,

00:02:08.570 --> 00:02:12.160
так как информация представлена
в виде строк.

00:02:12.160 --> 00:02:15.899
Однако, первый элемент этого
вертикального линейного <b>layout</b> -

00:02:15.900 --> 00:02:18.380
не просто единичный <b>TextView</b>,
он составлен из множества <b>views</b>.

00:02:19.410 --> 00:02:22.562
На самом деле, вам стоило бы сделать его
горизонтальным линейным <b>layout</b>,

00:02:22.562 --> 00:02:25.325
составленным из одного <b>ImageView</b>
и двух <b>TextView</b>.

00:02:25.325 --> 00:02:28.085
То же самое со вторым элементом
в этом вертикальном линейном <b>layout</b>.

00:02:28.085 --> 00:02:31.205
Вы бы сделали его
горизонтальным линейным <b>layout</b>,

00:02:31.205 --> 00:02:32.865
содержащим <b>ImageView</b>
и два <b>TextView</b>.

00:02:32.865 --> 00:02:35.785
Друга карточка приложения Google Now
показывает акции,

00:02:35.785 --> 00:02:37.315
которые могут быть вам интересны.

00:02:37.315 --> 00:02:39.710
Хотела бы я, что эти акции
были сейчас по такой цене.

00:02:39.710 --> 00:02:43.390
Однако, этот <b>layout</b> также можно сделать
вертикальным линейным,

00:02:43.390 --> 00:02:45.740
так как здесь вполне можно
представить строки.

00:02:45.740 --> 00:02:48.410
Только вот эти срединные записи
не являются единым <b>TextView</b>,

00:02:48.410 --> 00:02:50.199
а составлены из нескольких.

00:02:50.200 --> 00:02:53.280
Эта строка относится к цене акций Google,
к ней можно было бы применить

00:02:53.280 --> 00:02:57.340
горизонтальный линейный <b>layout</b>
и заполнить его четырьмя <b>TextView</b>.

00:02:57.340 --> 00:02:59.670
То же самое для цен на остальные акции.

00:02:59.670 --> 00:03:02.690
Эти горизонтальные линейные layouts
являются дочерними по отношению

00:03:02.690 --> 00:03:03.999
к более обширному вертикальному.

00:03:04.000 --> 00:03:09.050
В приложении <b>Google Play music</b>
вы можете слушать музыку, конечно.

00:03:09.050 --> 00:03:12.259
Хотя этот <b>layout</b> и выглядит сложным
для построения, на деле его можно разбить

00:03:12.260 --> 00:03:14.850
на более мелкие <b>ViewGroups</b>,
которые вы сможете распознать.

00:03:14.850 --> 00:03:17.530
Этот паттерн похож
на вертикальный линейный <b>layout</b>

00:03:17.530 --> 00:03:19.260
с тремя различными отпрысками.

00:03:19.260 --> 00:03:22.000
Первый можно построить
при помощи <b>RelativeLayout</b>,

00:03:22.001 --> 00:03:24.200
так как представления
относительны друг к другу.

00:03:25.390 --> 00:03:28.360
Для второго потомка также
можно взять <b>RelativeLayout</b>,

00:03:28.360 --> 00:03:30.990
так как представления
накладываются друг на друга.

00:03:30.990 --> 00:03:34.800
А третий потомок похож
на горизонтальный линейный <b>layout</b>,

00:03:34.800 --> 00:03:37.080
составленный из 5 различных кнопок.

00:03:37.080 --> 00:03:40.099
Наконец, для этого экрана можно
использовать вложенные <b>ViewGroups</b>.

00:03:40.100 --> 00:03:41.970
Это лишь один способ построить <b>layout</b>.

00:03:41.970 --> 00:03:44.318
Есть много других путей.

00:03:45.351 --> 00:03:48.667
Ранее в приложении Google Maps
мы видели детализированные страницы

00:03:48.667 --> 00:03:51.500
для отдельных локаций,
вроде ресторанов.

00:03:51.500 --> 00:03:55.150
Невозможно сделать этот экран в виде
лишь одиночного линейного <b>layout</b>

00:03:55.150 --> 00:03:56.420
или одиночного <b>RelativeLayout</b>.

00:03:56.420 --> 00:03:58.740
Вам придется вложить друг в друга
множество <b>ViewGroups</b>.

00:03:58.740 --> 00:04:00.496
Если взглянуть широко, можно увидеть,

00:04:00.500 --> 00:04:02.860
что данные организованы почти в строки.

00:04:02.860 --> 00:04:05.650
То есть вертикальный линейный <b>layout</b>
может быть родительским <b>view</b>.

00:04:05.651 --> 00:04:07.900
Одним потомком может быть
целый <b>layout</b> тут.

00:04:07.900 --> 00:04:10.330
Другим можно сделать этот ряд кнопок.

00:04:10.330 --> 00:04:12.725
Третьим потомком будет
это описание и так далее.

00:04:13.985 --> 00:04:16.894
При этом внутри каждого -
более одного <b>view</b>.

00:04:16.894 --> 00:04:18.935
Здесь множество <b>views</b>.

00:04:18.935 --> 00:04:23.762
Этот потомок в широком линейном <b>layout</b>
состоит из трех отдельных <b>views</b>.

00:04:23.762 --> 00:04:26.472
Так что можно использовать
горизонтальный линейный <b>layout</b>

00:04:26.472 --> 00:04:30.042
с <b>views</b> одинакового веса,
чтобы распределить их равномерно.

00:04:31.042 --> 00:04:34.662
Этот потомок широкого вертикального
линейного <b>layout</b> также может быть сделан

00:04:34.662 --> 00:04:37.636
в виде горизонтального линейного <b>layout</b>
с <b>ImageView</b> и <b>TextView</b>.

00:04:37.636 --> 00:04:43.036
Прокрутив страницу еще,
увидим больше информации о ресторане.

00:04:43.036 --> 00:04:47.276
Опять же, я могу представить здесь 
отдельные строки с информацией.

00:04:47.276 --> 00:04:49.873
Вертикальный линейный <b>layout</b>
сработает и здесь,

00:04:49.873 --> 00:04:54.503
и опять же, некоторые строки сложнее,
чем просто одно <b>TextView</b>.

00:04:54.503 --> 00:04:58.313
Эта строка показывает набор
возможных вариантов времени для брони

00:04:58.313 --> 00:05:01.143
и состоит из 3 разных кнопок,
которые можно сделать, применив

00:05:01.143 --> 00:05:03.063
горизонтальный линейный <b>layout</b>.

00:05:03.063 --> 00:05:07.563
Этот ряд картинок также можно построить
из горизонтального линейного <b>layout</b>.

00:05:07.563 --> 00:05:10.800
И, на самом деле, вот этот отпрыск
внутри горизонтального линейного <b>layout</b> -

00:05:10.801 --> 00:05:13.360
не просто единичный <b>ImageView</b>.

00:05:13.360 --> 00:05:15.230
Это <b>ImageView</b> и <b>TextView</b>.

00:05:15.230 --> 00:05:18.680
Так что можно взять <b>RelativeLayout</b>
для построения этого первого потомка.

00:05:18.680 --> 00:05:22.520
Также вы могли увидеть,
что здесь внутри <b>ViewGroups</b>

00:05:22.520 --> 00:05:24.100
лежат другие <b>ViewGroups</b>.

00:05:24.100 --> 00:05:27.790
В действительности тут за <b>RelativeLayout</b>
и <b>LinearLayout</b> стоит много <b>ViewGroups</b>,

00:05:27.791 --> 00:05:30.905
а также тут есть <b>FrameLayout</b> и <b>GridLayout</b>.

00:05:30.905 --> 00:05:33.900
Мы не успеем обсудить их в рамках курса,
но я определенно рекомендую вам

00:05:33.901 --> 00:05:37.215
изучить их самостоятельно, потому что
иногда они будут намного полезнее,

00:05:37.215 --> 00:05:39.796
чем просто <b>RelativeLayout</b>
или <b>LinearLayout</b>.

