WEBVTT
Kind: captions
Language: tr

00:00:00.420 --> 00:00:03.640
Önceki derste tamsayı değişkeni 
nasıl oluşturulur ve nasıl açıklanır

00:00:03.640 --> 00:00:04.448
bunu öğrenmiştik.

00:00:04.448 --> 00:00:08.010
Bir değişken oluşturmak için aynı 
formatı takip edeceğiz ancak bu kez

00:00:08.010 --> 00:00:11.480
değişken metni tutmaktadır
çünkü bu bir karakter dizisidir.

00:00:11.480 --> 00:00:13.815
İşte bu kodu kendi uygulamamıza 
ilave ettik.

00:00:13.815 --> 00:00:16.995
Bu, priceMessage denilen yeni bir
karakter dizisi değişkeni oluşturmaktadır.

00:00:16.995 --> 00:00:19.715
Ve tuttuğu değer "Bedava" metindir.

00:00:20.825 --> 00:00:24.605
Java sözdizimi kurallarına göre belirli 
bir formatı takip etmektedir.

00:00:24.605 --> 00:00:26.025
İlk olarak veri türünü belirliyoruz.

00:00:26.025 --> 00:00:28.515
Bu durumda bu bir karakter dizgisidir.

00:00:28.515 --> 00:00:31.485
Unutmayın ki bir dizgi,
yalnızca karakterler dizisidir.

00:00:31.485 --> 00:00:35.089
Sonra değişken adı gelir,
yani priceMessage.

00:00:36.080 --> 00:00:39.840
Sonra eşittir işareti, başlangıç değeri ve
komutun sonunu göstermek için

00:00:39.840 --> 00:00:41.630
noktalı virgül ile takip edilir.

00:00:42.490 --> 00:00:44.590
Veri türünün karakter dizgisi olması

00:00:44.590 --> 00:00:47.780
değişken içine girecek bilgiyi kısıtlar.

00:00:47.780 --> 00:00:50.780
Bir seferde yalnızca bir karakter dizgisi 
kaydedilebilir.

00:00:50.780 --> 00:00:53.990
Karakter dizgisi harflerden, numaralardan 
veya sembollerden oluşabilir.

00:00:54.860 --> 00:00:58.450
Değişken adının bu değişkene verdiğimiz
ad olduğunu hatırlayacaksınızdır.

00:00:58.450 --> 00:01:03.160
Böylece veriyi güncellemek veya veriyi
elde etmek için daha sonra müracaat edebiliriz.

00:01:03.160 --> 00:01:05.260
Bu değişkene bir etiket adı vermek gibidir.

00:01:05.920 --> 00:01:09.870
Değişken adı seçerken, ne tür bir bilgi 
türü tuttuğunu açıklayan

00:01:09.870 --> 00:01:12.950
açıklayıcı bir şey seçmek önemlidir.

00:01:12.950 --> 00:01:17.450
Bu değişken adına Catherine diyebilirim 
ancak içerisindeki ifadeyi gerçekten

00:01:17.450 --> 00:01:18.520
yansıtmayacaktır.

00:01:18.520 --> 00:01:21.460
Aynı zamanda kodumu okumamı 
zorlaştıracaktır da, çünkü neden

00:01:21.460 --> 00:01:24.820
Catherine denilen bir karakter dizgisi
değişkeni olduğunu kimse bilemez.

00:01:24.820 --> 00:01:28.910
Diğer tarafta, priceMessage gibi değişken
adı daha yararlıdır çünkü muhtemelen

00:01:28.910 --> 00:01:31.100
fiyatla ilgili bir mesajın içerisinde

00:01:31.110 --> 00:01:32.530
olduğunu bilirsiniz.

00:01:32.530 --> 00:01:36.280
Buna daha önce bakmıştık ancak değişken
adlandırma için kurallar bulunmaktadır.

00:01:36.280 --> 00:01:38.990
Bunların ne olduğunu unutursanız
her zaman bakabilirsiniz.

00:01:38.990 --> 00:01:42.350
Google'da "değişken adı Java" hakkında 
arama yapıyorum.

00:01:42.350 --> 00:01:45.690
Adlandırmanın olduğu kısma kaydırıyorum.

00:01:45.690 --> 00:01:47.780
Değişken adlarının büyük-küçük
harfe duyarlı olduğunu söylüyor

00:01:47.780 --> 00:01:49.850
ve genellikle küçük harfle
başladığı bildiriliyor.

00:01:49.850 --> 00:01:52.900
Ve eğer çoklu kelime varsa camel
harflendirme kullanabilirsiniz.

00:01:53.950 --> 00:01:57.420
Sonra görev operatörümüz veya 
eşittir işaretimiz var.

00:01:57.420 --> 00:02:00.830
Bu operatör değişkene bir değer 
atamakla görevlidir.

00:02:00.830 --> 00:02:03.666
Böylece sağdaki bu değeri
alırsınız ve priceMessage

00:02:03.666 --> 00:02:05.260
değişkeni içerisine atarsınız.

00:02:06.100 --> 00:02:09.400
Karakter dizgisinin başlangıç değerinin
çift tırnak içinde bir metin

00:02:09.400 --> 00:02:10.949
olduğunu belirtelim.

00:02:10.949 --> 00:02:15.800
Buna string literal denir,
literalin sabit bir değeri vardır.

00:02:15.800 --> 00:02:20.060
Bunu ilk defa tamsayı değişkenleri 
öğrenirken duymuştuk.

00:02:20.060 --> 00:02:24.190
İki, beş ya da on gibi sabit değerler,
bunların hepsi harflerden oluşan dizi

00:02:24.190 --> 00:02:29.060
değeridir çünkü değişen değişkenin 
aksine bunlar değişmezler.

00:02:29.060 --> 00:02:31.690
Kutu örneksememize
geri dönersek "Bedava" değeri

00:02:31.690 --> 00:02:34.020
bu değişkenin içerisine gidecektir.

00:02:34.020 --> 00:02:37.320
Son ve önemli bir nokta da, komutun
sonunda bir noktalı virgül olması.

00:02:38.040 --> 00:02:40.840
Şimdi bu kod satırını
biraz daha iyi anladık,

00:02:40.840 --> 00:02:43.860
devam edin ve kendiniz farklı
değerlerle deneme yapın.

00:02:43.860 --> 00:02:47.890
Buradaki başlangıç değerini 
veya değişken adını değiştirebilirsiniz.

00:02:47.890 --> 00:02:50.360
Örneğin, "Bedava" gibi kısa
dizi kullanabileceğiniz gibi,

00:02:50.360 --> 00:02:52.460
uzun bir dizi kullanabilirsiniz.

00:02:52.460 --> 00:02:55.220
Ayrıca tamamen boş dizi de yapabilirsiniz,

00:02:55.220 --> 00:02:58.830
yani iki tırnak işareti arasında
karakter olmayabilir.

00:02:58.830 --> 00:03:03.120
Bir boşluk veya numara da
ekleyebilirsiniz veya

00:03:03.120 --> 00:03:04.530
sembol de ekleyebilirsiniz.

00:03:05.920 --> 00:03:08.930
String literal oluştururken
dikkatli olun,

00:03:08.930 --> 00:03:12.640
özel olarak ilgilenmeniz
gereken bazı karakterler var.

00:03:12.640 --> 00:03:16.040
Örneğin, eğer karakter dizginizde
tırnak işaretini kullanırsanız,

00:03:16.040 --> 00:03:18.970
dolar sembolü çözümlenemiyor ve

00:03:18.970 --> 00:03:24.090
noktalı virgül bekleniyor diye 
hata alırsınız.

00:03:24.090 --> 00:03:27.360
Bunun nedeni derleyicinin
tamamının bu olduğunu

00:03:27.360 --> 00:03:29.150
bilmiyor olmasıdır.

00:03:29.150 --> 00:03:31.840
Bu sorunu çözmek için biraz 
Google'da araştırma yapalım.

00:03:32.050 --> 00:03:34.580
Google'da "Java çıkış
karakterleri"ni arayın.

00:03:38.090 --> 00:03:41.750
Ve kaçış dizgileri denilen bölüme 
doğru aşağıya kaydırın.

00:03:41.750 --> 00:03:44.920
Java'da bazı karakterlerin
özel anlamı vardır.

00:03:44.920 --> 00:03:49.050
Başlangıç ve bitiş tırnakları Java'daki
karakter dizgisini göstermek içindir

00:03:49.050 --> 00:03:52.160
ancak eğer gerçekten karakter dizginize
tırnak işaretini koymak istiyorsanız,

00:03:52.160 --> 00:03:55.090
kaçış dizgisini kullanmanız 
gerekecektir.

00:03:55.090 --> 00:04:00.060
Kaçış dizgisi ters bölüden önce gelen
bir karakterdir ve Java derleyici bunu

00:04:00.060 --> 00:04:02.610
özel bir yolla yorumlayacaktır.

00:04:02.900 --> 00:04:06.090
Eğer ters bölü ile çift tırnak 
kullanırsak bu demek olur ki,

00:04:06.090 --> 00:04:11.290
dizgi anlamına gelen tırnak işareti değil,
alıntı anlamına gelen işareti kullanmak istiyoruz.

00:04:11.290 --> 00:04:12.820
Şunu demek istiyorum.

00:04:13.480 --> 00:04:16.970
Android Studio'da her tırnak işaretinden 
önce aslında metinde görünmesini

00:04:16.970 --> 00:04:19.319
istediğim ters bölü işareti 
ekleyebilirim.

00:04:20.200 --> 00:04:24.520
Şimdi bu değişkenin tüm başlangıç değeri
bu karakter dizgisi olacaktır, çünkü

00:04:24.520 --> 00:04:27.100
belirli bitiş tırnak işaretiyle 
belirtilmiştir.

00:04:28.570 --> 00:04:31.450
Metin karakter dizgisi içerisinde
tırnak işaretini de kullanmak istiyorum

00:04:31.450 --> 00:04:34.720
ancak bunu her tırnak işaretinin 
önüne ters bölü koyarak belirtiyorum.

00:04:35.470 --> 00:04:39.220
Şayet kendi cihazımda çalıştırırsam
bir doların etrafındaki tırnak işaretini görürüm

00:04:39.220 --> 00:04:42.490
ama umduğumuz tüm şeylerin
etrafındaki tırnak işaretini göremem.

00:04:43.240 --> 00:04:46.510
Ters bölü n bilinmesi gereken
diğer bir faydalı kaçış dizgisidir.

00:04:46.510 --> 00:04:50.360
Bu, metnin sonraki satırda
devam etmesini sağlıyor.

00:04:51.610 --> 00:04:53.480
Bunu aynı zamanda kendi
kodunuzda deneyebilirsiniz.

00:04:54.230 --> 00:04:57.730
Unutmayın ki noktalı virgül her zaman 
komutun sonunda olmalıdır.

00:04:57.730 --> 00:05:00.920
İngilizcede tırnak işareti içerisine 
noktalama işareti koymak grametik

00:05:00.920 --> 00:05:04.050
açıdan doğru olsa bile, tırnak işaretinin 
dışına koymanız gerekiyor.

00:05:04.050 --> 00:05:07.620
Buradaki her şey metin 
karakter dizgisinin bir parçasıdır.

00:05:07.620 --> 00:05:10.540
Ve noktalı virgülü Java derleyicinin 
dışına koymanız gerekmektedir.

00:05:10.910 --> 00:05:13.360
Aynı zamanda değişken adını da 
değiştirebilirsiniz.

00:05:13.360 --> 00:05:17.440
Eğer bunu mesaj gibi bir şey olarak 
değiştirirsem, burada bir hata verir

00:05:17.440 --> 00:05:20.030
çünkü bu priceMessage
sembolünü çözümleyemez.

00:05:20.030 --> 00:05:22.370
O yüzden bunu kopyalayıp buraya 
da koymam gerekiyor.

00:05:22.370 --> 00:05:24.320
Bu şekilde telefonunuzda çalışacaktır.

00:05:24.790 --> 00:05:26.860
Ancak veri türünü değiştiremezsiniz.

00:05:26.860 --> 00:05:30.110
Karakter dizgisi tam olarak bu 
şekilde söylenmek zorundadır.

00:05:30.110 --> 00:05:32.245
Karakter dizgisi burada büyük harflidir 
çünkü bu bir objedir.

00:05:32.245 --> 00:05:35.200
3. derste objeleri öğreneceğiz ama
şimdilik karakter dizgisini

00:05:35.200 --> 00:05:37.230
büyük S (String) ile yazalım.

00:05:37.230 --> 00:05:40.250
Tamsayılarla ilgili daha önce konuşurken, 
tamsayıları küçük harfle

00:05:40.250 --> 00:05:42.229
int (tamsayı) olarak belirtmiştik.

00:05:42.960 --> 00:05:46.510
Bu küçük harfli çünkü basit Java
türlerinden bir tanesi olan

00:05:46.510 --> 00:05:48.540
ilkel veri türüdür.

00:05:49.540 --> 00:05:53.080
Rahatça değişken karakter dizgisi
oluşturana kadar farklı değişken adlarıyla

00:05:53.080 --> 00:05:54.980
ve başlangıç değerleriyle deneme yapın.

00:05:54.980 --> 00:05:58.160
Sonra aşağıda listelenen karakter
dizgisi ifadelerinin hangisinin hatalı

00:05:58.160 --> 00:05:59.670
olduğunu söylemenizi istiyorum.

00:05:59.670 --> 00:06:02.320
Her bir kod satırındaki hatayı
belirtmenizi istiyorum.

