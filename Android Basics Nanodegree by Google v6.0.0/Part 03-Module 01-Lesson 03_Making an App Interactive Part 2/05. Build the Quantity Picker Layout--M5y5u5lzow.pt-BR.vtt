WEBVTT
Kind: captions
Language: pt-BR

00:00:00.116 --> 00:00:04.171
Nossa! Esse conceito foi difícil,
mas você se saiu muito bem.

00:00:04.204 --> 00:00:08.079
Com isso, podemos construir
layouts incríveis no Android,

00:00:08.112 --> 00:00:11.267
pois quase todas as telas
contêm layouts aninhados.

00:00:11.300 --> 00:00:14.923
E a Correll mencionou isso
no aplicativo Google Play.

00:00:14.956 --> 00:00:16.679
Depois de toda
essa preparação,

00:00:16.712 --> 00:00:18.949
podemos retornar
ao Android Studio

00:00:18.982 --> 00:00:22.657
para implementar as alterações
no seletor de quantidade.

00:00:22.690 --> 00:00:26.457
Caso se pergunte: "Katherine,
e se eu quiser criar um layout

00:00:26.490 --> 00:00:31.777
e não tiver três opções de XML,
que aparecem magicamente?"

00:00:31.810 --> 00:00:33.618
Essa é uma pergunta justa.

00:00:33.651 --> 00:00:36.953
Até agora, lemos o XML

00:00:36.986 --> 00:00:39.498
e desenhamos o diagrama
da hierarquia View.

00:00:39.531 --> 00:00:41.578
Também lemos
o layout do XML

00:00:41.611 --> 00:00:44.265
e desenhamos como a tela
ficaria,

00:00:44.298 --> 00:00:48.457
mas chegou a hora de ver
um design do que desejamos construir

00:00:48.490 --> 00:00:50.841
e de podermos compor
o XML a partir disso.

00:00:50.874 --> 00:00:53.985
Sei que o XML foi dado
no quiz anterior,

00:00:54.018 --> 00:00:55.866
é claro que eu sei disso,

00:00:55.899 --> 00:00:58.053
mas não quero que observe
a solução,

00:00:58.086 --> 00:01:02.210
quero que pratique a habilidade
de ver a tela ou a simulação

00:01:02.243 --> 00:01:06.627
do que queremos construir
e possa compor o XML disso.

00:01:06.660 --> 00:01:10.011
Normalmente começaríamos
com a tela desejada.

00:01:10.044 --> 00:01:12.836
Isso pode ser obtido
com o designer da sua equipe,

00:01:12.869 --> 00:01:15.010
que está projetando
o aplicativo,

00:01:15.043 --> 00:01:18.707
ou, se não tiver um designer,
você pode desenhar você mesmo.

00:01:18.740 --> 00:01:22.265
Basta imaginar como dividir isso
em Views e ViewGroups.

00:01:22.298 --> 00:01:26.539
Marque e tente desenhar
o diagrama da hierarquia View

00:01:26.572 --> 00:01:30.227
com a relação entre as Views
filhas e pais.

00:01:30.260 --> 00:01:31.715
Após terminar o diagrama,

00:01:31.748 --> 00:01:36.290
desenhe o esqueleto
do código XML.

00:01:36.323 --> 00:01:39.389
Essas partes servirão
de exercício para você.

00:01:39.422 --> 00:01:43.073
As alterações são feitas no arquivo
de layout activity_main.xml.

00:01:43.106 --> 00:01:46.523
Além de compor o XML
e ver uma prévia dele,

00:01:46.556 --> 00:01:49.194
também podemos clicar
no painel de design.

00:01:49.227 --> 00:01:52.018
Esta é a aba Design,
diferente da Text.

00:01:52.051 --> 00:01:56.362
Ela permite arrastar
e soltar Views no dispositivo.

00:01:56.395 --> 00:01:59.842
Também vemos a árvore
dos componentes à direita.

00:01:59.875 --> 00:02:03.779
Essa é uma árvore de todas
as Views da hierarquia.

00:02:03.812 --> 00:02:06.874
Atualmente, há um LinearLayout
vertical, que é a View pai,

00:02:06.907 --> 00:02:09.106
e as Views filhas
dentro dela.

00:02:09.139 --> 00:02:12.554
Se houvesse ViewGroups
aninhados, eles estariam aqui.

00:02:12.587 --> 00:02:15.353
Construa este layout
no Android Studio.

00:02:15.386 --> 00:02:17.628
Depois de selecionar
e posicionar as Views,

00:02:17.661 --> 00:02:20.163
estilize
para que fiquem assim.

00:02:20.196 --> 00:02:22.330
O estilo das Views
é basicamente igual,

00:02:22.363 --> 00:02:26.282
porém, há 8dp de espaço
entre o botão de subtração e o 2,

00:02:26.315 --> 00:02:28.298
e entre o 2
e o botão de adição.

00:02:28.331 --> 00:02:30.642
Como já foi dito,
evite olhar o código

00:02:30.675 --> 00:02:32.522
e tente implementar
você mesmo.

00:02:32.555 --> 00:02:35.088
Ao terminar, marque esta caixa
para continuar.

