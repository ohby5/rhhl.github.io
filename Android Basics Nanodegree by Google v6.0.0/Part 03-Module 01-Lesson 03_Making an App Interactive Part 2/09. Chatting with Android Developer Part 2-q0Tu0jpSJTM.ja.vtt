WEBVTT
Kind: captions
Language: ja

00:00:00.590 --> 00:00:04.400
- キャシーと私の生徒たしはこのレッスンで
変数とデータタイプを学んできました

00:00:04.400 --> 00:00:07.120
特に整数型とストリングについて勉強しました

00:00:07.120 --> 00:00:13.030
アプリで実際にこれらを使った
例はありますか

00:00:13.030 --> 00:00:13.970
- はい--いくらでもありますよ

00:00:13.970 --> 00:00:15.840
ストリングと整数型はそこら中にあります

00:00:17.460 --> 00:00:22.850
例えば Gmail では
まず開くと未読メッセージが

00:00:22.850 --> 00:00:27.990
何件あるか教えてくれます
この数字はとても重要です

00:00:27.990 --> 00:00:30.710
この数字にわずかにバグが存在する
ことがあるからです

00:00:31.930 --> 00:00:36.820
- そうなると数字が未読メッセージの件数と
一致しない場合もあります

00:00:36.820 --> 00:00:37.463
- それは

00:00:37.463 --> 00:00:38.271
- 私は経験したことないですね

00:00:38.271 --> 00:00:38.788
君は？

00:00:38.788 --> 00:00:39.550
- [笑い]
- それはよかったです

00:00:39.550 --> 00:00:40.630
- 今までなくてよかったです

00:00:40.630 --> 00:00:45.328
とにかくこのバグを取り除くにあたっては
興味深いものがあります

00:00:45.328 --> 00:00:49.620
何故なら Gmail ではまず数字を
同期させるからです

00:00:49.620 --> 00:00:51.010
同期させるとは
ようするに

00:00:51.010 --> 00:00:54.770
Cloud から自分の Android の端末に
データを取ってくるので

00:00:54.770 --> 00:00:55.910
実際にはそのデータの

00:00:55.910 --> 00:00:59.790
数字は本来の e-mail とは別個で
同期されているのです

00:00:59.790 --> 00:01:02.820
そうすると同期がされなくなる
可能性もあります

00:01:02.820 --> 00:01:05.790
これは最も難しい問題の一つです

00:01:05.790 --> 00:01:10.210
- なるほど--では未読メッセージの件数を
変数として設定すると

00:01:10.210 --> 00:01:11.460
そのデータタイプは

00:01:11.460 --> 00:01:12.344
- 整数型になります

00:01:12.344 --> 00:01:13.200
- 整数型ですね

00:01:14.370 --> 00:01:17.280
ではその値が端末間で計算されて

00:01:17.280 --> 00:01:21.560
それがシナリオのユースケースに
基づいて変化するのですね

00:01:21.560 --> 00:01:22.650
自分の経験としてですが

00:01:22.650 --> 00:01:24.260
- その通りです

00:01:24.260 --> 00:01:26.110
もう一つ整数型を使う例としては

00:01:26.110 --> 00:01:29.450
先ほどは変更可能な
変整数の例でしたが

00:01:29.450 --> 00:01:31.510
もう一つの例は ID になります

00:01:31.510 --> 00:01:35.080
整数型が変わってはいけないので
ID はとても重要です

00:01:35.080 --> 00:01:36.351
- 特に自分の e-mail の ID ですね

00:01:36.351 --> 00:01:37.260
- 分かりました
- その通りです

00:01:37.260 --> 00:01:40.200
ですので e-mail のサーバーが提供する
e-mail ID は

00:01:40.200 --> 00:01:43.680
クライアントの e-mail ID と完全に
一致していなければなりません

00:01:43.680 --> 00:01:46.150
その方法で e-mail を
自分の端末にてどの場所でも

00:01:46.150 --> 00:01:48.260
一意的に識別しています

00:01:48.260 --> 00:01:52.320
- すなわちこれは私たちの
カンバセーション e-mail のためですね

00:01:52.320 --> 00:01:56.930
- そうです—私たちの会話のためですので
Gmail の例では全てのスレッドのことです

00:01:56.930 --> 00:02:02.460
これは複数のメッセージを含む
e-mail スレッドのことで

00:02:02.460 --> 00:02:05.390
- 私たちカンバセーションと呼んでいます
- なるほど—分かりました

00:02:05.390 --> 00:02:08.460
- そして各メッセージにも
一意的な ID があります

00:02:08.460 --> 00:02:13.330
- では一つ一つの ID が変数に記憶される
そのデータタイプは何ですか

00:02:13.330 --> 00:02:14.010
- これも整数型です

00:02:14.010 --> 00:02:14.840
- 分かりました

00:02:14.840 --> 00:02:16.040
- そうです
- 一日で

00:02:16.040 --> 00:02:17.640
何件の e-mail が送信されていますか

00:02:17.640 --> 00:02:18.410
ご存知であれば

00:02:18.410 --> 00:02:19.580
本当にたくさんでしょうね

00:02:19.580 --> 00:02:23.160
- 分かりません
すぐには思いつきませんね

00:02:23.160 --> 00:02:28.320
- 想像するのは—もし一つのカンバセーションの
中で各メッセージが一意的だとしたら

00:02:28.320 --> 00:02:31.570
一件一件の e-mail もあまたある中で
一意的ということです

00:02:31.570 --> 00:02:32.190
- そうですね

00:02:32.190 --> 00:02:33.580
- 膨大な数になるはずですよね

00:02:33.580 --> 00:02:34.690
- なかなかいい質問ですね

00:02:34.690 --> 00:02:37.810
この場合私たちは整数型の代わりに
ログを使います

00:02:37.810 --> 00:02:40.542
- なるほど
- 64 ビットだからです

00:02:40.542 --> 00:02:41.784
- そうすることで絶対に

00:02:41.784 --> 00:02:43.655
- 当分は膨大な量を溜めこむだけの

00:02:43.655 --> 00:02:45.070
空き容量があるのですね

00:02:45.070 --> 00:02:46.284
それが正に 整数型とログの
違いなんですね

00:02:46.284 --> 00:02:49.642
- 分かりました
- ストリングはどうですか？

00:02:49.642 --> 00:02:51.660
- ストリングですね

00:02:51.660 --> 00:02:53.460
- サブジェクトだと想像します

00:02:53.460 --> 00:02:55.530
ストリングか—どう記憶されるのですか

00:02:55.530 --> 00:02:57.380
- はい—全てです

00:02:57.380 --> 00:02:59.420
サブジェクトがストリングそのものです

00:02:59.420 --> 00:03:00.660
- なるほど

00:03:00.660 --> 00:03:03.510
- それと e-mail アドレスも当然
ストリングですね

00:03:03.510 --> 00:03:05.560
大事なのは

00:03:05.560 --> 00:03:08.980
みなさんが見るどのアプリでも
テキストがあれば

00:03:08.980 --> 00:03:12.960
それは実際にほとんどが
ストリングなのです

00:03:12.960 --> 00:03:16.130
私が思うには有能なエンジニアが何でも
知っているとは限らないということです

00:03:16.130 --> 00:03:17.070
本当に必要なのは

00:03:17.070 --> 00:03:21.010
どこに答えがあるかを知っていることが
とても大事で

00:03:21.010 --> 00:03:26.060
分かりやすい解説ならたくさん
載っているでしょうから

00:03:26.060 --> 00:03:28.720
ただし探す時に正しいキーワードを
知っていないといけません

00:03:29.810 --> 00:03:31.850
適切なキーワードで検索するのです

00:03:31.850 --> 00:03:34.470
- 人に聞くのもそうですね

00:03:34.470 --> 00:03:36.610
- ああ—そうですね
それはとても大事なことです

00:03:36.610 --> 00:03:39.880
私はほとんどの場合もっと早い段階で
人に聞いていればと後悔します

00:03:39.880 --> 00:03:44.830
丸一日かけて何かを修正しようとする
そんな時ありますよね

00:03:44.830 --> 00:03:45.800
一日が終わるところで

00:03:45.800 --> 00:03:50.490
そうだ—このコンポーネントを作った人に
聞けばよかったんだ—と思うのです

00:03:50.490 --> 00:03:55.610
ですから早い段階で人に聞くというのも
とても大事なことですね

00:03:55.610 --> 00:03:57.500
貴重な時間の短縮にもなりますし

00:03:57.500 --> 00:04:03.000
あと Google で動いている他の
プロジェクトも認識しておくべきです

00:04:03.000 --> 00:04:06.140
自分とその周りを意識するのです

00:04:06.140 --> 00:04:11.270
本当に有能なエンジニアは自分の
やっていることだけに集中しません

00:04:11.270 --> 00:04:16.870
彼らのためにテクトークという
取り組みがあります

00:04:16.870 --> 00:04:18.769
- みんなが見られるように

00:04:18.769 --> 00:04:20.420
公開されていますよね
少なくともいくつかは

00:04:20.420 --> 00:04:21.140
- そうですね

00:04:21.140 --> 00:04:21.839
いくつかは

00:04:21.839 --> 00:04:26.330
それぞれのテクトークで最新技術を
知ることができますし

00:04:26.330 --> 00:04:31.600
エンジニアリング団体のみなさんに
お知らせを送ることもあります

00:04:31.600 --> 00:04:34.340
全体が見られるようにします

00:04:34.340 --> 00:04:38.320
- ではアリスさんがまだプログラミングを
勉強していた時代に戻るとしましょう

00:04:39.390 --> 00:04:42.340
その時の自分と話せるとしたら

00:04:42.340 --> 00:04:45.440
どんなアドバイスをしますか

00:04:45.440 --> 00:04:47.680
- まぁそれは面白い質問ですね

00:04:47.680 --> 00:04:51.980
私はもう少しプログラミングを
楽しむべきだったなと思います

00:04:55.140 --> 00:04:57.458
当時のプログラミングの学習方法は

00:04:57.458 --> 00:05:02.240
現在とはかなり違うと思います
私はもともとは中国出身なので

00:05:02.240 --> 00:05:06.100
そこでは非常に学術的なやり方を
重視していました

00:05:06.100 --> 00:05:11.461
例えば課外授業に行ったときも
そこで先生が教えて

00:05:11.461 --> 00:05:15.781
そのあと課題が渡されて
それを解きます

00:05:15.781 --> 00:05:17.790
問題を解く方法を習いました

00:05:18.870 --> 00:05:23.447
思い返してみると

00:05:23.447 --> 00:05:31.100
もっと楽しいプロジェクトがあれば
良かったですね

00:05:31.100 --> 00:05:34.130
- 誕生日アプリとか作ってましたか

00:05:34.130 --> 00:05:35.078
- [笑い]
誕生日アプリね

00:05:35.078 --> 00:05:35.898
- それはいいですね

00:05:35.898 --> 00:05:40.322
そういうアプリの方がもっと
色々と学べたと思います

00:05:40.322 --> 00:05:44.280
たった一つの正解を
出すだけでなく

00:05:44.280 --> 00:05:47.310
そういうアプリだと
例えば誕生日アプリなら

00:05:47.310 --> 00:05:49.240
デザインの勉強もできますし

00:05:49.240 --> 00:05:52.645
データを単に一つの場所から場所へ
送るのではなく

00:05:52.645 --> 00:05:56.100
色んなUI コンポーネントのことも
学べるので

00:05:56.100 --> 00:06:01.117
より効率的に問題が解決できます

00:06:01.117 --> 00:06:06.240
実際に生活している中でこそエンジニアとは
何かを知るものだと思います

00:06:06.240 --> 00:06:10.250
技術的な難問を解くだけでなく

00:06:10.250 --> 00:06:12.560
素晴らしいプロジェクトを創造するのです

00:06:12.560 --> 00:06:14.800
- 好奇心に従うといったかんじですね

00:06:14.800 --> 00:06:15.790
- その通りですね

00:06:15.790 --> 00:06:16.790
はい

00:06:16.790 --> 00:06:19.290
- それでは--キャシーと私共々
貴重なお時間を感謝いたします

00:06:19.290 --> 00:06:20.250
いいえ--どういたしまして

00:06:20.250 --> 00:06:23.008
- アリスさんのお話は我々の生徒たちにとって
非常に勉強になると思います

00:06:23.008 --> 00:06:23.508
- それは嬉しいです

