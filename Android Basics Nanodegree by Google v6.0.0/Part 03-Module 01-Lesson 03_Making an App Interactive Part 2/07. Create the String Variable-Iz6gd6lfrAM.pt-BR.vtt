WEBVTT
Kind: captions
Language: pt-BR

00:00:00.452 --> 00:00:04.716
Vimos como declarar
ou criar uma variável inteira.

00:00:04.749 --> 00:00:07.422
Seguiremos o mesmo formato
para criar uma variável,

00:00:07.455 --> 00:00:11.375
que armazenará texto,
pois será uma string.

00:00:11.408 --> 00:00:13.824
Este é o código
que adicionamos ao aplicativo.

00:00:13.857 --> 00:00:16.866
Isso criará uma nova variável string
priceMessage,

00:00:16.899 --> 00:00:20.659
e o valor dela
é o texto Free.

00:00:20.692 --> 00:00:24.470
Isso segue um formato específico
das regras de sintaxe Java.

00:00:24.503 --> 00:00:26.582
Primeiro, especificamos
o tipo de dados,

00:00:26.615 --> 00:00:28.430
neste caso, uma string,

00:00:28.463 --> 00:00:31.295
que é uma sequência
de caracteres.

00:00:31.328 --> 00:00:35.965
Depois, vem o nome da variável,
que é priceMessage, neste caso.

00:00:35.998 --> 00:00:38.989
Então, vem um sinal de igual,
o valor inicial

00:00:39.022 --> 00:00:42.141
e ponto de vírgula,
para indicar o fim da instrução.

00:00:42.174 --> 00:00:47.670
O tipo de dado string limita o tipo
de informação dentro da variável,

00:00:47.703 --> 00:00:50.606
somente uma string pode ser
armazenada por vez.

00:00:50.639 --> 00:00:54.742
Uma string pode ser constituída
de letras, números ou símbolos.

00:00:54.775 --> 00:00:58.455
Um nome de variável é o nome
dado à variável

00:00:58.488 --> 00:01:01.255
para podermos nos referir
a ela para obtermos o valor

00:01:01.288 --> 00:01:02.974
ou para atualizá-lo.

00:01:03.007 --> 00:01:05.798
É o mesmo que rotular
a variável.

00:01:05.831 --> 00:01:09.638
Ao escolher o nome de variável,
é importante ser descritivo,

00:01:09.671 --> 00:01:12.838
para sabermos o tipo
de informação que ela armazena.

00:01:12.871 --> 00:01:15.231
Eu poderia chamar esta variável
de Katherine,

00:01:15.264 --> 00:01:18.455
mas isso não refletiria
as informações dentro dela,

00:01:18.488 --> 00:01:20.592
dificultando
a leitura do código,

00:01:20.625 --> 00:01:24.701
pois ninguém saberá por que
há uma variável string Katherine.

00:01:24.734 --> 00:01:28.137
Por outro lado,
priceMessage é mais útil,

00:01:28.170 --> 00:01:32.487
pois sabemos que há uma mensagem
relacionada ao preço.

00:01:32.520 --> 00:01:36.158
Já vimos isso, mas há convenções
de nomeação para as variáveis.

00:01:36.191 --> 00:01:38.830
Caso se esqueça,
basta procurar.

00:01:38.863 --> 00:01:42.222
Eu procurei por
"Java nome de variável" no Google.

00:01:42.255 --> 00:01:45.519
Podemos descer até onde fala
da nomeação.

00:01:45.552 --> 00:01:47.454
Diz que são
sensíveis à caixa das letras

00:01:47.487 --> 00:01:49.534
e geralmente começam
em minúscula.

00:01:49.567 --> 00:01:53.115
E podemos usar camelCase,
caso haja várias palavras.

00:01:53.794 --> 00:01:57.377
A seguir, temos o operador
de atribuição, o sinal de igual.

00:01:57.410 --> 00:02:00.618
Ele atribui um valor
a uma variável.

00:02:00.651 --> 00:02:05.961
Atribuímos o valor da direita
à variável priceMessage.

00:02:05.994 --> 00:02:08.257
Especificamos
que o valor inicial da string

00:02:08.290 --> 00:02:10.625
deve ser um texto
entre aspas duplas.

00:02:10.658 --> 00:02:15.667
Isso é chamado de string literal,
pois literal tem valor fixo.

00:02:15.700 --> 00:02:19.793
Nós vimos literais
nas variáveis inteiras.

00:02:19.826 --> 00:02:24.666
Um valor fixo, como 2, 5
ou 10, é um literal inteiro,

00:02:24.699 --> 00:02:28.937
pois não muda, diferentemente
de uma variável que muda.

00:02:28.970 --> 00:02:30.557
Voltando à analogia
da caixa,

00:02:30.590 --> 00:02:33.926
o valor Free
estaria nessa variável.

00:02:33.959 --> 00:02:37.674
Por fim, colocamos
ponto e vírgula ao fim da instrução.

00:02:37.707 --> 00:02:40.738
Agora que vimos melhor
esta linha de código,

00:02:40.771 --> 00:02:43.576
tente experimentar
com valores diferentes.

00:02:43.609 --> 00:02:47.768
Você pode alterar valores iniciais
ou o nome de variável.

00:02:47.801 --> 00:02:52.160
Por exemplo, pode usar uma string
curta, como Free, ou uma maior.

00:02:52.193 --> 00:02:55.086
Você também pode deixar
a string vazia,

00:02:55.119 --> 00:02:58.839
não digitando nenhum caractere
entre as aspas.

00:02:58.872 --> 00:03:02.591
Você pode adicionar espaço,
também pode adicionar números

00:03:02.624 --> 00:03:04.417
ou símbolos.

00:03:05.737 --> 00:03:10.224
Ao criar uma string literal,
alguns caracteres

00:03:10.257 --> 00:03:12.519
são tratados
de forma especial.

00:03:12.552 --> 00:03:16.015
Por exemplo, ao utilizar
as aspas na string,

00:03:16.048 --> 00:03:18.809
você encontrará um erro
dizendo

00:03:18.842 --> 00:03:20.840
que não pode
resolver o símbolo,

00:03:20.873 --> 00:03:23.809
e que espera-se
um ponto e vírgula.

00:03:23.842 --> 00:03:29.033
Isso porque o compilador não sabe
que a string deve ser tudo isso.

00:03:29.066 --> 00:03:31.996
Para resolver o problema,
vamos pesquisar no Google.

00:03:32.029 --> 00:03:35.197
Procure
por "caracteres de escape Java".

00:03:37.990 --> 00:03:41.540
Siga para a seção chamada
de sequências de escape.

00:03:41.573 --> 00:03:44.637
No Java, alguns caracteres
significam coisas especiais.

00:03:44.670 --> 00:03:48.950
As aspas de início e fim
denotam uma string no Java,

00:03:48.983 --> 00:03:52.022
mas, se quiser colocar aspas
dentro da string,

00:03:52.055 --> 00:03:54.985
é preciso utilizar
uma sequência de escape,

00:03:55.018 --> 00:03:59.041
que é um caractere
precedido por uma barra invertida.

00:03:59.074 --> 00:04:02.872
O compilador Java interpretará isso
de forma especial.

00:04:02.905 --> 00:04:08.062
A barra invertida com aspas duplas
indica o uso das aspas,

00:04:08.095 --> 00:04:11.414
e não as aspas
que representam uma string de texto.

00:04:11.447 --> 00:04:13.383
Vou mostrar
o que quero dizer.

00:04:13.416 --> 00:04:16.690
No Android Studio, adicionamos
barra invertida antes das aspas,

00:04:16.723 --> 00:04:20.040
pois queremos
que elas apareçam no texto.

00:04:20.073 --> 00:04:24.536
O valor inicial da variável
será toda a string,

00:04:24.569 --> 00:04:28.396
porque está marcada
pelas aspas de encerramento.

00:04:28.429 --> 00:04:31.252
Dentro da string de texto,
também quero usar aspas,

00:04:31.285 --> 00:04:35.565
então eu as marquei
com uma barra invertida na frente.

00:04:35.598 --> 00:04:38.988
Ao executar no dispositivo,
vejo as aspas em "$1",

00:04:39.021 --> 00:04:43.043
mas elas não estão em tudo,
e era o que esperávamos.

00:04:43.076 --> 00:04:46.196
Outra sequência de escape útil
é a \n,

00:04:46.229 --> 00:04:47.900
que insere uma nova linha,

00:04:47.933 --> 00:04:51.469
assim o texto pode continuar
na próxima linha.

00:04:51.502 --> 00:04:53.908
Você pode testar isso
no seu código.

00:04:53.941 --> 00:04:57.444
Lembre-se de que o ponto e vírgula
deve estar no fim da instrução.

00:04:57.477 --> 00:05:01.907
Mesmo sendo correto adicionar
a pontuação na citação,

00:05:01.940 --> 00:05:03.915
é melhor colocá-la
fora da citação.

00:05:03.948 --> 00:05:07.563
Tudo que estiver aqui no meio
fará parte da string de texto.

00:05:07.596 --> 00:05:11.361
Precisamos colocar o ponto e vírgula
por fora para o compilador Java.

00:05:11.394 --> 00:05:13.395
Podemos modificar
o nome de variável.

00:05:13.428 --> 00:05:16.243
Se eu alterar isto
para algo como message,

00:05:16.276 --> 00:05:20.210
verei um erro, pois isso não pode
resolver o símbolo priceMessage,

00:05:20.243 --> 00:05:22.794
então precisarei copiar
e colocar aqui também.

00:05:22.827 --> 00:05:24.746
Isso deverá executar
no dispositivo.

00:05:24.779 --> 00:05:26.883
Mas não podemos alterar
o tipo de dado,

00:05:26.916 --> 00:05:30.034
ele deve dizer "String"
exatamente como está aqui.

00:05:30.067 --> 00:05:32.659
Ela está em letra maiúscula
por ser um objeto.

00:05:32.692 --> 00:05:34.458
Veremos isso
na terceira aula,

00:05:34.491 --> 00:05:37.219
mas, por ora,
digite String com letra maiúscula.

00:05:37.252 --> 00:05:39.152
Ao trabalharmos
com inteiros,

00:05:39.185 --> 00:05:42.832
nós declaramos int
com letra minúscula,

00:05:42.865 --> 00:05:45.488
isso por ser
um tipo de dado primitivo,

00:05:45.521 --> 00:05:49.503
ou seja, é um dos tipos de dados
básicos do Java.

00:05:49.536 --> 00:05:52.304
Teste diferentes nomes
de variável e valores iniciais

00:05:52.337 --> 00:05:54.937
até se familiarizar
com a criação de strings.

00:05:54.970 --> 00:05:59.569
Diga-me o que está errado
nestas declarações de string.

00:05:59.602 --> 00:06:02.842
Identifique o erro
em cada uma dessas linhas.

