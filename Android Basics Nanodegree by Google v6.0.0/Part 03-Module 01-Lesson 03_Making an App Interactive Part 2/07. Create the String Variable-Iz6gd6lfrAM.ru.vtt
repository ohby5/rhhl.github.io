WEBVTT
Kind: captions
Language: ru

00:00:00.630 --> 00:00:02.790
Ранее в уроке мы
узнали как объявить или

00:00:02.790 --> 00:00:04.088
создать целую переменную.

00:00:04.088 --> 00:00:07.520
Мы используем тот же формат
для создания переменной, но

00:00:07.520 --> 00:00:11.480
в этот раз в переменной будет текст
потому что это строка.

00:00:11.480 --> 00:00:13.815
Вот код который 
мы добавили в приложение.

00:00:13.815 --> 00:00:16.995
Он создает новую строковую
переменную - priceMessage.

00:00:16.995 --> 00:00:19.715
А ее значением будет 
текст "Free".

00:00:20.825 --> 00:00:24.605
Ее формат соответствует 
синтаксису языка Java.

00:00:24.605 --> 00:00:26.025
Сначала, мы назначим тип данных.

00:00:26.025 --> 00:00:28.515
В нашем случае это - string (строка).

00:00:28.515 --> 00:00:31.485
Помните, что string это просто
последовательность символов.

00:00:31.485 --> 00:00:34.939
После этого идет название переменной,
в нашем случае это - priceMessage.

00:00:36.080 --> 00:00:38.850
Потом идет знак "равно",
исходное значение,

00:00:38.850 --> 00:00:41.330
и точка с запятой, чтобы обозначить
конец выражения.

00:00:42.490 --> 00:00:46.280
Назначение "string" в качестве 
типа данных ограничивает виды данных,

00:00:46.280 --> 00:00:47.780
хранящихся внутри этой переменой.

00:00:47.780 --> 00:00:50.780
Только одна строка может
храниться одновременно.

00:00:50.780 --> 00:00:53.830
Строка может состоять из букв,
чисел или символов.

00:00:54.860 --> 00:00:58.770
Вы помните что имя переменной - это
название, которое мы ей дали чтобы

00:00:58.770 --> 00:01:03.160
обращаться к ней для извлечения 
или изменения ее значения.

00:01:03.160 --> 00:01:04.650
Похоже на установку метки.

00:01:05.920 --> 00:01:08.620
При выборе имени переменной важно
выбирать что-то

00:01:08.620 --> 00:01:12.950
что описывет вид данных, которые
будут в ней храниться.

00:01:12.950 --> 00:01:15.660
Я могу назвать эту переменную
Catherine, но

00:01:15.660 --> 00:01:18.520
оно на самом деле ничего не скажет
про информацию внутри.

00:01:18.520 --> 00:01:20.530
Также мой будет будет труднее понять,

00:01:20.530 --> 00:01:24.820
потому что никто не знает почему
строковую переменную назвали Caterin.

00:01:24.820 --> 00:01:25.450
В то же время

00:01:25.450 --> 00:01:28.990
имя переменной - как "priceMessage"
немного лучше, потому что вы знаете

00:01:28.990 --> 00:01:32.530
что ее значение скорее всего
относится к цене.

00:01:32.530 --> 00:01:36.280
Мы уже это изучали - есть правила
для выбора названий переменных.

00:01:36.280 --> 00:01:38.990
Если вы не помните их напамять,
из всегда можно найти.

00:01:38.990 --> 00:01:42.350
Я просто поищу "название
переменных в Java" в поиске Google.

00:01:42.350 --> 00:01:45.690
И пролистаю вниз до места
где о них говорится.

00:01:45.690 --> 00:01:47.780
Тут сказано что имена переменных
зависят от регистра,

00:01:47.780 --> 00:01:49.850
и обычно начинаются с
прописной буквы.

00:01:49.850 --> 00:01:52.520
Если слов несколько - используйте
"горбатый" регистр.

00:01:53.950 --> 00:01:57.420
Теперь посмотрим на оператор
присвоения, или знак "равно" вот тут.

00:01:57.420 --> 00:02:00.830
Этот оператор назначает
значение переменной.

00:02:00.830 --> 00:02:02.860
Так вы назначаете значение
с правой стороны

00:02:02.860 --> 00:02:04.910
переменной под
названием priceMessage.

00:02:06.100 --> 00:02:09.400
Мы определили что начальным значением
будет некоторый текст

00:02:09.400 --> 00:02:10.949
и кавычки.

00:02:10.949 --> 00:02:15.800
Это называется строчный литерал пото-
му что у него фиксированное значение.

00:02:15.800 --> 00:02:20.060
Впервые мы узнали о литералах
при изучении целых переменных.

00:02:20.060 --> 00:02:24.190
Фиксированные значения - как два
или пять - это значения целочисленных

00:02:24.190 --> 00:02:29.060
литералов, поскольку они не меняются,
в отличие от переменных.

00:02:29.060 --> 00:02:31.480
По аналогии с коробочкой,
значение - Free - попадет

00:02:31.480 --> 00:02:34.020
вовнутрь этой переменной.

00:02:34.020 --> 00:02:36.830
Что не менее важно - точка с запятой
в конце утверждения.

00:02:38.040 --> 00:02:41.310
Теперь мы стали понимать эту
кода немного лучше, поэтому

00:02:41.310 --> 00:02:43.860
попробуем поиграть 
с разными значениями.

00:02:43.860 --> 00:02:47.890
Можно попробовать изменить начальное
значение или имя переменной.

00:02:47.890 --> 00:02:50.420
Например, можно изменить строку

00:02:50.420 --> 00:02:52.460
на более длинную.

00:02:52.460 --> 00:02:55.220
Можно также оставить 
строку совсем пустой,

00:02:55.220 --> 00:02:58.830
без каких-либо символов 
между кавычек.

00:02:58.830 --> 00:03:03.120
Можно поставить пробел, или цифры или

00:03:03.120 --> 00:03:04.250
добавить символы.

00:03:05.920 --> 00:03:08.930
При создании строчного литерала
надо быть осторожным

00:03:08.930 --> 00:03:12.640
с использованием некоторых символов.

00:03:12.640 --> 00:03:16.040
Например, если вы используете
кавычки в строке

00:03:16.040 --> 00:03:18.970
то получите ошибку про непонятный

00:03:18.970 --> 00:03:24.090
знака доллара и отсутствие
точки с запятой.

00:03:24.090 --> 00:03:27.360
Это потому что компилятор 
не понимает, что строка

00:03:27.360 --> 00:03:29.150
должна быть такой.

00:03:29.150 --> 00:03:30.950
Чтобы решить это -
давайте поищем в Google.

00:03:32.190 --> 00:03:34.720
В Google найдите 
управляющие символы Java.

00:03:38.090 --> 00:03:41.750
И пролистайте вниз до раздела про
управляющие последовательности.

00:03:41.750 --> 00:03:44.920
В Java некоторые символы
имеют специальное значение.

00:03:44.920 --> 00:03:49.210
Кавычки обозначают строку в Java,
но если вам надо поставить

00:03:49.210 --> 00:03:52.160
кавычки в строке, придется использовать

00:03:52.160 --> 00:03:55.090
управляющие символы.

00:03:55.090 --> 00:03:59.330
Управляющий символ - это символ
с обратным слешем перед ним и

00:03:59.330 --> 00:04:01.990
и компилятор Java интерпретирует
его по-другому.

00:04:03.030 --> 00:04:06.520
Если мы поставим обратный слеш
с кавычками это будет значить, что мы

00:04:06.520 --> 00:04:11.460
хотим использовать кавычки как
символ, а не как обозначение строки.

00:04:11.460 --> 00:04:12.350
Вот что я имею в виду.

00:04:13.480 --> 00:04:16.160
В Android Studio я могу добавить
обратный слеш перед каждой

00:04:16.160 --> 00:04:19.079
кавычкой, которую хочу
увидеть в тексте.

00:04:20.200 --> 00:04:24.520
Теперь все началное значение 
этой переменной будет вся эта строка,

00:04:24.520 --> 00:04:26.880
потому что она обозначена
закрывающими кавычками.

00:04:28.570 --> 00:04:31.390
А внутри текстовой строки
я хочу использовать кавычки, но

00:04:31.390 --> 00:04:34.720
я обозначаю их обратным слешем -
перед каждой кавычкой.

00:04:35.760 --> 00:04:39.220
При запуске на устройстве я увижу
кавычки вокруг "one dollar", но

00:04:39.220 --> 00:04:42.130
не увижу кавычек вокргу всей фразы,
что и требовалось.

00:04:43.240 --> 00:04:46.510
Еще один полезный
управляющий символ - это /n,

00:04:46.510 --> 00:04:50.360
который вставляет новую строку,
на которой будет продолжаться текст.

00:04:51.610 --> 00:04:53.180
Можете попробовать в вашем коде.

00:04:54.230 --> 00:04:57.730
Помните что в конце выражения
должна стоять точка с запятой.

00:04:57.730 --> 00:04:59.700
Хоть это и правильно
ставить знаки препинания

00:04:59.700 --> 00:05:04.050
внутри кавычек, вам надо будет
поставить их снаружи.

00:05:04.050 --> 00:05:07.620
Все что между этих знаков -
часть текстовой строки.

00:05:07.620 --> 00:05:10.540
И вам надо поставить точку с запятой
снаружи для компилятора Java.

00:05:10.540 --> 00:05:13.360
Вы также можете изменить
имя переменной.

00:05:13.360 --> 00:05:17.440
Если я изменю это на "message",
то получу ошибку,

00:05:17.440 --> 00:05:20.200
потому что нельзя понять
значение "priceМessage".

00:05:20.200 --> 00:05:22.150
Мне просто надо скопировать
его сюда тоже.

00:05:22.150 --> 00:05:23.790
В таком виде оно должно работать.

00:05:24.790 --> 00:05:26.860
Но вам не удастся изменить
тип данных.

00:05:26.860 --> 00:05:30.110
Его следует писать именно "string",
как показано.

00:05:30.110 --> 00:05:32.245
Тут String написано с заглавной
потому что это объект.

00:05:32.245 --> 00:05:34.700
Мы узнаем про объекты в Уроке 3,
пока просто

00:05:34.700 --> 00:05:37.230
пишите "string" с заглавной S.

00:05:37.230 --> 00:05:38.960
Когда мы работали с целыми ранее,

00:05:38.960 --> 00:05:41.889
мы обозначали целые с
прописным i в int.

00:05:42.960 --> 00:05:45.570
Прописным потому что это
простой тип данных,

00:05:45.570 --> 00:05:48.540
то есть один из базовых
типов данных в Java.

00:05:49.730 --> 00:05:51.470
Поиграйтесь с разными
именами переменной и

00:05:51.470 --> 00:05:54.980
исходными значениями пока не
привыкнете к строчным переменным.

00:05:54.980 --> 00:05:57.680
После этого вы должны
рассказать мне что не так

00:05:57.680 --> 00:05:59.670
с каждым из этих выражений.

00:05:59.670 --> 00:06:02.320
Я хочу чтобы вы нашли ошибку
в каждой их этих строк кода.

