WEBVTT
Kind: captions
Language: zh-CN

00:00:00.140 --> 00:00:02.270
希望这不会很难

00:00:02.270 --> 00:00:03.780
你使用了 textColor 属性

00:00:03.780 --> 00:00:08.070
只是提示一下这个值是什么

00:00:08.070 --> 00:00:12.930
我们使用 “@android:Color” 来获得标准的 Android 颜色

00:00:12.930 --> 00:00:17.560
然后 “/white” 指定了我们要使用标准 Android 颜色中的白色

00:00:17.560 --> 00:00:20.460
确实标准的Android 选项也不是很多

00:00:20.460 --> 00:00:23.390
如果你想要一个特定的颜色 用十六进制的编码更容易一些

00:00:23.390 --> 00:00:25.310
正如我们在课程中讨论的那样

00:00:25.310 --> 00:00:28.870
在 Android 开发者网站上有一个材料设计颜色网页

00:00:28.870 --> 00:00:30.800
它提供了较好的十六进制编码的资源

00:00:30.800 --> 00:00:32.522
网页的链接在的讲师注释中

00:00:32.522 --> 00:00:34.470
你可以看看

00:00:34.470 --> 00:00:35.348
颜色已经讲得够多了

00:00:35.348 --> 00:00:36.740
我们使用 Android 的白色

00:00:36.740 --> 00:00:40.210
去 Android Studio 中看看它是什么样子的

00:00:40.210 --> 00:00:44.270
我们回到原来的 activity_main.xml 中 你可能

00:00:44.270 --> 00:00:46.660
已经习惯了添加属性继续

00:00:46.660 --> 00:00:50.070
开始写入 "Happy Birthday Ben" 的TextView

00:00:50.070 --> 00:00:51.885
我使用的属性是 textColor

00:00:53.050 --> 00:00:55.876
实际上 下拉菜单给了我一些选择

00:00:55.876 --> 00:00:59.792
是 “@Android”

00:00:59.792 --> 00:01:05.750
然后是 “color/white” 我的预览几乎立刻就更新了

00:01:05.750 --> 00:01:08.950
它是白色的 所以很难看见 

00:01:08.950 --> 00:01:10.290
但是这就是我们想要的

00:01:10.290 --> 00:01:13.976
我们对另一个 TextView 做同样的操作

00:01:13.976 --> 00:01:17.009
点击这里

00:01:17.009 --> 00:01:21.944
android:textColor=""

00:01:21.944 --> 00:01:29.273
引号 非常非常重要的引号 “@android:/color”

00:01:30.390 --> 00:01:31.660
一旦我写完这句代码

00:01:31.660 --> 00:01:34.270
我可以看到 这个 TextView 也消失了

00:01:35.290 --> 00:01:38.380
与预期的一样 因为它是一个在白的背景中的白色文本

00:01:39.460 --> 00:01:43.041
但我可以从这里看到视图的轮廓

00:01:43.041 --> 00:01:46.950
这说明视图真的存在

00:01:47.960 --> 00:01:51.510
为了看的更彻底 我们继续在手机上运行它

00:01:51.510 --> 00:01:55.280
在观看该视频的人们基本很难发现它

00:01:55.280 --> 00:01:58.820
但我隐约可以看到在浅灰色背景上的白色文本

00:01:58.820 --> 00:02:00.570
看来我们做得很好

00:02:00.570 --> 00:02:01.960
又从列表中删除了一条

00:02:01.960 --> 00:02:03.120
让我们进入下一步

