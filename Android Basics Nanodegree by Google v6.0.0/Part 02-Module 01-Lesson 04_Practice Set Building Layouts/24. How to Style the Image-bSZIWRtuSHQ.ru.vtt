WEBVTT
Kind: captions
Language: ru

00:00:00.100 --> 00:00:01.940
Если у вас это получилось
отличная работа.

00:00:01.940 --> 00:00:04.970
Если нет, была хорошая попытка,
внимательно следите за ответом.

00:00:06.190 --> 00:00:08.080
Итак,
я в Android Studio.

00:00:08.080 --> 00:00:11.150
И сейчас я смотрю
на текстовые представления.

00:00:11.150 --> 00:00:13.870
Я собираюсь прокрутить вверх,
чтобы посмотреть на изображение.

00:00:13.870 --> 00:00:16.950
Итак, немного о том, что
я говорила раньше.

00:00:16.950 --> 00:00:19.635
Если я помещу курсор где-то
на этом изображении,

00:00:19.635 --> 00:00:23.473
появится синий контур, который показывает
размер представления изображения.

00:00:23.473 --> 00:00:26.743
И это в значительной степени весь
размер экрана телефона.

00:00:26.743 --> 00:00:29.049
Теперь я собираюсь
добавить тип масштабирования, и

00:00:29.049 --> 00:00:32.950
есть два варианта — по центру [center]
или обрезка краев [centerCrop].

00:00:32.950 --> 00:00:35.450
Опция "по центру" не
масштабирует изображение,

00:00:35.450 --> 00:00:37.380
не меняет его размер.

00:00:37.380 --> 00:00:40.800
Так что вполне понятно, что
нужно использовать обрезку краев.

00:00:40.800 --> 00:00:44.892
Вы видите, что изображение
теперь занимает все пространство

00:00:44.892 --> 00:00:46.770
представления изображения.

00:00:46.770 --> 00:00:50.470
Можно заметить, что
внизу есть маленькая белая

00:00:50.470 --> 00:00:53.610
полоска, где нет изображения.

00:00:53.610 --> 00:00:57.860
Если я перемещаюсь сюда, где можно
выбрать устройство, и

00:00:57.860 --> 00:01:01.190
и я выберу, например, планшет Nexus 10,

00:01:01.190 --> 00:01:04.530
мы увидим, что это изображение
не заполняет все пространство.

00:01:04.530 --> 00:01:07.600
Это плохо, так как означает, что если
вы просматриваете это на планшете, то

00:01:07.600 --> 00:01:11.610
получите странное изображение в окне
с белым пространством вокруг него.

00:01:11.610 --> 00:01:13.710
Хотя на телефоне это может
выглядеть нормально.

00:01:13.710 --> 00:01:14.775
Причина в том, что

00:01:14.775 --> 00:01:18.190
я использовала wrap_content
вместо match_parent.

00:01:18.190 --> 00:01:20.300
Давайте заменим на match_parent.

00:01:20.300 --> 00:01:23.680
Теперь, после замены атрибутов на
match_parent, изображение заполняет

00:01:23.680 --> 00:01:24.910
все представление.

00:01:24.910 --> 00:01:28.235
Я пытаюсь объяснить, что
атрибуты layout_width, layout_height и

00:01:28.235 --> 00:01:30.080
scaleType работают вместе.

00:01:30.080 --> 00:01:34.080
Я нарисую картинку, чтобы показать вам
подробнее, что я имею ввиду.

00:01:34.080 --> 00:01:37.460
Допустим, вы заинтересованы,
что на самом деле происходит, когда мы

00:01:37.460 --> 00:01:39.060
используем функцию centerCrop.

00:01:39.060 --> 00:01:40.910
Если посетите
веб-сайт разработчиков Android,

00:01:40.910 --> 00:01:43.763
то узнаете, что в документации
говорится следующее.

00:01:43.763 --> 00:01:46.510
Функция centerCrop масштабирует
изображение равномерно,

00:01:46.510 --> 00:01:49.460
то есть сохраняет
соотношение сторон изображения.

00:01:49.460 --> 00:01:53.980
Это означает,
что обе величины, ширина и

00:01:53.980 --> 00:01:56.290
высота изображения,
будут равны или

00:01:56.290 --> 00:02:00.340
больше соответствующего размера
представления изображения (минус отступ).

00:02:00.340 --> 00:02:03.380
Одна вещь, которую я могу сказать
о равномерном масштабировании:

00:02:03.380 --> 00:02:07.360
если вы когда-нибудь пробовали это, то
равномерное масштабирование означает, что

00:02:07.360 --> 00:02:12.030
полученное изображение не растягивается
по горизонтали или вертикали.

00:02:12.030 --> 00:02:16.320
Масштабирование
делает изображение достаточно большим,

00:02:16.320 --> 00:02:19.380
что и ширина, и
высота будут равны или

00:02:19.380 --> 00:02:23.700
больше, чем соответствующие
размеры самого изображения.

00:02:23.700 --> 00:02:25.070
Посмотрим на картинку.

00:02:25.070 --> 00:02:26.910
Итак, вот ваш телефон.

00:02:26.910 --> 00:02:29.200
И на нем есть представление изображения.

00:02:29.200 --> 00:02:31.150
Вот картинка для
представления изображения, а

00:02:31.150 --> 00:02:34.860
вот зеленое поле, показывающее
фактический размер представления.

00:02:34.860 --> 00:02:37.680
Функция centerCrop будет
масштабировать изображение так,

00:02:37.680 --> 00:02:40.790
чтобы оно без деформации
вписалось в это поле.

00:02:40.790 --> 00:02:44.627
Таким образом, не меняя размеры,
я масштабировала изображение в соответствии

00:02:44.627 --> 00:02:46.460
с этим зеленым полем.

00:02:46.460 --> 00:02:48.830
Поскольку изображение —
это длинный прямоугольник,

00:02:48.830 --> 00:02:51.545
он на самом деле расширяется
за края телефона.

00:02:51.545 --> 00:02:54.610
Функция centerCrop центрирует это
изображение в представлении, а

00:02:54.610 --> 00:02:59.000
затем, в соответствии с ее названием,
обрежет лишние части изображения.

00:02:59.000 --> 00:03:01.940
Теперь поговорим еще об одной
проблеме, в которой можете столкнуться.

00:03:03.400 --> 00:03:06.860
Представления могут перекрываться, как
перекрывают друг друга игральные карты.

00:03:06.860 --> 00:03:09.670
Порядок тегов представлений
определяет порядок

00:03:09.670 --> 00:03:11.610
размещения представлений на экране.

00:03:11.610 --> 00:03:13.010
Поскольку представление A первое,

00:03:13.010 --> 00:03:17.810
оно будет помещено на экран первым,
а за ним представления B и C.

00:03:17.810 --> 00:03:20.530
Теперь из-за порядка,
которое я применяю в данном XML,

00:03:20.530 --> 00:03:23.890
я не могу полностью видеть текст
в представлении A.

00:03:23.890 --> 00:03:26.910
Давайте попробуем изменить XML и
посмотрим, как изменится порядок на экране.

00:03:27.920 --> 00:03:31.710
Я поменяла представления местами,
теперь порядок — B, A, C.

00:03:31.710 --> 00:03:33.670
Представление В отобразится первым.

00:03:33.670 --> 00:03:35.320
Затем будет нарисовано представление A.

00:03:35.320 --> 00:03:38.140
Последним будет размещено представление C.

00:03:38.140 --> 00:03:39.950
Я просто изменила порядок представлений.

00:03:39.950 --> 00:03:42.347
Все находится
в прежнем положении,

00:03:42.347 --> 00:03:46.252
но изменился порядок накладывания
представлений друг на друга.

00:03:46.252 --> 00:03:48.330
Поэтому
теперь текст виден.

00:03:48.330 --> 00:03:51.280
Вы можете столкнуться с похожей
проблемой в вашей открытке, если

00:03:51.280 --> 00:03:55.010
поместите два текстовых
представления здесь, а затем

00:03:55.010 --> 00:03:58.270
Сначала отображается первый текст,
затем второй, а

00:03:58.270 --> 00:04:01.870
затем изображение, которое занимает весь
экран и скрывает оба текста.

00:04:01.870 --> 00:04:03.580
Убедитесь, что
используете правильный порядок.

00:04:04.750 --> 00:04:07.020
Давайте посмотрим, как
это выглядит в коде.

00:04:07.020 --> 00:04:09.330
Вот мой рабочий код.

00:04:09.330 --> 00:04:12.260
Я просто хочу показать вам, что
имею ввиду под порядком представлений.

00:04:12.260 --> 00:04:14.729
Сейчас сначала размещается представление
изображения, а затем

00:04:14.729 --> 00:04:15.927
два текстовых представления.

00:04:16.029 --> 00:04:18.550
Текст хорошо
виден на экране.

00:04:18.550 --> 00:04:21.829
Теперь я вырежу это представление
изображения, прокручиваю вниз

00:04:21.829 --> 00:04:23.420
и вставляю его здесь.

00:04:23.420 --> 00:04:26.050
Теперь есть текстовое представление,
текстовое представление

00:04:26.051 --> 00:04:27.249
и представление изображения.

00:04:27.250 --> 00:04:29.440
Будет выводиться представление
«С Днем рождения, Бен!»,

00:04:29.440 --> 00:04:32.740
затем представление «От Лайлы!».

00:04:33.140 --> 00:04:35.207
Затем будет нарисовано
изображение вечеринки

00:04:35.232 --> 00:04:37.320
Android над двумя
текстовыми представлениями.

00:04:37.320 --> 00:04:40.890
Если я выберу текстовые представления,
то увижу, что они все еще там,

00:04:40.890 --> 00:04:43.100
просто скрыты
представлением изображения.

00:04:43.100 --> 00:04:45.040
Отлично, я собираюсь вернуть все обратно.

00:04:45.040 --> 00:04:47.650
Так значительно лучше,
текстовые представления находятся сверху.

00:04:47.650 --> 00:04:50.280
Как всегда, двигается дальше
и запустим это на нашем телефоне,

00:04:50.280 --> 00:04:53.050
просто чтобы убедиться, что
все в порядке с match_parents и

00:04:53.050 --> 00:04:54.540
centerCrop.

00:04:54.540 --> 00:04:56.720
Прекрасно,
все выглядит отлично.

00:04:56.720 --> 00:04:58.823
Изображение увеличено
для заполнения всего

00:04:58.848 --> 00:05:01.194
представления, и видны
текстовые представления.

00:05:02.070 --> 00:05:03.833
Осталась одна крошечная
проблема, которую мы

00:05:03.853 --> 00:05:05.665
должны исправить, но
проделана большая работа.

00:05:05.670 --> 00:05:08.630
Вы отлично справляетесь.
Нужно изменить только один атрибут,

00:05:08.630 --> 00:05:10.960
и мы получим конечный вариант
поздравительной открытки.

