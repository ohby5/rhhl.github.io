WEBVTT
Kind: captions
Language: ja

00:00:00.300 --> 00:00:01.940
こうなっていれば 成功です

00:00:01.940 --> 00:00:04.970
上手くいかなくても大丈夫
答えを見ていきましょう

00:00:06.190 --> 00:00:08.080
さて Android Studio にいます

00:00:08.080 --> 00:00:11.150
今は テキストビューを見ています

00:00:11.150 --> 00:00:13.870
スクロールして
イメージビューを見ます

00:00:13.870 --> 00:00:16.950
前にお話ししましたが

00:00:16.950 --> 00:00:19.635
イメージビューにカーソルを置くと

00:00:19.635 --> 00:00:23.473
イメージビューの大きさが
青いボックスで表示されます

00:00:23.473 --> 00:00:26.743
これはスマホ画面のサイズです

00:00:26.743 --> 00:00:29.049
scaleType を加えますが

00:00:29.049 --> 00:00:32.950
ここで探す２つのオプションは
center か centorCrop です

00:00:32.950 --> 00:00:35.450
center は画像を実際に
拡大縮小するわけではなく

00:00:35.450 --> 00:00:37.380
画像のサイズは変えません

00:00:37.380 --> 00:00:40.800
ですから centerCrop を使います

00:00:40.800 --> 00:00:44.892
これで画像が
イメージビューの空間全体に

00:00:44.892 --> 00:00:46.770
広がるはずです

00:00:46.770 --> 00:00:50.470
下の方に白い帯があって

00:00:50.470 --> 00:00:53.610
全体には広がっていません

00:00:53.610 --> 00:00:57.860
ここで他のデバイスを選択したとすると

00:00:57.860 --> 00:01:01.190
例えば Nexus 10 といった
タブレットを選ぶと

00:01:01.190 --> 00:01:04.530
画像は画面一杯に広がりません

00:01:04.530 --> 00:01:07.600
これはマズイですね
つまりタブレットで見ると

00:01:07.600 --> 00:01:11.610
白い枠があるおかしな画像が
表示されるわけです

00:01:11.610 --> 00:01:13.810
スマホでは 大丈夫なんですけどね

00:01:13.810 --> 00:01:15.225
match_parent でなく

00:01:15.225 --> 00:01:18.190
代わりに wrap_content を
使ったからです

00:01:18.190 --> 00:01:20.300
match_parent に変更しましょう

00:01:20.300 --> 00:01:22.890
match_parent に変更して

00:01:22.890 --> 00:01:24.910
ビュー全体に広げます

00:01:24.910 --> 00:01:28.235
layout_width と layout_height

00:01:28.235 --> 00:01:30.080
scaleType を一緒に機能します

00:01:30.080 --> 00:01:34.080
これを図で説明しましょう

00:01:34.080 --> 00:01:37.460
centerCrop では
何が起こるのだろうと

00:01:37.460 --> 00:01:39.060
関心があるでしょう

00:01:39.060 --> 00:01:40.910
Android Developers 
ウェブサイトに行くと

00:01:40.910 --> 00:01:43.763
次のように書かれています

00:01:43.763 --> 00:01:46.510
centerCrop は画像を
均一に拡大縮小します

00:01:46.510 --> 00:01:49.460
つまり 画像のアスペクト比を維持します

00:01:49.460 --> 00:01:53.980
ですから どちらの寸法
つまり 画像の幅も高さも

00:01:53.980 --> 00:01:56.290
等しいままか
対応するイメージビューの―

00:01:56.290 --> 00:02:00.340
寸法より大きくなります
(パディングは引く）

00:02:00.340 --> 00:02:03.380
均一に拡大縮小する場合

00:02:03.380 --> 00:02:07.360
画像を均一に拡大縮小するというのは

00:02:07.360 --> 00:02:12.030
画像を水平方向や
垂直方向に引き伸ばさないことです

00:02:12.030 --> 00:02:16.320
拡大縮小では
幅と高さを等しく

00:02:16.320 --> 00:02:19.380
画像を大きくするか

00:02:19.380 --> 00:02:23.700
画像の対応する寸法より
拡大します

00:02:23.700 --> 00:02:25.070
つまり こういうことです

00:02:25.070 --> 00:02:26.910
あなたのスマホがあります

00:02:26.910 --> 00:02:29.200
私達のスマホには
イメージビューがあります

00:02:29.200 --> 00:02:31.150
これがイメージビューのための写真で

00:02:31.150 --> 00:02:34.860
緑色のボックスは実際の
イメージビューのサイズを表します

00:02:34.860 --> 00:02:37.680
centerCrop で行うのは
この画像をゆがめることなく

00:02:37.680 --> 00:02:40.790
拡大縮小して
ボックスに合わせます

00:02:40.790 --> 00:02:44.627
縮尺比に従って

00:02:44.627 --> 00:02:46.460
画像を緑色のボックスに合わせて
拡大します

00:02:46.460 --> 00:02:48.830
この画像は長方形ですから

00:02:48.830 --> 00:02:51.545
スマホをはみ出してしまいます

00:02:51.545 --> 00:02:54.610
centerCrop でこの画像を
中央に置き

00:02:54.610 --> 00:02:59.000
その名前の通り画像の
はみ出した部分を切り取ります

00:02:59.000 --> 00:03:01.940
もうひとつ解決してほしいことがあります

00:03:03.400 --> 00:03:06.860
ビュー同士がトランプの様に
重なり合うことがありますね

00:03:06.860 --> 00:03:09.670
ビュータグの順序で

00:03:09.670 --> 00:03:11.610
画面に現れるビューの順序が決まります

00:03:11.610 --> 00:03:12.910
ビュー A がまず

00:03:12.910 --> 00:03:17.810
画面に最初に現れ
ビュー B ビュー C と続きます

00:03:17.810 --> 00:03:20.530
XML をこの順序にしているため

00:03:20.530 --> 00:03:23.890
テキストビュー A の
テキストがよく見えません

00:03:23.890 --> 00:03:26.910
XML を変更して 画面が
どう変化するのか見てみましょう

00:03:27.920 --> 00:03:31.710
ビューは B A C の順に変更しました

00:03:31.710 --> 00:03:34.170
ビュー B を最初に表示し

00:03:34.170 --> 00:03:35.220
次にビュー A がきます

00:03:35.220 --> 00:03:38.140
そして最後は ビュー C です

00:03:38.140 --> 00:03:39.950
これでビューを並べ替えました

00:03:39.950 --> 00:03:42.347
配置された位置は同じですが

00:03:42.347 --> 00:03:46.252
ビューの重なり順が変わりました

00:03:46.252 --> 00:03:48.330
そのおかげでテキストが見えます

00:03:48.330 --> 00:03:51.280
テキストビュー２つと
画像ビューが１つだと

00:03:51.280 --> 00:03:55.010
同じような問題が起きると思います

00:03:55.010 --> 00:03:58.270
それは まず最初のテキストビュー
次のテキストビュー

00:03:58.270 --> 00:04:01.870
そして 画面一杯に広がる画像がきて
両方のテキストを覆ってしまうのです

00:04:01.870 --> 00:04:04.430
正しい順序になるよう気をつけましょう

00:04:04.750 --> 00:04:07.020
コードではどうなっているでしょうか

00:04:07.020 --> 00:04:09.330
これが作業中のコードです

00:04:09.330 --> 00:04:12.260
ビューの順序について説明します

00:04:12.260 --> 00:04:16.029
まず イメージビューを設置し
テキストビューが２つ置かれます

00:04:16.029 --> 00:04:18.550
画面でテキストは簡単に見つけられます

00:04:18.550 --> 00:04:21.829
代わりに イメージビューを切り取り
下にスクロールして

00:04:21.829 --> 00:04:23.420
ここに貼り付けます

00:04:23.420 --> 00:04:27.950
これで テキストビュー
テキストビューとイメージビューです

00:04:27.950 --> 00:04:29.740
「 Happy Birthday Ben! 」
テキストビューをまず描きます

00:04:29.740 --> 00:04:33.140
そして「 From, Lyla! 」
テキストビューがきます

00:04:33.140 --> 00:04:37.320
そして Android party の画像が
他のテキストビュー上に描きます

00:04:37.320 --> 00:04:40.890
ここで テキストビューを選択すると存在しますが

00:04:40.890 --> 00:04:43.100
イメージビューに覆われています

00:04:43.100 --> 00:04:45.040
さて 元に戻しますよ

00:04:45.040 --> 00:04:47.350
良くなりました
テキストビューが上に来ます

00:04:47.350 --> 00:04:50.280
実際にスマホで実行して

00:04:50.280 --> 00:04:53.050
match_parents と centerCrop が

00:04:53.050 --> 00:04:54.540
機能しているかを確かめます

00:04:54.540 --> 00:04:56.720
これはいいですね

00:04:56.720 --> 00:05:02.070
画像はビューいっぱいに広がり
テキストビューも見えます

00:05:02.070 --> 00:05:05.470
まだ少し修正するところがありますが
上手くいっています

00:05:05.470 --> 00:05:08.630
よく頑張りましたね
属性をもうひとつ変更して

00:05:08.630 --> 00:05:10.960
バースデーカードを完成させましょう

