WEBVTT
Kind: captions
Language: vi

00:00:00.900 --> 00:00:04.795
Để trả lời câu hỏi này, ta hãy so sánh
cả hai để bạn có thể đưa ra lựa chọn.

00:00:04.795 --> 00:00:08.620
Layout tuyến tính tốt cho việc căn chỉnh
các view trong hàng hoặc cột.

00:00:08.620 --> 00:00:11.840
Chúng tốt cho việc phân chia không gian
sử dụng dung lượng layout.

00:00:11.840 --> 00:00:15.590
mà sẽ mở rộng hoặc thu nhỏ view
tùy thuộc vào kích thước của màn hình.

00:00:15.590 --> 00:00:17.615
Mặt khác,
Layout tương đối rất tốt

00:00:17.615 --> 00:00:20.200
để các yếu tố định vị
tương đối với nhau.

00:00:20.200 --> 00:00:24.450
Ví dụ, đặt B dưới A, 
hoặc đặt C ở góc dưới bên trái.

00:00:25.005 --> 00:00:28.600
Các layout tương đối cũng làm cho việc
xếp chồng các view dễ dàng hơn.

00:00:28.600 --> 00:00:31.551
Ví dụ như,
ở đây view A ghi đè lên view B.

00:00:31.551 --> 00:00:35.315
Với thiệp của chúng ta, nó không thực sự 
có một view ngang hay dọc.

00:00:35.315 --> 00:00:38.169
Như bạn thấy, một vài trong các view này
xếp chồng lên nhau.

00:00:38.169 --> 00:00:41.686
Vì vậy, trong trường hợp này,
một Layout tương đối sẽ tốt hơn rất nhiều.

00:00:41.686 --> 00:00:43.109
Và với một RelativeLayout,

00:00:43.109 --> 00:00:47.080
Tôi có thể sử dụng các thuộc tính cụ thể
để định vị hai TextViews này.

00:00:47.080 --> 00:00:49.230
Thay vì nói về 
tất cả những điều đó ở đây,

00:00:49.230 --> 00:00:51.921
bạn sẽ cho tôi biết cần làm gì
trong câu hỏi tiếp theo.

