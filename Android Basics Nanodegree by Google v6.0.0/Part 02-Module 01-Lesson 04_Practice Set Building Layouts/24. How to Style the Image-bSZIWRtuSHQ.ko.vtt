WEBVTT
Kind: captions
Language: ko

00:00:00.300 --> 00:00:01.940
좋아요, 이것을 해냈다면, 잘 했어요.

00:00:01.940 --> 00:00:04.970
그렇지 않다면, 잘 시도했고
답을 찾기 위해 보세요.

00:00:06.190 --> 00:00:08.080
좋아요, 여기 Android Studio가 있고,

00:00:08.080 --> 00:00:11.150
지금 TextView를 보고 있어요.

00:00:11.150 --> 00:00:13.870
하지만 스크롤을 올려서
ImageView를 볼게요.

00:00:13.870 --> 00:00:16.950
좋아요, 제가 전에 말했던 것이죠.

00:00:16.950 --> 00:00:19.635
제가 ImageVIew 안의 어딘가에
제 커서를 두면

00:00:19.635 --> 00:00:23.473
이 이미지 뷰가 얼마나 큰지 보여주는
파란 박스를 제게 제공합니다.

00:00:23.473 --> 00:00:26.743
이건 꽤 폰 전체의 사이즈죠.

00:00:26.743 --> 00:00:29.049
이제 계속해서
scaleType을 추가하고

00:00:29.049 --> 00:00:32.950
center나 centerCrop의
두 옵션을 추가할게요.

00:00:32.950 --> 00:00:35.450
center는 사실
이미지를 조절하는 것 같지 않네요.

00:00:35.450 --> 00:00:37.380
이미지의 크기가 변하지 않았어요.

00:00:37.380 --> 00:00:40.800
centerCrop을 사용해야 한다는 것을
꽤 확실하게 해주네요.

00:00:40.800 --> 00:00:44.892
좋아요, 이미지가 이미지 뷰 공간의
전체를 차지하기 위해

00:00:44.892 --> 00:00:46.770
확장되는 것을 볼 겁니다.

00:00:46.770 --> 00:00:51.300
여기서 이 아래에
이미지가 더 이상 확장하지 않는

00:00:51.320 --> 00:00:53.610
작고 흰 줄을 발견했을 거예요.

00:00:53.610 --> 00:00:57.860
다른 기기를 선택하는
이곳으로 가서

00:00:57.860 --> 00:01:01.190
Nexus 10 같은
태블릿을 선택할게요.

00:01:01.190 --> 00:01:04.530
우리는 이미지가 전체 공간을
차지하지 않는 걸 볼 수 있죠.

00:01:04.530 --> 00:01:07.600
여러분이 이것을 태블릿에서 보면
이 흰 공간이 둘러싸인

00:01:07.600 --> 00:01:11.610
이상한 박스형 이미지를 얻는다는 것을
뜻하기 때문에, 나쁜 결과죠.

00:01:11.610 --> 00:01:13.810
폰에서 좋게 보인다고 해도 말입니다.

00:01:13.810 --> 00:01:14.575
이 현상이 발생하는 이유는

00:01:14.575 --> 00:01:18.190
제가 match_parent 대신
wrap_content를 넣었기 때문입니다.

00:01:18.190 --> 00:01:20.300
이것을 match_parent로
바꾸겠습니다.

00:01:20.300 --> 00:01:23.680
이제 이것을 match_parent로
바꾸면 이미지는 전체 뷰를

00:01:23.680 --> 00:01:24.910
채우기 위해 확장됩니다.

00:01:24.910 --> 00:01:28.235
이것을 만드는 시점에
layout_width, layout_height,

00:01:28.235 --> 00:01:30.080
scaleType이 함께 작용하죠.

00:01:30.080 --> 00:01:34.080
제가 뭘 말하는지 더 자세히 보여드리기
위해 그림을 하나 그려드리죠.

00:01:34.080 --> 00:01:37.460
네, 우리가 centerCrop을 사용할 때
실제로 무슨 일이 일어나는지

00:01:37.460 --> 00:01:39.060
여러분이 궁금하다고 합시다.

00:01:39.060 --> 00:01:40.910
Android Developers 웹사이트에 가면

00:01:40.910 --> 00:01:43.763
다음과 같은 내용의 문서를 볼 것입니다.

00:01:43.763 --> 00:01:46.510
centerCrop이 이미지를
균일하게 조절한다는 것은

00:01:46.510 --> 00:01:49.460
이미지의 가로 세로 비를
유지한다는 뜻입니다.

00:01:49.460 --> 00:01:53.980
이것이 뜻하는 바는 모든 면,
이미지의 가로 세로가

00:01:53.980 --> 00:01:56.290
대응하는 이미지 뷰의 치수와 같거나

00:01:56.290 --> 00:02:00.340
그것보다 커진다는
것입니다(마이너스 패딩).

00:02:00.340 --> 00:02:03.380
좋아요, 제가 균일한 조절에
관해 말할 수 있는 것은

00:02:03.380 --> 00:02:07.360
당신이 이미지를 조절[scale]할 때
균일하게 조절[scaling uniformly]하는 것은

00:02:07.360 --> 00:02:12.030
이미지가 수평으로나 수직으로
많이 늘어나는 것을 막는다는 것입니다.

00:02:12.030 --> 00:02:16.320
이건 조절해서 이미지를
가로 세로 모두 충분히 크게 했고

00:02:16.320 --> 00:02:19.380
이것은 대응하는 크기의 이미지와

00:02:19.380 --> 00:02:23.700
같아지거나 그 보다 더 큽니다.

00:02:23.700 --> 00:02:25.070
사진 하나를 봅시다.

00:02:25.070 --> 00:02:26.910
여기 여러분의 폰이 있어요.

00:02:26.910 --> 00:02:29.200
폰에는 이미지 뷰가 하나 있죠.

00:02:29.200 --> 00:02:31.150
이미지 뷰를 위한 사진이 있고

00:02:31.150 --> 00:02:34.860
이미지 뷰의 실제 사이즈를
보여주는 초록 박스가 있어요.

00:02:34.860 --> 00:02:37.680
centerCrop이 하는 것은
이 이미지를 크게 조절해

00:02:37.680 --> 00:02:40.790
왜곡하지 않고
이 상자를 채우는 것입니다.

00:02:40.790 --> 00:02:44.627
좋아요, 비율을 바꾸지 않고
이 이미지가 초록 박스를 채우도록

00:02:44.627 --> 00:02:46.460
크기를 크게 했습니다.

00:02:46.460 --> 00:02:48.830
이미지가 긴 직사각형이므로

00:02:48.830 --> 00:02:51.545
실제로 폰 너머로 확장되었죠.

00:02:51.545 --> 00:02:54.610
centerCrop은 이 이미지를
이 뷰 안에서 가운데 정렬하고

00:02:54.610 --> 00:02:59.000
이 이름이 암시하듯, 이미지의
넘어가는 부분은 잘라냅니다.

00:02:59.000 --> 00:03:01.940
좋아요, 당신이 마주칠 수 있는
다른 문제 하나에 대해 얘기하고 싶어요.

00:03:03.400 --> 00:03:06.860
뷰들은 서로를 덮을 수 있어요.
게임용 카드가 서로를 덮듯이요.

00:03:06.860 --> 00:03:10.190
이 뷰 태그의 순서는
화면에서 뷰가 위치되는

00:03:10.190 --> 00:03:11.610
순서를 정해줍니다.

00:03:11.610 --> 00:03:12.910
뷰 A가 첫 번째이므로

00:03:12.910 --> 00:03:17.810
이것은 화면에 처음 나타나고,
다음은 뷰 B, 다음은 뷰 C입니다.

00:03:17.810 --> 00:03:20.530
제가 이 XML에 넣은 순서 때문에

00:03:20.530 --> 00:03:23.890
텍스트 뷰 A 안의
텍스트를 잘 볼 수 없어요.

00:03:23.890 --> 00:03:26.910
XML을 고쳐서 제 화면을
어떻게 재정렬하는지 봅시다.

00:03:27.920 --> 00:03:31.710
좋아요, 이것들을 뒤바꿔서
뷰 B, A, C를 갖게 되었어요.

00:03:31.710 --> 00:03:34.170
이것은 뷰 B를 처음에 부릅니다.

00:03:34.170 --> 00:03:35.790
다음엔 뷰 A가 오고,

00:03:35.790 --> 00:03:38.140
마지막으로 뷰 C를 놓습니다.

00:03:38.140 --> 00:03:39.950
이 뷰들을 재정렬했어요.

00:03:39.950 --> 00:03:42.347
모든 것은 같은 위치에 놓여있어요.

00:03:42.347 --> 00:03:46.252
하지만 뷰들이 서로의 위에
어떻게 쌓이는지의 순서는 바뀌었죠.

00:03:46.252 --> 00:03:48.330
이것 때문에
저는 제 텍스트를 볼 수 있어요.

00:03:48.330 --> 00:03:51.280
두 텍스트 뷰를 여기 놓고
이미지 뷰를 불러온다면

00:03:51.280 --> 00:03:55.010
당신 카드에서 이와 비슷한
문제를 마주할 수도 있어요.

00:03:55.010 --> 00:03:58.270
이것은 첫 뷰를 불러오고
다음으로 두 번째 뷰, 그리고

00:03:58.270 --> 00:04:01.270
화면 전체를 덮는 이미지를 불러오므로
그 모두를 덮어버립니다.

00:04:01.870 --> 00:04:03.580
순서를 바르게 두도록 하세요.

00:04:04.750 --> 00:04:07.020
코드에서 어떻게 보일지 보겠습니다.

00:04:07.020 --> 00:04:09.330
좋아요, 제가 작업하고 있는 코드입니다.

00:04:09.330 --> 00:04:12.260
뷰의 순서를 정하는 것에 대해
제가 뜻한 바를 보여드릴게요.

00:04:12.260 --> 00:04:16.029
제 이미지 뷰가 처음 위치했고,
다음으로 두 텍스트 뷰가 왔어요.

00:04:16.029 --> 00:04:18.550
화면에서 텍스트 뷰를 쉽게 볼 수 있죠.

00:04:18.550 --> 00:04:21.829
이제 대신 이미지 뷰를 잘라내
스크롤을 내려서

00:04:21.829 --> 00:04:23.420
여기 아래에 붙여넣을 거예요.

00:04:23.420 --> 00:04:27.950
좋아요, 이제 텍스트 뷰,
텍스트 뷰, 이미지 뷰가 있어요.

00:04:27.950 --> 00:04:30.350
이것은 "Happy Birthday, Ben!"
텍스트 뷰를 보여주고

00:04:30.350 --> 00:04:33.140
"From, Lyla!" 텍스트 뷰를 보여줘요.

00:04:33.140 --> 00:04:37.320
그리고 이 Android 파티 이미지를
다른 두 텍스트 뷰 위에 보여주죠.

00:04:37.320 --> 00:04:40.890
텍스트 뷰들을 선택하면
그것들이 여전히 거기 있는 게 보여요.

00:04:40.890 --> 00:04:43.100
그들은 이미지 뷰에 의해
덮혀있는 것이죠.

00:04:43.100 --> 00:04:45.040
좋아요, 다시 바꿔놓죠.

00:04:45.040 --> 00:04:47.350
더 낫네요.
제 텍스트 뷰들이 위에 있어요.

00:04:47.350 --> 00:04:50.280
네, 우리가 항상 하듯, 진행하여
이것을 폰에서 실행해볼게요.

00:04:50.280 --> 00:04:53.050
match_parent와 centerCrop에
관한 모든 것이 제대로 작동하는지

00:04:53.050 --> 00:04:54.540
확인하기 위해서요.

00:04:54.540 --> 00:04:56.720
네, 멋져요.
이건 꽤 훌륭하네요.

00:04:56.720 --> 00:05:02.070
이미지가 확장해 뷰 전채를 차지했고,
텍스트 뷰들도 볼 수 있어요.

00:05:02.070 --> 00:05:05.470
우리가 고칠 작은 문제가 하나 있지만
지금까지 훌륭했습니다.

00:05:05.470 --> 00:05:08.630
좋아요, 잘 하고 있었어요.
한 속성만 고치면 됩니다.

00:05:08.630 --> 00:05:10.960
그리고 우리의 최종
생일 카드를 갖겠죠.

