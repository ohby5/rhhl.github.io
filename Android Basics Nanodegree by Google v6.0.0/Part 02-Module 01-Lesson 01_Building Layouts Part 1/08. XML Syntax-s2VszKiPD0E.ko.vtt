WEBVTT
Kind: captions
Language: ko

00:00:00.490 --> 00:00:04.490
지난 퀴즈에서 우리가 보여드린
XML에서 좋은 관찰을 했어요.

00:00:04.720 --> 00:00:08.150
이제 우리는 XML 신택스에 대해
더 형식적으로 알아봅시다.

00:00:08.150 --> 00:00:12.470
신택스는 어떤 XML이 바른지
정의해 주는 규칙을 뜻해요.

00:00:12.470 --> 00:00:16.130
바르지 않은 XML을 쓰면
폰에서 나타나지 않을 겁니다.

00:00:16.680 --> 00:00:20.130
이는 TextView라 불리는
XML요소를 위한 코드입니다.

00:00:20.130 --> 00:00:24.110
우리는 항상 꺽쇠 괄호로 시작하고
다음에 뷰 이름을 넣죠.

00:00:24.110 --> 00:00:28.020
이는 이미지뷰, 버튼, 혹은
어떤 종류의 뷰가 될 수 있어요.

00:00:28.020 --> 00:00:31.560
그리고 우리는 여기 속성을 넣어요,
한 줄에 하나씩.

00:00:31.560 --> 00:00:35.880
그리고 우리는 포워드 슬레시와
닫는 꺽쇠 괄호를 써요.

00:00:35.880 --> 00:00:38.420
여기 기호와 문자가 많죠.

00:00:38.420 --> 00:00:41.945
당신이 기억하는 걸 돕기 위해,
여는 꺽쇠괄호는, "띵"을,

00:00:41.945 --> 00:00:44.459
그리고 뷰 이름, '후시',

00:00:44.459 --> 00:00:49.222
다음으로 설정은 '피유 피유,'

00:00:49.222 --> 00:00:52.728
포워드 슬래쉬는 '클럭,' 또 
닫는 꺽쇠괄호는, '붐'을 생각하세요.

00:00:52.978 --> 00:00:59.066
다 함께 하면, '띵, 후쉬, 
피유피유, 클럭, 붐입니다.

00:00:59.066 --> 00:01:02.814
이중 어떤 기호든지 빼 먹으면
효력 없는 XML을 얻게 됩니다.

00:01:02.814 --> 00:01:07.500
무엇이 추상적인 기호가 되는지
사고 과정이 있어요.

00:01:07.500 --> 00:01:10.490
모든 XML 요소에서,
당신이 태그를 시작하거나 열 때

00:01:10.490 --> 00:01:12.910
항상 닫을 필요가 있죠.

00:01:12.910 --> 00:01:15.680
이건 문장의 끝에
마침표를 찍는 것과 같아요.

00:01:15.680 --> 00:01:20.450
문장 대신에 XML에서
당신은 각 태그를 닫아야 해요.

00:01:20.450 --> 00:01:22.160
우리가 여기서 태그를 시작하기 때문에

00:01:22.160 --> 00:01:25.877
바로 닫아야 하기 때문에
이것은 self-closing 태그라고 불려요.

00:01:26.690 --> 00:01:28.410
self-closing 태그 대신에

00:01:28.410 --> 00:01:32.630
당신은 분리된 여는 태그와
분리된 닫는 태그를 가질 수도 있어요.

00:01:33.060 --> 00:01:35.090
유용한 예가 있어요.

00:01:35.090 --> 00:01:37.990
이것은 LinearLayout
뷰를 위한 것인데

00:01:37.990 --> 00:01:39.740
이 강의에서 나중에 배울 것입니다.

00:01:39.740 --> 00:01:43.490
이것이 여는 태그이고
닫는 태그인 것만 알아두세요.

00:01:44.510 --> 00:01:49.550
닫는 태그는 같아요.
이것이 여는 꺽쇠 괄호와

00:01:49.550 --> 00:01:53.779
포워드 슬래쉬와, 뷰 이름과 닫는
꺽쇠 기호를 가진다는 것을 빼면요.

00:01:54.330 --> 00:01:55.730
여는 태그와 닫는 태그의 차이점은

00:01:55.730 --> 00:01:58.770
이 순방향 슬래쉬입니다.

00:02:00.080 --> 00:02:01.890
당신은 사이에서 이걸 알아 챌 거예요.

00:02:01.890 --> 00:02:04.630
우리에게 두 개의
TextView XML 요소가 있어요.

00:02:04.630 --> 00:02:09.840
이들은 부모 LinearLayout 안에서
자식 XML 요소라고 불려요.

00:02:09.840 --> 00:02:13.815
당신이 LinearLayout을 위한
self-closing 태그를 여기 둔다면

00:02:13.815 --> 00:02:16.810
얼마나 많은 자식들을 가질지
모를 겁니다.

00:02:16.810 --> 00:02:18.990
하지만 이 아래에 닫는 태그가 있으므로

00:02:18.990 --> 00:02:21.720
정확히 두 자식을
갖는다는 걸 알 수 있죠.

00:02:22.020 --> 00:02:25.750
우리 경우에, TextView에
자식 XML 요소는 없어요.

00:02:25.750 --> 00:02:30.200
self-closing tag로 쓸 수 있어요.
그러면 를

00:02:30.200 --> 00:02:35.510
쓰지 않아도 되기 때문이죠.

00:02:36.140 --> 00:02:40.210
이 태그 안에 많은
추가 텍스트가 있는 것을 봤어요.

00:02:40.210 --> 00:02:42.160
이것들은 속성입니다.

00:02:42.160 --> 00:02:44.950
속성은 안드로이드 폰에서

00:02:44.950 --> 00:02:48.040
뷰의 행동이나
모양을 정하는 특성입니다.

00:02:48.040 --> 00:02:51.000
예를 들어서,
이 비유로 생각할 수 있어요.

00:02:51.000 --> 00:02:54.230
어떤 사람이 검은 머리와
갈색눈의 속성을 가져요.

00:02:54.230 --> 00:02:57.492
텍스트도 너비, 높이, 배경 같은

00:02:57.492 --> 00:02:59.190
속성과 함께 텍스트를 가집니다.

00:02:59.190 --> 00:03:02.560
각 줄의 형식을
더 자세히 살펴보면,

00:03:02.560 --> 00:03:06.040
왼편에 속성 이름이 있어요.

00:03:06.040 --> 00:03:07.760
여기서 노란색으로
밑줄 그어졌죠.

00:03:07.760 --> 00:03:10.610
그리고 오른편에는
실제 값이 있습니다.

00:03:11.600 --> 00:03:14.180
XML의 문법 규칙의 일부로써

00:03:14.180 --> 00:03:18.480
속성 값이 큰따옴표 안에
놓이는 것을 아는 것이 중요합니다.

00:03:19.220 --> 00:03:21.320
중간에 등호가 있어서,

00:03:21.320 --> 00:03:25.940
왼쪽에 있는 속성을
오른쪽의 값으로 설정합니다.

00:03:25.940 --> 00:03:29.570
TextView의 텍스트는
Happy Birthday!입니다.

00:03:29.570 --> 00:03:33.650
높이는 75 DIP(Density
Independent Pixel)입니다.

00:03:34.080 --> 00:03:36.070
이 모든 속성들은 기본값을 가지는데

00:03:36.070 --> 00:03:38.850
우리가 여기 다루지 않은
속성도 있습니다.

00:03:38.850 --> 00:03:42.740
TextView는 이의 모든 속성에
기본값을 가지기 때문입니다.

00:03:42.740 --> 00:03:46.470
기본값에 만족한다면
당신은 그걸 설정하지 않아도 돼요.

00:03:46.750 --> 00:03:48.000
기본값과 달라지길 원할 때만

00:03:48.000 --> 00:03:50.940
코드 행을 여기 쓰면 됩니다.

00:03:50.940 --> 00:03:52.920
예를 들어서,
TextView의 기본 배경색은

00:03:52.920 --> 00:03:55.170
투명한 색입니다.

00:03:55.170 --> 00:03:57.890
하지만 어두운 회색으로 바꾸고 싶다면

00:03:57.890 --> 00:04:00.300
그것은 우리가 여기 코드행을
쓰는 이유가 됩니다.

00:04:01.430 --> 00:04:03.250
또 한 가지 중요한 것은,

00:04:03.250 --> 00:04:06.410
사람들은 똑똑해서,
우리가 이런 문구를 쓰면

00:04:06.410 --> 00:04:10.450
무슨 말을 하는지 알 수 있어요.
심지어 우리가 영어 구두법,

00:04:10.450 --> 00:04:13.040
문법, 단어를 잘못 사용할 때도요.

00:04:13.040 --> 00:04:17.089
하지만, 컴퓨터는 그렇지 않아요.
그래서 당신이 간략한 기호와

00:04:17.089 --> 00:04:20.720
그들이 알아보는 이름을 사용해야 해요.
그렇지 않으면 당신이 뭘 말하는지

00:04:20.720 --> 00:04:22.790
알지 못할 것이고
코드에는 에러가 생길 겁니다.

00:04:23.410 --> 00:04:24.740
여기 예가 있어요.

00:04:24.740 --> 00:04:28.580
뷰의 이름으로
TxtView나 소문자 Textview,

00:04:28.580 --> 00:04:32.640
공백을 넣어 text view라고
사용할 수 없습니다.

00:04:32.640 --> 00:04:34.230
이것들은 다 잘못되었고

00:04:34.230 --> 00:04:37.260
컴퓨터는 우리가 TextView를
나타내고자 했다는 걸 모를 겁니다.

00:04:37.260 --> 00:04:40.800
우리가 TextView를 원한다면
대문자 T, 대문자 V를 사용한

00:04:40.800 --> 00:04:44.110
캐멀 케이스를 이용해
똑같은 방법으로 써야 합니다.

00:04:44.610 --> 00:04:48.080
속성 이름은
android 다음의 콜론과 함께

00:04:48.080 --> 00:04:49.360
정확한 방법으로 써야 합니다.

00:04:49.360 --> 00:04:53.960
우리는 등호를 써야 하고
값의 주위에 큰따옴표를 써야 하죠.

00:04:53.960 --> 00:04:59.892
잊지 않도록 다시 한 번 더요: 
띵, 후쉬, 피유피유, 클럭, 붐.

00:04:59.892 --> 00:05:02.683
우리는 XML의 신택스 규칙을
살펴보았습니다.

00:05:02.683 --> 00:05:06.440
이 XML 요소에 관한
질문에 답할 수 있나요?

00:05:06.440 --> 00:05:09.530
먼저, 이 XML 요소의 이름은 뭐죠?

00:05:09.530 --> 00:05:13.320
그리고 쉼표로 분리된
모든 속성 이름을 댈 수 있나요?

00:05:13.320 --> 00:05:15.570
속성 값 말고요.

00:05:15.570 --> 00:05:18.380
그리고 몇 번째 줄에
닫힌 태그가 있나요?

00:05:18.580 --> 00:05:22.050
당신을 돕기 위해 왼편에
코드 줄에 숫자를 달아놓았어요.

