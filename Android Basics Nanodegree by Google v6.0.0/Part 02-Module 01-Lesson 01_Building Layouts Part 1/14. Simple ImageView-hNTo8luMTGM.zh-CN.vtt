WEBVTT
Kind: captions
Language: zh-CN

00:00:00.533 --> 00:00:02.466
我们已经学习了一点 TextView

00:00:02.466 --> 00:00:05.899
现在我们想要了解制作生日卡片的其他视图

00:00:05.899 --> 00:00:07.233
它是 ImageView

00:00:07.233 --> 00:00:09.899
这里是 ImageView 的  XML

00:00:09.899 --> 00:00:12.133
让我们逐行看一下代码

00:00:12.133 --> 00:00:15.600
XML 元素以左尖括号开始

00:00:15.600 --> 00:00:20.208
然后是视图的名字和属性列

00:00:20.208 --> 00:00:20.795
[声音]

00:00:20.795 --> 00:00:24.124
跟着是一个斜线和右尖括号

00:00:24.133 --> 00:00:25.833
[声音] 砰

00:00:25.833 --> 00:00:30.533
当我们为 TextView 写下这样的 XML 时 在屏幕上会显示文本

00:00:30.533 --> 00:00:34.699
所以 当我们在这里写下 ImageView 时 在屏幕上会显示一个图片

00:00:34.699 --> 00:00:36.966
第一个属性我们之前没有看到过

00:00:36.966 --> 00:00:41.000
它是说 android:src 等于 drawable/cake（绘制/蛋糕）

00:00:41.000 --> 00:00:46.333
这表示图像的源应该在这个文件中找到

00:00:46.333 --> 00:00:48.566
文件名叫做 cake

00:00:48.566 --> 00:00:51.233
我们使用@是表明我们要在Android应用中

00:00:51.233 --> 00:00:56.400
引用资源 资源类型就是 drawable

00:00:56.400 --> 00:01:00.200
drawable 就像是在 Android屏幕上显示的图像

00:01:00.200 --> 00:01:02.500
cake 是图片文件名

00:01:02.500 --> 00:01:04.666
不包括文件扩展名

00:01:04.666 --> 00:01:07.899
你不必去说明它是一个 JPEG 或 PNG 图像

00:01:07.899 --> 00:01:08.566
只要写出它的文件名就可以了

00:01:08.566 --> 00:01:12.066
如果你想要知道这个图片的来源 相比于 app 我们

00:01:12.066 --> 00:01:15.266
在XML可视化工具中的处理有点不同

00:01:15.266 --> 00:01:18.200
但是基本上 我们会先加载一些图片

00:01:18.200 --> 00:01:21.500
然后你们就可以在 XML 可视化工具中用它们来练习

00:01:21.500 --> 00:01:24.000
当你在 Android Studio 构建你的 app 时 你必须

00:01:24.000 --> 00:01:28.366
手动添加图片到你的 app 和 drawable 文件夹里

00:01:28.366 --> 00:01:31.733
如果你引用一个不存在的图片

00:01:31.733 --> 00:01:35.166
例如 这个 toys 图片是不存在的

00:01:35.166 --> 00:01:39.100
然后就会报错 因为 toys 不是一个有效地图片

00:01:39.100 --> 00:01:42.333
所以 你要保证引用的图片是有效的

00:01:42.333 --> 00:01:44.366
我们通过点击撤销把它改回去

00:01:44.366 --> 00:01:47.500
现在我们将宽度和高度设置为 wrap content

00:01:47.500 --> 00:01:52.100
这样 image view 就和 cake 图片的大小一样

00:01:52.100 --> 00:01:55.166
最后 这个属性叫 Android:scaledType

00:01:55.166 --> 00:01:57.266
它被设置为居中

00:01:57.266 --> 00:02:00.133
根据 ImageView 所设置的尺寸类型

00:02:00.133 --> 00:02:04.333
设备会自动放大或缩小图片

00:02:04.333 --> 00:02:05.400
让我们来看一下它是什么样的

00:02:06.699 --> 00:02:10.266
现在你能够看到这个 cake 图片显示在设备上

00:02:10.266 --> 00:02:14.966
这个 cake 图片实际上是非常大的 比屏幕的尺寸要大

00:02:14.966 --> 00:02:16.633
我们设定的 scaleType

00:02:16.633 --> 00:02:20.433
并没有改变图片的尺寸 只是使其居中

00:02:20.433 --> 00:02:23.333
所以我们看到的 cake 图片实际上是非常大的

00:02:23.333 --> 00:02:26.033
但是这只是 cake 图片的中心部分

00:02:26.033 --> 00:02:29.766
我们可以将 scaleType 设置为其他值 例如 centerCrop

00:02:29.766 --> 00:02:33.466
缩小图片的尺寸来适应视图的高、宽

00:02:33.466 --> 00:02:36.666
这种情况下 图片就会被屏幕的两侧限制

00:02:36.666 --> 00:02:39.666
我们保持原始图像的纵横比

00:02:39.666 --> 00:02:41.666
所以 它不会被扭曲

00:02:41.666 --> 00:02:44.333
一旦我们对它进行缩放 并使其居中

00:02:44.333 --> 00:02:47.800
然后对其进行裁剪来适应这个视图的尺寸

00:02:47.800 --> 00:02:51.366
在显示图片时 我喜欢使用 centerCrop

00:02:51.366 --> 00:02:55.966
通常它的效果是不错的 对于裁剪图片的边缘

00:02:55.966 --> 00:02:58.699
来实现这种边到边外观

00:02:58.699 --> 00:03:01.300
当图片没有任何白色或其他的边框时

00:03:01.300 --> 00:03:05.466
这就是我们所说的全出血图像（无边框图像）

00:03:05.466 --> 00:03:08.333
我们在 material 设计指南中使用了大量的无边框图像

00:03:09.433 --> 00:03:10.733
这里有一些例子

00:03:12.133 --> 00:03:14.066
你可以看到无边框的图片是什么样的

00:03:14.066 --> 00:03:16.566
它给人一种身临其境的感觉

00:03:16.566 --> 00:03:18.766
现在是你尝试的时候了

00:03:18.766 --> 00:03:22.000
具体来说你可以改变 ImageView 的高度和

00:03:22.000 --> 00:03:25.233
宽度使其具有一个固定dp值

00:03:25.233 --> 00:03:27.366
比如100dp

00:03:27.366 --> 00:03:30.633
然后在 center 和 centerCrop 之间改变 scale type 属性

00:03:30.633 --> 00:03:35.366
你可以相应的调整图片的高、宽

00:03:35.366 --> 00:03:39.133
例如 如果你改变 ImageView 的高、宽

00:03:39.133 --> 00:03:42.533
使其比设备的边还要大会怎样 或者如果你设置

00:03:42.533 --> 00:03:46.066
的高、宽比设备的尺寸小时会怎样？

00:03:46.066 --> 00:03:48.766
在这些例子中你能够看到 center 和 centerCrop 的不同之处

00:03:48.766 --> 00:03:51.500
试着改变图像的其他方面

00:03:51.500 --> 00:03:54.600
通过检查可用的图片链接

00:03:54.600 --> 00:03:56.866
我们包含了小版本

00:03:56.866 --> 00:04:00.600
和一个更大版本的蛋糕图片 这样你可以尝试不同的 scale types

00:04:00.600 --> 00:04:03.166
我们还包括一个 Android 图标

00:04:03.166 --> 00:04:05.833
使用下面的链接得到 XML 可视化工具

