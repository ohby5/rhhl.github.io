WEBVTT
Kind: captions
Language: ko

00:00:00.240 --> 00:00:03.040
앱의 박스를 체크할 경우
커피의 토핑으로

00:00:03.040 --> 00:00:03.850
휘핑 크림이 더해집니다.

00:00:03.850 --> 00:00:06.445
&gt;&gt; 이는 커피를 더욱 맛있게 
만들겠군요.

00:00:06.445 --> 00:00:09.250
&gt;&gt; 예.
&gt;&gt; 그리고 아마 더 비싸 지겠군요.

00:00:09.250 --> 00:00:10.360
&gt;&gt; 맞습니다.

00:00:10.360 --> 00:00:13.396
마침내 어떻게 주문을 하는지를 
그리고 이를 어떻게 보내는지를

00:00:13.396 --> 00:00:14.400
배워보았습니다

00:00:14.400 --> 00:00:17.238
&gt;&gt; 오 이제 커피를 마시고 싶을 때 
주문을 할 수 있겠군요

00:00:17.238 --> 00:00:17.868
그렇죠?
&gt;&gt; 예.

00:00:17.868 --> 00:00:18.450
&gt;&gt; 좋습니다.

00:00:18.450 --> 00:00:21.320
&gt;&gt; 문제는 박스가 체크되었는지 
아닌지를 정확히 모른다는

00:00:21.320 --> 00:00:23.250
것입니다.
&gt;&gt; 잠시만요, 방금 박스를 체크하였습니다.

00:00:23.250 --> 00:00:24.280
박스를 체크하였다는 것을 알고 있습니다.

00:00:24.280 --> 00:00:28.180
&gt;&gt; 사람들은 이를 확인할 수 있지만,
전화로는 이를 확인하기가 힘듭니다.

00:00:28.180 --> 00:00:30.205
&gt;&gt; 누가 전화를 하나요?

00:00:30.205 --> 00:00:33.700
&gt;&gt; 어쨌든,
앱에 [CheckBox]를 추가하면,

00:00:33.700 --> 00:00:36.688
실질적으로 
자바 객체를 만들게 됩니다.

00:00:36.688 --> 00:00:38.168
[소리] 이와 같이 말이죠.

00:00:38.168 --> 00:00:40.258
&gt;&gt; 이러한 박스가 
몇 개나 됩니까?

00:00:40.258 --> 00:00:45.300
&gt;&gt; 많습니다. 사실, [CheckBox] 객체 
안에는 변수가 있습니다.

00:00:45.300 --> 00:00:46.150
&gt;&gt; 좋습니다.

00:00:46.150 --> 00:00:48.020
&gt;&gt; 불 연산자 변수.

00:00:48.020 --> 00:00:48.520
&gt;&gt; 불 연산자?

00:00:48.520 --> 00:00:50.030
들어본 적이 없습니다.

00:00:50.030 --> 00:00:52.410
&gt;&gt; 불 연산자는 이곳에 두 개의 
상태가 있음을 의미합니다.

00:00:52.410 --> 00:00:55.080
&gt;&gt; 뉴욕과 캘리포니아 처럼요?

00:00:55.080 --> 00:00:56.635
&gt;&gt; 아니오.
전등 스위치와 같은 것입니다.

00:00:56.635 --> 00:00:58.585
[소리]
&gt;&gt; 이런.

00:00:58.585 --> 00:01:00.550
어떻게 해야 하나요?

00:01:00.550 --> 00:01:01.180
어쨌든.

00:01:01.180 --> 00:01:04.890
체크박스를 만들면, 자바 객체를 갖게 
되도록 하였습니다.

00:01:04.890 --> 00:01:07.830
내부에 불 연산자와 같은 유형의 
변수를 갖게 됩니다.

00:01:07.830 --> 00:01:08.460
&gt;&gt; 맞습니다.

00:01:08.460 --> 00:01:11.450
&gt;&gt; 이러한 변수의 유형은
켬 혹은 끔과 같은 것입니다.

00:01:11.450 --> 00:01:13.300
&gt;&gt; 이것의 값, 예, 켬과 끔.

00:01:13.300 --> 00:01:17.230
&gt;&gt; 좋습니다. 따라서 값을 켬에서 
끔으로 바꿀 수 있습니다.

00:01:17.230 --> 00:01:18.470
&gt;&gt; 아무 것도 볼 수가 없어요.

00:01:18.470 --> 00:01:19.610
다시 켜주시겠어요?

00:01:19.610 --> 00:01:20.650
아직 하지 않았습니다.

00:01:20.650 --> 00:01:23.720
&gt;&gt; 아, 좋습니다.
&gt;&gt; 자 그러면

00:01:23.720 --> 00:01:26.870
불 연산자는 두 개의 상태를 갖습니다.
O 또는 X.

00:01:26.870 --> 00:01:29.340
그리고 이는 체크 박스의 체크된 
상태를 나타냅니다.

00:01:29.340 --> 00:01:32.390
&gt;&gt; 와우, 여기에는 다양한 체크의 
종류들이 있군요.

00:01:32.390 --> 00:01:33.370
이를 저장해 봅시다.

00:01:33.370 --> 00:01:34.340
이를 요약할 것입니다.

00:01:34.340 --> 00:01:35.670
잘못된 점이 있으면 말해주세요.

00:01:35.670 --> 00:01:38.890
체크박스를 만들게 되면,
자바 객체를 만들게 됩니다.

00:01:38.890 --> 00:01:41.070
자바 객체 내부에는
변수가 있습니다.

00:01:41.070 --> 00:01:46.580
불 연산자와 같이 나타나는 유형이고 
이러한 변수의 유형은 켬이나 끔, 하나

00:01:46.580 --> 00:01:49.840
혹은 0, O 또는 X의 두 개의 값을 
가질 수 있습니다.

00:01:49.840 --> 00:01:50.600
&gt;&gt; 정확합니다.

00:01:50.600 --> 00:01:52.775
&gt;&gt; 좋습니다.
불 연산자를 통해 확인해 보도록 합시다.

00:01:52.775 --> 00:01:56.255
[소리]
&gt;&gt; 좋습니다.

00:01:56.255 --> 00:01:57.410
이제 끝낼 시간입니다.

00:01:57.410 --> 00:02:01.010
[웃음]
불 연산자에 관한 문서의 내용을

00:02:01.010 --> 00:02:01.870
살펴보도록 합시다

00:02:01.870 --> 00:02:04.880
자바 데이터 유형에 관해 구글 검색을 
해 보겠습니다.

00:02:04.880 --> 00:02:10.090
왜냐하면 불 연산자는 자바의 주요 
데이터 유형 중의 하나이기 때문입니다.

00:02:10.090 --> 00:02:12.400
기본적 데이터 유형을 의미하는 프리미티브.

00:02:12.400 --> 00:02:15.110
이 프리미티브 데이터 유형의 목록을 
불 연산자가 나올 때까지 스크롤을

00:02:15.110 --> 00:02:17.440
움직여 보도록 하겠습니다.

00:02:17.440 --> 00:02:18.570
여기 있네요.

00:02:18.570 --> 00:02:23.220
불 연산자 데이터 유형은 O 또는 X 두 
개의 값만을 가진다고 나와있네요.

00:02:23.220 --> 00:02:26.360
O 또는 X 조건을 조회하는 간단한 
플래그에 사용됩니다.

00:02:26.360 --> 00:02:29.590
그리고 불 연산자는 1비트의 정보만 
갖는다고 나왔네요.

00:02:29.590 --> 00:02:32.980
이는 컴퓨터에서 얼마나 많은 공간을 
차지하느냐를 뜻하는 것입니다.

00:02:32.980 --> 00:02:36.920
어쨌든, 중요한 것은 불 연산자가 두 
개의 값을 갖는다는 것입니다.

00:02:36.920 --> 00:02:38.120
이들은 문자이기 때문에 O 또는 X가

00:02:38.120 --> 00:02:41.610
실질적으로 문자열 값이라고 생각해 
볼 수 있습니다. 하지만 실질적으로

00:02:41.610 --> 00:02:45.800
이들은 큰 따옴표 안에 있는 내용이 
아니기 때문에 문자열이 아닙니다.

00:02:45.800 --> 00:02:48.220
이들은 실질적으로 고정된 문자 값입니다.

00:02:48.220 --> 00:02:51.870
어떻게 고정된 문자 값이 0과 1 혹은 
안녕이나 오늘과 같은 특정 문자열이

00:02:51.870 --> 00:02:54.400
되는지 기억하십니까?

00:02:54.400 --> 00:02:57.380
이는 불 연산자 변수를 만들 때, 이 두 
값 중의 하나로 설정할 수 있음을

00:02:57.380 --> 00:02:58.300
의미합니다.

00:02:59.350 --> 00:03:03.498
박스 비유부분으로 돌아가 봅시다.
[isChecked]라는 변수를 가지고

00:03:03.498 --> 00:03:07.102
체크박스에 체크가 되었는지에 관한 
정보를 저장할 경우 이 불 연산자

00:03:07.102 --> 00:03:10.710
변수에는 O라는 값을 저장할 수 
있습니다.

00:03:10.710 --> 00:03:14.800
그리고 이를 체크박스에 
체크되었다고 설명할 수 있습니다.

00:03:14.800 --> 00:03:18.060
아니면 이 변수 안에 X라는 값을 
저장할 수 있습니다.

00:03:18.060 --> 00:03:22.260
그리고 이를 체크박스가 체크되지 
않았다고 설명할 수 있습니다.

00:03:22.260 --> 00:03:26.590
불 연산자는 두 가지 가능한 상태를 
가질 수 있기 때문에 대단합니다.

00:03:26.590 --> 00:03:30.850
그리고 O 또는 X로 설명될 지의 
여부는 개발자인 당신에게 달렸습니다.

00:03:31.850 --> 00:03:35.790
두 개 이상의 상태가 필요할 경우
불 연산자를 사용할 수 없습니다.

00:03:35.790 --> 00:03:38.960
문자열이나 정수와 같은 다른 것을 
사용하여야 합니다.

00:03:38.960 --> 00:03:42.840
불 연산자 변수의 규정은
[int]의 규정과 매우 유사합니다.

00:03:42.840 --> 00:03:45.950
객체 변수를 만드는 것 만큼 복잡하지 
않습니다.

00:03:45.950 --> 00:03:49.850
hasWhippedCream = true인 불 
연산자의 형식을 따릅니다.

00:03:49.850 --> 00:03:53.880
변수 명에 따라 우리가 원하는 
무엇이든지 될 수 있는 그리고 초기

00:03:53.880 --> 00:03:58.225
값은 O 또는 X인 불 연산자 데이터 
유형을 가지고 있습니다.

00:03:58.225 --> 00:04:00.020
여기에 몇몇 다른 예시가 있습니다.

00:04:00.020 --> 00:04:02.339
여기에서는 같은 불 연산자를 
X로 설정해 보겠습니다.

00:04:03.540 --> 00:04:05.850
그리고 이곳에 [isRegistered]인 다른 
불 연산자가 있습니다.

00:04:05.850 --> 00:04:08.360
이를 X로 초기화 해보겠습니다.

00:04:08.360 --> 00:04:12.400
예를 들어, 이 변수는 
사용자가 우리에 의해 등록된

00:04:12.400 --> 00:04:15.050
앱을 사용하는지를 
나타낼 수 있습니다.

00:04:15.050 --> 00:04:16.329
여기 다른 예시가 있습니다.

00:04:16.329 --> 00:04:19.470
Boolean isOrderForPickup = true.

00:04:19.470 --> 00:04:22.740
이 변수는 누군가가 커피를 가게에서 
마실 것인지 혹은 테이크 아웃 할

00:04:22.740 --> 00:04:26.080
것인지에 관해 주문하는 것을 나타낼 
수 있습니다.

00:04:26.080 --> 00:04:29.780
우리 앱은 이러한 기능을 지원하지 
못하지만 두 가지 상태를 가지고 있으므로

00:04:29.780 --> 00:04:33.960
어떻게 불 연산자를 유용하게 이용할 
것인지를 생각해 볼 수 있습니다.

00:04:35.020 --> 00:04:38.170
이러한 변수들을 명명하는 방법을 잘 
알아두십시오.

00:04:38.170 --> 00:04:41.070
불 연산자 변수 명은 
다른 변수 명과 같은 규정을

00:04:41.070 --> 00:04:42.520
따라야 합니다.

00:04:42.520 --> 00:04:46.780
하지만, 무엇을 가진 것과 같은 
혹은 무엇으로 시작하는 것이

00:04:46.780 --> 00:04:48.620
일반적입니다.

00:04:48.620 --> 00:04:53.450
~를 갖거나 ~인 명칭을 살펴보면, 
대부분 불 연산자인 경우가 많습니다.

00:04:53.450 --> 00:04:56.470
더욱 진화되고 선택적인 내용을 
보여드리도록 하겠습니다.

00:04:56.470 --> 00:04:58.180
관심이 있으시다면,
따라오시기 바랍니다.

00:04:59.230 --> 00:05:01.950
이것은 체크박스 클래스에 대한 문서 
페이지입니다.

00:05:01.950 --> 00:05:05.320
체크박스 클래스와 같은 소스 코드를 
살펴보기 위해 뷰 소스를 클릭해

00:05:05.320 --> 00:05:06.960
보도록 하겠습니다.

00:05:06.960 --> 00:05:09.820
코드는 CheckBox.java file에 
저장되었습니다.

00:05:09.820 --> 00:05:12.865
이 체크박스 클래스 내에 불 연산자 
변수가 있다는 것을 보여드리고자

00:05:12.865 --> 00:05:14.220
합니다.

00:05:14.220 --> 00:05:18.450
하지만 여기서는 보여드리지는 않을 
것이므로 슈퍼 클래스를 확인해 봅시다.

00:05:18.450 --> 00:05:21.200
이 값이 O이면
체크박스가 체크됩니다.

00:05:21.200 --> 00:05:24.320
X이면
박스가 체크되지 않습니다.

00:05:24.320 --> 00:05:27.800
이 명칭은 가지다 나 이다 라는 단어를 
포함하지 않음을 알게 될 것입니다.

00:05:27.800 --> 00:05:30.850
하지만 아래를 살펴보면 가지다 라는 
단어를 포함한 다른 불 연산자 변수를

00:05:30.850 --> 00:05:32.900
확인하게 될 것입니다.

00:05:32.900 --> 00:05:34.740
이는 모두 개발자의 참조와 관련된 
사항입니다.

00:05:34.740 --> 00:05:37.770
이 같은 경우에, 이것이 체크 상태에 
대한 불 연산자임이 더욱 명확해 질

00:05:37.770 --> 00:05:38.494
것입니다.

00:05:39.610 --> 00:05:43.750
이 불 연산자는 CheckBox.javafile에서 
직접적으로 확인되지 않습니다.

00:05:43.750 --> 00:05:46.640
[CompoundButton] 클래스로부터 이 
불 연산자를 받았기 때문에 이 체크된

00:05:46.640 --> 00:05:49.270
불 연산자를 자유롭게 사용할 수 있습니다.

00:05:49.270 --> 00:05:51.110
일반적으로, 
안드로이드 클래스에서

00:05:51.110 --> 00:05:54.220
소스 코드를 찾는 것을 
더 이상은 요구하지 않습니다.

00:05:54.220 --> 00:05:55.480
안드로이드 앱 개발을 위해,

00:05:55.480 --> 00:05:59.250
알아야 할 것은 어떻게 문서 페이지를 
살펴보는지 입니다.

00:05:59.250 --> 00:06:02.470
좋습니다. 이 영상에서, 어떻게 불 
연산자가 O 또는 X의 값을

00:06:02.470 --> 00:06:03.860
저장하는지를 배웠습니다.

00:06:04.960 --> 00:06:08.000
이 퀴즈에서, 불 연산자 변수를 만드는 
것을 연습하고 제공된 박스에 있는

00:06:08.000 --> 00:06:12.420
코드 행에 입력하여 업데이트 해 
보도록 하십시오.

00:06:12.420 --> 00:06:15.720
이 행을 이곳과 다른 박스에 똑같이 
정확히 입력하십시오

00:06:16.990 --> 00:06:19.700
그리고 불 연산자에 정보를 저장하는 
다른 유용한 활용 사례를 생각해

00:06:19.700 --> 00:06:21.720
보기를 바랍니다.

00:06:21.720 --> 00:06:23.550
어떤 것이 두 가지 상태를 가질 수 
있는지를 생각해 보십시오.

00:06:25.110 --> 00:06:28.200
기상을 위해 핸드폰에 있는 알람 
시계를 사용해 본 적이 있습니까?

00:06:28.200 --> 00:06:30.380
여기에서 알람을 
켜거나 끄는 것은

00:06:30.380 --> 00:06:33.530
실질적으로 불 연산자 변수로 
저장되었습니다.

00:06:34.680 --> 00:06:37.310
다른 가능한 불 연산자
변수는 알람의 반복을 원하느냐

00:06:37.310 --> 00:06:38.380
아니냐 입니다.

00:06:39.600 --> 00:06:43.490
Gmail 앱에서, 제가 하고자 하는 것은 
2011년 Gmail 팀으로부터 받은 특별

00:06:43.490 --> 00:06:48.960
메시지에 별표를 하는 것입니다. 저는 
별표를 하거나 하지 않을 수 있습니다.

00:06:48.960 --> 00:06:52.140
여기에 두 가지 상태가 있기 때문에, 불 
연산자 변수로 저장될 수 있습니다.

00:06:52.140 --> 00:06:55.890
이에 대한 가능한 불 연산자 변수 명은
[isStarred]일 것입니다.

00:06:55.890 --> 00:06:59.880
또한 이메일이 읽혔는지를 조회하기 
위해 불 연산자 변수를 사용할 수

00:06:59.880 --> 00:07:01.210
있습니다.

00:07:01.210 --> 00:07:04.230
이 이메일은 읽히지 않았지만
이 이메일은 이미 읽혔습니다.

00:07:05.300 --> 00:07:07.130
유투브에 관한 말하기, 유투브 앱을 
살펴보도록 합시다.

00:07:08.560 --> 00:07:11.140
유투브 앱에서, 
최근 영상이 등록되었을 때

00:07:11.140 --> 00:07:14.090
이미 보았을 경우, 
섬네일 이미지의 왼쪽 윗부분에서

00:07:14.090 --> 00:07:17.770
확인하였다는 작은 문자 상자를 
이곳에 보여줍니다.

00:07:17.770 --> 00:07:19.359
내가 영상을 보았는지 안 보았는지는

00:07:19.359 --> 00:07:22.870
또한 불 연산자 변수로 저장될 수 
있습니다.

00:07:22.870 --> 00:07:25.140
불 연산자에 대한 활용 사례를 
보여드렸습니다. 따라서 여러분 만의

00:07:25.140 --> 00:07:27.180
내용을 이곳에 보여주십시오.

00:07:27.180 --> 00:07:29.790
아이디어를 위해 기존의 안드로이드 
앱을 살펴보시면 됩니다.

