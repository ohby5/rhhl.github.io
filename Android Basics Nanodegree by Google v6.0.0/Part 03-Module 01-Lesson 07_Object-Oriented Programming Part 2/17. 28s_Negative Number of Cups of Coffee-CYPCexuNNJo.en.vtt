WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:03.070
We're going to start by looking
at the lower bound first.

00:00:03.070 --> 00:00:06.880
The only way you can get the app
to go below one cup of coffee

00:00:06.880 --> 00:00:10.430
is by pressing the minus button
when there is one cup of coffee.

00:00:10.430 --> 00:00:14.720
Remember that the minus button triggers
the decrement method in the Java file.

00:00:14.720 --> 00:00:17.420
So we need to modify
the decrement method and

00:00:17.420 --> 00:00:20.450
prevent the app from updating
the quantity on the screen.

00:00:20.450 --> 00:00:23.790
I open up the code in the Java file for
the decrement method.

00:00:23.790 --> 00:00:25.670
Once we're inside this method,

00:00:25.670 --> 00:00:30.420
we don't want this line to be executed
if the quantity is already 1.

00:00:30.420 --> 00:00:34.580
Otherwise, this line of code is going to
cause a quantity to change to 0.

00:00:34.580 --> 00:00:36.490
I'm going to insert some code
at the top of the method.

00:00:36.490 --> 00:00:38.440
I'll create an if statement,

00:00:38.440 --> 00:00:42.900
because I only want this logic to be
executed if quantity is equal to 1.

00:00:42.900 --> 00:00:46.080
Remember in Java that if you want
to check if two values are equal to

00:00:46.080 --> 00:00:48.968
each other, you need to use the == sign.

00:00:48.968 --> 00:00:51.550
The = sign means something else.

00:00:51.550 --> 00:00:52.990
Anyways, going back to the code.

00:00:52.990 --> 00:00:57.500
If the quantity is not 1, then we'll
just skip this whole block of code and

00:00:57.500 --> 00:01:00.130
we'll continue with
updating the quantity.

00:01:00.130 --> 00:01:04.550
Inside this if statement I'm going
to write the return statement.

00:01:04.550 --> 00:01:07.790
This was the hint that I gave
you earlier in the quiz.

00:01:07.790 --> 00:01:11.870
If the method's return value is
void then you can just say return;

00:01:11.870 --> 00:01:13.800
with no return value.

00:01:13.800 --> 00:01:17.020
This means that we should exit
the method immediately without executing

00:01:17.020 --> 00:01:18.630
the lines of code below it.

00:01:18.630 --> 00:01:21.730
So we skip updating the quantity
variable and showing it on screen.

00:01:22.770 --> 00:01:26.600
If the quantity is not 1,
say the quantity is ten,

00:01:26.600 --> 00:01:30.580
then the test condition is false and
we skip over this block.

00:01:30.580 --> 00:01:33.220
We continue with this lines of code.

00:01:33.220 --> 00:01:35.640
Now, let's look at the case
where the upper bound.

00:01:35.640 --> 00:01:38.690
The only way to hit 100 is by
pressing the plus button when

00:01:38.690 --> 00:01:41.070
there is already 100 cups of coffee.

00:01:41.070 --> 00:01:43.550
The plus button triggers
the increment method.

00:01:43.550 --> 00:01:46.330
So we need to modify this
method to prevent the app from

00:01:46.330 --> 00:01:49.750
updating the quantity to
a 101 cups of coffee.

00:01:49.750 --> 00:01:53.170
Within the increment method we add
some additional logic like we did for

00:01:53.170 --> 00:01:54.670
the decrement method.

00:01:54.670 --> 00:01:57.250
If the quantity variable
is currently at a 100

00:01:57.250 --> 00:01:59.410
then we should exit the method early.

00:01:59.410 --> 00:02:02.650
Otherwise we should continue by
incrementing the quantity by

00:02:02.650 --> 00:02:05.590
one more cup of coffee and
then displaying it on the screen.

00:02:05.590 --> 00:02:08.190
Let's run this on our
device to see what happens.

00:02:08.190 --> 00:02:10.630
Okay, if I hit the minus
button a bunch of times,

00:02:10.630 --> 00:02:14.030
then it just stops at 1 cup of coffee.

00:02:14.030 --> 00:02:17.030
In order to test that the upper bound
works, I'm going to change the initial

00:02:17.030 --> 00:02:20.470
quantity variable in our Java
file to be 99 cups of coffee.

00:02:20.470 --> 00:02:24.320
I'm going to make a similar
change in the layout as well.

00:02:24.320 --> 00:02:25.780
Nine cups of coffee is $195.

00:02:25.780 --> 00:02:28.520
Now I'm going to run it on the device.

00:02:28.520 --> 00:02:31.290
If I hit the plus button
a bunch of times,

00:02:31.290 --> 00:02:33.380
you can see that it stays
at 100 cups of coffee.

00:02:34.410 --> 00:02:35.340
Nice!

00:02:35.340 --> 00:02:36.720
Our code works.

00:02:36.720 --> 00:02:40.110
If you chose to do the challenge
problem, here's the solution code.

00:02:40.110 --> 00:02:43.620
Within the increment method, if
the quantity is already at 100 cups of

00:02:43.620 --> 00:02:48.990
coffee, then we show this toast message
before we exit the method early.

00:02:48.990 --> 00:02:52.630
To create a toast message,
you call Toast.makeText and

00:02:52.630 --> 00:02:55.680
you pass in three
different input arguments.

00:02:55.680 --> 00:03:00.340
You pass in a context, which is this
activity, you pass it a message,

00:03:00.340 --> 00:03:04.520
which is you cannot have more
than 100 coffees in this case.

00:03:04.520 --> 00:03:07.410
And we also specify how long
it should show up on screen.

00:03:07.410 --> 00:03:11.780
We're just saying the toast message
should show for a short amount of time.

00:03:11.780 --> 00:03:14.550
All this code creates
a single toast object, and

00:03:14.550 --> 00:03:17.790
then we call a method
show on that object.

00:03:17.790 --> 00:03:21.720
Similarly within the decrement method,
if the quantity is already at 1 cup of

00:03:21.720 --> 00:03:26.450
coffee then we show and error message
right before we exit the method early.

00:03:26.450 --> 00:03:30.500
Again, this statement creates
a toast object with this message and

00:03:30.500 --> 00:03:32.200
then we call the method show on it.

00:03:33.390 --> 00:03:36.830
By the way, we use this site to help
us figure out how to display a toast

00:03:36.830 --> 00:03:37.640
message in our app.

00:03:37.640 --> 00:03:42.070
Here's some sample code
that you could have used.

00:03:42.070 --> 00:03:45.490
In general, it's a good idea to let
the user know what's happening,

00:03:45.490 --> 00:03:49.180
with an error message or some other
indication in the user interface.

00:03:49.180 --> 00:03:51.330
Otherwise, they might think
that the app is broken and

00:03:51.330 --> 00:03:53.110
not responding to their button clicks.

