WEBVTT
Kind: captions
Language: ru

00:00:00.330 --> 00:00:03.200
А теперь изменим стоимость
кофе в приложении на тот случай,

00:00:03.200 --> 00:00:06.660
если пользователь захочет заказать
топпинг: взбитые сливки или шоколад.

00:00:06.660 --> 00:00:07.760
Хорошая идея.

00:00:07.860 --> 00:00:11.870
При заказе взбитых сливок
cтоимость будет $1.

00:00:12.170 --> 00:00:15.000
А если вы хотите добавить шоколад,
придётся заплатить $2.

00:00:15.000 --> 00:00:16.020
Верно.

00:00:16.020 --> 00:00:18.290
Давайте подумаем, как сделать
это в приложении.

00:00:18.340 --> 00:00:20.970
Вот несколько примеров других
приложений от Google,

00:00:20.970 --> 00:00:24.390
в которых поведение меняется
в зависимости от определённых условий.

00:00:24.390 --> 00:00:28.630
В приложении Inbox от Gmail мы видим
скриншот списка писем.

00:00:28.630 --> 00:00:31.590
Если пришло одно письмо
и у него нет вложения, то приложение

00:00:31.590 --> 00:00:36.260
понимает, что нужно отобразить эту иконку,
этот ярлык и текст напоминания.

00:00:36.260 --> 00:00:38.310
Если в письмо вложены изображения,

00:00:38.310 --> 00:00:41.110
приложение распознаёт, что
надо показать их в этой строке.

00:00:41.110 --> 00:00:43.040
Если в письме говорится о путешествии,

00:00:43.040 --> 00:00:46.210
пользователю показывается карточка
с информацией о полёте.

00:00:46.210 --> 00:00:49.610
В приложении Google Now Launcher
можно посмотреть на другие примеры

00:00:49.610 --> 00:00:52.310
изменения поведения при
определённых условиях.

00:00:52.610 --> 00:00:56.130
Например, если котировки на бирже
увеличиваются, разница или

00:00:56.130 --> 00:01:00.160
прибавление в цене будут показаны
здесь и выделены зелёным.

00:01:00.160 --> 00:01:03.020
Если котировки падают, то
разница в стоимости отобразится

00:01:03.020 --> 00:01:05.250
вот здесь красным шрифтом.

00:01:05.250 --> 00:01:08.140
В этом приложении о погоде,
если температура хорошая

00:01:08.140 --> 00:01:11.260
и солнечная, то на экран
выводится иконка солнца.

00:01:11.260 --> 00:01:14.420
Если ветрено или облачно, то
пользователь увидит другие иконки.

00:01:14.820 --> 00:01:16.680
Перед тем как внести изменения

00:01:16.850 --> 00:01:20.180
в наше приложение, основанные
на заказанных топпингах,

00:01:20.180 --> 00:01:23.100
я хотела бы познакомить вас
с понятием потока выполнения.

00:01:23.100 --> 00:01:26.620
Как правило, код в наших методах
выполняется сверху вниз,

00:01:26.620 --> 00:01:27.820
строка за строкой.

00:01:28.220 --> 00:01:32.430
При использовании операторов управления
можно изменить порядок выполнения кода.

00:01:33.030 --> 00:01:35.410
Можно, например,
пропустить определённые участки

00:01:35.410 --> 00:01:37.730
при наступлении заданных условий.

00:01:38.130 --> 00:01:41.444
Мы выполним эту задачу
с помощью логической конструкции if/else.

00:01:41.580 --> 00:01:44.390
Мы ещё не встречали код
с использованием операторов if/else,

00:01:44.390 --> 00:01:47.490
но я собираюсь дать вам задание
и посмотреть, как вы справитесь.

00:01:47.490 --> 00:01:51.080
В этих упражнениях вы должны
будете сами прочитать несколько

00:01:51.080 --> 00:01:54.000
фрагментов кода, ссылка на них
есть в заметках инструктора.

00:01:54.000 --> 00:01:56.640
А затем попробуйте
догадаться, что делает данный код,

00:01:56.640 --> 00:01:58.550
и какие данные будут получены на выходе.

00:01:58.550 --> 00:02:01.080
Вам будет предоставлено
несколько вариантов на выбор,

00:02:01.080 --> 00:02:03.640
чтобы вы выбрали тот, что
лучше всего подходит к коду.

00:02:03.640 --> 00:02:06.020
Под данными на выходе
я подразумеваю логи, которые

00:02:06.020 --> 00:02:07.758
записываются в программу logcat.

00:02:08.008 --> 00:02:11.510
Вы можете открыть logcat
с помощью этой Android-вкладки,

00:02:11.510 --> 00:02:15.070
в программе показаны все сообщения
от системы и от нашего приложения.

00:02:15.070 --> 00:02:18.380
Фрагменты кода, которые вы получите,
будут отправлять сообщения

00:02:18.380 --> 00:02:19.510
в этот журнал логов.

00:02:19.510 --> 00:02:21.530
Давайте разберём пример.

00:02:21.830 --> 00:02:24.310
Эту ссылку вы найдёте 
в заметках инструктора.

00:02:24.310 --> 00:02:28.270
Предположим, что это фрагмент кода
из файла WeatherActivity.java

00:02:28.270 --> 00:02:29.830
в приложении о погоде.

00:02:29.830 --> 00:02:33.850
В первой строке кода создаётся
переменная isRaining типа boolean,

00:02:33.850 --> 00:02:35.910
изначально её значение true.

00:02:35.910 --> 00:02:38.500
Затем используется оператор if/else.

00:02:38.500 --> 00:02:43.150
Если значение isRaining равно true,
то в логах мы получаем эти данные:

00:02:43.150 --> 00:02:46.330
«На улице идёт дождь,
не забудьте захватить зонт».

00:02:46.330 --> 00:02:50.910
Если значение isRaining равно false, то
наступает условие else, и мы видим

00:02:50.910 --> 00:02:53.230
сообщение: «Дождя не ожидается».

00:02:53.230 --> 00:02:57.210
Поскольку isRaining равно true,
наступает заданное условие

00:02:57.210 --> 00:03:00.210
и записывается: «На улице дождь,
не забудьте захватить зонт».

00:03:00.210 --> 00:03:04.280
Так как наступает данное условие, мы
можем пропустить блок else, эта часть кода

00:03:04.280 --> 00:03:06.980
находится за пределами фрагмента
с операторами if/else,

00:03:06.980 --> 00:03:08.500
она выполняется в любом случае.

00:03:08.500 --> 00:03:12.000
В ней говорится: «Спасибо за
использование приложения Whetherweather».

00:03:12.000 --> 00:03:15.460
Давайте посмотрим на вариант в
задании, в котором говорится: «Идет дождь,

00:03:15.460 --> 00:03:18.290
не забудьте захватить зонт»,
за которым следует: «Спасибо за

00:03:18.290 --> 00:03:20.280
использование приложения Whetherweather».

00:03:20.280 --> 00:03:21.550
Это в точности вариант B.

00:03:21.550 --> 00:03:23.680
А теперь попробуйте выполнить другое
задание.

00:03:23.680 --> 00:03:26.510
Прочтите фрагмент кода в заметках
и выберите вариант ответа.

