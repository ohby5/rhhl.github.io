WEBVTT
Kind: captions
Language: ja

00:00:00.250 --> 00:00:02.250
オーダーの総額を正しく計算するには

00:00:02.250 --> 00:00:05.230
ユーザが
どのトッピングを選択したかという情報を

00:00:05.230 --> 00:00:09.500
calculatePrice メソッドに伝えます

00:00:09.500 --> 00:00:12.820
ここでは手間のかかる全ての処理や計算を

00:00:12.820 --> 00:00:18.340
calculatePrice メソッド内で行うことで
関連する全てのロジックを集中化させます

00:00:18.340 --> 00:00:22.040
このメソッドに全てを一元化させることで
値段の計算に間違いがあった場合

00:00:22.040 --> 00:00:25.620
一つの場所でコードを確認できます

00:00:26.620 --> 00:00:28.340
管理が非常に楽です

00:00:28.340 --> 00:00:29.880
このメソッド内で

00:00:29.880 --> 00:00:33.450
一杯のコーヒーの基本価格を決めます

00:00:33.450 --> 00:00:35.510
先にお見せしたのと同じです

00:00:35.510 --> 00:00:38.110
ホイップクリームをのせる場合
1ドルプラスします

00:00:38.110 --> 00:00:41.000
コーヒーにチョコレートを加える場合
2ドルをプラスします

00:00:41.000 --> 00:00:43.630
それから 一杯分のコーヒーの値段に

00:00:43.630 --> 00:00:47.860
オーダー数をかけて
オーダーの総額を出します

00:00:47.860 --> 00:00:50.550
ホイップクリームとチョコレートの
チェックボックスに

00:00:50.550 --> 00:00:54.302
関する情報を
calculatePrice メソッドに挿入していきましょう

00:00:54.302 --> 00:00:58.380
プール値に hasWhippedCream と 
hasChocolate を挿入します

00:00:58.380 --> 00:01:02.570
実際の チェックボックスの名前を
挿入する必要はありません

00:01:02.570 --> 00:01:06.430
価格計算に必要なのは
これらのプール値だけです

00:01:06.430 --> 00:01:09.560
Android Studio で
メソッドシグネチャが一致しないという

00:01:09.560 --> 00:01:10.530
エラーが生じています

00:01:10.530 --> 00:01:13.530
ゼロ入力パラメータを持つことが規定された

00:01:13.530 --> 00:01:15.390
メソッドを呼び出したいと思います

00:01:15.390 --> 00:01:18.820
スクロールダウンし 
calculatePrice メソッドを規定します

00:01:18.820 --> 00:01:20.700
メソッドシグネチャを変更し

00:01:20.700 --> 00:01:25.620
二つのパラメータである
addWhippedCream と

00:01:25.620 --> 00:01:27.730
addChocolate のプール値を挿入します

00:01:27.730 --> 00:01:30.850
これらの入力パラメータの名前は
好きにつけて構いません

00:01:30.850 --> 00:01:34.220
名前は一致しなくても良い事をお見せするのに

00:01:34.220 --> 00:01:36.900
ここでは　挿入時とは違う名前を使っています

00:01:36.900 --> 00:01:40.580
これら二つの新しい入力パラメータを説明するのに
Javadoc も更新しました

00:01:40.580 --> 00:01:43.570
そうすれば メソッドを呼び出した人が
挿入すべき内容を把握できます

00:01:43.570 --> 00:01:47.580
次に calculatePrice 内で
トッピングに応じて値段を変えるための

00:01:47.580 --> 00:01:49.930
ロジックを調整します

00:01:49.930 --> 00:01:52.130
はじめに
基本価格を計算します

00:01:52.130 --> 00:01:54.720
まず basePrice と言う
整数の変数を作成します

00:01:54.720 --> 00:01:58.500
コーヒー1杯は5ドルなので
値を 5 とします

00:01:58.500 --> 00:02:00.930
それから If 文を作成します

00:02:00.930 --> 00:02:05.600
addWhippedCream というプール値が正しければ
ホイップクリームが欲しいということになります

00:02:05.600 --> 00:02:09.720
つまり コーヒー1杯の基本価格に
1ドルプラスする必要があります

00:02:09.720 --> 00:02:11.920
これで ホイップクリームに関しては
OKですね

00:02:11.920 --> 00:02:13.740
ではチョコレートの場合を見ていきましょう

00:02:13.740 --> 00:02:16.110
もう一つ If 文を作成します

00:02:16.110 --> 00:02:19.000
else を伴う節は必要ありません

00:02:19.000 --> 00:02:23.000
ユーザーがホイップクリームを求めない場合は
何もしなくて良いからです

00:02:23.000 --> 00:02:26.550
else 節を加えたい場合は
このようになります

00:02:26.550 --> 00:02:29.990
「do nothing（何もしない）」
という文を加えるだけです

00:02:29.990 --> 00:02:31.960
しかし Android studio は有能で

00:02:31.960 --> 00:02:35.010
else ステートメントのボックスが
空であることを認識します

00:02:35.010 --> 00:02:38.040
そして この種のコードは分かりづらく

00:02:38.040 --> 00:02:39.930
タイプミスの結果である可能性を示します

00:02:39.930 --> 00:02:41.800
それに 必要のない余分な行ですから

00:02:41.800 --> 00:02:43.660
else を含む箇所は削除してしまいます

00:02:43.660 --> 00:02:45.930
では チョコレートの場合に移ります

00:02:45.930 --> 00:02:48.610
チョコレートのトッピングは完全に

00:02:48.610 --> 00:02:49.800
ホイップクリームとは別です

00:02:49.800 --> 00:02:51.880
ユーザーがどちらを選ぶかは
関係ありません

00:02:51.880 --> 00:02:53.540
互いに独立しているからです

00:02:53.540 --> 00:02:57.060
ですから 別の 
If 文を作成します

00:02:57.060 --> 00:02:59.480
ユーザーがチョコレートを望んだ場合

00:02:59.480 --> 00:03:04.010
基本価格を
基本価格プラス2にする

00:03:04.010 --> 00:03:08.810
ここでも else 文が使えますが
加えたところで違いは出ません

00:03:08.810 --> 00:03:12.690
チョコレートが望まれなければ
値段の調整が必要ないというだけです

00:03:12.690 --> 00:03:15.530
ですから 必要ないのでコードは削除しましょう

00:03:15.530 --> 00:03:20.450
コードを見ていくと
コーヒー1杯の基本価格は5ドル

00:03:20.450 --> 00:03:24.945
ホイップクリームを加える場合は
値段を1ドル上げる

00:03:24.945 --> 00:03:27.610
チョコレートを加える場合は

00:03:27.610 --> 00:03:29.703
基本価格を2ドル上げるとしました

00:03:29.703 --> 00:03:32.290
オーダー価格を計算するには

00:03:32.290 --> 00:03:35.835
一杯のコーヒーの価格にオーダー数をかけます

00:03:35.835 --> 00:03:38.735
よし　良さそうですね

00:03:38.735 --> 00:03:41.935
コードのまとまりの上に
それぞれコメントも書いて

00:03:41.935 --> 00:03:45.695
後で何をしたのか思い出せるようにします

00:03:45.695 --> 00:03:48.005
ではアプリで
実際に実行されるか確認しましょう

00:03:48.005 --> 00:03:50.635
最初にやったのと同じ場合で確認しましょう

00:03:51.965 --> 00:03:55.319
ホイップクリーム入りで
3杯注文したい場合

00:03:55.319 --> 00:03:56.906
1杯文は6ドルになります

00:03:56.906 --> 00:04:01.450
6ドルの3倍は18です
ちゃんと18と出ました

00:04:01.450 --> 00:04:07.679
チョコレートのトッピングの場合
コーヒー1杯は8ドルになります

00:04:07.679 --> 00:04:11.650
2つオーダーする場合
合計金額は16ドルです

00:04:11.650 --> 00:04:15.700
ホイップクリームだけつける場合を確認して
正常に機能しましたね

00:04:15.700 --> 00:04:18.510
ホイップクリームとチョコレート

00:04:18.510 --> 00:04:21.350
両方をトッピングする場合も試し
正常に機能しました

00:04:21.350 --> 00:04:23.760
チョコレートだけの場合もやってみましょう

00:04:23.760 --> 00:04:27.290
オーダーの数を1にして
「Order」ボタンを押します

00:04:27.290 --> 00:04:31.810
コーヒー一杯は5ドルで
チョコレートのトッピングが2ドルなので

00:04:31.810 --> 00:04:34.840
7ドル 正しいですね

00:04:34.840 --> 00:04:41.150
オーダー数を4とすると
コーヒー1杯を7ドルとしてその合計が出ます

00:04:41.150 --> 00:04:41.650
ばっちり

00:04:42.910 --> 00:04:44.550
ちゃんと機能しています

00:04:44.550 --> 00:04:47.650
以上 急ぎ足で確認しましたが

00:04:47.650 --> 00:04:48.660
大切なことは

00:04:48.660 --> 00:04:53.160
考えられる限りのコードパスが
正常に実行するかを確認するという点です

00:04:53.160 --> 00:04:56.823
例えば アプリの実行でホイップクリームの
ボックスにチェックすることがないと

00:04:56.823 --> 00:05:00.490
ここのコードがいかに機能するかを
確かめることができません

00:05:00.490 --> 00:05:05.720
ですから コードの全てが実行されるように
条件を設定し確認する必要があります

00:05:05.720 --> 00:05:09.180
先ほど ホイップクリームをつけた場合と
チョコレートをつけた場合

00:05:09.180 --> 00:05:12.550
両方試して ここのコードの実行を確認しました

00:05:12.550 --> 00:05:14.320
更には
これら二つの

00:05:14.320 --> 00:05:17.450
プール変数の組み合わせを全て
実行して確認することが望まれます

00:05:17.450 --> 00:05:21.580
これらの組み合わせは全て
メソッド内で異なる動作をもたらします

00:05:21.580 --> 00:05:24.870
全ての場合にコードが正常に実行することを
確認してください

00:05:24.870 --> 00:05:29.080
こうして 基本価格が設定されていますので

00:05:29.080 --> 00:05:34.000
思い通り計算が実行されているか確認するため
ログメッセージを使うこともできます

00:05:34.000 --> 00:05:37.910
以上 フロー制御ステートメントを使って
より複雑なコードを書く際に

00:05:37.910 --> 00:05:40.760
気をつけるべきことをご紹介しました

