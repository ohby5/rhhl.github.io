WEBVTT
Kind: captions
Language: zh-CN

00:00:00.520 --> 00:00:03.350
在我们的应用中 如果你多次点击这个按钮

00:00:03.350 --> 00:00:05.970
就会得到一个负数

00:00:05.970 --> 00:00:08.750
这是一个问题 负数有什么意义呢？

00:00:08.750 --> 00:00:11.260
我们不能让这样的情形发生在我们的应用中

00:00:11.260 --> 00:00:13.509
越早处理这个问题

00:00:13.509 --> 00:00:16.590
后面的麻烦就越少

00:00:16.590 --> 00:00:20.250
例如 我们不想给咖啡店提供

00:00:20.250 --> 00:00:22.780
负数杯咖啡的订单

00:00:22.780 --> 00:00:26.704
在数量范围的另一端 应该有一个

00:00:26.704 --> 00:00:30.094
限制用户单次购买的咖啡杯数的最大值

00:00:30.094 --> 00:00:33.540
我们无法一次性提供10000杯咖啡

00:00:33.540 --> 00:00:35.270
现在 我们已经发现问题了

00:00:35.270 --> 00:00:38.380
让我们把应用变得更好

00:00:38.380 --> 00:00:42.150
如果我们限制用户一次可以定1

00:00:42.150 --> 00:00:43.700
到100 杯咖啡 会怎么样呢？

00:00:43.700 --> 00:00:47.800
在我们的应用中 当用户点击 — 按钮的时候 它就会显示

00:00:47.800 --> 00:00:50.530
1杯咖啡 然后数量不应该比1小了

00:00:51.730 --> 00:00:54.682
同样的 如果已经有100杯咖啡了

00:00:54.682 --> 00:00:59.513
并且用户继续点击 + 按钮 数量将一直保持100

00:00:59.513 --> 00:01:02.090
我们可以用被称为输入检查的方式达到这个效果

00:01:03.090 --> 00:01:05.680
通过检查用户的输入

00:01:05.680 --> 00:01:08.930
我们可以快速地识别错误的输入

00:01:08.930 --> 00:01:12.690
阻止应用继续执行

00:01:12.690 --> 00:01:15.760
这次测试中 对应用做如此改变

00:01:15.760 --> 00:01:19.760
假定应用首次启动时 就显示两杯咖啡

00:01:19.760 --> 00:01:22.250
为了找到修改代码的正确地方

00:01:22.250 --> 00:01:24.570
想一想问题第一次出现的时候

00:01:24.570 --> 00:01:29.010
用户点击了什么按钮 触发了什么代码？

00:01:29.010 --> 00:01:32.030
因为应用在咖啡数量有效和无效时

00:01:32.030 --> 00:01:32.990
有不同的行为

00:01:32.990 --> 00:01:37.720
想一下使用控制流语句 比如 if else 语句

00:01:37.720 --> 00:01:41.910
这个方法中 应用中的逻辑可以根据不同的条件而不同

00:01:41.910 --> 00:01:45.110
如果用户订购的咖啡数量超过这个

00:01:45.110 --> 00:01:48.770
范围 那么就需要解决应用停止执行的这一问题

00:01:48.770 --> 00:01:52.110
一旦你修改完成 回答这些问题

00:01:52.110 --> 00:01:53.490
你修改了哪个方法

00:01:53.490 --> 00:01:56.950
使得咖啡数量不会小于1

00:01:56.950 --> 00:01:58.800
在这个框中写上你的答案

00:01:58.800 --> 00:02:00.695
然后 你修改了哪个方法

00:02:00.695 --> 00:02:03.521
使得咖啡数量不会超过100

00:02:03.521 --> 00:02:05.550
在这个框中写上你的答案

00:02:05.550 --> 00:02:09.770
提示一下 你可以在

00:02:09.770 --> 00:02:13.880
一个方法的任何部位加入 return 语句 这能够使你提早退出方法

00:02:13.880 --> 00:02:16.560
这样就会跳过方法中剩下的代码

00:02:16.560 --> 00:02:18.750
查看结束章节 可以看到更多的细节

00:02:18.750 --> 00:02:19.730
作为一个挑战

00:02:19.730 --> 00:02:23.670
你可以在应用中加入 Toast 消息 向用户解释

00:02:23.670 --> 00:02:27.590
为什么当数量达到边界时 它就不会再更新了

00:02:27.590 --> 00:02:30.050
在应用中 Toast 消息看起来应该是这个样子的

00:02:30.050 --> 00:02:31.840
当数量达到下限时

00:02:31.840 --> 00:02:35.390
如果我多次点击 — 按钮 达到下限1时

00:02:35.390 --> 00:02:37.110
就会显示这个 Toast 消息

00:02:37.110 --> 00:02:39.380
你不能有小于 1 数量的咖啡

00:02:39.380 --> 00:02:43.270
顺便说一句 如果你想要测试上限

00:02:43.270 --> 00:02:47.280
不用点击 + 按钮99次 你可以暂时在代码中做一些修改

00:02:48.360 --> 00:02:53.100
即在 Java文件中修改初始的全局变量 quantity

00:02:53.100 --> 00:02:57.287
在 XML 文件中把 quantity 的初始值变大一些

00:02:57.287 --> 00:02:59.267
比如用99 代替2

00:02:59.267 --> 00:03:03.103
然后你只需要点击两次 + 按钮

00:03:03.103 --> 00:03:04.650
咖啡数量就会增加到100 了

00:03:04.650 --> 00:03:08.380
我强烈建议测试上限保证你的代码

00:03:08.380 --> 00:03:09.500
遇到上限时能正常运行

00:03:09.500 --> 00:03:11.630
如果完成了这些 继续下一节内容吧

