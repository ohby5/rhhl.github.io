WEBVTT
Kind: captions
Language: id

00:00:00.452 --> 00:00:03.620
Baiklah, itu tadi adalah tugas
pengodean yang cukup menantang

00:00:03.620 --> 00:00:04.912
Terdapat banyak bagian untuk itu

00:00:04.928 --> 00:00:08.150
dan juga melibatkan tampilan yang
belum pernah anda gunakan sebelumnya.

00:00:08.150 --> 00:00:10.192
Mari kita telusuri solusinya bersama.

00:00:10.192 --> 00:00:11.744
Untuk memulai, Saya telah meminta anda

00:00:11.760 --> 00:00:14.224
untuk merencanakan langkah-langkah
yang perlu anda lakukan.

00:00:14.250 --> 00:00:16.464
Langkah pertama harusnya
menambahkan bidang teks ini

00:00:16.464 --> 00:00:18.250
agar pengguna dapat
memasukkan nama mereka.

00:00:18.250 --> 00:00:20.528
Langkah kedua adalah
ketika tombol pesan di klik,

00:00:20.560 --> 00:00:22.440
kita ingin mendapatkan
nama dari bidang teks

00:00:22.480 --> 00:00:24.630
dan penyimpanannya dalam bentuk variabel.

00:00:24.630 --> 00:00:27.120
Kemudian langkah ketiga adalah
memperbaharui ringkasan pesanan

00:00:27.270 --> 00:00:28.800
yang sebenarnya menunjukkan nama itu.

00:00:28.864 --> 00:00:30.460
Mari kita selami langkah pertama.

00:00:31.290 --> 00:00:34.464
Kita belum menambahkan sebuah bidang teks
masukan dalam aplikasi kita sebelumnya,

00:00:34.490 --> 00:00:37.072
jadi mari kita cari dengan Google
tentang bagaimana melakukannya.

00:00:37.100 --> 00:00:39.648
Semenjak kita mencoba untuk
mendapatkan masukan dari pengguna,

00:00:39.680 --> 00:00:42.160
Saya akan mencoba mencari
masukan pengguna android.

00:00:42.165 --> 00:00:45.275
Hasilnya dari situs developer.android.com,
kelihatannya cukup bagus.

00:00:46.295 --> 00:00:49.765
Laman ini mendeskripsikan cara terbaik
untuk masukan pengguna.

00:00:49.760 --> 00:00:51.600
Ini menjelaskan tentang gerakan sentuhan,

00:00:51.648 --> 00:00:55.450
dan juga masukan papan ketik
dan pengontrol permainan.

00:00:55.450 --> 00:00:57.328
Masukan papan ketik adalah
yang kita inginkan,

00:00:57.360 --> 00:00:59.450
jadi mari kita klik
di tautan yang pertama.

00:00:59.455 --> 00:01:02.045
Saya memulai dengan menggulirkan
melewati halamannya dengan cepat.

00:01:02.045 --> 00:01:05.150
Saya melihat setumpuk contoh-contoh XML,
yang mungkin akan berguna.

00:01:05.150 --> 00:01:08.710
Saya perhatikan terdapat juga kurung
terbuka dan kemudian nama tampilannya.

00:01:08.710 --> 00:01:11.550
Dalam hal ini nama tampilannya
terlihat seperti EditText.

00:01:12.610 --> 00:01:14.672
Jika saya gulirkan lagi ke contoh lain,

00:01:14.704 --> 00:01:17.260
Saya juga melihat bahwa
ini adalah tampilan EditText.

00:01:17.260 --> 00:01:22.330
Sepertinya tampilan ini yang berada dalam
masukan papan ketik disebut EditText.

00:01:22.330 --> 00:01:25.269
Pendekatan lainnya adalah menggunakan
contekan tampilan biasa Android.

00:01:26.330 --> 00:01:29.360
EditText juga terdapat
di dalam daftar tampilan ini dan

00:01:29.360 --> 00:01:32.670
contoh deskripsi album ini mirip
dengan bidang nama dalam aplikasi kita.

00:01:33.488 --> 00:01:36.176
Mari kita salin XML ini dan
tambahkan ke dalam aplikasi kita.

00:01:36.850 --> 00:01:39.790
Kita menginginkan bidang nama pada
bagian atas dari formulir pesanan kita,

00:01:39.790 --> 00:01:42.224
diatas header taburan,
jadi mari kita tambahkan disini.

00:01:42.656 --> 00:01:44.720
Secepatnya, ada kesalahan yang
menyatakan bahwa itu

00:01:44.760 --> 00:01:46.816
tidak dapat di pecahkan
simbol ini untuk petunjuk.

00:01:47.600 --> 00:01:51.232
Ini mereferensikan pada teks deskripsi
album, tetapi itu untuk contekan.

00:01:51.264 --> 00:01:53.820
Mari kita hapus ini dan gantikan
dengan petunjuk kita sendiri,

00:01:53.856 --> 00:01:55.640
yang mana adalah Nama.

00:01:55.640 --> 00:01:58.640
Sejak kita menginginkan bidang nama
di bagian atas formulir pesanan kita,

00:01:58.640 --> 00:02:01.910
diatas header taburan,
mari kita tempelkan disini.

00:02:01.910 --> 00:02:04.608
Ini akan menjadi anak pertama
dalam penataan linear vertikal ini.

00:02:04.912 --> 00:02:06.490
Sekarang mari kita pastikan bahwa

00:02:06.510 --> 00:02:08.704
semua atribut telah disetel
seperti yang kita inginkan.

00:02:08.735 --> 00:02:10.600
Pertama-tama, kita memiliki ID tampilan.

00:02:10.639 --> 00:02:13.350
Dan ini disebut album_description_view.

00:02:13.350 --> 00:02:15.590
Ini merujuk ke contoh contekan, jadi

00:02:15.590 --> 00:02:18.000
mari kita ganti ini dengan nama
yang lebih pantas.

00:02:19.020 --> 00:02:20.470
Mari kita namakan bidang nama.

00:02:21.488 --> 00:02:24.624
Selanjutnya kita memiliki lebar dan tinggi
yang merupakan atribut yang akrab.

00:02:25.744 --> 00:02:27.440
Saat ini, lebar dari
bidang teks penyunting

00:02:27.470 --> 00:02:29.184
telah disetel sebagaI
orang tua yang cocok.

00:02:29.200 --> 00:02:33.620
Ini berarti ruang itu akan menjadi selebar
penataan orang tua linear.

00:02:33.620 --> 00:02:34.816
Selanjutnya, kita punya lebar.

00:02:34.816 --> 00:02:36.688
Lebarnya harus di atur
untuk membungkus isinya,

00:02:36.750 --> 00:02:39.072
jadi akan setinggi konten didalamnya.

00:02:39.088 --> 00:02:40.840
Kedua nilai ini sepertinya
cukup beralasan,

00:02:40.864 --> 00:02:42.630
jadi mari kita biarkan saja seperti itu.

00:02:42.630 --> 00:02:44.230
Selanjutnya kita memiliki petunjuk.

00:02:44.230 --> 00:02:46.450
Kita belum bekerja dengan
atribut ini sebelumnya dan

00:02:46.450 --> 00:02:49.800
ada kesalahan yang menyatakan
bahwa untaian ini tidak dapat dipecahkan.

00:02:49.800 --> 00:02:51.580
Let's look up the documentation for

00:02:51.580 --> 00:02:55.020
android EditText untuk mencari tahu
apa makna dari atribut ini.

00:02:56.020 --> 00:03:00.220
Dengan mencari android edittext kita dapat
mencari halaman dokumentasi tentang itu.

00:03:00.220 --> 00:03:05.040
Disini ada ikhtisar kelas singkat
dan kemudian daftar dari atribut XML.

00:03:05.040 --> 00:03:08.900
Ternyata bahwa kelas edittext didapat
dari tampilan teks dan tampilan.

00:03:08.900 --> 00:03:12.250
Jadi, itu mengapa kita
memiliki atribut XML warisan.

00:03:12.250 --> 00:03:14.720
Sekali mereka diperluas, kita dapat
mencari petunjuk android.

00:03:15.990 --> 00:03:18.230
Baiklah itu tadi adalah
atribut yang kita cari.

00:03:18.230 --> 00:03:21.270
Jika kita gulirkan lebih lagi ke kanan
tertulis bahwa

00:03:21.270 --> 00:03:24.304
ini adalah teks petunjuk untuk
menampilkan ketika teksnya itu kosong.

00:03:24.384 --> 00:03:25.968
Ini membantu pengguna untuk mengetahui

00:03:26.000 --> 00:03:27.850
apa yang harus mereka
ketik di ruang tersebut.

00:03:27.856 --> 00:03:30.048
Di aplikasi yang Saya telah
demonstrasikan kepada anda,

00:03:30.080 --> 00:03:31.560
teks petunjuk tertulis nama.

00:03:31.870 --> 00:03:35.440
Jadi di dalam kode kita, kita harus
menghapus untaian ini dan ketik nama.

00:03:36.368 --> 00:03:38.128
Selanjutnya kita memiliki inputType.

00:03:38.176 --> 00:03:41.690
Ini juga merupakan atribut baru,
jadi mari kita lihat dokumentasinya.

00:03:41.690 --> 00:03:44.790
Sekarang saya akan mencari
untuk tipe masukan android.

00:03:44.790 --> 00:03:46.100
Ini tertulis disini dan

00:03:46.100 --> 00:03:50.384
deskripsinya mengatakan, ini adalah tipe
data yang ditempatkan di dalam ruang teks.

00:03:50.656 --> 00:03:52.750
Biasanya untuk membantu metode
masukan memutuskan

00:03:52.768 --> 00:03:54.980
tentang bagaimana pengguna
dapat memasukkan teks,

00:03:54.980 --> 00:03:58.240
Ini penjelasan yang agak samar,
jadi mari kita klik di atribut yang ini

00:03:58.240 --> 00:03:59.610
untuk informasi lebih lanjut.

00:03:59.610 --> 00:04:02.760
Disini ada deskripsi penuh dari InputType.

00:04:02.760 --> 00:04:05.780
Ini ada nilai-nilai yang layak
yang bisa kita pasang.

00:04:05.780 --> 00:04:09.750
Sebagai contoh dari contekan,
XML mengatakan textMultiLine.

00:04:09.750 --> 00:04:11.648
Rupanya ini berarti bahwa
ruang teks penyunting

00:04:11.680 --> 00:04:14.120
dapat mengijinkan beberapa baris teks.

00:04:14.120 --> 00:04:16.470
Kita tidak mengharapkan nama
seseorang benar-benar panjang.

00:04:16.470 --> 00:04:19.550
jadi satu bari teks saja
seharusnya cukup.

00:04:19.550 --> 00:04:21.959
Mari kita gunakan teks
sebagai tipe masukan.

00:04:21.959 --> 00:04:25.010
Jika saya hapus textMultiLine
dan mulai mengetik teks,

00:04:25.010 --> 00:04:27.184
kemudian Saya akan mendapat
daftar dari semua pilihan

00:04:27.216 --> 00:04:29.710
sebagai saran pelengkap otomatis.

00:04:29.710 --> 00:04:31.696
Saya hanya cukup memilih
teks dan menekan 'enter'.

00:04:31.728 --> 00:04:34.660
Sekarang saya akan menjalankan aplikasi
di perangkat untuk memeriksa apakah

00:04:34.660 --> 00:04:36.180
ruang EditText terlihat.

00:04:36.180 --> 00:04:38.336
Ketika aplikasi terbuka,
Saya melihat ruang nama.

00:04:38.352 --> 00:04:39.410
Keren.

00:04:39.410 --> 00:04:41.104
Dan Saya dapat mengetik di dalamnya juga.

00:04:41.152 --> 00:04:43.296
Tetapi sebenarnya,
dimulai dengan huruf kecil.

00:04:43.552 --> 00:04:47.260
Ketika saya ketik,
Saya ingini dimulai dengan huruf besar.

00:04:47.260 --> 00:04:50.544
Untuk memperbaiki ini, Saya dapat
memodifikasi ketikan masukannya disini.

00:04:50.912 --> 00:04:52.800
Mari kita lihat pilihan-pilihan
lain disini.

00:04:53.390 --> 00:04:57.713
Ada textCapcharacters,
textCapwords, textCapsentences dan

00:04:57.710 --> 00:04:59.648
banyak lagi yang lainnya.

00:05:00.064 --> 00:05:02.576
Satu-satunya mengenai kapitalisasi
kelihatannya menjanjikan.

00:05:03.690 --> 00:05:05.530
Setelah membaca semua deskripsinya,

00:05:05.530 --> 00:05:08.500
Saya pikir textCapwords
bisa menjadi pilihan bagus untuk dicoba.

00:05:08.500 --> 00:05:10.000
Jadi mari kita salin ini dan gunakan.

00:05:10.880 --> 00:05:13.888
Dan jadi, daripada menggunakan teks,
saya akan menggunakan textCapwords.

00:05:14.704 --> 00:05:16.160
Mari kita jalankan aplikasinya lagi.

00:05:16.170 --> 00:05:19.280
Oke, sekarang papan ketiknya mulai
dengan huruf kapital, jadi

00:05:19.328 --> 00:05:22.300
kemudian Saya bisa langsung mengetik nama,
dan jika Saya menambahkan spasi,

00:05:22.300 --> 00:05:24.736
kemudian kata berikutnya
akan langsung menjadi kapital.

00:05:24.768 --> 00:05:25.856
Keren.

00:05:26.224 --> 00:05:29.220
Hal terakhir yang Saya perhatikan adalah
kita butuh sedikit spasi

00:05:29.220 --> 00:05:31.645
diantara bidang nama ini
dan header taburan.

00:05:31.640 --> 00:05:33.824
Kita telah menambahkan 16 dp
dari spasi vertikal,

00:05:33.840 --> 00:05:35.568
jadi mari lakukan hal yang sama disini.

00:05:35.584 --> 00:05:38.810
Saya dapat menambahkannya sebagai pias
bawah pada bidang EditTextfield, tetapi

00:05:38.810 --> 00:05:41.040
Saya hanya akan memilih untuk
menambahkannya sebagai

00:05:41.040 --> 00:05:42.800
pias atas pada header taburan.

00:05:42.800 --> 00:05:45.700
Oke, sekarang spasinya terlihat bagus
dan bidang namanya sudah benar.

00:05:46.730 --> 00:05:49.650
Itu telah menangani semua perubahan XML
pada langkah pertama.

00:05:49.650 --> 00:05:51.970
Sekarang kita perlu
memodifikasi kode java.

00:05:51.970 --> 00:05:54.340
Untuk langkah kedua,
ketika tombol pesan di klik,

00:05:54.340 --> 00:05:56.592
kita menginginkan untuk mendapatkan
nama dari bidang teks

00:05:56.608 --> 00:05:58.490
dan menyimpannya dalam variabel.

00:05:58.730 --> 00:06:02.096
Mudah bagi mata manusia untuk melihat
nama dari bidang ini,

00:06:02.144 --> 00:06:04.830
tetapi bagi aplikasi Android
tidak mengetahui bahwa kita

00:06:04.830 --> 00:06:07.120
ingin meletakkan nama ini
dalam ringkasan pesanan disini.

00:06:08.070 --> 00:06:10.840
Ini masih menggunakan
nama kode dari Lyla hard.

00:06:10.840 --> 00:06:13.190
Kita perlu merubahnya untuk
menggunakan nama ini.

00:06:13.190 --> 00:06:15.088
Ini hanya mirip dengan bagaimana
kita mengetahui

00:06:15.080 --> 00:06:16.816
jika kotak centang sudah di centang

00:06:16.912 --> 00:06:19.560
atau belum agar ringkasan
pesanan terperbarui.

00:06:19.560 --> 00:06:22.560
Kita belum mempelajari bagaimana
membaca teks dari bidang EditText, jadi

00:06:22.560 --> 00:06:24.192
mari cari dengan Google untuk itu.

00:06:24.400 --> 00:06:26.352
Saya akan mencari bagaimana

00:06:26.384 --> 00:06:28.600
Saya mendapatkan teks dari
bidang EditText Android.

00:06:29.190 --> 00:06:30.390
Hasil pertama terlihat bagus.

00:06:30.390 --> 00:06:32.720
Ini kumpulan banyak pertanyaan.

00:06:32.720 --> 00:06:35.880
Saya dapat membaca pertanyaannya,
tetapi kebanyakan saya membaca jawabannya.

00:06:35.880 --> 00:06:37.488
Saya dapat memindai semuanya dengan cepat

00:06:37.480 --> 00:06:39.728
untuk melihat apakah halaman
ini membantu atau tidak.

00:06:40.050 --> 00:06:43.510
Jawaban ini memiliki tanda centang hijau
dan memiliki banyak tanda dipilih, jadi

00:06:43.510 --> 00:06:45.610
Saya dapat membaca ini dengan baik-baik.

00:06:45.610 --> 00:06:47.810
Saya mulai dengan potongan kode.

00:06:47.810 --> 00:06:51.820
Sepertinya kode yang ini dapat masuk ke
dalam kelas aktifitas karena kita panggil

00:06:51.820 --> 00:06:53.030
dengan metode FindViewByld.

00:06:53.030 --> 00:06:57.970
Kita sedang mencoba mencari hirarki
tampilan untuk tampilan dengan ID ini.

00:06:57.970 --> 00:07:01.910
Sekali kita temukan tampilan ini,
kita tuangkan ke tampilan EditText

00:07:01.910 --> 00:07:04.928
dan kemudian disimpan didalam
variabel yang disebut teks.

00:07:04.960 --> 00:07:07.080
Pada baris kedua kita akan
mencoba untuk menetapkan

00:07:07.088 --> 00:07:09.080
sebuah variabel untai bernama nilai,

00:07:09.100 --> 00:07:10.330
dan menyimpan ini di dalamnya.

00:07:10.330 --> 00:07:13.904
Sekarang jadi ada banyak tanda
kurung, dan titik-titik, dan kata-kata,

00:07:14.736 --> 00:07:17.632
tapi anda dapat menebak
bahwa kita mencoba

00:07:17.660 --> 00:07:19.792
untuk mengeluarkan
teksnya dari bidang EditText ini.

00:07:19.820 --> 00:07:22.880
Dan kita mencoba menyimpannya
di dalam variabel untai bernama nilai.

00:07:23.088 --> 00:07:24.640
Mari kita salin dan tempelkan kode ini

00:07:24.640 --> 00:07:26.640
ke dalam aplikasi kita
untuk melihat jika bekerja.

00:07:27.120 --> 00:07:29.056
Di dalam kelas MainActivity saya akan

00:07:29.056 --> 00:07:31.050
menambahkan kodenya ke dalam
metode submitOrder.

00:07:31.480 --> 00:07:34.400
Saya memilih metode ini karena disini
dimana tombol pesan di klik

00:07:34.400 --> 00:07:37.170
dan disini dimana kita ingin
membaca dari bidang nama.

00:07:38.230 --> 00:07:40.832
Saya akan menempelkan kodenya dari
postingan stack overflow

00:07:40.864 --> 00:07:42.064
ke atas metodenya.

00:07:43.110 --> 00:07:46.610
Secepatnya ada kesalahan yang mengatakan
tidak dapat menyelesaikan simbol ini.

00:07:46.610 --> 00:07:50.340
Kita perlu menggantikan ini dengan
ViewId untuk bidang nama.

00:07:50.340 --> 00:07:52.440
Beralih kembali ke layout.xml kita,

00:07:52.440 --> 00:07:56.588
kita telah memberi bidang EditTextField
sebuah ID tampilan dari name_field,

00:07:56.588 --> 00:08:01.410
jadi di fail Java, Saya akan mengganti ini
menjadi R.id.name_field.

00:08:01.410 --> 00:08:04.530
Tidak ada kesalahan lagi, jadi Saya
bisa mencoba menjalankan aplikasinya, tapi

00:08:04.530 --> 00:08:07.400
bagaimana saya mengetahui jika
kode ini sebenarnya berfungsi atau tidak?

00:08:07.400 --> 00:08:10.520
Saya bisa menambahkan pencatatan
pesan disini untuk verifikasi

00:08:10.520 --> 00:08:14.300
bahwa nilai itu sebenarnya
memegang nama di bidang ini.

00:08:14.300 --> 00:08:16.760
Dan ini adalah kode
untuk pencatatan pesan.

00:08:16.760 --> 00:08:20.110
Saya akan mencetak nama titik dua dan
kemudian untai nilai.

00:08:21.110 --> 00:08:23.150
Nilai adalah nama yang samar
untuk variabel ini jadi

00:08:23.150 --> 00:08:25.260
Saya akan menggantinya
agar dipanggil nama.

00:08:25.260 --> 00:08:28.460
Itu akan sedikit lebih dari
sekedar nama penggambarannya.

00:08:28.460 --> 00:08:31.005
Omong-omong, Saya akan
merubah nama variabelnya untuk

00:08:31.005 --> 00:08:33.760
EditText agar juga menjadi bidang nama.

00:08:33.760 --> 00:08:37.070
Teks dapat dibingungkan dengan
hal-hal lain diantara kode kita.

00:08:37.070 --> 00:08:40.000
Sekarang mari jalankan aplikasinya
dan periksa bagian pencatatan pesan ini.

00:08:40.039 --> 00:08:42.080
Oke.
Jika saya mengisi formulir pesanan dan

00:08:42.190 --> 00:08:45.790
kemudian menekan tombol pesan, kemudian
Saya dapat memeriksa catatannya disini.

00:08:46.810 --> 00:08:48.720
Saya melihat satu pesan
baru untuk MainActivity

00:08:48.720 --> 00:08:50.720
yang mengatakan Nama: Anthony Antigravity.

00:08:51.210 --> 00:08:52.680
Jadi, ini berfungsi.

00:08:52.680 --> 00:08:56.360
Kode ini sesungguhnya memang
menarik nama dari bidang ini.

00:08:56.360 --> 00:08:59.620
Bagus.
Sekarang kita memiliki nama penggunanya

00:08:59.620 --> 00:09:01.984
dalam variabel, dan kita verifikasi juga

00:09:01.980 --> 00:09:04.064
dengan pencatatan, bahwa
itu adalah nama yang benar

00:09:04.060 --> 00:09:07.056
kemudian kita bisa memperbarui ringkasan
pesanan untuk menunjukkan nama ini.

00:09:07.380 --> 00:09:10.280
Agar ringkasan pesanan
menunjukkan nama yang benar,

00:09:10.280 --> 00:09:13.860
kita perlu membaginya sebagai parameter
masukan kepada metode ini.

00:09:13.860 --> 00:09:16.610
Ini berarti ketika kita memanggil
penciptaan metode ringkasan pesanan,

00:09:16.610 --> 00:09:20.450
kita harus membagi di dalam
variabel nama ini sebagai argumen masukan.

00:09:20.450 --> 00:09:22.410
Mari membuat perubahan itu pertama-tama.

00:09:22.410 --> 00:09:24.840
Jika saya menambahkan nama sebagai
argumen masukan,

00:09:24.840 --> 00:09:27.088
Saya mendapatkan kesalahan
karena metode pemanggilan

00:09:27.088 --> 00:09:29.080
tidak cocok dengan metode tanda tangan.

00:09:29.660 --> 00:09:31.950
Gulirkan ke bawah untuk definisi metode,

00:09:31.950 --> 00:09:35.670
Saya dapat menambahkan nama untai
sebagai parameter masukan.

00:09:35.670 --> 00:09:37.920
Saya juga akan membarui dokumen Javanya.

00:09:38.032 --> 00:09:39.968
Sekarang, di dalam
metode createOrderSummary,

00:09:39.960 --> 00:09:41.840
saya dapat menggunakan variabel ini.

00:09:42.048 --> 00:09:46.630
Saya akan menghapus nama kode kerasnya
dan kemudian merangkai variabel nama ini.

00:09:47.930 --> 00:09:51.360
Jadi, untuk merekap, kita akan
mengambil nama dari name_field dan

00:09:51.360 --> 00:09:55.590
kemudian membaginya sebagai masukan
untuk metode createOrderSummary.

00:09:55.590 --> 00:09:59.620
Di dalam metode ini, kita dapat
membubuhkan nama dalam ringkasan pesanan.

00:09:59.620 --> 00:10:01.720
Mari jalankan aplikasinya
untuk memeriksa kode kita.

00:10:01.720 --> 00:10:04.304
Sekali aplikasinya berjalan, Saya
bisa mengetik di dalamnya nama,

00:10:04.304 --> 00:10:06.790
memilih beberapa taburan,
dan kemudian merubah jumlahnya.

00:10:06.790 --> 00:10:08.464
Kemudian Saya dapat menekan tombol pesan.

00:10:08.460 --> 00:10:10.448
Sekarang Saya melihat ringkasan pesanan

00:10:10.448 --> 00:10:12.160
berisi nama yang saya ketik di awal.

00:10:12.160 --> 00:10:13.184
Woohoo!

00:10:13.216 --> 00:10:15.280
Jika Saya merubah nama dan
kemudian menekan pesan,

00:10:15.280 --> 00:10:16.816
kemudian dia memperbarui lagi.

00:10:16.832 --> 00:10:18.016
Ini menyenangkan.

00:10:18.416 --> 00:10:20.190
Sekarang segalanya bekerja dalam aplikasi,

00:10:20.224 --> 00:10:22.000
Saya dapat menghilangkan
catatan pesan ini.

00:10:22.000 --> 00:10:23.344
Saya dapat menjalankan aplikasinya

00:10:23.360 --> 00:10:25.630
sekali lagi untuk memastikan
bahwa hal tersebut berjalan.

00:10:25.808 --> 00:10:28.640
Sekarang mari kita kembali dan
menjawab pertanyaan-pertanyaan kuis ini.

00:10:28.640 --> 00:10:31.700
Tampilan yang kita tambahkan
ke aplikasi kita dinamakan EditText.

00:10:31.700 --> 00:10:35.260
Pertanyaan kedua menanyakan
metode Java apakah yang kita sebut

00:10:35.260 --> 00:10:37.010
untuk mendapatkan teks dari tampilan ini.

00:10:38.120 --> 00:10:40.910
Kita dapat menjawab ini dengan
kembali ke kode kita.

00:10:40.910 --> 00:10:42.885
KIta cari hirarki tampilan untuk

00:10:42.885 --> 00:10:46.710
EditText objek Java yang
mereprentasikan bidang nama.

00:10:46.710 --> 00:10:49.570
Kita simpan didalam sebuah variabel
yang disebut nameField.

00:10:49.570 --> 00:10:52.310
Dan di atas objek tersebut
kita panggil metodenya.

00:10:52.310 --> 00:10:56.310
Kita panggil metode getText,
yang tidak mengambil argumen masukan dan

00:10:56.310 --> 00:10:58.500
memiliki nilai berbalik
dari objek lainnya.

00:10:59.510 --> 00:11:01.460
Itu akan membawa kita
ke pertanyaan ketiga.

00:11:01.460 --> 00:11:04.790
Apakah tipe data pembalik
dari metode getText?

00:11:04.790 --> 00:11:06.330
Jawabannya dapat di sunting dan

00:11:06.330 --> 00:11:09.540
Saya mengetahui ini dengan melihat
di dokumentasi Android.

00:11:09.540 --> 00:11:11.360
Untuk kelas penyuntingan teks, jika anda

00:11:11.360 --> 00:11:13.744
menggulirkan ke bawah anda
dapat melihat semua metode umum.

00:11:14.320 --> 00:11:17.152
GetText terdaftar sebagai metode
sebagai pengembali teks

00:11:17.168 --> 00:11:19.350
yang ditampilkan tampilan teks tersebut.

00:11:19.350 --> 00:11:21.960
Tipe data kembali dapat di sunting.

00:11:21.960 --> 00:11:23.904
Ini membalik objek yang bisa di sunting,

00:11:23.900 --> 00:11:26.000
dan kita bisa memanggil metode
lain atas objek ini

00:11:27.280 --> 00:11:30.750
dengan menambahkan notasi titik
dan kemudian nama metodenya.

00:11:30.750 --> 00:11:35.730
Jadi dalam kasus ini kita memanggil metode
untai atas objek yang bisa di sunting,

00:11:35.730 --> 00:11:38.790
dan metode toString
mengembalikan sebuah untai,

00:11:38.790 --> 00:11:41.050
jadi dapat di simpan dalam variabel nama.

00:11:42.080 --> 00:11:45.880
Inin konsep yang lebih lanjut, dan
ini disebut panggilan metode perantai.

00:11:45.880 --> 00:11:49.560
Karena kita memanggil satu metode,
mendapatkan nilai kembali dan

00:11:49.560 --> 00:11:52.800
kemudian memanggil metode lainnya,
dan jika ini mengembalikan sebuah objek,

00:11:52.800 --> 00:11:54.400
anda dapat memanggil metode lainnya lagi.

00:11:54.464 --> 00:11:57.690
Dan anda tetap dapat memanggil
metode-metode satu setelah yang lainnya.

00:11:57.690 --> 00:12:00.512
Alasan kita memanggil rantai metode
adalah karena metode getText

00:12:00.528 --> 00:12:02.592
mengembalikan objek yang bisa di sunting.

00:12:02.650 --> 00:12:05.792
Sebuah objek yang dapat disunting tidak
dapat disimpan di dalam variabel untai.

00:12:05.824 --> 00:12:07.952
seperti terlihat pada
kesalahan Studio Android

00:12:08.000 --> 00:12:09.616
yang mengatakan tipe yang tidak sesuai.

00:12:09.824 --> 00:12:11.640
Jadi, jika kita menambahkan
metode toString,

00:12:11.648 --> 00:12:13.640
kemudian nilai balik dari semuanya

00:12:13.680 --> 00:12:17.790
adalah sebuah untai, dan
itu bisa disimpan dalam variabel nama.

00:12:17.790 --> 00:12:20.550
Kita dapat memverifikasi ini dengan
mengecek dokumentasinya.

00:12:20.550 --> 00:12:23.160
Metode getText mengembalikan
objek yang bisa disunting.

00:12:23.160 --> 00:12:25.660
Jika Saya mengklik ini,
dalam kelas penyuntingan,

00:12:25.660 --> 00:12:27.880
kita bisa menemukan
sebuah metode bernama toString.

00:12:27.880 --> 00:12:28.976
Menggulir ke bawah,

00:12:29.008 --> 00:12:32.830
dalam bagian metode umum, Saya
tidak melihat toString terdaftar disini.

00:12:32.830 --> 00:12:34.670
Tetapi ada metode-metode warisan.

00:12:34.670 --> 00:12:38.520
Jadi jika saya buka drop down ini, Saya
akan melihat toString sebagai metode.

00:12:38.520 --> 00:12:40.930
Dan nilai baliknya adalah untai.

00:12:40.930 --> 00:12:44.850
Jadi untuk mengembalikannya ke rumahnya
sekali lagi, metode ini disebut pembalik

00:12:44.850 --> 00:12:46.416
objek yang bisa disunting, dan kemudian

00:12:46.430 --> 00:12:48.240
dapat kita panggil metode
toString diatasnya.

00:12:48.288 --> 00:12:50.670
Metode toString
mengembalikan untai dan jadi

00:12:50.670 --> 00:12:53.680
semua hal di sisi kanan ini
membalikkan sebuah untai.

00:12:53.680 --> 00:12:57.150
Dan itu bisa disimpan dalam
variabel untai disebut nama.

00:12:58.144 --> 00:13:00.512
Wow, itu tadi adalah tugas
pengodean yang sangat panjang.

00:13:01.130 --> 00:13:03.296
Anda dapat istirahat sejenak sekarang,
dan kembali

00:13:03.328 --> 00:13:05.610
karena kita perlu merencanakan
bagaimana mengganti harga

00:13:05.610 --> 00:13:07.488
berdasarkan atas apa yang
pengguna telah pesan.

00:13:07.500 --> 00:13:10.080
Kita akan melakukan ini dengan
mempelajari mengenai alur kontrol.

