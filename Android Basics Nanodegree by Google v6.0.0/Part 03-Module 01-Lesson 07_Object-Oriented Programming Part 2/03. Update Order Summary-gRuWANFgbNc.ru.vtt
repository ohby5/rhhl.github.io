WEBVTT
Kind: captions
Language: ru

00:00:00.450 --> 00:00:03.560
Псевдокод начинается с нажатия 
кнопки "Заказ".

00:00:03.560 --> 00:00:07.020
Это указывает на то, что мы должны 
добавить наш код в метод submit_order.

00:00:08.180 --> 00:00:11.280
Затем нам нужно получить отмеченное 
состояние от окошка метки.

00:00:11.280 --> 00:00:14.990
Чтобы вызывать любой метод на раскладку
в иерархии раскладок,

00:00:14.990 --> 00:00:17.570
сначала нужно найти раскладку по id.

00:00:17.570 --> 00:00:21.560
Первое, что нужно сделать - присвоить id 
раскладки этой раскладке окошка метки.

00:00:22.770 --> 00:00:25.920
В Аndroid studio в основной 
функции я нахожу

00:00:25.920 --> 00:00:27.420
раскладку <i>CheckBox</i>.

00:00:27.420 --> 00:00:31.690
Так как мой курсор здесь, он высвечивает 
данный элемент в предпросмотре.

00:00:31.690 --> 00:00:34.600
Затем я добавлю строку, чтобы дать 
ID элемента этому элементу.

00:00:35.750 --> 00:00:39.140
Теперь в Java коде я могу ссылаться 
на этот элемент,

00:00:39.140 --> 00:00:42.140
а потом попытаться извлечь 
из него состояние.

00:00:42.140 --> 00:00:43.410
Перейдем в основную функцию.

00:00:43.410 --> 00:00:46.410
Я введу свой код в метод подачи заявки 
<i>submit_order</i>.

00:00:47.700 --> 00:00:51.250
Я знаю, что мне нужно найти объект 
<i>Java CheckBox</i> в иерерархии элемента.

00:00:52.270 --> 00:00:55.650
Я начну с создания переменной
<i>whippedCreamCheckBox</i>,

00:00:55.650 --> 00:00:57.810
с типом данных <i>CheckBox</i>.

00:00:57.810 --> 00:01:01.380
Затем я могу вызвать метод <i>findViewById</i>
в рамках этой функции.

00:01:01.380 --> 00:01:03.950
Это найдет элемент, основанный 
на данном ID.

00:01:03.950 --> 00:01:09.080
Я введу ID (<i>R.id.whipped_cream_checkbox</i>),

00:01:09.080 --> 00:01:12.060
который я только что присвоила 
в другом файле раскладки.

00:01:12.060 --> 00:01:16.070
Это сразу же выдает сообщение об ошибке, 
потому что требуемый тип- <i>CheckBox</i>,

00:01:16.070 --> 00:01:19.020
потому что это то, чего касается 
переменная с левой стороны.

00:01:19.020 --> 00:01:22.230
Однако возвращаемое значение 
этого метода - тип <i>view</i>.

00:01:22.230 --> 00:01:23.330
И, как мы узнали ранее,

00:01:23.330 --> 00:01:25.710
нам нужно привести к возвращаемому 
значению данного метода.

00:01:25.710 --> 00:01:29.380
Я преобразую его в объект <i>CheckBox</i>.

00:01:29.380 --> 00:01:33.720
Причина, по которой я могу 
его преобразовать, потому что <i>CheckBox</i>

00:01:34.910 --> 00:01:37.480
является подклассом <i>View</i>.
Итак, у меня есть объект Java <i>CheckBox</i>,

00:01:37.480 --> 00:01:40.450
представляющий окошко метки в UI.

00:01:40.450 --> 00:01:42.570
Чтобы выяснить, есть метка в окошке 
или нет,

00:01:42.570 --> 00:01:45.760
мне нужно вызвать метод на объект.

00:01:45.760 --> 00:01:48.360
Вы можете не знать, какойм метод 
вызвать для обекта <i>CheckBox</i>.

00:01:48.360 --> 00:01:49.790
Это совершенно нормально.

00:01:49.790 --> 00:01:52.000
Вы можете просто сделать запрос в Google.

00:01:52.000 --> 00:01:55.520
Поищите <i>CheckBox Android</i>, и 
пройдите по первой ссылке.

00:01:56.940 --> 00:02:01.560
Чтобы усилить то, о чем я говорила, 
<i>checkbox</i> - это подкласс типа <i>View</i>.

00:02:01.560 --> 00:02:03.080
Есть и другие элементы между ними, но

00:02:03.080 --> 00:02:04.820
в целом, это все-таки подкласс <i>View</i>.

00:02:06.050 --> 00:02:09.120
ОБзор данного класса интересен, 
потому что в нем есть несколько

00:02:09.120 --> 00:02:10.780
Java кодов.

00:02:10.780 --> 00:02:13.730
Здесь есть строка кода, которая 
есть и в нашем приложении, мы делаем

00:02:13.730 --> 00:02:19.530
<i>findViewById</i>, получаем id и затем нам 
возвращается то, что в окошке метки.

00:02:19.530 --> 00:02:21.560
Следующая строка еще интереснее. 
Она говорит, что

00:02:21.560 --> 00:02:26.630
окошко метки, а это название переменной, 
содержит метку (<i>checkBox.isChecked</i>).

00:02:26.630 --> 00:02:29.510
Похоже на вызов метода с отсутствием 
начальных аргументов.

00:02:29.510 --> 00:02:33.450
Это и говорит нам, отмечено ли окошко 
или нет, и возвращает

00:02:33.450 --> 00:02:37.580
истинное или ложное значение, но давайте 
проверим инструкцию по флаговым окнам,

00:02:37.580 --> 00:02:42.740
чтобы убедиться. Пролистываем и видим 
некий <i>checkbox xml</i> код,

00:02:42.740 --> 00:02:44.770
и еще несколько Java кодов.

00:02:45.910 --> 00:02:49.910
Выхдит, данный метод вызывается, 
когда в окошке есть метка.

00:02:49.910 --> 00:02:53.840
Имя этого метода сопоставимо с именем, 
указанным в xml.

00:02:53.840 --> 00:02:58.530
Предполагаю, что введенный тут элемент,
это элемент окна метки.

00:02:58.530 --> 00:03:00.800
И мы внесем его в <i>CheckBox</i>, и мы так же

00:03:00.800 --> 00:03:05.360
вызывали <i>IsChecked</i>, а возвращаемое 
значение - булевое.

00:03:05.360 --> 00:03:09.380
Этот коментарий углубляет описание, он 
говорит: а элемент сейчас отмечен?

00:03:09.380 --> 00:03:11.880
Мне кажется, это именно то, что нам надо.

00:03:11.880 --> 00:03:13.520
Давайте попробуем метод <i>IsChecked</i>.

00:03:14.640 --> 00:03:18.010
Сначала вводим название 
переменной объекта <i>CheckBox</i>.

00:03:18.010 --> 00:03:20.210
Это <i>whippedCreamCheckBox</i>.

00:03:20.210 --> 00:03:23.020
Затем я добавляю точку для вызова метода.

00:03:23.020 --> 00:03:26.290
Я могу начать набирать <i>isChecked</i>,
слова сами появляются.

00:03:26.290 --> 00:03:29.400
Я нажимаю <i>Enter</i>, чтобы 
принять предложение.

00:03:29.400 --> 00:03:33.150
Справа пишется возвращаемое 
значение этого метода,

00:03:33.150 --> 00:03:35.150
и оно возращается булевым значением.

00:03:35.150 --> 00:03:39.330
Как только я воспоьзуюсь предложением, 
я иду в левую часть этого

00:03:39.330 --> 00:03:44.110
вызванного метода, и сохраню результат 
в булевой логической переменной.

00:03:44.110 --> 00:03:48.260
Я назову эту булевую переменную 
<i>hasWhippedCream</i>, и нажму <i>Enter</i>.

00:03:48.260 --> 00:03:52.860
Чтобы резюмирвать: мы вызываем метод для 
Java объекта <i>whippedCreamCheckbox</i> и

00:03:52.860 --> 00:03:54.690
называется этот метод <i>isChecked</i>.

00:03:54.690 --> 00:03:56.750
Это возвращаемое значение булевое и

00:03:56.750 --> 00:03:59.210
хранится оно здесь, в левой части.

00:03:59.210 --> 00:04:01.970
Эта переменная называется <i>hasWhippedCream</i>.

00:04:01.970 --> 00:04:03.220
Мы закончили первое задание.

00:04:03.220 --> 00:04:06.530
Я упоминала, что вы можете 
записать эту переменную,

00:04:06.530 --> 00:04:09.130
чтобы проверить, на правильном ли вы пути.

00:04:09.130 --> 00:04:10.870
Итак, в следующей строке я добавлю

00:04:12.050 --> 00:04:14.150
журнальное сообщение. Первый аргумент - 
название

00:04:14.150 --> 00:04:17.100
тэга. Я просто возьму название нашего 
класса, т.е. <i>MainActivity</i>.

00:04:17.100 --> 00:04:19.810
И введу свою запись.

00:04:19.810 --> 00:04:22.058
Я напишу: со взбитыми сливками,

00:04:22.058 --> 00:04:26.660
потом добавлю булевую переменную.

00:04:26.660 --> 00:04:30.930
При связывании этой строки с 
булевой переменной,

00:04:30.930 --> 00:04:34.560
булевая переменная также 
вернется в строку.

00:04:34.560 --> 00:04:38.319
Затем в тексте будет: 
<i>hasWhippedCream</i> - истина или

00:04:39.400 --> 00:04:41.330
<i>hasWhippedCream</i> - ложь. 
Запустим приложение.

00:04:41.330 --> 00:04:43.780
проверьте, вводите ли вы правильное 
сообщение в журнале.

00:04:44.810 --> 00:04:48.170
Я увеличила размер окна лога 
управляющим элементом вот тут.

00:04:48.170 --> 00:04:50.030
Когда я нажимаю на окно с меткой 
"Взбитые

00:04:50.030 --> 00:04:53.850
сливки", затем на кнопку "Заказ", я жду, 
что тут появится сообщение

00:04:53.850 --> 00:04:56.319
<i>hasWhippedCream</i> - истинно или ложно.

00:04:57.360 --> 00:04:59.770
Я чуть подвину текст, чтобы 
увидеть само сообщение.

00:05:00.790 --> 00:05:03.540
Ладно, посмотрим, работает ли это.

00:05:03.540 --> 00:05:06.210
Я поставлю галочку и нажму "Заказ".

00:05:06.210 --> 00:05:10.101
Кажется, появилось новое сообщение 
с текстом <i>Main Activity</i>

00:05:10.101 --> 00:05:12.335
Со взбитыми сливками: истина.

00:05:12.335 --> 00:05:15.215
Это верно, ведь в окошке поставили метку.

00:05:15.215 --> 00:05:20.645
Если я сниму галочку и нажму "Заказ", 
должна появиться запись "ложь".

00:05:20.645 --> 00:05:24.825
Снова иду вправо, и тут написано: 
Со взбитыми сливками: ложь.

00:05:24.825 --> 00:05:28.475
Похоже, что наш ко пока верен для поиска

00:05:28.475 --> 00:05:32.195
элеммента <i>checkВox</i>и проверки его статуса.

00:05:32.195 --> 00:05:33.945
Перейдем ко второму заданию.

00:05:35.410 --> 00:05:40.000
Теперь нужно ввести эту булевую переменную
в метод заказа order_summary.

00:05:40.000 --> 00:05:43.580
Если я хочу ввести еще один аргумент 
в метод <i>createOrderSummary</i>,

00:05:43.580 --> 00:05:48.410
я просто добавлю здесь запятую и 
введу переменную <i>hasWhippedCream</i>.

00:05:49.820 --> 00:05:53.680
Тут же я получаю ошибку, где сказано, 
что это неприменимо к

00:05:53.680 --> 00:05:58.730
методу <i>createOrderSummary</i>, потому что 
это подразумевает наличие целочисленного

00:05:58.730 --> 00:06:02.050
параметра. Опустимся вниз, где заявлен 
<i>createOrderSummary</i>.

00:06:03.310 --> 00:06:05.590
Мне нужно изменить сигнатуру метода

00:06:05.590 --> 00:06:07.900
<i>createOrderSummary</i>.

00:06:07.900 --> 00:06:10.440
Ему нужно принять не один входной 
параметр, а два.

00:06:10.440 --> 00:06:15.430
Поэтому я добавлю запятую и 
уточню второй параметр.

00:06:15.430 --> 00:06:20.810
Тип данных должен быть булевым и 
я назову его <i>addwhippedCream</i>.

00:06:20.810 --> 00:06:23.850
Можете назвать входной переметр 
как вам захочется, но я просто хочу

00:06:23.850 --> 00:06:27.430
показать вам, что это название может и
не сопоставляться с этим названием вверху.

00:06:28.490 --> 00:06:32.580
Так как мы изменили сигнатуру метода, 
нам нужно также обновить документ Java,

00:06:32.580 --> 00:06:35.440
чтобы уточнить, о чем этот 
входной параметр.

00:06:36.510 --> 00:06:38.140
ОК, мы закончили второе задание.

00:06:39.600 --> 00:06:42.850
Третье задание - изменить текст заказа, 
чтобы включить момент: хочет

00:06:42.850 --> 00:06:44.450
ли заказчик взбитые сливки или нет.

00:06:45.800 --> 00:06:49.490
В целом, это значит, что нам надо 
использовать этот входной параметр тут

00:06:49.490 --> 00:06:52.410
для изменения сообщения заказа.

00:06:52.410 --> 00:06:56.260
На скриншоте верхняя строка <i>whip cream</i>
появляется под названием.

00:06:56.260 --> 00:06:58.030
Значит, добавим тут новую строку.

00:06:58.030 --> 00:07:01.450
Я напишу <i>priceМessage</i> плюс, равно,

00:07:01.450 --> 00:07:03.950
чтобы изменить существующее 
сообщение о цене.

00:07:03.950 --> 00:07:06.720
Затем добавлю строку <i>Add whipped cream?</i>.

00:07:06.720 --> 00:07:10.520
Я добавлю пробел, а потом 
булевую переменную.

00:07:10.520 --> 00:07:14.060
Опять же, я могу рассчитывать на 
строковой литерал с булевым значением,

00:07:14.060 --> 00:07:16.770
что превратит все это в строку.

00:07:16.770 --> 00:07:18.100
Отлично. Опробуем на телефоне.

00:07:19.230 --> 00:07:20.770
Если я поставлю галочку и

00:07:20.770 --> 00:07:24.720
нажму на "Заказ", появится запись: 
<i>add whip cream topping: true</i>.

00:07:24.720 --> 00:07:28.480
Так и есть, только я снова 
забыла символ новой строки, так что

00:07:28.480 --> 00:07:29.410
придется исправлять.

00:07:29.410 --> 00:07:32.590
И пока я здесь, надо 
проверить еще один момент.

00:07:32.590 --> 00:07:34.680
Я сниму галочку и нажму кнпку "Заказ".

00:07:34.680 --> 00:07:36.640
Появилось сообщение "ложь".

00:07:36.640 --> 00:07:40.310
Состояние отмеченного окна 
отображается корректно.

00:07:40.310 --> 00:07:43.800
Добвим символ новой строки 
и снова запустим приложение.

00:07:43.800 --> 00:07:46.590
Если я поставлю галочку и нажму на 
"Заказ", появится запись: истина.

00:07:46.590 --> 00:07:49.480
Если я сниму галочку и нажму на 
"Заказ", появится запись: ложь.

00:07:50.610 --> 00:07:51.550
Замечательно.

00:07:51.550 --> 00:07:52.810
Разобрались с обоими вопросами.

00:07:54.550 --> 00:07:56.750
Последние части задания были проще.

00:07:56.750 --> 00:08:00.610
Так как мы однажды проверили 
по записям правильность проверки

00:08:00.610 --> 00:08:04.200
состояния окна, осталось только 
отобразиь это на экране.

00:08:04.200 --> 00:08:06.000
Раз уж в приложении сейчас все работает,

00:08:06.000 --> 00:08:08.660
Я могу убрать запись журнала, 
потому что она больше не нужна.

00:08:08.660 --> 00:08:11.810
И запустим приложение еще раз.

00:08:11.810 --> 00:08:12.830
Ну вот, отличная работа.

00:08:12.830 --> 00:08:14.260
Переходим к следующему заданию.

