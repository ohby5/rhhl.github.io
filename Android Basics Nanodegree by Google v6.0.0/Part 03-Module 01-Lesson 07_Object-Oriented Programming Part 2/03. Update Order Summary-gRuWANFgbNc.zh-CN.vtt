WEBVTT
Kind: captions
Language: zh-CN

00:00:00.450 --> 00:00:03.560
这个伪代码开始于点击 ORDER 按钮的时候

00:00:03.560 --> 00:00:07.020
这表明我们应该在 submit0rder 方法中添加代码

00:00:08.180 --> 00:00:11.280
之后 我们需要从 CheckBox 中获取选中状态

00:00:11.280 --> 00:00:14.990
为了调用 View 的其他方法  在 View 结构中

00:00:14.990 --> 00:00:17.570
首先通过 ID 找到这个 View

00:00:17.570 --> 00:00:21.560
我需要做的第一件事就是为这个复选框分配一个视图 ID

00:00:22.770 --> 00:00:25.920
在 Android Studio 的 activity_main 布局中我要找到

00:00:25.920 --> 00:00:27.420
CheckBox 的布局视图

00:00:27.420 --> 00:00:31.690
我的光标在预览中高亮了这个 View

00:00:31.690 --> 00:00:34.600
之后我要添加一行代码为这个 View 添加一个视图ID

00:00:35.750 --> 00:00:39.140
现在 在 Java 代码中 我可以引用这个 View

00:00:39.140 --> 00:00:42.140
然后试着读取它的状态

00:00:42.140 --> 00:00:43.410
让我们来到 MainActivity

00:00:43.410 --> 00:00:46.410
我将要把我的代码写到 submitOrder 方法

00:00:47.700 --> 00:00:51.250
我知道我需要找到在视图层次的 CheckBox 的 Java 对象

00:00:52.270 --> 00:00:55.650
我开始创建一个变量  whippedCreamCheckBox

00:00:55.650 --> 00:00:57.810
数据类型是 CheckBox

00:00:57.810 --> 00:01:01.380
之后在 activity 中调用 findViewById 方法

00:01:01.380 --> 00:01:03.950
这将找到一个基于这个已给出的 ID 的 View

00:01:03.950 --> 00:01:09.080
我将要传入 ID(R.id.whipped_cream_checkbox)

00:01:09.080 --> 00:01:12.060
我刚在其他布局文件中分配的

00:01:12.060 --> 00:01:16.070
这会马上报错因为要求类型为 CheckBox

00:01:16.070 --> 00:01:19.020
也就是左手边的变量的类型

00:01:19.020 --> 00:01:22.230
然而 这个方法的返回数值类型是 View

00:01:22.230 --> 00:01:23.330
因此 像之前学过的

00:01:23.330 --> 00:01:25.710
我们需要给出方法的返回数值类型

00:01:25.710 --> 00:01:29.380
并且将它强制转化为 CheckBox 对象

00:01:29.380 --> 00:01:33.720
能强制转化的原因是 CheckBox 是 View 的子类

00:01:34.910 --> 00:01:37.480
好的 现在我们有 CheckBox 的  Java 对象了

00:01:37.480 --> 00:01:40.450
这代表UI中的复选框

00:01:40.450 --> 00:01:42.570
为了证明无论复选框是否被选中

00:01:42.570 --> 00:01:45.760
我需要调用 object 中的方法

00:01:45.760 --> 00:01:48.360
你可能不知道 CheckBox 对象调用哪种方法

00:01:48.360 --> 00:01:49.790
这这没什么

00:01:49.790 --> 00:01:52.000
Google 搜索它就好了

00:01:52.000 --> 00:01:55.520
搜索checkBox android 之后点击第一个链接

00:01:56.940 --> 00:02:01.560
强调一点我之前提过的 CheckBox 是View的子类

00:02:01.560 --> 00:02:03.080
在这之间有其他 View

00:02:03.080 --> 00:02:04.820
不过最终还是 View 的子类

00:02:06.050 --> 00:02:09.120
这个类的概述很有趣因为它在这有一些

00:02:09.120 --> 00:02:10.780
Java 代码

00:02:10.780 --> 00:02:13.730
这一行是我们的应用里早就有的代码

00:02:13.730 --> 00:02:19.530
我们通过 ID 查找 View 给出一个ID 之后返回一个 CheckBox 对象

00:02:19.530 --> 00:02:21.560
下一行更有趣

00:02:21.560 --> 00:02:26.630
CheckBox (这个变量的名字) .ischecked

00:02:26.630 --> 00:02:29.510
像是调用一个无参数的方法

00:02:29.510 --> 00:02:33.450
这似乎预示着这个复选框是否选中 返回

00:02:33.450 --> 00:02:37.580
一个 true 或 false 的值 但是还是通过 CheckBox 来确认一下

00:02:37.580 --> 00:02:42.740
让我们滚动这个看一些 CheckBox 的 xml 代码

00:02:42.740 --> 00:02:44.770
和更多的 Java 代码

00:02:45.910 --> 00:02:49.910
这个方法看起来像是在 CheckBox 被点击的时候被调用的

00:02:49.910 --> 00:02:53.840
方法的名字和 xml 中指定的方法名相匹配

00:02:53.840 --> 00:02:58.530
我假设这个 View 传入了 CheckBox 视图

00:02:58.530 --> 00:03:00.800
并且 我们把它强制转化为 CheckBox

00:03:00.800 --> 00:03:05.360
我们同样调用 IsChecked 返回一个boolean类型值

00:03:05.360 --> 00:03:09.380
这个注释进一步描述 这个视图是否被勾选？

00:03:09.380 --> 00:03:11.880
这正好是我们需要的

00:03:11.880 --> 00:03:13.520
让我们试着使用 IsChecked 方法

00:03:14.640 --> 00:03:18.010
首先我们输入 CheckBox  的变量名字

00:03:18.010 --> 00:03:20.210
是 whippedCreamCheckBox

00:03:20.210 --> 00:03:23.020
之后我加一个点来调用它的方法

00:03:23.020 --> 00:03:26.290
我开始输入 isChecked 它突然弹出

00:03:26.290 --> 00:03:29.400
所以我按下 Enter 来使用这个建议

00:03:29.400 --> 00:03:33.150
在这个右手边 它写着方法的返回值是什么

00:03:33.150 --> 00:03:35.150
并说返回一个 Boolean 类型

00:03:35.150 --> 00:03:39.330
在我采用这个建议之后 回到左手边

00:03:39.330 --> 00:03:44.110
调用这个方法 之后我用 boolean 类型变量保存结果

00:03:44.110 --> 00:03:48.260
我将这个 boolean变量命名为 hasWhippedCream 点击回车

00:03:48.260 --> 00:03:52.860
回顾一下 我们调用一个 whippedCreamCheckbox 的Java 对象的方法

00:03:52.860 --> 00:03:54.690
这个方法叫 isChecked

00:03:54.690 --> 00:03:56.750
并且有一个 boolean类型的返回值

00:03:56.750 --> 00:03:59.210
它存储在左手边

00:03:59.210 --> 00:04:01.970
这个变量叫 hasWhippedCream

00:04:01.970 --> 00:04:03.220
这就完成了第一个任务

00:04:03.220 --> 00:04:06.530
我还要提到你可以将这个变量用日志输出

00:04:06.530 --> 00:04:09.130
这样你能核实自己的路径是否正确

00:04:09.130 --> 00:04:10.870
因此 在下一行 我将添加日志信息

00:04:12.050 --> 00:04:14.150
第一个参数是一个标签名字

00:04:14.150 --> 00:04:17.100
我将使用我们的类的名字 即 MainActivity

00:04:17.100 --> 00:04:19.810
之后我将放进我自己定义的消息

00:04:19.810 --> 00:04:22.058
输入 Has whipped cream

00:04:22.058 --> 00:04:26.660
之后添加一个 boolean 变量

00:04:26.660 --> 00:04:30.930
通过将 boolean变量和这个字符串相连

00:04:30.930 --> 00:04:34.560
它将会把 boolean值改为一个字符串

00:04:34.560 --> 00:04:38.319
因此之后的文本将会输出 Has whipped cream true 或 Has whipped cream false

00:04:39.400 --> 00:04:41.330
现在 在我们自己的设备上运行应用

00:04:41.330 --> 00:04:43.780
检查这个是否输出正确的日志信息

00:04:44.810 --> 00:04:48.170
我通过控制这里增大日志窗口的大小

00:04:48.170 --> 00:04:50.030
现在当我点击Whipped cream 复选框

00:04:50.030 --> 00:04:53.850
点击 ORDER 按钮 我将在这看到消息显示

00:04:53.850 --> 00:04:56.319
has whipped cream true 或 false

00:04:57.360 --> 00:04:59.770
我将这个滚动一遍这样我能看到实际的消息

00:05:00.790 --> 00:05:03.540
好的 让我们来看看是否可行

00:05:03.540 --> 00:05:06.210
我将点击这个复选框并点击 ORDER

00:05:06.210 --> 00:05:10.101
好的 我认为一个新的消息输出并说 MainActivity:

00:05:10.101 --> 00:05:12.335
Has whipped cream: true.

00:05:12.335 --> 00:05:15.215
这是正确的因为复选框被勾选了

00:05:15.215 --> 00:05:20.645
如果我没有勾选这个框并点击 ORDER 按钮 我期望它显示 false

00:05:20.645 --> 00:05:24.825
现在再滚动 显示 has whipped cream: false

00:05:24.825 --> 00:05:28.475
好的 这看起来我们的代码正确

00:05:28.475 --> 00:05:32.195
找到 CheckBox 视图 之后获取状态的步骤是对的

00:05:32.195 --> 00:05:33.945
现在继续第二个任务

00:05:35.410 --> 00:05:40.000
现在我们需要传入这个 boolean 变量到 orderSummary 方法

00:05:40.000 --> 00:05:43.580
如果我想将其他参数传入 createOrderSummary 方法

00:05:43.580 --> 00:05:48.410
我将在这添加一个逗号 并传入一个变量 hasWhippedCream

00:05:49.820 --> 00:05:53.680
马上出现一个错误 它不能应用于

00:05:53.680 --> 00:05:58.730
createOrderSummary 方法 因为这只接受整数类型的参数

00:05:58.730 --> 00:06:02.050
因此向下滚动到 createOrderSummary 的声明处

00:06:03.310 --> 00:06:05.590
现在我需要修改createOrderSummary方法的

00:06:05.590 --> 00:06:07.900
方法签名

00:06:07.900 --> 00:06:10.440
把输入一个参数改为两个 

00:06:10.440 --> 00:06:15.430
因此我将添加一个逗号并在这之后指定第二个参数

00:06:15.430 --> 00:06:20.810
这个数据类型为 boolean型 它叫 addwhippedCream

00:06:20.810 --> 00:06:23.850
你可以随意命名这个参数 不过

00:06:23.850 --> 00:06:27.430
我只想给你展示这个命名和这个名字不一定要匹配

00:06:28.490 --> 00:06:32.580
直到我们修改方法签名 然后更新 Java 文档

00:06:32.580 --> 00:06:35.440
来明确这个参数是什么

00:06:36.510 --> 00:06:38.140
好的 第二个任务完成

00:06:39.600 --> 00:06:42.850
第三个任务是修改订单汇总文字 让它包含

00:06:42.850 --> 00:06:44.450
使用者是否想要生奶

00:06:45.800 --> 00:06:49.490
本质上这意味着我们需要使用这个参数

00:06:49.490 --> 00:06:52.410
去修改我们的订单汇总信息

00:06:52.410 --> 00:06:56.260
在这个屏幕截图中 生奶配料显示在名字下面

00:06:56.260 --> 00:06:58.030
所以在这里添加新的行

00:06:58.030 --> 00:07:01.450
输入 priceMessage 加等号

00:07:01.450 --> 00:07:03.950
去修改现有的价格信息

00:07:03.950 --> 00:07:06.720
之后添加 Add whipped cream ？

00:07:06.720 --> 00:07:10.520
添加空格 再添加布尔变量

00:07:10.520 --> 00:07:14.060
同样的 我可以将 boolean值和字符串相连

00:07:14.060 --> 00:07:16.770
之后全部转换为字符串类型

00:07:16.770 --> 00:07:18.100
酷 现在我试着在设备上运行

00:07:19.230 --> 00:07:20.770
如果我点击复选框

00:07:20.770 --> 00:07:24.720
之后点击 ORDER 按钮它将显示 add whip cream topping true

00:07:24.720 --> 00:07:28.480
除此之外 我忘记了换行

00:07:28.480 --> 00:07:29.410
我现在要修改它

00:07:29.410 --> 00:07:32.590
不过既然来到这顺便检验另一种情况

00:07:32.590 --> 00:07:34.680
因此我不选择这个复方框 之后点击 ORDER 按钮

00:07:34.680 --> 00:07:36.640
它显示 false

00:07:36.640 --> 00:07:40.310
CheckBox 的状态反馈是正确的

00:07:40.310 --> 00:07:43.800
现在来添加一个换行再运行应用试试

00:07:43.800 --> 00:07:46.590
如果我点击复选框然后点击 ORDER 按钮它显示 true

00:07:46.590 --> 00:07:49.480
如果我取消选中然后点击 ORDER 它显示 false

00:07:50.610 --> 00:07:51.550
真了不起

00:07:51.550 --> 00:07:52.810
处理了两种情况

00:07:54.550 --> 00:07:56.750
最后的任务更简单

00:07:56.750 --> 00:08:00.610
因为一旦在验证日志中获取了正确的勾选状态

00:08:00.610 --> 00:08:04.200
它只在屏幕显示

00:08:04.200 --> 00:08:06.000
因为应用一切正常

00:08:06.000 --> 00:08:08.660
我能删除日志信息因为它不被需要了

00:08:08.660 --> 00:08:11.810
之后最后一次运行应用

00:08:11.810 --> 00:08:12.830
好了 干得好

00:08:12.830 --> 00:08:14.260
让我们到下一个任务

