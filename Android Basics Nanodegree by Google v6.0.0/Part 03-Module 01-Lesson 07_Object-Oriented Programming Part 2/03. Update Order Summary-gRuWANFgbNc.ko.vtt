WEBVTT
Kind: captions
Language: ko

00:00:00.450 --> 00:00:03.560
주문 버튼이 클릭되면 
[PseudoCode]가 시작됩니다.

00:00:03.560 --> 00:00:07.020
주문 제출 [method]에 코드를 
추가하여야 함을 이는 나타냅니다.

00:00:08.180 --> 00:00:11.280
그리고 체크 박스의 체크 상태를 
만들어야 합니다.

00:00:11.280 --> 00:00:14.990
뷰 구조에서 뷰의 모든 [method]의 
호출에 앞서

00:00:14.990 --> 00:00:17.570
우선 id를 통해 뷰를 찾아야 합니다.

00:00:17.570 --> 00:00:21.560
일단 뷰 id를 이 체크박스 뷰에 
배열합니다.

00:00:22.770 --> 00:00:25.920
안드로이드 스튜디오의 주요 레이아웃 
[activity]에서 체크박스 레이아웃 뷰를

00:00:25.920 --> 00:00:27.420
찾을 것입니다.

00:00:27.420 --> 00:00:31.690
이제 이곳의 커서가 프리뷰 내의 이 
뷰를 나타냅니다.

00:00:31.690 --> 00:00:34.600
이제 이 뷰에 뷰 ID를 전송하기
위해 행을 추가할 것입니다.

00:00:35.750 --> 00:00:39.140
이제 자바 코드에서, 이 뷰를 참조할 수 
있습니다. 그리고 이것의 상태를

00:00:39.140 --> 00:00:42.140
추출할 수 있습니다.

00:00:42.140 --> 00:00:43.410
[main activity]로 넘어가 봅시다.

00:00:43.410 --> 00:00:46.410
주문 제출 [method]에 코드를 입력할 
것입니다.

00:00:47.700 --> 00:00:51.250
뷰 구조에서 체크박스 자바 객체를 
찾아야 한다는 것을 알고 있습니다.

00:00:52.270 --> 00:00:55.650
체크박스 데이터 유형의 
[whippedCreamCheckBox] 변수를

00:00:55.650 --> 00:00:57.810
만드는 것부터 시작하겠습니다.

00:00:57.810 --> 00:01:01.380
그리고 이 [activity]에서 [findViewById] 
[method]를 호출하겠습니다.

00:01:01.380 --> 00:01:03.950
이는 주어진 ID를 통해 뷰를 찾을 
것입니다.

00:01:03.950 --> 00:01:09.080
다른 레이아웃 파일에 배열한
ID

00:01:09.080 --> 00:01:12.060
(R.id.whipped_cream_checkbox)를 
입력할 것입니다

00:01:12.060 --> 00:01:16.070
요구되는 유형은 [CheckBox]이기 
때문에 바로 오류가 발생합니다.

00:01:16.070 --> 00:01:19.020
왜냐하면 이것의 좌측에 있는 변수 
때문입니다.

00:01:19.020 --> 00:01:22.230
하지만 이 [method]의 반환 값은
[type view]입니다.

00:01:22.230 --> 00:01:23.330
따라서 앞서 배운 바와 같이,

00:01:23.330 --> 00:01:25.710
이 [method] 반환 값을 캐스팅해야 
합니다.

00:01:25.710 --> 00:01:29.380
[CheckBox] 객체가 되도록 이것을 
캐스팅 하도록 하겠습니다.

00:01:29.380 --> 00:01:33.720
캐스팅이 가능한 이유는 [CheckBox]가 
[Views]의 하위 유형이기 때문입니다.

00:01:34.910 --> 00:01:37.480
좋습니다. 이제 [CheckBox] UI에 
[CheckBox]를 나타내는 자바 객체를

00:01:37.480 --> 00:01:40.450
완성하였습니다.

00:01:40.450 --> 00:01:42.570
박스가 체크 되는지 
안 되는지를 확인하기 위해

00:01:42.570 --> 00:01:45.760
객체의 [method]를 
호출하겠습니다.

00:01:45.760 --> 00:01:48.360
[CheckBox] 객체의 어떤 [method]를 
호출해야 하는지를 모를 것입니다.

00:01:48.360 --> 00:01:49.790
아무 문제 없습니다.

00:01:49.790 --> 00:01:52.000
이를 위해 구글 검색을 할 수 있습니다.

00:01:52.000 --> 00:01:55.520
[CheckBox] 안드로이드 검색
그리고 첫 번째 링크를 클릭합니다.

00:01:56.940 --> 00:02:01.560
그리고 앞서 언급된 내용을 보강하기 위해
체크박스는 뷰의 하위 유형이 됩니다.

00:02:01.560 --> 00:02:03.080
이 사이에 다른 뷰들이 있습니다.

00:02:03.080 --> 00:02:04.820
하지만 여전히 이는 
뷰의 하위 유형입니다.

00:02:06.050 --> 00:02:09.120
이곳에 몇몇 자바 코드를 갖기 때문에 
이 [class overview]는

00:02:09.120 --> 00:02:10.780
흥미롭습니다.

00:02:10.780 --> 00:02:13.730
사전에 앱에서 가졌던 이 코드 행을 
갖습니다. id를 통한 뷰 검색을 하고

00:02:13.730 --> 00:02:19.530
있습니다. id를 부여하고 체크 박스 
항목을 되돌립니다.

00:02:19.530 --> 00:02:21.560
이 다음 행은 더욱 흥미롭습니다.

00:02:21.560 --> 00:02:26.630
이는 이 변수 명을 나타내는 체크 
박스가 체크되었음을 나타냅니다.

00:02:26.630 --> 00:02:29.510
이는 입력 [arguments]가 없는 
[method] 호출과 비슷합니다.

00:02:29.510 --> 00:02:33.450
이는 박스가 체크되었는지를 알려주기 
위해 나타나고 O 또는 X 값을

00:02:33.450 --> 00:02:37.580
반환합니다. 하지만 이를 확실히 하기 위해 
체크 박스 안내를 확인해 보도록 합시다.

00:02:37.580 --> 00:02:42.740
스크롤을 통해 살펴보면, [CheckBox] 
xml 코드와 와 자바 코드들을 확인할

00:02:42.740 --> 00:02:44.770
수 있습니다.

00:02:45.910 --> 00:02:49.910
이 [method]는 [CheckBox]가 클릭되면 
호출되는 것 같습니다.

00:02:49.910 --> 00:02:53.840
이 [method name]은 xml에 나온 
[method name]과 일치시킵니다.

00:02:53.840 --> 00:02:58.530
입력된 뷰가 체크 박스 뷰라고 
생각합니다.

00:02:58.530 --> 00:03:00.800
그리고 이를 [CheckBox]로 캐스팅할

00:03:00.800 --> 00:03:05.360
수 있으며 [isChecked]를 호출하였고 
반환 값은 불 연산자입니다.

00:03:05.360 --> 00:03:09.380
[comment]는 또한 뷰의 현재 체크 
상황에 대해 추가로 설명합니다.

00:03:09.380 --> 00:03:11.880
이것이 필요한 것 같습니다.

00:03:11.880 --> 00:03:13.520
[isChecked] [method]를 사용해보도록 합시다.

00:03:14.640 --> 00:03:18.010
첫 번째로 [CheckBox] 객체의 변수 
명을 입력합니다.

00:03:18.010 --> 00:03:20.210
[whippedCreamCheckBox] 입니다.

00:03:20.210 --> 00:03:23.020
그리고 여기에 [method]를 호출하기 
위해 [dot]을 추가합니다.

00:03:23.020 --> 00:03:26.290
[isChecked]의 입력으로 시작합니다.
그리고 팝업 창이 나타납니다.

00:03:26.290 --> 00:03:29.400
이 제안 내용을 사용하기 위해 엔터를 
칩니다.

00:03:29.400 --> 00:03:33.150
우측 면인 이곳에서, 이 [method]의 
반환 값은 무엇이냐고 묻고 이는 불

00:03:33.150 --> 00:03:35.150
연산자를 반환한다고 나타냅니다.

00:03:35.150 --> 00:03:39.330
이 제안을 사용하고 난 후에, 
이 [method] 호출의 좌측 면으로

00:03:39.330 --> 00:03:44.110
가보겠습니다. 그리고 이 결과를 불 
연산자 변수에 저장할 것입니다.

00:03:44.110 --> 00:03:48.260
이 불 연산자 변수, [hasWhippedCream]를 
호출하고 엔터를 치겠습니다.

00:03:48.260 --> 00:03:52.860
재설정을 위해, 
[whippedCreamCheckBox] 자바 객체에

00:03:52.860 --> 00:03:54.690
[method]를 호출하고 [method]는 
[isChecked]로 호출됩니다.

00:03:54.690 --> 00:03:56.750
이는 불 연산자 반환 값을 갖습니다.

00:03:56.750 --> 00:03:59.210
그리고 좌측 이곳에 
저장됩니다.

00:03:59.210 --> 00:04:01.970
이 변수에서 [hasWhippedCream]를 
호출합니다.

00:04:01.970 --> 00:04:03.220
이제 첫 번째 작업이 완료되었습니다.

00:04:03.220 --> 00:04:06.530
또한 이 변수를 
로그할 수 있으며

00:04:06.530 --> 00:04:09.130
이를 통해 바른 경로인지를 확인할 수 
있다고 언급하였습니다.

00:04:09.130 --> 00:04:10.870
다음 행에서
로그 메시지를 추가할 것입니다.

00:04:12.050 --> 00:04:14.150
첫 번째 [argument]는 태그 명입니다.

00:04:14.150 --> 00:04:17.100
[MainActivity]인 클래스의 명칭을 
사용할 것입니다.

00:04:17.100 --> 00:04:19.810
그리고 저만의 메시지를 입력할 것입니다.

00:04:19.810 --> 00:04:22.058
휘핑 크림을 추가한다고 입력할 것입니다.

00:04:22.058 --> 00:04:26.660
그리고 불 연산자 변수를 추가합니다.

00:04:26.660 --> 00:04:30.930
이 문자열을 이곳의 불 연산자 변수와 
연결하여

00:04:30.930 --> 00:04:34.560
이 불 연산자
값을 또한 문자열로 변경합니다.

00:04:34.560 --> 00:04:38.319
그리고 문자는 휘핑 크림이 더해진 
것이 O인지 X인지를 알려줍니다.

00:04:39.400 --> 00:04:41.330
장치에서 앱을 구동해 봅시다.

00:04:41.330 --> 00:04:43.780
그리고 실질적으로 바른 로그 
메시지를 나타내는지를 확인해 봅시다.

00:04:44.810 --> 00:04:48.170
이곳의 제어를 통해 로그 창의 크기를 
증가시켰습니다.

00:04:48.170 --> 00:04:50.030
이제 휘핑 크림 체크 박스를 
클릭하고

00:04:50.030 --> 00:04:53.850
주문 버튼을 누르면 이곳 아래에서 
휘핑 크림이 추가되었는지를 나타내는

00:04:53.850 --> 00:04:56.319
메시지를 볼 수 있을 것입니다.

00:04:57.360 --> 00:04:59.770
실질적 메시지 확인을 위해 스크롤을 
통해 이를 살펴볼 것입니다.

00:05:00.790 --> 00:05:03.540
이상이 없는지 확인해 봅시다.

00:05:03.540 --> 00:05:06.210
이 박스를 체크하고 주문을 누를 
것입니다.

00:05:06.210 --> 00:05:10.101
좋습니다. 이제 새로운 메시지가 출력되고 
이는 [main activity]를 나타낼 것입니다.

00:05:10.101 --> 00:05:12.335
휘핑 크림 추가: O

00:05:12.335 --> 00:05:15.215
체크박스가 체크되었기 때문에 
정확합니다.

00:05:15.215 --> 00:05:20.645
이 박스의 체크를 해제하고 주문을 
누르면 X가 나타날 것입니다.

00:05:20.645 --> 00:05:24.825
다시 한 번 오른쪽을 살펴보면 휘핑 
크림 추가: X가 나타납니다.

00:05:24.825 --> 00:05:28.475
좋습니다. 지금까지는 체크박스 뷰 
검색을 위한 코드가 정확한 것

00:05:28.475 --> 00:05:32.195
같습니다.
그리고 체크 상태도 이상이 없습니다.

00:05:32.195 --> 00:05:33.945
다음 작업을 진행해 보도록 합시다.

00:05:35.410 --> 00:05:40.000
좋습니다. 이제 주문 요약 [method]에 
불 연산자 변수를 입력해보도록 합시다.

00:05:40.000 --> 00:05:43.580
[createOrderSummary] [method]에 
다른 [argument]를 입력하려면 이곳에

00:05:43.580 --> 00:05:48.410
콤마를 추가하고 [hasWhippedCream] 
변수를 입력하면 됩니다.

00:05:49.820 --> 00:05:53.680
이는 정수 파라미터를 필요로 하기 
때문에 즉시 [method

00:05:53.680 --> 00:05:58.730
createOrderSummary]에 적용될 수 
없습니다 라는 오류가 발생됩니다.

00:05:58.730 --> 00:06:02.050
[createOrderSummary]가 규정된 
곳까지 스크롤을 내려 봅시다.

00:06:03.310 --> 00:06:05.590
[createOrderSummary] [method]의 
[method signature]를

00:06:05.590 --> 00:06:07.900
수정해야 합니다.

00:06:07.900 --> 00:06:10.440
입력 파라미터는 한 개가 아닌 
두 개가 필요합니다.

00:06:10.440 --> 00:06:15.430
따라서 콤마를 추가하고 두 번째 
파라미터를 명시할 것입니다.

00:06:15.430 --> 00:06:20.810
데이터 유형은 불 연산자이어야 하고
이를 [addwhippedCream]로 정할 것입니다.

00:06:20.810 --> 00:06:23.850
입력 파라미터는 원하는 명칭으로 
정할 수 있습니다. 하지만 이러한

00:06:23.850 --> 00:06:27.430
명칭은 이곳의 명칭과 일치할 필요는 
없다는 것을 보여주고자 합니다.

00:06:28.490 --> 00:06:32.580
이곳에서 [method signature]를 
변경하였기 때문에 이 입력

00:06:32.580 --> 00:06:35.440
파라미터가 무엇인지를 명시하기 위해 
[java doc]도 업데이트 해야 합니다.

00:06:36.510 --> 00:06:38.140
좋습니다. 두 번째 작업도 완료되었습니다.

00:06:39.600 --> 00:06:42.850
세 번째 작업은 주면 요약 문자를 휘핑 
크림 추가 내용을 포함하도록

00:06:42.850 --> 00:06:44.450
변경하는 것입니다.

00:06:45.800 --> 00:06:49.490
기본적으로 주문 요약 메시지 
변경에서 이곳의 입력 파라미터를

00:06:49.490 --> 00:06:52.410
사용해야 합니다.

00:06:52.410 --> 00:06:56.260
스크린 샷에서 휘핑 크림 토핑 행은 
명칭 아래에 위치합니다.

00:06:56.260 --> 00:06:58.030
따라서 이곳에 새 행을 추가합시다.

00:06:58.030 --> 00:07:01.450
기존 가격 메시지를 수정하기 위해 
가격 메시지 + =을

00:07:01.450 --> 00:07:03.950
입력할 것입니다.

00:07:03.950 --> 00:07:06.720
그리고 휘핑 크림 추가? 행을 추가할 것입니다.

00:07:06.720 --> 00:07:10.520
공간을 추가할 것입니다. 그리고 불 
연산자 변수를 추가할 것입니다.

00:07:10.520 --> 00:07:14.060
다시 한 번, 불 연산자 값을 가진 
문자열의 문자를 [catonate]할 수

00:07:14.060 --> 00:07:16.770
있습니다. 그리고 이는 이 모든 내용을 
문자열로 전환합니다.

00:07:16.770 --> 00:07:18.100
좋습니다. 이제 장치에서 실행해 봅시다.

00:07:19.230 --> 00:07:20.770
체크 박스 버튼을 클릭하고

00:07:20.770 --> 00:07:24.720
주문 버튼을 클릭하면 휘핑 크림 토핑 
추가 O가 나타내야 합니다.

00:07:24.720 --> 00:07:28.480
그리고 다시
새로운 행의 특성을 빼먹었습니다.

00:07:28.480 --> 00:07:29.410
따라서 이를 바로 수정해야 합니다.

00:07:29.410 --> 00:07:32.590
나는 이곳에 있기 때문에 다른 경우를 
확인해 보아야 합니다.

00:07:32.590 --> 00:07:34.680
이 상자의 체크를 해제하고
주문 버튼을 누를 것입니다.

00:07:34.680 --> 00:07:36.640
그리고 X를 나타냅니다.

00:07:36.640 --> 00:07:40.310
체크된 상자의 상태를 이상 없이 잘 
나타냅니다.

00:07:40.310 --> 00:07:43.800
새로운 행의 특성을 추가하고
앱을 다시 실행시켜 봅시다.

00:07:43.800 --> 00:07:46.590
체크 박스를 클릭하고 주문 버튼을 
누르면 O가 표시됩니다.

00:07:46.590 --> 00:07:49.480
체크를 해제하고 주문을 클릭하면
X가 나타납니다.

00:07:50.610 --> 00:07:51.550
좋습니다.

00:07:51.550 --> 00:07:52.810
두 가지다 문제가 없습니다.

00:07:54.550 --> 00:07:56.750
이 작업의 다음 부분은
더욱 쉽습니다.

00:07:56.750 --> 00:08:00.610
올바른 체크 상태를 
로그에서 확인하면

00:08:00.610 --> 00:08:04.200
나머지는 화면에 표시하는 것 
뿐이기 때문입니다.

00:08:04.200 --> 00:08:06.000
앱 내에서 문제가 
없기 때문에

00:08:06.000 --> 00:08:08.660
더 이상 필요가 없는 
로그 메시지를 제거할 수 있습니다.

00:08:08.660 --> 00:08:11.810
그리고 마지막으로 앱을 실행합니다.

00:08:11.810 --> 00:08:12.830
좋습니다. 문제 없습니다.

00:08:12.830 --> 00:08:14.260
다음 작업으로 넘어가도록 합시다.

