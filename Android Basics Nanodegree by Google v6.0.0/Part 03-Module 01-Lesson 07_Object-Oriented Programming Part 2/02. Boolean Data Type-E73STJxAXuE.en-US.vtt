WEBVTT
Kind: captions
Language: en-US

00:00:00.240 --> 00:00:03.040
If I check this box in the app
then it'll add the whipped cream

00:00:03.040 --> 00:00:03.850
topping to our coffee.

00:00:03.850 --> 00:00:06.445
&gt;&gt; That will make
the coffee more delicious.

00:00:06.445 --> 00:00:09.250
&gt;&gt; Yeah.
&gt;&gt; And perhaps more expensive.

00:00:09.250 --> 00:00:10.360
&gt;&gt; True.

00:00:10.360 --> 00:00:13.396
Eventually we're going to have to learn
how to create an order summary and

00:00:13.396 --> 00:00:14.400
then send it off.

00:00:14.400 --> 00:00:17.238
&gt;&gt; Oh, so when we send the order
summary, that's when we get the coffee.

00:00:17.238 --> 00:00:17.868
Right?
&gt;&gt; Yeah.

00:00:17.868 --> 00:00:18.450
&gt;&gt; That's good.

00:00:18.450 --> 00:00:21.320
&gt;&gt; The problem is we don't exactly
know if the box is checked or

00:00:21.320 --> 00:00:23.250
not
&gt;&gt; Wait, you just checked the box.

00:00:23.250 --> 00:00:24.280
I know you checked the box.

00:00:24.280 --> 00:00:28.180
&gt;&gt; Well it's easy for a human to see,
but it's hard for the phone to see.

00:00:28.180 --> 00:00:30.205
&gt;&gt; Who you calling a human?

00:00:30.205 --> 00:00:33.700
&gt;&gt; Anyways,
when you add the CheckBox to your app,

00:00:33.700 --> 00:00:36.688
then it's actually
creating a Java object.

00:00:36.688 --> 00:00:38.168
[SOUND] Like this.

00:00:38.168 --> 00:00:40.258
&gt;&gt; How many of these
boxes are out there?

00:00:40.258 --> 00:00:45.300
&gt;&gt; Many, because in fact, inside
the CheckBox object we have a variable.

00:00:45.300 --> 00:00:46.150
&gt;&gt; Okay.

00:00:46.150 --> 00:00:48.020
&gt;&gt; A Boolean variable.

00:00:48.020 --> 00:00:48.520
&gt;&gt; Boolean?

00:00:48.520 --> 00:00:50.030
Haven't heard that word before.

00:00:50.030 --> 00:00:52.410
&gt;&gt; Well a Boolean just means
that there's two states here.

00:00:52.410 --> 00:00:55.080
&gt;&gt; Like New York and California?

00:00:55.080 --> 00:00:56.635
&gt;&gt; No.
It's more like a light switch.

00:00:56.635 --> 00:00:58.585
[SOUND]
&gt;&gt; Damn it.

00:00:58.585 --> 00:01:00.550
How do you do this?

00:01:00.550 --> 00:01:01.180
Anyways.

00:01:01.180 --> 00:01:04.890
So you're saying when we created
a CheckBox, we had a Java object.

00:01:04.890 --> 00:01:07.830
Inside of that we have
a variable of type Boolean.

00:01:07.830 --> 00:01:08.460
&gt;&gt; Right.

00:01:08.460 --> 00:01:11.450
&gt;&gt; And the type of that
variable is either on or off.

00:01:11.450 --> 00:01:13.300
&gt;&gt; The value of it is yeah, on or off.

00:01:13.300 --> 00:01:17.230
&gt;&gt; Okay, so
I can turn the value from on to off.

00:01:17.230 --> 00:01:18.470
&gt;&gt; I can't see anything.

00:01:18.470 --> 00:01:19.610
Can you turn it back on?

00:01:19.610 --> 00:01:20.650
We're not done yet.

00:01:20.650 --> 00:01:23.720
&gt;&gt; Oh, okay.
&gt;&gt; Okay, so

00:01:23.720 --> 00:01:26.870
Boolean can have two states,
true or false.

00:01:26.870 --> 00:01:29.340
And that represents the checked
state of this CheckBox.

00:01:29.340 --> 00:01:32.390
&gt;&gt; Whoa, that's a lot of
checks in that statement.

00:01:32.390 --> 00:01:33.370
Let's just back up.

00:01:33.370 --> 00:01:34.340
I'm going to summarize.

00:01:34.340 --> 00:01:35.670
Tell me if I got this wrong.

00:01:35.670 --> 00:01:38.890
So when we create the CheckBox
we created this Java object.

00:01:38.890 --> 00:01:41.070
Inside of that Java object
we have a variable.

00:01:41.070 --> 00:01:46.580
Its type happens to be Boolean, and that
type of variable can hold two values,

00:01:46.580 --> 00:01:49.840
either on or off, one or
zero, true or false.

00:01:49.840 --> 00:01:50.600
&gt;&gt; Exactly.

00:01:50.600 --> 00:01:52.775
&gt;&gt; Okay.
So let's play with the Boolean.

00:01:52.775 --> 00:01:56.255
[SOUND]
&gt;&gt; Okay.

00:01:56.255 --> 00:01:57.410
it's time to take that away from you.

00:01:57.410 --> 00:02:01.010
[LAUGH]
Let's look at what the documentation

00:02:01.010 --> 00:02:01.870
says about Booleans.

00:02:01.870 --> 00:02:04.880
I'm going to Google search for
Java data type.

00:02:04.880 --> 00:02:10.090
That's because Boolean is one of
the primitive data types in Java.

00:02:10.090 --> 00:02:12.400
Primitive, meaning basic data types.

00:02:12.400 --> 00:02:15.110
I'm going to scroll through
this list of primitive

00:02:15.110 --> 00:02:17.440
data types until I find Boolean.

00:02:17.440 --> 00:02:18.570
And here it is.

00:02:18.570 --> 00:02:23.220
It says the Boolean data type only has
two possible values, true and false.

00:02:23.220 --> 00:02:26.360
It's used for simple flags that
track true and false conditions.

00:02:26.360 --> 00:02:29.590
Then it says that a Boolean
takes up one bit of information.

00:02:29.590 --> 00:02:32.980
This is about how much space
it takes up on a computer.

00:02:32.980 --> 00:02:36.920
Anyways, the important part is that
a Boolean has two possible values.

00:02:36.920 --> 00:02:38.120
You might think that true and

00:02:38.120 --> 00:02:41.610
false are actually string values
because they're text, but

00:02:41.610 --> 00:02:45.800
actually, they're not in double
quotations, so they're not strings.

00:02:45.800 --> 00:02:48.220
They're actually fixed literal values.

00:02:48.220 --> 00:02:51.870
Do you remember how fixed literal
values are zero and one or

00:02:51.870 --> 00:02:54.400
specific strings like hello or today?

00:02:54.400 --> 00:02:57.380
That means that when you create
a Boolean variable you can set it to one

00:02:57.380 --> 00:02:58.300
of these two values.

00:02:59.350 --> 00:03:03.498
Going back to our box analogy, if we
have a variable called isChecked and

00:03:03.498 --> 00:03:07.102
it stores information on whether
a CheckBox is checked or not,

00:03:07.102 --> 00:03:10.710
then inside this Boolean variable
we can store the value true.

00:03:10.710 --> 00:03:14.800
Then we can interpret this as
the CheckBox being checked.

00:03:14.800 --> 00:03:18.060
Or we can store the value
false inside this variable.

00:03:18.060 --> 00:03:22.260
Then we could interpret this as
the CheckBox not being checked.

00:03:22.260 --> 00:03:26.590
A Boolean is great for
having two possible states.

00:03:26.590 --> 00:03:30.850
Then it's up to you as a developer to
interpret what true and false maps to.

00:03:31.850 --> 00:03:35.790
If you need more than two possible
states then you can't use a Boolean.

00:03:35.790 --> 00:03:38.960
You need to use something else
like a string or an integer.

00:03:38.960 --> 00:03:42.840
Declaring a Boolean variable is
very similar to declaring an int.

00:03:42.840 --> 00:03:45.950
It's not as complicated as
creating an object variable.

00:03:45.950 --> 00:03:49.850
It follows the format of
Boolean hasWhippedCream = true.

00:03:49.850 --> 00:03:53.880
We have the data type, which is Boolean,
followed by the variable name, which

00:03:53.880 --> 00:03:58.225
can be anything we want, and then the
initial value which is true or false.

00:03:58.225 --> 00:04:00.020
Here are a couple of other examples.

00:04:00.020 --> 00:04:02.339
This is where I set the same
Boolean to be false.

00:04:03.540 --> 00:04:05.850
And here's a different
Boolean called isRegistered,

00:04:05.850 --> 00:04:08.360
and I just initialize that to false.

00:04:08.360 --> 00:04:12.400
For example, this variable could
represent whether a user using our app

00:04:12.400 --> 00:04:15.050
actually has a registered
account with us.

00:04:15.050 --> 00:04:16.329
Here's another example.

00:04:16.329 --> 00:04:19.470
Boolean isOrderForPickup = true.

00:04:19.470 --> 00:04:22.740
This variable could represent whether
someone putting in an order for

00:04:22.740 --> 00:04:26.080
some coffee wants to pick it up at
the store or have it delivered.

00:04:26.080 --> 00:04:29.780
While our app doesn't support these
features, you can imagine how using

00:04:29.780 --> 00:04:33.960
Booleans could be useful because these
things have two possible states.

00:04:35.020 --> 00:04:38.170
Also notice the way I
named these variables.

00:04:38.170 --> 00:04:41.070
A Boolean variable name has to
follow the same conventions as other

00:04:41.070 --> 00:04:42.520
variable names.

00:04:42.520 --> 00:04:46.780
However, it's common to start with
something like has something or

00:04:46.780 --> 00:04:48.620
is something.

00:04:48.620 --> 00:04:53.450
When you see names with has or is,
it's likely a Boolean but not always.

00:04:53.450 --> 00:04:56.470
What I'm about to show you is
a little more advanced and optional.

00:04:56.470 --> 00:04:58.180
So if you're interested
you can follow along.

00:04:59.230 --> 00:05:01.950
This is the documentation page for
the CheckBox class.

00:05:01.950 --> 00:05:05.320
I'm going to click on view source
to look at the source code for

00:05:05.320 --> 00:05:06.960
the CheckBox class.

00:05:06.960 --> 00:05:09.820
This code is saved in
the CheckBox.java file.

00:05:09.820 --> 00:05:12.865
I want to show you that there's
a Boolean variable inside of this

00:05:12.865 --> 00:05:14.220
CheckBox class.

00:05:14.220 --> 00:05:18.450
But I don't see it here, so
let's check the super class.

00:05:18.450 --> 00:05:21.200
If this value is true then
the CheckBox is checked.

00:05:21.200 --> 00:05:24.320
If it's false then
the box is not checked.

00:05:24.320 --> 00:05:27.800
You'll notice that this name doesn't
contain the word has or is, but

00:05:27.800 --> 00:05:30.850
if you go down here you'll see
that the other Boolean variables

00:05:30.850 --> 00:05:32.900
do have the word has in it.

00:05:32.900 --> 00:05:34.740
It's all a matter of preference for
the developer.

00:05:34.740 --> 00:05:37.770
In this case, it's probably pretty
clear that this is a Boolean for

00:05:37.770 --> 00:05:38.494
the checked state.

00:05:39.610 --> 00:05:43.750
And while this Boolean is not found
directly in the CheckBox.java file,

00:05:43.750 --> 00:05:46.640
since we're inheriting from
the CompoundButton class,

00:05:46.640 --> 00:05:49.270
we get this checked Boolean for free.

00:05:49.270 --> 00:05:51.110
In general,
looking at the source code for

00:05:51.110 --> 00:05:54.220
the Android classes
isn't required at all.

00:05:54.220 --> 00:05:55.480
To develop Android apps,

00:05:55.480 --> 00:05:59.250
all you need to know is how to
look at the documentation pages.

00:05:59.250 --> 00:06:02.470
Okay, so in this video we learned
about how Booleans can store

00:06:02.470 --> 00:06:03.860
a value of true or false.

00:06:04.960 --> 00:06:08.000
In this quiz,
practice creating a Boolean variable and

00:06:08.000 --> 00:06:12.420
updating it by typing out the lines
of code in the boxes provided.

00:06:12.420 --> 00:06:15.720
Type this line exactly in here and
same for the other boxes.

00:06:16.990 --> 00:06:19.700
Then I want you to think about
other good use cases for

00:06:19.700 --> 00:06:21.720
storing information in a Boolean.

00:06:21.720 --> 00:06:23.550
Think about what has
two possible states.

00:06:25.110 --> 00:06:28.200
Do you ever use alarm clock
on your phone to wake up?

00:06:28.200 --> 00:06:30.380
Well chances are that when
you turn your alarm on or

00:06:30.380 --> 00:06:33.530
off, that that's actually getting
stored as a Boolean variable.

00:06:34.680 --> 00:06:37.310
Another possible Boolean
variable is whether you want to

00:06:37.310 --> 00:06:38.380
repeat an alarm or not.

00:06:39.600 --> 00:06:43.490
In the Gmail app, if I really want to
star this special message that I got

00:06:43.490 --> 00:06:48.960
from the Gmail team in 2011,
then I can star it, or I can unstar it.

00:06:48.960 --> 00:06:52.140
Since this has two states, it could
be stored as a Boolean variable.

00:06:52.140 --> 00:06:55.890
A possible Boolean variable name for
that could be isStarred.

00:06:55.890 --> 00:06:59.880
You could also use a Boolean variable
to keep track of whether an email

00:06:59.880 --> 00:07:01.210
is read or not.

00:07:01.210 --> 00:07:04.230
This email is unread,
whereas this email is already read.

00:07:05.300 --> 00:07:07.130
Speaking of YouTube let's
go to the YouTube app.

00:07:08.560 --> 00:07:11.140
In the YouTube app,
when it displays a list of videos,

00:07:11.140 --> 00:07:14.090
if I've already watched it,
then it shows this little text box here

00:07:14.090 --> 00:07:17.770
that says watched in the top left
corner of the thumbnail image.

00:07:17.770 --> 00:07:19.359
The fact that I've watched or

00:07:19.359 --> 00:07:22.870
not watched the video could also
be stored as a Boolean variable.

00:07:22.870 --> 00:07:25.140
I just showed you some use cases for
Booleans, so

00:07:25.140 --> 00:07:27.180
try to come up with your own here.

00:07:27.180 --> 00:07:29.790
You can browse existing Android apps for
some ideas.

