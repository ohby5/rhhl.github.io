WEBVTT
Kind: captions
Language: zh-CN

00:00:00.320 --> 00:00:02.410
在应用中 你也许注意到所有的标题看起来都是

00:00:02.410 --> 00:00:03.430
相同的样式

00:00:04.430 --> 00:00:07.210
还有在 XML 中 你必须给这些标题

00:00:07.210 --> 00:00:11.510
添加相同的属性  如 Toppings 标题

00:00:11.510 --> 00:00:15.710
Quantity 标题 以及 Order Summary 标题当我们使用的时候

00:00:15.710 --> 00:00:18.170
如果你的很多 View 拥有相同的样式

00:00:18.170 --> 00:00:20.990
它是一个减少重复的很好的练习

00:00:20.990 --> 00:00:23.160
在一个地方定义样式 然后

00:00:23.160 --> 00:00:25.470
在需要的地方引用它

00:00:25.470 --> 00:00:29.174
这样的话 如果和你一起工作的设计师想要在应用中改变所有标题样式

00:00:29.174 --> 00:00:31.980
你只需要在定义标题样式的地方修改即可

00:00:31.980 --> 00:00:33.856
所有引用标题的地方的样式也会随之更新

00:00:33.856 --> 00:00:37.679
为了实现它 我们需要学习在的应用中定义样式

00:00:37.679 --> 00:00:41.680
样式就是能够应用于单一 View 的属性的集合

00:00:41.680 --> 00:00:44.730
属性包括高度 宽度 内边距 字体颜色

00:00:44.730 --> 00:00:46.430
字体大小 还有其他

00:00:46.430 --> 00:00:48.390
让我们来看一个例子

00:00:48.390 --> 00:00:50.970
在布局文件里 这个 TextView 定义了一组

00:00:50.970 --> 00:00:52.130
不同的属性

00:00:52.130 --> 00:00:56.020
但是我们可以使用一行代码引用一个样式来代替

00:00:56.020 --> 00:00:57.210
这些属性

00:00:57.210 --> 00:01:01.250
使用样式的一个优势就是你可以把 View 的设计和

00:01:01.250 --> 00:01:04.769
的内容分开

00:01:04.769 --> 00:01:07.909
最后 这两个视图在设备上看起来是一样的

00:01:09.260 --> 00:01:12.770
我们看一下 CodeFont 样式是在哪里定义的

00:01:12.770 --> 00:01:16.170
你可以在 styles.xml 文件中定义样式

00:01:16.170 --> 00:01:19.960
这个文件在你的应用的 res/values 目录下

00:01:19.960 --> 00:01:25.550
现在 在这个 XML 文件里 根节点必须是 resources 元素

00:01:25.550 --> 00:01:30.060
在它的里面 你可以定义任何你想要的元素

00:01:30.060 --> 00:01:34.770
例如 这就是一个样式 在它的下面你可以添加更多的样式

00:01:34.770 --> 00:01:38.200
对于一个给定样式的 XML 元素 你必须指定样式的名字

00:01:38.200 --> 00:01:42.030
在这个例子里 它的名字是 CodeFont 但是你也可以使用其他的名字

00:01:42.030 --> 00:01:45.200
然后你可以在这个样式里添加

00:01:45.200 --> 00:01:46.380
一系列不同的属性

00:01:46.380 --> 00:01:49.770
属性通过 item 元素定义

00:01:49.770 --> 00:01:53.420
对于一个给定的 item 你必须指定属性的名称

00:01:53.420 --> 00:01:59.550
并且在开始标签和结束标签之间指定属性的值

00:01:59.550 --> 00:02:02.860
如果你想以现有的样式为基础创建新的样式

00:02:02.860 --> 00:02:04.820
你可以在这指定父样式

00:02:04.820 --> 00:02:07.060
但这不是必要操作

00:02:07.060 --> 00:02:07.840
是可选的

00:02:07.840 --> 00:02:09.560
你可以只定义样式

00:02:09.560 --> 00:02:12.260
然后添加你想要的属性

00:02:12.260 --> 00:02:17.660
然后在你的布局文件里 你只需要引用 CodeFont 样式就可以了

00:02:17.660 --> 00:02:20.560
这和我们在应用里引用其他资源的方式很相似

00:02:20.560 --> 00:02:23.590
如 使用 @drawables 引用图片资源

00:02:23.590 --> 00:02:27.350
这里我们通过使用 @style/ 加样式的名字引用样式

00:02:27.350 --> 00:02:30.530
注意我们使用 style = 而不是

00:02:30.530 --> 00:02:32.410
Android: style

00:02:32.410 --> 00:02:34.390
我们回到应用中看一个例子

00:02:34.390 --> 00:02:38.270
我们想要让所有的标题都是深紫色

00:02:38.270 --> 00:02:41.580
字号是20  斜体

00:02:41.580 --> 00:02:45.070
我们可以给每个标题的 TextView 设置相同的属性

00:02:45.070 --> 00:02:48.230
我们也可以定义一个单独的样式 声明一个名字 

00:02:48.230 --> 00:02:50.840
然后在我们需要的地方引用它

00:02:50.840 --> 00:02:54.900
为了定义一个样式 打开 res/values 文件夹

00:02:54.900 --> 00:02:57.540
找到 styles.XML 文件

00:02:57.540 --> 00:03:00.980
如果它不存在 你可以右击

00:03:00.980 --> 00:03:06.340
然后选择 new 再选择 Values resource file 创建一个

00:03:06.340 --> 00:03:10.800
就像我们先前看到的 这个 XML 文件同定义字符串的 XML文件一样

00:03:10.800 --> 00:03:12.520
不是定义布局文件的

00:03:12.520 --> 00:03:14.100
它是一个资源文件

00:03:14.100 --> 00:03:17.390
这个例子里 它定义了样式资源列表

00:03:17.390 --> 00:03:20.670
而 strings.xml 文件是用来定义字符串资源

00:03:22.110 --> 00:03:23.740
顺便说一下 这是注释

00:03:23.740 --> 00:03:27.080
所以你可以在开始标签和结束标签之间

00:03:27.080 --> 00:03:29.010
添加任意注释

00:03:29.010 --> 00:03:32.030
它是用来描述在它下面的 XML 文件的

00:03:33.270 --> 00:03:36.930
我已经定义了一个叫做 CustomText 的样式

00:03:36.930 --> 00:03:38.550
在它里面有三个属性

00:03:39.680 --> 00:03:43.270
这是三个可以应用于 TextView 的属性

00:03:43.270 --> 00:03:46.773
它们分别是 android:textSize  android:textColor

00:03:46.773 --> 00:03:49.080
和 android:textStyle

00:03:49.080 --> 00:03:52.750
在 item 的结束标签和开始标签之间

00:03:52.750 --> 00:03:54.568
定义了每个属性的值

00:03:54.568 --> 00:03:57.740
它们是 20sp 的字号 紫色的字体颜色

00:03:57.740 --> 00:04:00.020
和斜体的字体样式

00:04:00.020 --> 00:04:03.500
这里的属性取决于你将样式应用

00:04:03.500 --> 00:04:04.970
到什么 View 中

00:04:04.970 --> 00:04:08.600
如果你想把 CustomText 样式应用到 TextView 中

00:04:08.600 --> 00:04:12.320
那么 你熟悉的 TextView 的属性都可以写在这里

00:04:12.320 --> 00:04:14.220
如果样式将要应用到 ImageView 中

00:04:14.220 --> 00:04:17.149
然后 ImageView 的属性可以定义在这里

00:04:17.149 --> 00:04:18.870
我们复制这个样式的名字

00:04:18.870 --> 00:04:20.790
然后在 activity_main 布局文件里使用

00:04:20.790 --> 00:04:26.260
对于 Toppings 标题 我们在 TextView 中应用这个样式

00:04:26.260 --> 00:04:29.870
我们使用 @style/ 加

00:04:29.870 --> 00:04:31.400
样式的名称引用样式

00:04:31.400 --> 00:04:33.880
然后我就可以把样式里已经定义的

00:04:33.880 --> 00:04:36.230
属性删除

00:04:36.230 --> 00:04:39.090
对于这个示例 我不想要标题大写

00:04:39.090 --> 00:04:40.780
所以把这个属性删除

00:04:40.780 --> 00:04:43.660
如果我在这里定义了不同的文本样式或指定了不同的文本颜色

00:04:43.660 --> 00:04:45.970
我也会删除 现在在这我有这个样式

00:04:47.300 --> 00:04:50.530
现在我将要把这个样式应用于其他标题

00:04:50.530 --> 00:04:53.240
对于 quantity 标题 我会删除这个

00:04:53.240 --> 00:04:56.130
TextAllCaps 属性替换为这个样式

00:04:57.160 --> 00:04:59.900
这就是应用中所有标题 TextView 使用

00:04:59.900 --> 00:05:01.960
新样式后的样子

00:05:01.960 --> 00:05:04.390
我在这个样式中可以添加其他的属性

00:05:04.390 --> 00:05:08.410
但是这是需要考虑的 它取决于你自己的喜好

00:05:08.410 --> 00:05:11.820
有时你想要在布局文件里定义属性

00:05:11.820 --> 00:05:13.700
有时把它写在样式文件里会更好

00:05:13.700 --> 00:05:17.790
好了 刚才例子中的样式实际上并不是我们需要的样式

00:05:17.790 --> 00:05:20.680
相反 你需要使用这些属性

00:05:20.680 --> 00:05:25.620
我想要让标题的高度为 48dp 文本垂直居中

00:05:25.620 --> 00:05:28.860
并且大写

00:05:28.860 --> 00:05:30.970
这些值来自 Material Design 规范

00:05:30.970 --> 00:05:33.725
你可以在讲师注释中看到更多细节

00:05:33.725 --> 00:05:36.635
我们还没有使用过 gravity 属性  但是

00:05:36.635 --> 00:05:40.925
它的功能是在文本区域里设置文本垂直居中

00:05:40.925 --> 00:05:44.365
所以我想让你在 styles.xml 文件里创建一个

00:05:44.365 --> 00:05:45.767
叫做 HeaderTextStyle 的新的样式

00:05:45.767 --> 00:05:48.227
它应该包含这5个属性

00:05:48.227 --> 00:05:52.557
然后将这个样式应用到布局里的所有标题的 TextView 上

00:05:52.557 --> 00:05:55.447
让这些 TextView 都引用我们定义的样式

00:05:55.447 --> 00:05:59.108
确保删除布局文件里不必要的属性

00:05:59.108 --> 00:06:02.828
例如 你不需要再设置这个标题的 TextSize 属性

00:06:02.828 --> 00:06:07.118
因为在样式中已经指定了这个属性

00:06:07.118 --> 00:06:10.098
这就是将这个样式应用到所有标题 TextView 后

00:06:10.098 --> 00:06:11.798
应用的样子

00:06:11.798 --> 00:06:13.188
做完这些后勾选这个框

