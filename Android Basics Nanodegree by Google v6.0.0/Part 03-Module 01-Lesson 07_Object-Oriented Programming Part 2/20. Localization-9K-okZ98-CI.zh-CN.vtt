WEBVTT
Kind: captions
Language: zh-CN

00:00:00.560 --> 00:00:02.650
当我们把应用发布在 Google Play store 时

00:00:02.650 --> 00:00:04.980
我们会有大量的用户

00:00:04.980 --> 00:00:08.770
很难预测我们的应用会在哪种类型的设备上运行

00:00:08.770 --> 00:00:13.219
也许是手机 也许是平板 或者是旧版本的 Android 平台

00:00:13.220 --> 00:00:15.270
也可能是我们使用的其他语言

00:00:16.340 --> 00:00:19.600
当进行应用开发时 你可以参考很多好的应用实例

00:00:19.600 --> 00:00:22.150
对于各种类型的用户 为了使应用正常工作

00:00:23.220 --> 00:00:26.240
一个最好的选择是本地化你的应用

00:00:26.240 --> 00:00:29.430
这有一个非常方便的本地化清单 你可以参考

00:00:29.430 --> 00:00:32.540
本地化的意思是 使你的应用适应不同的地域

00:00:32.540 --> 00:00:35.720
也就是语言和国家的组合 对于所有类型的用户

00:00:35.720 --> 00:00:38.640
都有一个良好的用户体验

00:00:38.640 --> 00:00:42.600
在表面层 对于应用的设计会有影响

00:00:42.600 --> 00:00:44.210
同样对于应用的显示界面也有影响

00:00:45.550 --> 00:00:47.440
现在 我们的关注点是怎样使你的应用支持

00:00:47.440 --> 00:00:48.610
不同的语言

00:00:49.710 --> 00:00:53.580
首先 让我们从用户的角度看一下设备体验

00:00:53.580 --> 00:00:57.170
如果我想使用不同的语言 我可以进入 Setting (设置) 功能

00:00:57.170 --> 00:00:59.600
然后点击 Language&amp;Input (语言和输入) 选项

00:01:00.410 --> 00:01:01.819
如果我点击 Language

00:01:01.820 --> 00:01:04.830
然后会看到 Android 支持的所有语言的列表

00:01:05.890 --> 00:01:08.750
它包括基于字符的语言 像中文

00:01:08.750 --> 00:01:10.160
和从右到左的语言 像阿拉伯语

00:01:11.430 --> 00:01:14.500
我把语言改成西班牙语

00:01:14.500 --> 00:01:17.929
现在所有的文本显示的都是西班牙语

00:01:17.930 --> 00:01:19.550
从整个 Setting 应用中就可以看出来

00:01:20.650 --> 00:01:23.710
如果你查看设备上的其他应用 开发者选择支持这个西班牙语的话

00:01:23.710 --> 00:01:26.539
它们都显示的都是这个语言

00:01:26.540 --> 00:01:29.200
然而 当你打开我们的 Just Java 应用时

00:01:29.200 --> 00:01:31.800
这是一个不太好的体验 因为在这个应用中的

00:01:31.800 --> 00:01:35.950
所有仍然显示的是英语 而设备上的其他应用显示的是西班牙语

00:01:35.950 --> 00:01:39.900
怎样使我们的应用支持西班牙语呢？

00:01:39.900 --> 00:01:43.130
到目前为止 我们知道应用包含 Java 文件和资源文件

00:01:43.130 --> 00:01:46.820
我们可以为应用提供默认资源 也可以根据

00:01:46.820 --> 00:01:51.729
用户物理设备的大小 语言设置

00:01:51.730 --> 00:01:55.570
Android 版本 屏幕像素 提供一个替代资源

00:01:55.570 --> 00:01:59.660
在我们的手势应用程序中 我们提供默认的英文版的字符串

00:01:59.660 --> 00:02:02.880
我们也可以提供其他语言版本的文本字符串

00:02:02.880 --> 00:02:06.210
所以如果某人在设备上使用法语作为默认语言

00:02:06.210 --> 00:02:09.500
系统会自动加载法语翻译

00:02:09.500 --> 00:02:12.100
而不是默认的英语版本

00:02:12.100 --> 00:02:15.210
这个文档介绍了怎样在你的应用中支持多种语言

00:02:16.630 --> 00:02:19.400
向下滚动 我们看一下项目结构

00:02:20.680 --> 00:02:23.560
在 res 目录下 你可以添加包含

00:02:23.560 --> 00:02:26.330
某一种语言的子目录

00:02:26.330 --> 00:02:28.900
这是默认的 values 文件夹

00:02:28.900 --> 00:02:30.416
我们选择把所有的英语文本字符串放在这里

00:02:30.416 --> 00:02:34.988
在 values_es 文件夹下 我们放置所有西班牙语的文本字符串

00:02:34.988 --> 00:02:40.130
在 values_fr 文件夹下 我们放置了所有的法语翻译

00:02:40.130 --> 00:02:43.210
如果用户在设备上选择西班牙语

00:02:43.210 --> 00:02:47.400
系统就会从 values_es 文件夹加载这些资源

00:02:47.400 --> 00:02:48.930
如果这个文件夹不存在 

00:02:48.930 --> 00:02:52.290
系统就会回退 选择默认的资源

00:02:52.290 --> 00:02:55.120
如果用户选择法语作为默认的设备语言

00:02:55.120 --> 00:02:57.770
系统就会加载所有的法语资源

00:02:57.770 --> 00:03:02.520
顺便说一下 es 是西班牙语的语言代码  fr 是法语的

00:03:02.520 --> 00:03:03.810
语言代码

00:03:03.810 --> 00:03:05.620
Android 使用 ISO 语言代码

00:03:05.620 --> 00:03:08.700
这是一些语言的示例

00:03:08.700 --> 00:03:12.300
和相应的两个字母的语言代码

00:03:12.300 --> 00:03:14.530
我们回到实现的细节

00:03:14.530 --> 00:03:17.800
在我们的应用中 为了实现系统转换不同语言的文本

00:03:17.800 --> 00:03:22.440
我们需要将所有文本与应用的其他逻辑隔离开

00:03:22.440 --> 00:03:26.579
通过在 values 文件夹中创建一个 string.xml 文件实现

00:03:26.580 --> 00:03:29.750
这是一个 XML 资源文件 它包含用户可见的

00:03:29.750 --> 00:03:33.420
所有字符串资源的一个列表

00:03:33.420 --> 00:03:36.100
除了定义布局这是我们第一次见到

00:03:36.100 --> 00:03:38.440
XML 的其他用途

00:03:38.440 --> 00:03:41.109
这是定义的资源列表

00:03:41.110 --> 00:03:44.580
这是一个字符串资源 我们可以使用 title 来引用它

00:03:44.580 --> 00:03:48.530
这个字符串的值是 My Application

00:03:49.740 --> 00:03:53.748
这是另一个字符串资源 我们使用 hello_world 来引用它

00:03:53.748 --> 00:03:57.950
它的值是 Hello World

00:03:57.950 --> 00:04:01.540
然后在 values_es 文件夹中 我们可以创建一个 strings. Xml 文件

00:04:01.540 --> 00:04:05.859
但是现在这里要放置那些字符串的西班牙语翻译

00:04:05.860 --> 00:04:10.180
这个字符串的名字仍然是 title 但是

00:04:10.180 --> 00:04:14.750
现在它的值是 My Application 的西班牙语翻译

00:04:14.750 --> 00:04:15.827
对于 Hello World 也是一样

00:04:15.827 --> 00:04:19.829
在这也是它的西班牙语翻译

00:04:19.829 --> 00:04:23.815
这是 strings. Xml 文件法语翻译的

00:04:23.815 --> 00:04:24.410
又一个例子

00:04:25.740 --> 00:04:28.150
一旦字符串被声明为资源

00:04:28.150 --> 00:04:33.450
我们在 XML 或 Java 中使用适当的语法引用它们 

00:04:33.450 --> 00:04:36.479
在 Java 代码中 我们像这样引用字符串

00:04:36.480 --> 00:04:39.925
在 Java 代码中 我们就是这样引用字符串代码的

00:04:39.925 --> 00:04:43.160
首先 我们调用 getResources 来获取应用资源

00:04:43.160 --> 00:04:49.160
然后 调用 getString 方法并且传递资源 ID 作为输入参数

00:04:50.280 --> 00:04:53.559
在这个例子里 它是 R.string.hello_world

00:04:53.560 --> 00:04:55.808
string 是资源类型

00:04:55.808 --> 00:04:58.680
hello_world 是资源名称

00:04:58.680 --> 00:05:00.500
右边的所有就

00:05:00.500 --> 00:05:04.420
成为了 hello world 字符串并且它存储在字符串变量里

00:05:05.490 --> 00:05:09.830
这整个表达式的结果是 hello world 并且存储在这个变量里

00:05:09.830 --> 00:05:11.300
顺便说一下

00:05:11.300 --> 00:05:15.270
它与我们在 Java 代码中引用图片资源很类似

00:05:15.270 --> 00:05:20.478
你可以使用 R.Drawable. Photo 或者其他来引用图像资源

00:05:20.478 --> 00:05:24.510
在XML中 我们可以使用 @ 字符串加字符串资源名字的方式

00:05:24.510 --> 00:05:25.936
来引用字符串

00:05:25.936 --> 00:05:29.549
现在 XML 和 Java 代码可以保持不变了

00:05:29.550 --> 00:05:33.480
而不用管用户在设备上选择哪种语言

00:05:33.480 --> 00:05:37.130
我们不需要一个不同的布局文件 这个布局文件有一个

00:05:37.130 --> 00:05:38.370
西班牙语翻译的文本属性

00:05:39.460 --> 00:05:42.840
Android 会根据在设备上选择的主要语言

00:05:42.840 --> 00:05:44.150
来加载正确的翻译

00:05:44.150 --> 00:05:45.880
是不是很棒？

00:05:47.170 --> 00:05:48.630
我们逐步练习以便

00:05:48.630 --> 00:05:50.790
你能看到在你的应用中怎样将字符串本地化

00:05:51.880 --> 00:05:54.870
首先 我们从 XML 和 Java 文件中提取

00:05:54.870 --> 00:05:58.370
所有编码的字符串到默认的 strings.xml中

00:05:58.370 --> 00:05:59.670
然后我们更新 XML 和 Java 文件

00:05:59.670 --> 00:06:02.300
来引用合适的字符串资源

00:06:03.490 --> 00:06:05.450
然后我们将提供另一种语言的

00:06:05.450 --> 00:06:06.700
其他翻译

00:06:06.700 --> 00:06:11.210
我们开始第一步 打开 interactivity_main 布局文件

00:06:11.210 --> 00:06:15.190
我们看一下那些目前已经硬编码到我们的布局文件中的字符串

00:06:15.190 --> 00:06:18.990
我们有一个 TextView  它用来显示作为标题的 Toppings

00:06:19.990 --> 00:06:22.960
目前显示的是英语 硬编码到布局里

00:06:22.960 --> 00:06:26.330
我们得到一个关于它的来自 Android studio 的警告

00:06:26.330 --> 00:06:29.150
它建议我们使用 @string 资源 所以我们修改一下

00:06:30.390 --> 00:06:31.599
当我删除它 然后

00:06:31.600 --> 00:06:35.730
输入 @string/toppings 作为资源名

00:06:35.730 --> 00:06:38.810
但是现在 有一个错误提示说 Android Studio

00:06:38.810 --> 00:06:39.950
不能识别这个资源

00:06:39.950 --> 00:06:43.600
我需要进入 strings.xml 文件然后定义它

00:06:43.600 --> 00:06:45.340
看一下我们应用的文件结构

00:06:45.340 --> 00:06:49.775
我进入 res-values 文件夹 然后找到 strings.xml 文件

00:06:49.776 --> 00:06:52.380
这里有几个字符串已经存在

00:06:52.380 --> 00:06:53.469
我会添加其他的

00:06:54.650 --> 00:06:58.299
我声明一个新的字符串资源 它的名字是 toppings

00:06:58.300 --> 00:07:00.910
它的值是英文版的 Toppings

00:07:00.910 --> 00:07:03.370
字符串资源的名字不会修改

00:07:03.370 --> 00:07:07.330
但是它的值会根据语言进行修改

00:07:07.330 --> 00:07:11.300
注意 我在这添加一个注释 用来描述这个字符串

00:07:11.300 --> 00:07:11.822
在应用的什么地方使用

00:07:11.822 --> 00:07:16.130
它会帮助翻译者或提供帮助翻译服务来理解

00:07:16.130 --> 00:07:20.650
字符串使用处的上下文

00:07:20.650 --> 00:07:22.909
我们也可以指定字符限制

00:07:22.910 --> 00:07:26.660
当空格在UI中被限制的时候 对于翻译者是有帮助的

00:07:27.960 --> 00:07:31.330
例如 翻译者明白我们屏幕区域有限

00:07:31.330 --> 00:07:34.719
就不会选一个很长的翻译

00:07:34.720 --> 00:07:36.330
回到我们的布局文件

00:07:36.330 --> 00:07:39.370
错误没有了 因为字符串资源已经存在

00:07:40.420 --> 00:07:43.600
现在 怎样在我们的Java 文件中进行硬编码呢？

00:07:44.730 --> 00:07:47.160
我们看一下 createOrderSummary 方法

00:07:47.160 --> 00:07:49.650
它包括很多硬编码的英语字符串

00:07:50.710 --> 00:07:55.159
首先 把短语 thank you 移到 strings.xml 文件中

00:07:55.160 --> 00:07:59.350
这有一个新的字符串资源 它的名字是 thank_you

00:07:59.350 --> 00:08:00.830
然后我们可以更新 Java 语句

00:08:00.830 --> 00:08:04.460
通过它的名字引用这个新的字符串资源

00:08:04.460 --> 00:08:07.219
我们使用 activity 类中的 getString 方法

00:08:07.220 --> 00:08:11.160
该方法的输入参数是字符串资源 并且返回一个字符串

00:08:11.160 --> 00:08:13.590
然后 把 thank you 添加到整个信息中

00:08:15.100 --> 00:08:19.650
在某个例子中 你可能不想翻译一部分文本字符串

00:08:19.650 --> 00:08:22.260
例如 你想要创建一个字符串 

00:08:22.260 --> 00:08:25.390
然后 留下空隙稍后用来添加变量

00:08:26.400 --> 00:08:29.919
在这个例子里 你想要标出有 xliff 标签的

00:08:29.920 --> 00:08:31.150
不被翻译的部分

00:08:31.150 --> 00:08:35.790
翻译用户的名字没有意义 但是

00:08:35.800 --> 00:08:37.270
但是翻译 Name 有意义

00:08:38.225 --> 00:08:43.480
所以恰当地使用整个字符串资源时 就会显示

00:08:43.480 --> 00:08:45.900
Name: 加上名字 如 Amy

00:08:46.160 --> 00:08:50.790
伴随着 xliff 标签 给出一个名字的 ID 

00:08:50.800 --> 00:08:52.370
然后你可以进行指定 就像 Amy 的例子

00:08:53.910 --> 00:08:57.910
在 xliff 标签中 你可以放入不用翻译的字符串

00:08:58.970 --> 00:09:02.830
在这个例子中 在这使用 %S 符号

00:09:02.830 --> 00:09:06.440
指定一个稍后会被取代的字符串

00:09:07.450 --> 00:09:10.530
如果你好奇在 Java 代码中 我们为什么不使用 + 号

00:09:10.530 --> 00:09:11.890
来添加字符串

00:09:11.890 --> 00:09:14.580
原因是需要将它声明为字符串资源

00:09:14.580 --> 00:09:19.540
来允许翻译者决定它是否是正确格式的文本

00:09:19.540 --> 00:09:22.920
翻译者可以决定改变这些词语的顺序以便

00:09:22.920 --> 00:09:24.978
在本地上下文中更加简洁清楚

00:09:26.120 --> 00:09:30.800
翻译者只能控制 strings.xml 文件中的词语

00:09:30.800 --> 00:09:33.479
不能控制 Java 代码

00:09:33.480 --> 00:09:36.420
为了 xliff 标签能够被识别 你需要

00:09:36.420 --> 00:09:39.834
在你的 strings.xml 文件中添加这一部分内容使它成为资源标签

00:09:41.190 --> 00:09:44.230
现在 在 Java 代码中 我们使用字符串资源来代替 orderSummary 中

00:09:44.230 --> 00:09:45.250
的这一部分

00:09:46.320 --> 00:09:49.640
现在我们正在使用 order_summary_name 字符串资源

00:09:49.640 --> 00:09:53.800
并且将 name 变量填到空白处

00:09:54.140 --> 00:09:56.770
一般情况下 这使activity 中的 getsString 方法

00:09:56.770 --> 00:10:01.480
作为一个字符串参数输入 它是一个字符串资源

00:10:01.480 --> 00:10:05.690
但是现在它有两个输入参数 因为我们想要传递 name 变量

00:10:05.690 --> 00:10:10.510
并且在字符串的空白处插入这个变量

00:10:10.510 --> 00:10:13.819
如果你的字符串资源有两处空白需要填充

00:10:13.820 --> 00:10:16.580
然后你可以在这传递两个额外的输入

00:10:16.580 --> 00:10:20.240
所以这就成为一个有三个输入的方法调用

00:10:20.240 --> 00:10:21.120
等等

00:10:22.240 --> 00:10:26.240
如果你想知道更多的关于怎样使用 xliff 的说明 你可以

00:10:26.240 --> 00:10:29.320
查看本地化清单 在讲师注释下面有链接

00:10:30.560 --> 00:10:33.650
到目前为止 我们已经完成了两步 现在我们进行第三步

00:10:33.650 --> 00:10:36.560
提供另一种语言的翻译

00:10:36.560 --> 00:10:37.479
在 Android Studio 中

00:10:37.480 --> 00:10:40.660
实际上有一个叫做 translations editor（翻译编辑器）的简洁的小工具

00:10:40.660 --> 00:10:45.610
你可以通过单击 Open editor 或者右击

00:10:45.610 --> 00:10:50.750
Strings.xml 文件 然后再单击 Open Translations Editor 来打开

00:10:50.750 --> 00:10:53.460
这有一列名字字符串资源 

00:10:53.460 --> 00:10:56.530
和它们的默认值 现在是英语版本

00:10:57.920 --> 00:11:01.939
每一行对应另一个我们在 Strings.xml 文件中定义

00:11:01.939 --> 00:11:03.339
的字符串资源

00:11:03.340 --> 00:11:06.470
如果我点击这的 globe 图标 我们可以添加一组新的语言

00:11:07.720 --> 00:11:10.980
我选择 Spanish 然后添加西班牙语

00:11:12.290 --> 00:11:15.640
你可以点击这个单元来提供字符串 Thank You！ 的

00:11:15.640 --> 00:11:17.400
西班牙语翻译

00:11:17.400 --> 00:11:19.560
我将要输入 Gracias

00:11:19.560 --> 00:11:22.239
我的西班牙语发音不太好 它的意思是谢谢你

00:11:23.300 --> 00:11:25.449
我们可以为 Toppings 标题做同样的事情

00:11:25.450 --> 00:11:27.310
这是西班牙语翻译

00:11:27.310 --> 00:11:29.489
我不打算尝试它的发音

00:11:29.490 --> 00:11:30.960
现在 我们建立自己的应用

00:11:30.960 --> 00:11:33.630
我的设备仍然是默认的西班牙语

00:11:33.630 --> 00:11:34.885
当我打开我的应用时

00:11:34.885 --> 00:11:39.360
我们看到 Toppings 标题已经翻译成西班牙语了

00:11:39.360 --> 00:11:41.440
剩下的部分仍然是英语 因为我还没有完成它

00:11:41.440 --> 00:11:45.300
然后 当我点击 ORDER 按钮时 我看到 Gracias

00:11:47.230 --> 00:11:48.940
很棒 它工作了

00:11:48.940 --> 00:11:52.490
在底层 翻译编辑器为我们做了很多事

00:11:52.490 --> 00:11:56.269
它创建了 strings.xml 文件的西班牙语版本

00:11:56.269 --> 00:11:59.250
当你点击的时候 你可以看到它自动添加

00:11:59.250 --> 00:12:00.200
了翻译

00:12:01.430 --> 00:12:03.579
如果我们没有提供西班牙语翻译

00:12:03.580 --> 00:12:05.220
那么它就不会出现

00:12:05.220 --> 00:12:09.300
作为一个开发人员 你有两种选择 一种是直接修改 Strings.xml 文件

00:12:09.300 --> 00:12:10.488
另一种是使用翻译编辑器

00:12:11.570 --> 00:12:15.600
如果你想添加更多的语言 你可以简单地单击 globe 图标

00:12:16.210 --> 00:12:17.960
你已经完成了将字符串

00:12:17.960 --> 00:12:20.940
本地化为西班牙语的三步操作

00:12:20.940 --> 00:12:23.630
现在 这有一些我们没讲过的其他编码字符串

00:12:23.630 --> 00:12:27.185
但是这次 我想让你将它们本地化

00:12:27.185 --> 00:12:28.915
你可以在讲师注释的下面找到

00:12:28.915 --> 00:12:31.165
这些文本字符串的西班牙翻译

00:12:31.165 --> 00:12:34.175
但是 欢迎你选择另一种语言

00:12:34.175 --> 00:12:38.435
最后 假如你选择了西班牙语 你的应用应该是这个样子

00:12:38.435 --> 00:12:41.405
然后 当你点击 ORDER 按钮时 email 的主题行和

00:12:41.405 --> 00:12:43.405
短信的主题都应该是西班牙语

