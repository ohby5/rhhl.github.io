WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:02.367
No aplicativo, deve ter notado
que todos os headers têm

00:00:02.400 --> 00:00:03.434
o mesmo estilo visual.

00:00:04.434 --> 00:00:07.167
E deve ter notado que no XML
você teve

00:00:07.200 --> 00:00:11.467
adicionar os mesmos atributos
para cada header, Cabeçalho,

00:00:11.501 --> 00:00:15.667
Quantidade e Resumo da Compra,
quando o tínhamos.

00:00:15.701 --> 00:00:18.133
Se utilizar o mesmo estilo
muitas vezes,

00:00:18.167 --> 00:00:20.968
é uma boa prática tentar
reduzir a repetição

00:00:21.000 --> 00:00:23.133
definindo-a em um só lugar

00:00:23.167 --> 00:00:25.434
e voltando sempre
a esse mesmo lugar.

00:00:25.467 --> 00:00:29.133
Assim, se o designer com quem trabalha
quiser mudar o visual

00:00:29.167 --> 00:00:31.934
de todos os headers no aplicativo,
basta mudar em um só lugar

00:00:31.968 --> 00:00:33.834
e será atualizado
em todos os lugares.

00:00:33.868 --> 00:00:37.634
Para isso, precisa aprender
sobre estilos em nosso aplicativo.

00:00:37.667 --> 00:00:41.634
Um estilo é uma coleção de propriedades
que podem ser aplicadas a um visual.

00:00:41.667 --> 00:00:44.701
As propriedades podem incluir altura,
largura, preenchimento, cor da fonte,

00:00:44.734 --> 00:00:46.400
tamanho da fonte e mais.

00:00:46.434 --> 00:00:48.367
Vamos ver um exemplo.

00:00:48.400 --> 00:00:50.934
Em um arquivo de layout,
este texto usado especifica

00:00:50.968 --> 00:00:52.100
vários atributos.

00:00:52.133 --> 00:00:56.000
Mas podemos substituir todos
esses atributos com uma única linha

00:00:56.033 --> 00:00:57.167
que remete a um estilo.

00:00:57.200 --> 00:01:01.200
Uma vantagem de usar um estilo
é que pode separar o design do visual,

00:01:01.234 --> 00:01:04.734
sua aparência,
de seu conteúdo em si.

00:01:04.767 --> 00:01:07.901
No fim, esses dois visuais teriam
a mesma aparência em um dispositivo.

00:01:09.267 --> 00:01:12.734
Vejamos onde o estilo
do código fonte é definido.

00:01:12.767 --> 00:01:16.133
Você pode definir o estilo
no arquivo styles.xml,

00:01:16.167 --> 00:01:19.934
localizado no diretório res/values
do seu aplicativo.

00:01:19.968 --> 00:01:25.501
Neste arquivo XML o nó raiz
precisa ser o elemento XML de recursos.

00:01:25.534 --> 00:01:30.033
Dentro disso, pode especificar
quantos elementos XML você quiser.

00:01:30.067 --> 00:01:34.734
Por exemplo, isto é um estilo,
e você poderia adicionar mais abaixo dele.

00:01:34.767 --> 00:01:38.167
Para um dado elemento XML de estilo,
precisa especificar o nome.

00:01:38.200 --> 00:01:42.000
Neste caso é código fonte,
mas você poderia escolher outro nome.

00:01:42.033 --> 00:01:45.167
Então pode adicionar uma lista
das diferentes propriedades

00:01:45.200 --> 00:01:46.334
que devem haver
neste estilo.

00:01:46.367 --> 00:01:49.734
Uma propriedade é definida usando
o elemento XML de item.

00:01:49.767 --> 00:01:53.400
Para um dado item, você tem
o nome da propriedade,

00:01:53.434 --> 00:01:59.501
e o valor dela fica entre
as tags de abertura e fechamento.

00:01:59.534 --> 00:02:02.834
Se quiser criar um estilo
a partir de outros existentes,

00:02:02.868 --> 00:02:04.801
pode especificar
o atributo original aqui.

00:02:04.834 --> 00:02:07.801
Mas não precisa especificar uma origem.
Isto é opcional.

00:02:07.834 --> 00:02:09.534
Pode apenas definir
um estilo

00:02:09.567 --> 00:02:12.234
e depois adicionar
as propriedades que quiser.

00:02:12.267 --> 00:02:17.634
Depois, no seu arquivo de layout, pode
simplesmente remeter a este código fonte.

00:02:17.667 --> 00:02:20.534
Isto é similar a como remetemos
a outros recursos em nosso aplicativo,

00:02:20.567 --> 00:02:23.567
como os desenháveis,
com a notação "@ drawable".

00:02:23.601 --> 00:02:27.300
Aqui usamos @style/
nome do recurso.

00:02:27.334 --> 00:02:30.501
Note também que especificamos
o estilo usando "style="

00:02:30.534 --> 00:02:32.367
e não "Android: style".

00:02:32.400 --> 00:02:34.367
Voltemos ao nosso aplicativo
para um exemplo.

00:02:34.400 --> 00:02:38.234
Digamos que queremos todos os headings
com texto na cor roxa,

00:02:38.267 --> 00:02:41.534
fonte 20, e em itálico.

00:02:41.567 --> 00:02:45.033
Poderíamos escolher os mesmos
atributos em cada visual dos headers

00:02:45.067 --> 00:02:48.200
ou defini-lo uma só vez
em um único estilo, nomeá-lo,

00:02:48.234 --> 00:02:50.801
e remeter a esse estilo
toda vez que precisarmos.

00:02:50.834 --> 00:02:54.868
Para definir um estilo, vá ao diretório
Resources, Values

00:02:54.901 --> 00:02:57.501
e ache o arquivo
styles.xml.

00:02:57.534 --> 00:03:00.934
Se não existir, pode sempre
criá-lo clicando com o botão direto

00:03:00.968 --> 00:03:06.300
indo em "new resource file"
e criando um estilo no arquivo XML.

00:03:06.334 --> 00:03:10.767
Como vimos antes, este arquivo XML,
como o XML de strings,

00:03:10.801 --> 00:03:12.501
não define um layout.

00:03:12.534 --> 00:03:14.067
É um arquivo de recursos.

00:03:14.100 --> 00:03:17.367
Neste caso, ele define
uma lista de recursos de estilo,

00:03:17.400 --> 00:03:20.667
enquanto as strings no arquivo XML
definem uma lista de recursos de string.

00:03:22.100 --> 00:03:23.701
A propósito,
isto é um comentário,

00:03:23.734 --> 00:03:27.033
então pode pôr o que quiser
entre este símbolo de abertura

00:03:27.067 --> 00:03:28.968
e este símbolo
de fechamento.

00:03:29.000 --> 00:03:32.033
Isto é só para descrever
o XML abaixo dele.

00:03:33.267 --> 00:03:36.901
Acabei de definir um estilo
chamado Texto Personalizado.

00:03:36.934 --> 00:03:38.534
Ele contém 3 propriedades.

00:03:39.667 --> 00:03:43.234
Estes são 3 atributos que podem
ser aplicados ao TextView.

00:03:43.267 --> 00:03:46.734
Então temos as propriedades
do tamanho do texto, cor do texto,

00:03:46.767 --> 00:03:49.033
e estilo de texto
do Android.

00:03:49.067 --> 00:03:52.701
O valor de cada atributo destes
é mostrado aqui entre as tags

00:03:52.734 --> 00:03:54.534
de abertura e fechamento
do item.

00:03:54.567 --> 00:03:57.701
Temos o tamanho da fonte 20sp,
a cor de fonte roxa,

00:03:57.734 --> 00:03:59.934
assim como o estilo de texto
em itálico.

00:03:59.968 --> 00:04:03.467
Os possíveis atributos aqui dependem
de a que visual está aplicando

00:04:03.501 --> 00:04:04.934
o estilo.

00:04:04.968 --> 00:04:08.567
Se vai usar um estilo personalizado
em um visual de texto,

00:04:08.601 --> 00:04:12.300
todos os atributos de visual de texto
que já conhece podem ficar aqui.

00:04:12.334 --> 00:04:14.200
Se este estilo fosse usado
em um visual de imagem,

00:04:14.234 --> 00:04:17.100
então os atributos de visual
de imagem seriam válidos aqui.

00:04:17.133 --> 00:04:18.834
Vamos copiar
o nome deste estilo

00:04:18.868 --> 00:04:20.767
e usá-lo na atividade
do arquivo de layout principal.

00:04:20.801 --> 00:04:26.234
Para o cabeçalho, vou aplicar
um estilo no visual de texto.

00:04:26.267 --> 00:04:29.834
Vou remeter ao estilo
usando "@style", barra,

00:04:29.868 --> 00:04:31.367
e então o nome do estilo.

00:04:31.400 --> 00:04:33.834
Então posso deletar
quaisquer atributos

00:04:33.868 --> 00:04:36.200
que já teriam sido definidos
no estilo.

00:04:36.234 --> 00:04:39.067
Neste exemplo não quero
que os headers comecem com maiúsculas,

00:04:39.100 --> 00:04:40.734
então vou apagar isto.

00:04:40.767 --> 00:04:43.634
Se eu tivesse um estilo de texto
ou cor de fonte diferentes especificados aqui,

00:04:43.667 --> 00:04:45.968
também os deletaria,
agora que tenho este estilo aqui.

00:04:47.300 --> 00:04:50.501
Agora vou aplicar este estilo
ao outro header.

00:04:50.534 --> 00:04:53.200
Para o header de quantidade,
vou deletar isto.

00:04:53.234 --> 00:04:56.133
Caixa alta, atributo, e substituir
por este estilo.

00:04:57.167 --> 00:04:59.868
O aplicativo fica assim
com o novo estilo aplicado

00:04:59.901 --> 00:05:01.934
ao visual
do texto do header.

00:05:01.968 --> 00:05:04.367
Eu poderia adicionar atributos
dentro do estilo,

00:05:04.400 --> 00:05:08.367
mas é uma questão de escolha,
fica ao seu critério.

00:05:08.400 --> 00:05:11.801
Às vezes você quer deixar os atributos
dentro do arquivo de layout,

00:05:11.834 --> 00:05:13.667
às vezes é melhor se estiver
dentro do estilo.

00:05:13.701 --> 00:05:17.767
Certo, então o exemplo que dei
não é o estilo que queremos.

00:05:17.801 --> 00:05:20.634
Em vez disso, precisa
usar estes atributos.

00:05:20.667 --> 00:05:25.601
Queremos os headers com altura de 48dp
com texto centralizado verticalmente

00:05:25.634 --> 00:05:28.834
dentro disso, e com o texto
começando em maiúsculas.

00:05:28.868 --> 00:05:30.934
Estes valores vieram das especificações
do design de material.

00:05:30.968 --> 00:05:33.701
Pode olhar as notas do instrutor
para mais detalhes.

00:05:33.734 --> 00:05:36.601
Não falamos sobre o atributo
de gravidade a fundo,

00:05:36.634 --> 00:05:40.901
mas significa que centralizamos o texto
verticalmente dentro do campo de texto.

00:05:40.934 --> 00:05:44.334
Então quero que faça um novo estilo
no arquivo styles.xml

00:05:44.367 --> 00:05:45.734
chamado Header Text Style.

00:05:45.767 --> 00:05:48.200
Ele deve conter
essas 5 propriedades.

00:05:48.234 --> 00:05:52.534
Depois, aplique o estilo a todos os visuais
de texto de header dentro do layout.

00:05:52.567 --> 00:05:55.400
Remeta todos eles
a este estilo de texto de header.

00:05:55.434 --> 00:05:59.067
Certifique-se de tirar qualquer XML
desnecessário no arquivo de layout.

00:05:59.100 --> 00:06:02.801
Por exemplo, não precisa mais
dos tamanhos de texto deste visual de header

00:06:02.834 --> 00:06:07.100
porque o tamanho do texto está
especificado dentro do estilo agora.

00:06:07.133 --> 00:06:10.067
É assim que o aplicativo deve estar
quando terminar,

00:06:10.100 --> 00:06:11.767
usando um único estilo
para os headers.

00:06:11.801 --> 00:06:13.200
Marque esses quadradinhos
quando terminar.

