WEBVTT
Kind: captions
Language: zh-CN

00:00:00.150 --> 00:00:03.070
我们首先来看看下边界

00:00:03.070 --> 00:00:06.880
你可以使得应用达到小于一杯咖啡的唯一方法是

00:00:06.880 --> 00:00:10.430
点击—按钮 当只有一杯咖啡的时候

00:00:10.430 --> 00:00:14.720
记住点击—按钮会触发 Java 文件中的 decrement 方法

00:00:14.720 --> 00:00:17.420
所以我们需要修改 decrement 方法

00:00:17.420 --> 00:00:20.450
阻止应用更新屏幕上的 quantity

00:00:20.450 --> 00:00:23.790
打开Java 文件中 decrement 方法的代码

00:00:23.790 --> 00:00:25.670
进入这个方法

00:00:25.670 --> 00:00:30.420
如果 quantity 已经是1了 我们不想这行代码被执行

00:00:30.420 --> 00:00:34.580
否则 这行代码将会导致 quantity 为0

00:00:34.580 --> 00:00:36.490
我将在这个方法的上部插入一些代码

00:00:36.490 --> 00:00:38.440
我加入一个 if 语句

00:00:38.440 --> 00:00:42.900
因为我希望这个逻辑被执行当 quantity 为1 的时候

00:00:42.900 --> 00:00:46.080
记住在 Java 中 如果你想检测两个变量是否相等

00:00:46.080 --> 00:00:48.968
你需要使用 “==” 这个符号

00:00:48.968 --> 00:00:51.550
“=” 符号有其他的意义

00:00:51.550 --> 00:00:52.990
回到代码中

00:00:52.990 --> 00:00:57.500
如果数 quantity 不为1 我们将跳过这个代码块

00:00:57.500 --> 00:01:00.130
继续更新 quantity

00:01:00.130 --> 00:01:04.550
在这个 if 语句中 我将写入 return 语句

00:01:04.550 --> 00:01:07.790
在之前的测试中 我给过你这个提示

00:01:07.790 --> 00:01:11.870
如果方法的返回值是空 你可以只写一个 return

00:01:11.870 --> 00:01:13.800
后面不用写返回值

00:01:13.800 --> 00:01:17.020
这就意味着我们会退出这个方法 不用执行

00:01:17.020 --> 00:01:18.630
下面的代码了

00:01:18.630 --> 00:01:21.730
所以我们就会跳过 quantity 变量的更新和显示

00:01:22.770 --> 00:01:26.600
如果 quantity 不是1 比如 quantity 为 10

00:01:26.600 --> 00:01:30.580
那么测试条件为假 我们就会跳过这段代码

00:01:30.580 --> 00:01:33.220
继续这行代码

00:01:33.220 --> 00:01:35.640
让我们来看看上界的情况

00:01:35.640 --> 00:01:38.690
唯一可以突破100的方法是点击+按钮

00:01:38.690 --> 00:01:41.070
当有100杯咖啡的时候

00:01:41.070 --> 00:01:43.550
+按钮触发 increment 方法

00:01:43.550 --> 00:01:46.330
所以我们需要修改这个方法来阻止应用

00:01:46.330 --> 00:01:49.750
更新 quantity 到101 杯咖啡

00:01:49.750 --> 00:01:53.170
在 increment 方法中加入一些附加的逻辑 就像我们在

00:01:53.170 --> 00:01:54.670
decrement 方法中做的一样

00:01:54.670 --> 00:01:57.250
如果 quantity 变量的当前值是100

00:01:57.250 --> 00:01:59.410
那么我们将提早退出这个方法

00:01:59.410 --> 00:02:02.650
否则 quantity 就会继续增加

00:02:02.650 --> 00:02:05.590
并且显示在屏幕上

00:02:05.590 --> 00:02:08.190
在设备上运行应用 看看会发生什么

00:02:08.190 --> 00:02:10.630
好的 如果我多次点击—按钮

00:02:10.630 --> 00:02:14.030
那么它就会停在1杯咖啡的时候

00:02:14.030 --> 00:02:17.030
为了检测上界是否正常 我将在

00:02:17.030 --> 00:02:20.470
Java 文件中把 quantity 变量的初始值修改为99杯咖啡

00:02:20.470 --> 00:02:24.320
在布局文件中也做类似的修改

00:02:24.320 --> 00:02:25.780
9杯咖啡花费195美元

00:02:25.780 --> 00:02:28.520
在设备上运行它

00:02:28.520 --> 00:02:31.290
如果我多次点击+按钮

00:02:31.290 --> 00:02:33.380
你可以看见它只显示100杯咖啡

00:02:34.410 --> 00:02:35.340
漂亮！

00:02:35.340 --> 00:02:36.720
代码运行正常

00:02:36.720 --> 00:02:40.110
如果你选择做一些挑战性的问题 这是解决方法的代码

00:02:40.110 --> 00:02:43.620
在 increment 方法中 如果 quantity 已经是 100杯咖啡了

00:02:43.620 --> 00:02:48.990
在我们退出这个方法之前显示这个 Toast 消息

00:02:48.990 --> 00:02:52.630
为了创建 Toast 消息 我们调用 Toast.makeText 方法

00:02:52.630 --> 00:02:55.680
并且输入3个不同的参数

00:02:55.680 --> 00:03:00.340
输入 context 它指向这个 activity 在这个情况下输入一个消息

00:03:00.340 --> 00:03:04.520
不能点超过 100 杯咖啡

00:03:04.520 --> 00:03:07.410
我们也指定它在屏幕上显示的时间

00:03:07.410 --> 00:03:11.780
我们设置这个 Toast 消息持续较短的时间

00:03:11.780 --> 00:03:14.550
所有的这些代码创建了一个 Toast 对象

00:03:14.550 --> 00:03:17.790
然后我们在这个对象上调用方法

00:03:17.790 --> 00:03:21.720
与 decrement 方法类似 如果 quantity 已经是1杯咖啡了

00:03:21.720 --> 00:03:26.450
那么在我们退出这个方法之前就显示一个错误提示信息

00:03:26.450 --> 00:03:30.500
再说一遍 这个语句创建了一个有该消息的 Toast 对象

00:03:30.500 --> 00:03:32.200
然后我们可以调用它的方法

00:03:33.390 --> 00:03:36.830
顺便说一句 我们用这个网站来帮助我们学习如何

00:03:36.830 --> 00:03:37.640
在应用中显示 Toast消息

00:03:37.640 --> 00:03:42.070
这是一些示例代码 你可以使用它们

00:03:42.070 --> 00:03:45.490
一般来说 通过用户界面上的错误信息或者其他的提示信息来

00:03:45.490 --> 00:03:49.180
告知用户发生了什么 是非常好的想法

00:03:49.180 --> 00:03:51.330
否则 他们可能会认为应用崩溃了

00:03:51.330 --> 00:03:53.110
因为应用没有对他们点击按钮做出响应

