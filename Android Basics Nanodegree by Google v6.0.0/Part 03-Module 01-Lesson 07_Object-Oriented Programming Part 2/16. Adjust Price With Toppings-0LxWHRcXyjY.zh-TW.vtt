WEBVTT
Kind: captions
Language: zh-TW

00:00:00.250 --> 00:00:05.230
要計算訂單總覽裡的正確的價格,

00:00:05.230 --> 00:00:09.500
我們要把關於用戶會選擇哪些配料
這個資訊傳入到calculatePrice裡.

00:00:09.500 --> 00:00:12.820
我選擇在calculatePrice裡

00:00:12.820 --> 00:00:18.340
完成所有的計算,
這樣能夠集中式地處理這些相關邏輯.

00:00:18.340 --> 00:00:22.040
通過整理這些到這個式裡,

00:00:22.040 --> 00:00:25.620
如果在價格計算中出現問題,
我們可以單一地檢查代碼.

00:00:26.620 --> 00:00:28.340
這樣更加易處理一些.

00:00:28.340 --> 00:00:29.880
在這個式裡面,

00:00:29.880 --> 00:00:33.450
我們要算出每一杯咖啡的底價.

00:00:33.450 --> 00:00:35.510
這個和之前給你們看的是一樣的.

00:00:35.510 --> 00:00:38.110
如果添加鮮奶油,加1美金.

00:00:38.110 --> 00:00:41.000
如果加巧克力,加2美金.

00:00:41.000 --> 00:00:43.630
然後取單杯咖啡的底價

00:00:43.630 --> 00:00:47.860
乘以下單數量,計算出總價.

00:00:47.860 --> 00:00:50.550
首先,把這個鮮奶油和巧克力核取方塊的資訊

00:00:50.550 --> 00:00:54.302
傳入到calculatePrice.

00:00:54.302 --> 00:00:58.380
我打算傳入到布林值
hasWhippedCream和hasChocolate

00:00:58.380 --> 00:01:02.570
這兒不需要傳入實際的CheckBox物件,

00:01:02.570 --> 00:01:06.430
因為我們只關心
這些計算價格的布林值.

00:01:06.430 --> 00:01:10.530
Android Studio說這兒有個錯誤
因為簽名不匹配.

00:01:10.530 --> 00:01:15.390
嘗試訪問一個沒有輸入參數的式.

00:01:15.390 --> 00:01:18.820
下拉到這,
calculatePrice被定義的地方.

00:01:18.820 --> 00:01:20.700
修改簽名

00:01:20.700 --> 00:01:25.620
改成兩個輸入參數,
一個叫addWhippedCream布林值,

00:01:25.620 --> 00:01:27.730
還有一個叫addChocolate的布林值.

00:01:27.730 --> 00:01:30.850
這些輸入參數可以隨意命名.

00:01:30.850 --> 00:01:34.220
我只是選擇用一個跟已經被傳入
不一樣的名字,

00:01:34.220 --> 00:01:36.900
只是為了告訴你們
這些名字不需要相匹配.

00:01:36.900 --> 00:01:40.580
同時還更新了Javadoc
描述這個兩個輸入參數.

00:01:40.580 --> 00:01:43.570
這樣的話如果有人訪問這個式
就知道傳入的是什麼東西.

00:01:43.570 --> 00:01:47.580
下一步,在calculatePrice
我要做的是

00:01:47.580 --> 00:01:49.930
所有基於這些配料上的價格修改邏輯.

00:01:49.930 --> 00:01:52.130
首先,計算底價,

00:01:52.130 --> 00:01:54.720
創建一個整數變數叫basePrice.

00:01:54.720 --> 00:01:58.500
從值5開始因為每杯咖啡價格5美金.

00:01:58.500 --> 00:02:00.930
然後創建一個if陳述.

00:02:00.930 --> 00:02:05.600
如果布林值addWhippedCream為true,
也就是用戶想要添加鮮奶油。

00:02:05.600 --> 00:02:09.720
意味著需要在每杯咖啡的底價上
加上1美元。

00:02:09.720 --> 00:02:11.920
這樣應該能解決鮮奶油的例子。

00:02:11.920 --> 00:02:13.740
繼續到巧克力的例子。

00:02:13.740 --> 00:02:16.110
創建另外一個if陳述。

00:02:16.110 --> 00:02:19.000
我不需要另外一小段的代碼，

00:02:19.000 --> 00:02:23.000
因為如果使用者不需要鮮奶油，
完全不需要有任何動作。

00:02:23.000 --> 00:02:26.550
事實上，如果我要輸入另外一個情況
這看起來就是這樣的。

00:02:26.550 --> 00:02:29.990
只有一個注釋，do nothing.

00:02:29.990 --> 00:02:31.960
Android studio還要聰明，

00:02:31.960 --> 00:02:35.010
注意這個另外陳述是虛無的

00:02:35.010 --> 00:02:38.040
他們的勸告是這種類型的代碼難以理解，

00:02:38.040 --> 00:02:39.930
會產生輸入錯誤的結果。

00:02:39.930 --> 00:02:41.800
同時也是我們不需要的多餘的一行代碼，

00:02:41.800 --> 00:02:43.660
把這個else刪除掉。

00:02:43.660 --> 00:02:45.930
繼續到巧克力的情況。

00:02:45.930 --> 00:02:49.800
巧克力加料和鮮奶油是完全獨立分開的。

00:02:49.800 --> 00:02:51.880
不管用戶是選擇一個
還是另外一個都沒有關係，

00:02:51.880 --> 00:02:53.540
它們不是互相依附的。

00:02:53.540 --> 00:02:57.060
刪除單獨的if情況。

00:02:57.060 --> 00:02:59.480
如果用戶想要巧克力，

00:02:59.480 --> 00:03:04.010
我們要把底價修改成basePrice加2.

00:03:04.010 --> 00:03:08.810
同樣地有一個else小段代碼，
不過不會有任何動作。

00:03:08.810 --> 00:03:12.690
如果用戶不想要巧克力，
不需要調整價格。

00:03:12.690 --> 00:03:15.530
因此刪除這行代碼，
因為完全沒必要。

00:03:15.530 --> 00:03:20.450
通讀一遍代碼，
每杯咖啡的底價為5美元。

00:03:20.450 --> 00:03:24.945
如果用戶想要鮮奶油，
底價加1美元。

00:03:24.945 --> 00:03:27.610
如果要的是巧克力，

00:03:27.610 --> 00:03:29.703
底價加2美元。

00:03:29.703 --> 00:03:32.290
然後計算總的訂單價格，

00:03:32.290 --> 00:03:35.835
數量乘以單杯價格。

00:03:35.835 --> 00:03:38.735
好的，看起來能用。

00:03:38.735 --> 00:03:41.935
我還在每小段代碼上加了註腳，

00:03:41.935 --> 00:03:45.695
這樣遲點我們再回顧這些代碼，
還會記得我們做過什麼。

00:03:45.695 --> 00:03:48.005
現在試試運行app。

00:03:48.005 --> 00:03:50.635
一起來實驗一下剛才一起做的幾種情況。

00:03:51.965 --> 00:03:55.319
選擇鮮奶油添加，數量3，

00:03:55.319 --> 00:03:56.906
每一杯就是6美元。

00:03:56.906 --> 00:04:01.450
6美元乘以3是18美元，
計算得出18，很好。

00:04:01.450 --> 00:04:07.679
添加巧克力，每杯咖啡是8美元。

00:04:07.679 --> 00:04:11.650
數量為2，總金額為16美元。

00:04:11.650 --> 00:04:15.700
只選擇鮮奶油，得到正確答案。

00:04:15.700 --> 00:04:18.510
試試兩種情況，

00:04:18.510 --> 00:04:21.350
鮮奶油和巧克力，
得到正確答案。

00:04:21.350 --> 00:04:23.760
現在試試只添加巧克力。

00:04:23.760 --> 00:04:27.290
數量改為1，點下單。

00:04:27.290 --> 00:04:31.810
正確，因為單杯5美元加2美元的巧克力，

00:04:31.810 --> 00:04:34.840
得出7美元。

00:04:34.840 --> 00:04:41.150
這個改成4，總價更新，
得出單杯7美元。

00:04:41.150 --> 00:04:44.550
好極。
能行的。

00:04:44.550 --> 00:04:47.650
快捷地對所有情況進行測試。

00:04:47.650 --> 00:04:48.660
我要做的是，

00:04:48.660 --> 00:04:53.160
確保所有可能的代碼路徑都被流覽過。

00:04:53.160 --> 00:04:56.823
譬如，運行app，
沒有選擇鮮奶油核取方塊，

00:04:56.823 --> 00:05:00.490
那就永遠不知道這些代碼是否能用。

00:05:00.490 --> 00:05:05.720
因此要選定那些能夠執行所有代碼的情況。

00:05:05.720 --> 00:05:09.180
選擇了鮮奶油添加，
也選擇巧克力添加，

00:05:09.180 --> 00:05:12.550
就是要確認這些代碼能夠執行。

00:05:12.550 --> 00:05:14.320
要更加全面的話，

00:05:14.320 --> 00:05:17.450
應該測試這兩個布林變數的所有組合情況。

00:05:17.450 --> 00:05:21.580
所有這些組合會在這個式裡
產生不同的行為，

00:05:21.580 --> 00:05:24.870
我們要保證的是
代碼能夠在所有情況下可行。

00:05:24.870 --> 00:05:29.080
由於底價已經被計算好，

00:05:29.080 --> 00:05:34.000
還可以使用日誌資訊
來確保計算結果是預期結果。

00:05:34.000 --> 00:05:40.760
不論怎樣，在撰寫更為複雜的
控制流程敘述代碼時都要記住這點。

