WEBVTT
Kind: captions
Language: ko

00:00:00.250 --> 00:00:02.250
주문개요의 정확한 가격을
계산하기 위해

00:00:02.250 --> 00:00:05.230
정보를 전송해야 하는 곳은

00:00:05.230 --> 00:00:09.500
calculatePrice method로서 사용자가 선택한
토핑종류에 관한 것입니다

00:00:09.500 --> 00:00:12.820
calculatePrice 메소드 내에서
모든 고부하 작업(heavy lifting) 및 계산이

00:00:12.820 --> 00:00:18.340
이루어지도록 선택하면,
관련 로직 모두를 집중시키게 됩니다

00:00:18.340 --> 00:00:22.040
모든 걸 이 메소드에 통합함으로써,
계산 방법에 문제가 있을 때

00:00:22.040 --> 00:00:25.620
한 곳에서 코드를
확인할 수 있습니다

00:00:26.620 --> 00:00:28.340
그러면 훨씬 관리하기가
수월합니다

00:00:28.340 --> 00:00:29.880
그리고 나서, 이 방법 내에서

00:00:29.880 --> 00:00:33.450
커피 한잔의 기준 단가를
알아보겠습니다

00:00:33.450 --> 00:00:35.510
이건 전에 제가 여러분에게
보여드린 것과 똑같습니다

00:00:35.510 --> 00:00:38.110
커피에 휘프드 크림이 들어가야
한다면 1달러를 추가하세요

00:00:38.110 --> 00:00:41.000
커피에 초콜릿이 들어가야 한다면
2달러를 추가하세요

00:00:41.000 --> 00:00:43.630
그리고 나서 커피 한잔의
기준단가를 정하여

00:00:43.630 --> 00:00:47.860
주문량만큼 곱함으로써
총 주문가격을 결정합니다

00:00:47.860 --> 00:00:50.550
우선, 휘프드 크림에 관한 정보와

00:00:50.550 --> 00:00:54.302
chocolateCheckBox에 관한 정보를
calculatePrice 메소드에 기입합시다

00:00:54.302 --> 00:00:58.380
저는 불 방식을 사용해 hasWhippedCream
과 hasChocolate로 기재하겠습니다

00:00:58.380 --> 00:01:02.570
실제 CheckBox 객체를 기입하는 것은
의미가 없는 이유는

00:01:02.570 --> 00:01:06.430
가격을 계산하기 위해서는
불 값이 필요하기 때문이죠

00:01:06.430 --> 00:01:09.560
Android Studio에 의하면
에러가 있다는데 매소드 시그너쳐가

00:01:09.560 --> 00:01:10.530
일치하지 않기 때문이군요

00:01:10.530 --> 00:01:13.530
지금 호출하려는 방법은
영 입력 매개변수를 갖도록

00:01:13.530 --> 00:01:15.390
정의된 방법입니다

00:01:15.390 --> 00:01:18.820
calculatePrice method가 정의되어 있는
부분으로 내려가 봅시다

00:01:18.820 --> 00:01:20.700
메소드 시그너쳐를 변경해보면

00:01:20.700 --> 00:01:25.620
두 개의 입력매개변수를 취하는데
각각 addWhippedCream이라는 불 값과

00:01:25.620 --> 00:01:27.730
addChocolate 라는 불 값이
그것입니다

00:01:27.730 --> 00:01:30.850
여러분은 이 입력매개변수들을
명명하고 싶은 대로 지정할 수 있습니다

00:01:30.850 --> 00:01:34.220
저는 원래 입력한 것과 
다른 이름을 사용하기로 했는데

00:01:34.220 --> 00:01:36.900
이 이름들이 일치할 필요가
없다는 걸 보여드리기 위함이죠

00:01:36.900 --> 00:01:40.580
또한 Javadoc을 갱신하여 이 두 개의
신규 입력매개변수들을 기술하였습니다

00:01:40.580 --> 00:01:43.570
그렇게 하면, 메소드를 호출하는 사람은
어떤 게 입력될 지를 알게 됩니다

00:01:43.570 --> 00:01:47.580
다음으로, calculatePrice 메소드 내에서
변경 관련 로직을 수행해야 하는데

00:01:47.580 --> 00:01:49.930
토핑에 기초한 가격을 
바꾸는 겁니다

00:01:49.930 --> 00:01:52.130
우선, 기준단가를 계산하여

00:01:52.130 --> 00:01:54.720
basePrice라고 부르는
정변수를 생성해보겠습니다

00:01:54.720 --> 00:01:58.500
값을 5부터 시작할 텐데 그 이유는
커피 한잔의 가격이 $5이기 때문입니다

00:01:58.500 --> 00:02:00.930
그리고 이프(if)문을
생성하겠습니다

00:02:00.930 --> 00:02:05.600
addWhippedCream라는 불 값이 참이면
사용자는 휘프드 크림을 원하는 겁니다

00:02:05.600 --> 00:02:09.720
그 말은 커피 한잔의 기준단가에
1을 추가해야 한다는 것이죠

00:02:09.720 --> 00:02:11.920
좋습니다, 그렇게 하면
휘프드 크림 케이스를 처리할 것입니다

00:02:11.920 --> 00:02:13.740
이제 초콜릿 케이스로 가보겠습니다

00:02:13.740 --> 00:02:16.110
또 하나의 이프(if)문을
생성하겠습니다

00:02:16.110 --> 00:02:19.000
코드의 else 블록은
필요 없는데, 그 이유는

00:02:19.000 --> 00:02:23.000
사용자가 휘프드 크림을 원치 않으면
아무것도 할 필요가 없기 때문이죠

00:02:23.000 --> 00:02:26.550
실제로 else 케이스를 입력하려면
이런 식으로 될 겁니다

00:02:26.550 --> 00:02:29.990
아무것도 하지 말라는
코멘트를 삽입하겠죠

00:02:29.990 --> 00:02:31.960
하지만 Android studio는
그보다는 똑똑해서

00:02:31.960 --> 00:02:35.010
else 구문이 비어 있다는 걸
인지합니다

00:02:35.010 --> 00:02:38.040
코드의 유형이 혼동의 소지가
있다고 알려주고

00:02:38.040 --> 00:02:39.930
오타의 결과일 수 있다고
하는 거죠

00:02:39.930 --> 00:02:41.800
또한 이건 불필요한 여분의 
명령줄이므로

00:02:41.800 --> 00:02:43.660
else 블록을 삭제합시다

00:02:43.660 --> 00:02:45.930
이제 초콜릿 케이스로 
이동할 수 있습니다

00:02:45.930 --> 00:02:48.610
초콜릿 토핑은 휘프드 크림과는

00:02:48.610 --> 00:02:49.800
완전히 별개입니다

00:02:49.800 --> 00:02:51.880
사용자가 둘 중 하나를 
선택하든 말든

00:02:51.880 --> 00:02:53.540
서로간에 의존하지 않는 변수이죠

00:02:53.540 --> 00:02:57.060
고로, 저는 별개의 if 케이스를
생성하겠습니다

00:02:57.060 --> 00:02:59.480
사용자가 초콜릿을 원하면

00:02:59.480 --> 00:03:04.010
기준단가+2로 기준단가를
변경해야 합니다

00:03:04.010 --> 00:03:08.810
또, else 블록의 코드가 있어도
아무 일도 일어나지 않습니다

00:03:08.810 --> 00:03:12.690
사용자가 초콜릿을 원치 않으면
가격을 조절할 필요가 없습니다

00:03:12.690 --> 00:03:15.530
고로 불필요하므로
이 코드를 삭제합시다

00:03:15.530 --> 00:03:20.450
코드를 살펴보니, 커피 한잔 당
기준 가격은 $5이군요

00:03:20.450 --> 00:03:26.068
사용자가 휘프드 크림을 원하면
기준가격을 $1만큼 올려야 합니다

00:03:26.213 --> 00:03:27.610
초콜릿을 원하면

00:03:27.610 --> 00:03:30.211
기준가격을 $2만큼
올려야 하죠

00:03:30.259 --> 00:03:32.315
그런 다음, 총 주문가격을
계산하기 위해

00:03:32.290 --> 00:03:35.835
커피 한잔의 가격에 수량을
곱해야 하는 겁니다

00:03:35.835 --> 00:03:38.735
좋습니다, 이 코드는
제대로 작동할 것처럼 보이네요

00:03:38.735 --> 00:03:41.935
또한 각 코드 블록 위에
인라인 코멘트를 추가하여

00:03:41.935 --> 00:03:45.695
나중에 이 코드를 보았을 때
뭘 했는지 기억할 수 있습니다

00:03:45.695 --> 00:03:48.005
이제, 앱을 실행하여
제대로 작동하는지 확인합시다

00:03:48.005 --> 00:03:50.635
전에 함께 검토했던 케이스들을
시험해 봅시다

00:03:51.965 --> 00:03:55.319
휘프드 크림 토핑을 선택하고
수량을 3으로 선택하면

00:03:55.319 --> 00:03:56.906
커피의 단가는
$6이 될 겁니다

00:03:56.881 --> 00:04:01.110
$6 곱하기 3은 $18이고

00:04:01.142 --> 00:04:03.506
18로 제대로 계산되네요

00:04:03.531 --> 00:04:07.679
초콜릿 토핑을 추가하면 커피의
단가는 $8이 될 겁니다

00:04:07.679 --> 00:04:11.650
수량을 2로 하면
총 가격은 $16이 될 겁니다

00:04:11.650 --> 00:04:15.700
휘프드 크림 토핑을 이용하여
시험해 보았을 때 정답을 얻었죠

00:04:15.700 --> 00:04:18.510
우리가 시험해본 케이스에는
휘프드 크림과

00:04:18.510 --> 00:04:21.350
초콜릿 토핑 모두가 추가되었고
올바른 답을 얻었습니다

00:04:21.350 --> 00:04:23.760
이제는 초콜릿 토핑만
선택해봅시다

00:04:23.760 --> 00:04:27.290
수량을 1로 변경하고
주문 버튼을 누르겠습니다

00:04:27.290 --> 00:04:31.810
정확한 것 같네요, 왜냐면
커피 한잔에 $5이고 추가로

00:04:31.810 --> 00:04:34.840
초콜릿에 $2이므로
결국 $7이 되니까요

00:04:34.840 --> 00:04:41.150
이걸 4로 변경하면 커피 한잔에 $7로
고려하여 총 가격이 갱신됩니다

00:04:41.150 --> 00:04:41.650
멋지네요

00:04:42.910 --> 00:04:44.550
잘 되는 것 같네요

00:04:44.550 --> 00:04:47.650
여기 시험 케이스들을
매우 빨리 살펴보았습니다

00:04:47.650 --> 00:04:48.660
하지만 제가 하려고 했던 것은

00:04:48.660 --> 00:04:53.160
구현 가능한 모든 코드 경로들을
훑어보려고 했던 것입니다

00:04:53.160 --> 00:04:56.823
가령, 앱을 실행하면 휘프드 크림
체크 박스를 선택할 수 없으므로

00:04:56.823 --> 00:05:00.490
여기 이 코드가 제대로 작동하는지
시험할 수 없을 겁니다

00:05:00.490 --> 00:05:05.720
그래서 코드의 모든 부분을
실행할 조건들을 선정해야 합니다

00:05:05.720 --> 00:05:09.180
우리는 휘프드 크림 토핑과
초콜릿 토핑을 선택했고

00:05:09.180 --> 00:05:12.550
이 코드 역시 실행되었는지를
확인하기 위함이었습니다

00:05:12.550 --> 00:05:14.320
보다 더 철저함을 기하기 위해
시험해야 하는 것은

00:05:14.320 --> 00:05:17.450
이 두 가지 불 변수들의
모든 조합입니다

00:05:17.450 --> 00:05:21.580
이 조합들은 이 메소드에서
다른 행동으로 나타날 것이고

00:05:21.580 --> 00:05:24.870
우리 코드가 모든 케이스들에서
제대로 작동하기를 원합니다

00:05:24.870 --> 00:05:28.439
진행하면서 기준가격이
계산되고 있으므로

00:05:28.464 --> 00:05:34.000
예상대로 계산되는지 확인하기 위해
로그 메시지도 이용할 수 있습니다

00:05:34.000 --> 00:05:37.405
어쨌든, 이게 코드를 작성할 때
염두에 두어야 하는 것들이고

00:05:37.430 --> 00:05:40.760
이 제어 흐름 구문들이 있으면
코드는 더 복잡해집니다

