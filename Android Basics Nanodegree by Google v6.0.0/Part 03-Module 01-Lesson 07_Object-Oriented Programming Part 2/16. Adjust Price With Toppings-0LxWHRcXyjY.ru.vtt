WEBVTT
Kind: captions
Language: ru

00:00:00.250 --> 00:00:02.250
Для правильного расчета общей суммы заказа

00:00:02.250 --> 00:00:05.230
нам нужно передать информацию

00:00:05.230 --> 00:00:09.500
о выбранных пользователем топпингах
в метод <i>calculatePrice</i>.

00:00:09.500 --> 00:00:12.820
Я решаю производить все расчеты

00:00:12.820 --> 00:00:18.340
внутри метода <i>calculatePrice</i>, так что он
сосредоточит на себе всю связанную логику.

00:00:18.340 --> 00:00:22.040
Собрав все внутри этого метода,
в случае появления проблемы

00:00:22.040 --> 00:00:25.620
с расчетом цены мы сможем
проверить код в едином месте.

00:00:26.620 --> 00:00:28.340
Это проще выполнимо.

00:00:28.340 --> 00:00:29.880
Затем, внутри этого метода

00:00:29.880 --> 00:00:33.450
мы определим базовую цену
одной чашки кофе.

00:00:33.450 --> 00:00:35.510
Точно, как уже было показано ранее.

00:00:35.510 --> 00:00:38.110
Если кофе будет со взбитыми сливками,
то добавить доллар.

00:00:38.110 --> 00:00:41.000
Если с шоколадом, то два.

00:00:41.000 --> 00:00:43.630
Затем взять базовую цену одной чашки кофе

00:00:43.630 --> 00:00:47.860
и умножить ее на заказанное количество,
чтобы определить общую сумму заказа.

00:00:47.860 --> 00:00:50.550
Сперва передадим информацию
о взбитых сливках и шоколаде

00:00:50.550 --> 00:00:54.302
в метод <i>calculatePrice</i>.

00:00:54.302 --> 00:00:58.380
Я сделаю это в виде <i>hasWhippedCream</i>
и <i>hasChocolate</i>.

00:00:58.380 --> 00:01:02.570
Нет смысла передавать сами
объекты <b>CheckBox</b>, так как

00:01:02.570 --> 00:01:06.430
для расчета цены нас заботят
лишь булевы значения.

00:01:06.430 --> 00:01:09.560
Android Studio говорит, что тут ошибка,
потому что подпись метода

00:01:09.560 --> 00:01:10.530
не совпадает.

00:01:10.530 --> 00:01:13.530
Я пытаюсь вызвать метод,
который был определен

00:01:13.530 --> 00:01:15.390
с нулем входящих параметров.

00:01:15.390 --> 00:01:18.820
Спустимся туда,
где определен метод <i>calculatePrice</i>.

00:01:18.820 --> 00:01:20.700
Я собираюсь поменять подпись метода так,

00:01:20.700 --> 00:01:25.620
чтобы у него было два входящих
булевых параметра - <i>addWhippedCream</i>

00:01:25.620 --> 00:01:27.730
и <i>addChocolate</i>.

00:01:27.730 --> 00:01:30.850
Вы можете назвать эти параметры
каким угодно именем.

00:01:30.850 --> 00:01:34.220
Я предпочитаю использовать другие названия,

00:01:34.220 --> 00:01:36.900
чтобы показать вам,
что они не должны совпадать.

00:01:36.900 --> 00:01:40.580
Я также обновляю <b>Javadoc</b>, чтобы описать
эти два новых входящих параметра.

00:01:40.580 --> 00:01:43.570
Чтобы вызывающий метод знал,
что передавать.

00:01:43.570 --> 00:01:47.580
Далее мне нужно реализовать всю логику
изменения цены на основе топпингов

00:01:47.580 --> 00:01:49.930
внутри метода <i>calculatePrice.</i>

00:01:49.930 --> 00:01:52.130
Сперва рассчитаем базовую цену, так что

00:01:52.130 --> 00:01:54.720
я создам целочисленную переменную <i>basePrice.</i>

00:01:54.720 --> 00:01:58.500
Я задам значение 5,
так как чашка кофе стоит 5 USD.

00:01:58.500 --> 00:02:00.930
Далее создам <i>if</i>-выражение.

00:02:00.930 --> 00:02:05.600
Если булев <i>addWhippedCream</i> - истина, 
пользователь хочет взбитые сливки.

00:02:05.600 --> 00:02:09.720
То есть нам нужно добавить 1 USD
к базовой цене одной чашки кофе.

00:02:09.720 --> 00:02:11.920
Так мы справимся со случаем
со взбитыми сливками.

00:02:11.920 --> 00:02:13.740
Теперь перейдем к шоколаду.

00:02:13.740 --> 00:02:16.110
Я создам еще одно <i>if</i>-выражение.

00:02:16.110 --> 00:02:19.000
Мне не нужен блок <i>else</i>, так как

00:02:19.000 --> 00:02:23.000
если пользователь не хочет взбитые сливки,
мне не нужно ничего делать.

00:02:23.000 --> 00:02:26.550
На самом деле, если бы мне хотелось
написать <i>else</i>, то это выглядело бы так.

00:02:26.550 --> 00:02:29.990
Я лишь оставлю комментарий,
что ничего делать не нужно.

00:02:29.990 --> 00:02:31.960
Android studio, однако, весьма умен

00:02:31.960 --> 00:02:35.010
и замечает, что выражение <i>else</i>
имеет пустую часть <i>body</i>.

00:02:35.010 --> 00:02:38.040
Программа предполагает, что в этой
части кода произошла путаница,

00:02:38.040 --> 00:02:39.930
которая может быть результатом опечатки.

00:02:39.930 --> 00:02:42.250
Это просто лишние строки кода,
в которых мы не нуждаемся,

00:02:42.251 --> 00:02:43.660
так что просто удалим блок <i>else</i>.

00:02:43.660 --> 00:02:45.930
Теперь мы можем перейти
к варианту с шоколадом.

00:02:45.930 --> 00:02:48.610
Шоколадный топпинг полностью независим

00:02:48.610 --> 00:02:49.800
от взбитых сливок.

00:02:49.800 --> 00:02:51.880
Не важно, выбирает пользователь
первый или второй,

00:02:51.880 --> 00:02:53.540
они друг от друга не зависят.

00:02:53.540 --> 00:02:57.060
Так что я создам отдельный <i>if case.</i>

00:02:57.060 --> 00:02:59.480
Если пользователь хочет шоколад,

00:02:59.480 --> 00:03:04.010
то нам нужно изменить базовую цену так,
чтобы она стала <i>basePrice</i> + 2.

00:03:04.010 --> 00:03:08.810
Опять же, мы могли бы добавить блок <i>else</i>,
но он ничего не будет делать.

00:03:08.810 --> 00:03:12.690
Если пользователь не хочет шоколад,
нам не нужно менять цену,

00:03:12.690 --> 00:03:15.530
так что просто удалим этот кусок кода
за его ненужностью.

00:03:15.530 --> 00:03:20.450
Читаем код, у нас есть базовая цена
чашки кофе, равная 5 USD.

00:03:20.450 --> 00:03:24.945
Если пользователь хочет взбитые сливки,
нам нужно увеличить базовую цену на 1 USD.

00:03:24.945 --> 00:03:27.610
Затем, если пользователь хочет шоколад,

00:03:27.610 --> 00:03:29.703
то нам нужно увеличить
базовую цену на 2 USD.

00:03:29.703 --> 00:03:32.290
Считая общую сумму заказа,

00:03:32.290 --> 00:03:35.835
мы должны умножить
цену чашки кофе на количество.

00:03:35.835 --> 00:03:38.735
Кажется, этот код должен работать.

00:03:38.735 --> 00:03:41.935
Я также добавляю комментарии
над каждым блоком кода,

00:03:41.935 --> 00:03:45.399
чтобы при возвращении к нему позднее
мы смогли вспомнить, что делали.

00:03:45.400 --> 00:03:48.005
А теперь запустим приложение,
чтобы проверить, работает ли оно.

00:03:48.005 --> 00:03:50.635
Проверим случаи, которые перебрали ранее.

00:03:51.965 --> 00:03:55.319
Если я выбираю
взбитые сливки и количество 3,

00:03:55.319 --> 00:03:56.906
то каждая чашка будет стоить 6 USD.

00:03:56.906 --> 00:04:01.450
3 раза по 6 будет 18 USD
и приложение показывает 18, замечательно.

00:04:01.450 --> 00:04:07.679
Если я выберу шоколадный топпинг,
то каждая чашка кофе будет стоить 8 USD.

00:04:07.679 --> 00:04:11.650
При количестве 2 общая цена будет 16 USD.

00:04:11.650 --> 00:04:15.700
Мы попробовали выбрать взбитые сливки
и получили правильный ответ.

00:04:15.700 --> 00:04:18.510
Мы попробовали вариант со взбитыми
сливками и шоколадом одновременно

00:04:18.510 --> 00:04:21.350
и также получили верный ответ.

00:04:21.350 --> 00:04:23.760
Теперь попробуем
только шоколадный топпинг.

00:04:23.760 --> 00:04:27.290
Я поменяю количество на 1
и затем нажму <b>ЗАКАЗАТЬ</b>.

00:04:27.290 --> 00:04:31.810
Выглядит правильно, так как 5 USD
за чашку кофе плюс 2 за шоколад

00:04:31.810 --> 00:04:34.840
дает нам в сумме 7.

00:04:34.840 --> 00:04:41.150
Если я меняю количество до 4, общая сумма
меняется из расчета 7 USD за чашку.

00:04:41.150 --> 00:04:41.650
Великолепно.

00:04:42.910 --> 00:04:44.550
Похоже, работает.

00:04:44.550 --> 00:04:47.650
Мы прошлись по этим вариантам
тестирования очень быстро.

00:04:47.650 --> 00:04:49.956
Я при этом пыталась добиться,

00:04:49.957 --> 00:04:53.160
чтобы все возможные части кода работали.

00:04:53.160 --> 00:04:56.823
Например, если мы запускаем приложение и
никогда не выбираем взбитые сливки,

00:04:56.823 --> 00:05:00.490
то мы никогда бы не тестировали,
работает ли здесь этот код.

00:05:00.490 --> 00:05:05.720
Так что нужно выбрать условия, которые
заставят работать все части нашего кода.

00:05:05.720 --> 00:05:09.180
Мы выбрали взбитые сливки
и шоколад одновременно,

00:05:09.180 --> 00:05:12.550
чтобы убедиться,
что этот код также был исполнен.

00:05:12.550 --> 00:05:14.700
Для большей основательности
нам стоит протестировать

00:05:14.701 --> 00:05:17.450
все комбинации между этими
двумя булевыми переменными.

00:05:17.450 --> 00:05:21.580
Все эти комбинации вызовут
различное поведение метода,

00:05:21.580 --> 00:05:24.870
а нам нужно убедиться,
что код работает во всех случаях.

00:05:24.870 --> 00:05:29.080
Раз базовая цена совпала с нашими
расчетами, можно еще проверить сообщения,

00:05:29.080 --> 00:05:34.000
чтобы убедиться, что они рассчитаны
в соответствии с ожиданиями.

00:05:34.000 --> 00:05:37.910
В любом случае, все это необходимо
иметь в виду при написании кода,

00:05:37.910 --> 00:05:40.760
который становится все более сложным
с этими выражениями <b>control flow.</b>

