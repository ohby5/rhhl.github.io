WEBVTT
Kind: captions
Language: zh-CN

00:00:00.530 --> 00:00:01.490
这次编码任务中

00:00:01.490 --> 00:00:04.980
我希望你使用 intent 把订单汇总发给一款 email 应用

00:00:04.980 --> 00:00:07.960
首先 花一点时间为

00:00:07.960 --> 00:00:11.450
Common Intents 导航中列出的不同 intents 写代码

00:00:11.450 --> 00:00:13.180
讲师注释中有链接

00:00:13.180 --> 00:00:15.830
你还可以在网页中搜索一下 common intents

00:00:15.830 --> 00:00:17.250
第一个就是

00:00:17.250 --> 00:00:20.050
这篇文章很有用

00:00:20.050 --> 00:00:21.800
在里面 你可以发现 Android 中有什么

00:00:21.800 --> 00:00:24.900
作为练习 我们创建一个地图 intent

00:00:24.900 --> 00:00:28.100
文档中有很多有用的信息 

00:00:28.100 --> 00:00:31.740
包括使用地图 intent 时的动作和 URI 数据

00:00:31.740 --> 00:00:35.440
显示为 geo:Latitude,Longitude

00:00:35.440 --> 00:00:37.530
往下滑你会看到代码示例

00:00:38.650 --> 00:00:40.680
选中它然后复制

00:00:40.680 --> 00:00:44.250
运行这些代码 我们先把代码粘到 Java 应用

00:00:44.250 --> 00:00:47.336
我们创建了一个全新的应用 把代码粘过来 运行它

00:00:47.336 --> 00:00:50.750
但因为 Java 已经在运行 我们直接用就行

00:00:50.750 --> 00:00:53.508
为了强调方法中的所有代码

00:00:53.508 --> 00:00:55.530
把它注释掉

00:00:55.530 --> 00:01:02.050
通过点击 Mac里的 Cmd+/ 或者 windows里的 Ctrl+/ 来完成注释

00:01:02.050 --> 00:01:04.379
现在这些代码不会被执行

00:01:04.379 --> 00:01:07.980
当点击 ORDER 按钮 我想发送一个地图 intent

00:01:07.980 --> 00:01:09.100
在这行代码中

00:01:09.100 --> 00:01:12.850
我们创建一个新的 Intent 对象 使用Java中的 new 关键字创建

00:01:12.850 --> 00:01:16.543
叫做 Intent 构造函数 然后传入 ACTION_VIEW

00:01:16.543 --> 00:01:21.140
注意 当你在 Java 中看到一个全部都是大写的单词时 这意味着它是一个常量

00:01:21.140 --> 00:01:25.680
常量就是内容一旦设置就不被允许改变的量

00:01:25.680 --> 00:01:30.115
在这里 当构造我们的 Intent 时 我们使用官方的 intent 动作

00:01:30.115 --> 00:01:32.538
比如 ACTION_VIEW 

00:01:32.538 --> 00:01:36.950
或者 ACTION_SEND 它们在 Intent 类中以常量形式定义

00:01:37.950 --> 00:01:42.043
要重述一下 这行代码创建了一个新的对象实例 叫做 Intent 

00:01:42.043 --> 00:01:47.043
用 Intent  我们可以调用不同的方法 比如 setData 

00:01:47.043 --> 00:01:50.191
我们希望设置数据 URI 为

00:01:50.191 --> 00:01:51.940
经度和纬度

00:01:51.940 --> 00:01:55.570
现在 这个变量在我们的应用中是不被承认的 我先替换它

00:01:55.570 --> 00:01:59.720
这部分代码将字符串转变成了 URI 

00:01:59.720 --> 00:02:05.140
然后这个 URI 被设置成 Intent对象中的 data 字段

00:02:05.140 --> 00:02:07.430
现在 我们已经创建了地图 intent 

00:02:07.430 --> 00:02:10.620
这里 我们的代码看起来有点复杂

00:02:10.620 --> 00:02:13.490
还有很多需要做的 但重要的是 我们为了

00:02:13.490 --> 00:02:17.140
防止应用崩溃 先确认 Intent 是否可以被处理

00:02:17.140 --> 00:02:20.817
以抛球的形式说 这意味着没人去接球

00:02:20.817 --> 00:02:24.213
球就掉下去了 然后爆炸

00:02:24.213 --> 00:02:26.553
因为系统不知道接下来干什么

00:02:26.553 --> 00:02:29.340
这就是我们需要这行代码的原因

00:02:29.340 --> 00:02:32.300
我们检查一下在设备上是否存在至少一个组件

00:02:32.300 --> 00:02:33.840
可以处理这个 Intent 

00:02:33.840 --> 00:02:36.650
如果有 if 的状态就是 true

00:02:36.650 --> 00:02:39.960
然后就执行大括号里边的代码

00:02:41.380 --> 00:02:44.860
Intent 就开启了这个 activity

00:02:44.860 --> 00:02:47.925
如果设备上没有应用组件可以处理这个 Intent 

00:02:47.925 --> 00:02:50.310
那么测试状态是 false

00:02:50.310 --> 00:02:53.840
我们就跳过这部分代码 然后不发送 Intent

00:02:53.840 --> 00:02:57.000
当你完成了 intent 实验

00:02:57.000 --> 00:02:59.590
在你的应用中扩展出这个功能

00:02:59.590 --> 00:03:03.043
我们使用 intent 来发送订单汇总给 email 应用

00:03:03.043 --> 00:03:06.388
然后我们用这些文本还有这行标题

00:03:06.388 --> 00:03:07.880
来填充 email 

00:03:07.880 --> 00:03:11.050
确保移除 Java 中显示订单汇总

00:03:11.050 --> 00:03:12.260
时的代码

00:03:12.260 --> 00:03:15.810
一旦它在 email 应用中显示出来 我们应用中就不再需要了

00:03:15.810 --> 00:03:18.150
提示一下 应用应该是这个样子

00:03:18.150 --> 00:03:20.520
这里不再有订单汇总字段了

00:03:20.520 --> 00:03:23.830
当我点击 ORDER 按钮 我们直接进入 email 应用

00:03:23.830 --> 00:03:26.520
所有用户需要做的是填充 To 后边的区域

00:03:26.520 --> 00:03:27.660
然后就可以发送信息了

