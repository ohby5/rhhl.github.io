WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:03.350
In our app if you hit the-
button too many times

00:00:03.350 --> 00:00:05.970
we get a negative number
of cups of coffee.

00:00:05.970 --> 00:00:08.750
That's a problem,
because what does that even mean?

00:00:08.750 --> 00:00:11.260
We probably shouldn't allow
this to happen in our app.

00:00:11.260 --> 00:00:13.509
And the earlier we deal
with it within our app,

00:00:13.509 --> 00:00:16.590
then it will cause less headache for
us later on.

00:00:16.590 --> 00:00:20.250
For example, we don't want to submit
a bunch of orders to the coffee shop

00:00:20.250 --> 00:00:22.780
with a negative number
of cups of coffee.

00:00:22.780 --> 00:00:26.704
And at the other end of the spectrum,
there probably should also be a maximum

00:00:26.704 --> 00:00:30.094
number of coffees that we allow
the user to order in a single time.

00:00:30.094 --> 00:00:33.540
We can't really serve 10,000
cups of coffee at a time.

00:00:33.540 --> 00:00:35.270
Now that we've identified the problem,

00:00:35.270 --> 00:00:38.380
let's decide on a better behavior for
our app.

00:00:38.380 --> 00:00:42.150
How about if we only allow
the customer to order between 1 and

00:00:42.150 --> 00:00:43.700
100 cups of coffee?

00:00:43.700 --> 00:00:47.800
In our app when the user tries to press
the- button and it's already displaying

00:00:47.800 --> 00:00:50.530
1 cup of coffee, then the quantity
shouldn't go below that.

00:00:51.730 --> 00:00:54.682
Likewise, if there are 100
cups of coffee and

00:00:54.682 --> 00:00:59.513
the user continues to press the +
button, the quantity should stay at 100.

00:00:59.513 --> 00:01:02.090
We can do this by something
called input checking.

00:01:03.090 --> 00:01:05.680
By checking what the user
inputs into the app,

00:01:05.680 --> 00:01:08.930
we can recognize bad input
as soon as possible and

00:01:08.930 --> 00:01:12.690
then prevent the app from continuing
the normal flow of execution.

00:01:12.690 --> 00:01:15.760
For this quiz,
make this change in your app.

00:01:15.760 --> 00:01:19.760
Assume that the app always starts at two
cups of coffee when you first launch it.

00:01:19.760 --> 00:01:22.250
To find the right place
to make the code change,

00:01:22.250 --> 00:01:24.570
think about when
the problem first occurs.

00:01:24.570 --> 00:01:29.010
What button does the user press, and
what code is triggered by that button?

00:01:29.010 --> 00:01:32.030
Since the app has different behavior
depending on whether the number of cups

00:01:32.030 --> 00:01:32.990
of coffee is valid or

00:01:32.990 --> 00:01:37.720
not, think about using a control flow
statement like an if else statement.

00:01:37.720 --> 00:01:41.910
That way, the logic in the app can be
different based on a certain condition.

00:01:41.910 --> 00:01:45.110
If the user is trying to order a number
of cups of coffee outside of these

00:01:45.110 --> 00:01:48.770
bounds, then figure out how to
stop the app from continuing.

00:01:48.770 --> 00:01:52.110
Once you make these changes,
answer these questions.

00:01:52.110 --> 00:01:53.490
Which method did you modify so

00:01:53.490 --> 00:01:56.950
that the quantity does not
go below 1 cup of coffee?

00:01:56.950 --> 00:01:58.800
Write your answer in this box.

00:01:58.800 --> 00:02:00.695
Then, which method did you modify so

00:02:00.695 --> 00:02:03.521
the quantity doesn't go
above 100 cups of coffee?

00:02:03.521 --> 00:02:05.550
Write your answer in this box.

00:02:05.550 --> 00:02:09.770
As a hint, it may be useful for you to
know that you can put a return statement

00:02:09.770 --> 00:02:13.880
anywhere inside a method and that will
cause you to exit the method early.

00:02:13.880 --> 00:02:16.560
Then the rest of the code
after that will be skipped.

00:02:16.560 --> 00:02:18.750
Check the end chapter notes for
more details.

00:02:18.750 --> 00:02:19.730
As a challenge,

00:02:19.730 --> 00:02:23.670
you can extend the app to also add a
toast message that explains to the user

00:02:23.670 --> 00:02:27.590
why the quantity isn't updating
when it hits these bounds.

00:02:27.590 --> 00:02:30.050
This is what the toast message
could look like in the app

00:02:30.050 --> 00:02:31.840
when you've hit the lower bound.

00:02:31.840 --> 00:02:35.390
If I hit the- button a bunch of times
to try to go below 1 cup of coffee,

00:02:35.390 --> 00:02:37.110
it shows this toast message.

00:02:37.110 --> 00:02:39.380
You cannot have less than 1 coffee.

00:02:39.380 --> 00:02:43.270
By the way, if you want to test that the
upper bound works, instead of tapping

00:02:43.270 --> 00:02:47.280
the + button 99 times, you can just
make a temporary change in the code.

00:02:48.360 --> 00:02:53.100
You can change the initial global
quantity variable in the Java file and

00:02:53.100 --> 00:02:57.287
the initial quantity value in
the XML to start at a higher number

00:02:57.287 --> 00:02:59.267
like 99 instead of just 2.

00:02:59.267 --> 00:03:03.103
Then, you'll only have to hit the +
button a couple of times to go over 100

00:03:03.103 --> 00:03:04.650
cups of coffee.

00:03:04.650 --> 00:03:08.380
I highly recommend testing this to make
sure that your code works as expected

00:03:08.380 --> 00:03:09.500
for the upper bound.

00:03:09.500 --> 00:03:11.630
When you're done with all of this,
go ahead and continue.

