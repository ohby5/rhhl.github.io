WEBVTT
Kind: captions
Language: pt-BR

00:00:00.501 --> 00:00:03.501
Espero que você tenha podido
explorar os variados intents

00:00:03.534 --> 00:00:05.868
do guia de intents comuns.

00:00:05.901 --> 00:00:07.701
Por exemplo,
eu te mostrei mais cedo

00:00:07.734 --> 00:00:09.834
que modifiquei
o método submitOrder().

00:00:09.868 --> 00:00:12.000
Eu transformei o código
em comentário

00:00:12.033 --> 00:00:14.767
e adicionei o código
do intent de mapa.

00:00:14.801 --> 00:00:18.100
No meu dispositivo,
quando clico em "Order",

00:00:18.133 --> 00:00:20.133
em vez de atualizar
o resumo do pedido,

00:00:20.167 --> 00:00:23.234
um intent é enviado
ao app de mapa.

00:00:23.267 --> 00:00:25.701
O app do Google Maps
recebe um intent

00:00:25.734 --> 00:00:28.000
e atualiza o mapa
para mostrar

00:00:28.033 --> 00:00:31.000
o local solicitado
pelo intent.

00:00:31.033 --> 00:00:33.300
Mesmo que esses intents
não façam sentido

00:00:33.334 --> 00:00:35.400
no contexto do nosso app
de pedir café,

00:00:35.434 --> 00:00:38.567
é uma boa hora para treinar
a criação de intents.

00:00:38.601 --> 00:00:41.968
Vamos desfazer a mudança
e voltar para nossas tarefas.

00:00:42.567 --> 00:00:46.100
Para adicionar este recurso,
temos que mandar via intent

00:00:46.133 --> 00:00:48.234
o resumo do pedido
a um app de email.

00:00:48.267 --> 00:00:50.267
Se você não sabe
como fazer isso,

00:00:50.300 --> 00:00:52.200
faça uma busca na internet.

00:00:52.234 --> 00:00:55.100
Eu pesquisei
"email intent Android".

00:00:55.133 --> 00:00:56.801
Vários links úteis
apareceram,

00:00:56.834 --> 00:00:59.267
como um post no Stack Overflow
e um tutorial.

00:00:59.300 --> 00:01:01.200
Como aparece o guia
Common Intents,

00:01:01.234 --> 00:01:03.367
que é documentação oficial
do Android,

00:01:03.400 --> 00:01:05.100
eu vou clicar nele.

00:01:05.133 --> 00:01:08.968
Na barra lateral há um link
sobre criar intents de email.

00:01:09.000 --> 00:01:10.400
Vou abri-lo.

00:01:10.434 --> 00:01:12.968
Aqui mostra como enviar
um intent para criar email

00:01:13.000 --> 00:01:14.634
com anexos opcionais.

00:01:14.667 --> 00:01:17.901
Na documentação,
há dois exemplos de código.

00:01:17.934 --> 00:01:21.968
Pelo comentário,
este é o exemplo que queremos.

00:01:22.000 --> 00:01:25.334
Queremos que nosso intent
vá para um app de email,

00:01:25.367 --> 00:01:28.501
e não um app de SMS
ou de mídia social.

00:01:28.534 --> 00:01:30.701
Vamos selecionar e copiar
este código,

00:01:30.734 --> 00:01:32.801
e depois colar
no nosso app.

00:01:33.400 --> 00:01:35.334
Olhando o código
do nosso app Just Java,

00:01:35.367 --> 00:01:38.267
onde é que deveríamos
colar este código?

00:01:38.300 --> 00:01:41.767
Queremos enviar o resumo
para um app de email

00:01:41.801 --> 00:01:44.434
assim que obtivermos
o resumo do pedido.

00:01:44.467 --> 00:01:46.300
O lugar em que temos
o resumo completo

00:01:46.334 --> 00:01:50.400
é após esta linha aqui,
que o cria e armazena

00:01:50.434 --> 00:01:52.801
numa variável string
chamada priceMessage.

00:01:52.834 --> 00:01:55.033
Vou adicionar
uma linha aqui

00:01:55.067 --> 00:01:57.701
e inserir nosso código.

00:01:57.734 --> 00:02:00.100
Perceba como criamos
um novo objeto intent

00:02:00.133 --> 00:02:01.300
usando o construtor

00:02:01.334 --> 00:02:03.434
com a nova palavra-chave
em Java.

00:02:03.467 --> 00:02:06.868
Estamos passando um argumento
no construtor como entrada

00:02:06.901 --> 00:02:09.267
para inicializar
este objeto intent.

00:02:09.300 --> 00:02:14.467
O argumento é esta constante
chamada Intent.ACTION_SENDTO.

00:02:14.501 --> 00:02:18.267
Lembre-se que a convenção
diz que maiúsculas em Java

00:02:18.300 --> 00:02:19.901
é sinônimo de constante.

00:02:19.934 --> 00:02:24.501
Uma constante é uma variável
cujos conteúdos não mudam.

00:02:24.534 --> 00:02:27.000
Aqui,
ao criarmos nosso intent,

00:02:27.033 --> 00:02:29.400
usamos
a ação intent oficial,

00:02:29.434 --> 00:02:31.000
ACTION_SENDTO,

00:02:31.033 --> 00:02:34.200
definida como constante
na classe intent.

00:02:34.234 --> 00:02:37.834
Depois, chamamos uns métodos
no recém-criado objeto intent.

00:02:37.868 --> 00:02:40.734
Definimos os dados
como URI deste formato,

00:02:40.767 --> 00:02:42.601
"mailto:".

00:02:42.634 --> 00:02:45.801
Assim, só apps de email
suportarão o intent.

00:02:45.834 --> 00:02:48.901
Então, adicionamos
informações extra ao intent.

00:02:48.934 --> 00:02:52.334
Não temos que especificar
o destinatário deste email,

00:02:52.367 --> 00:02:54.767
então vou deletar
esta linha.

00:02:54.801 --> 00:02:58.567
Mas temos que especificar
o assunto da mensagem,

00:02:58.601 --> 00:03:01.968
então vou substituir isto
com o assunto correto.

00:03:03.033 --> 00:03:05.601
"Pedido Just Java de..."

00:03:06.133 --> 00:03:09.234
e o nome da pessoa.

00:03:09.267 --> 00:03:11.200
As linhas seguintes
do código

00:03:11.234 --> 00:03:13.801
veem se há atividade
no dispositivo

00:03:13.834 --> 00:03:15.968
capaz de assumir o intent.

00:03:16.000 --> 00:03:18.701
Se houver,
é seguro enviá-lo,

00:03:18.734 --> 00:03:22.167
e chamamos startActivity()
usando o intent.

00:03:22.200 --> 00:03:25.100
Se não houver
nenhuma atividade,

00:03:25.133 --> 00:03:29.501
pulamos este bloco de código
e deixamos de enviar o intent.

00:03:30.434 --> 00:03:32.367
Vou rodar o app
no meu dispositivo.

00:03:33.100 --> 00:03:34.634
Quando eu clico em "Order",

00:03:34.667 --> 00:03:37.968
um intent é enviado
ao app de email do dispositivo.

00:03:38.000 --> 00:03:41.801
Por padrão, o app do Gmail
irá assumir esse intent.

00:03:41.834 --> 00:03:44.934
Como eu personalizei
o assunto do email no código,

00:03:44.968 --> 00:03:48.467
aparece "Pedido Just Java
de Kaptain Kunal,"

00:03:48.501 --> 00:03:51.667
que é o nome
que cadastrei no app.

00:03:51.701 --> 00:03:55.601
A pergunta original do quiz
pedia para preencher o assunto

00:03:55.634 --> 00:03:58.267
e o corpo do email
com o resumo do pedido.

00:03:58.300 --> 00:04:00.100
Vamos fazer isso.

00:04:00.133 --> 00:04:03.234
Revisitando a documentação
do intent de email,

00:04:03.267 --> 00:04:06.467
vou subir
até os intent.EXTRA.

00:04:07.367 --> 00:04:09.267
Precisamos adicionar
um intent.EXTRA

00:04:09.300 --> 00:04:13.334
para cada informação extra
que quisermos dar sobre o email.

00:04:13.367 --> 00:04:17.467
Por exemplo, um intent.EXTRA
sobre os destinatários do email

00:04:17.501 --> 00:04:21.601
e outro sobre o assunto
do email.

00:04:21.634 --> 00:04:23.100
Mas é isso aqui
que queremos,

00:04:23.133 --> 00:04:27.934
adicionar um Intent.EXTRA
especificando o corpo do email.

00:04:27.968 --> 00:04:30.667
Repetindo,
Intent.EXTRA_TEXT

00:04:30.701 --> 00:04:34.100
é uma constante definida
na classe Java intent.

00:04:34.133 --> 00:04:36.434
Clicando nele,
há mais informações.

00:04:36.968 --> 00:04:40.467
É definido como uma string
na classe intent.

00:04:40.501 --> 00:04:44.367
O valor de constante
é esta string aqui.

00:04:44.400 --> 00:04:47.334
No app Just Java,
ao criarmos o intent,

00:04:47.367 --> 00:04:49.234
preencheremos este extra,

00:04:49.267 --> 00:04:52.300
contendo o corpo
da mensagem de email.

00:04:52.334 --> 00:04:54.400
Quando o app de email
receber o intent,

00:04:54.434 --> 00:04:57.000
saberá que deve procurar
este intent.EXTRA

00:04:57.033 --> 00:04:58.801
para encontrar
o corpo do email

00:04:58.834 --> 00:05:02.167
e preencher isso
na interface de usuário.

00:05:02.200 --> 00:05:04.334
Vamos mudar o código.

00:05:04.367 --> 00:05:06.267
Vou selecionar
esta linha de código,

00:05:06.300 --> 00:05:08.934
que adiciona um extra
ao intent,

00:05:08.968 --> 00:05:11.133
como assunto do email.

00:05:11.167 --> 00:05:13.634
Na linha seguinte,
colarei o código.

00:05:13.667 --> 00:05:17.300
Agora poremos outro extra
no intent.

00:05:18.033 --> 00:05:21.334
Este extra
corresponderá a...

00:05:21.367 --> 00:05:24.400
Intent.EXTRA_TEXT,

00:05:25.133 --> 00:05:28.567
assim sabemos
que é para o corpo do email.

00:05:28.601 --> 00:05:30.701
O segundo argumento
deste método

00:05:30.734 --> 00:05:33.834
será o próprio corpo
do email.

00:05:34.968 --> 00:05:37.501
Ele deve conter
só o resumo do pedido,

00:05:37.534 --> 00:05:39.234
armazenado em priceMessage,

00:05:39.267 --> 00:05:42.734
então vou copiar a variável
para cá.

00:05:44.734 --> 00:05:47.033
Recapitulando,
para o objeto intent,

00:05:47.067 --> 00:05:48.968
estamos chamando
o método putExtra()

00:05:49.000 --> 00:05:51.400
para especificar
o assunto do email.

00:05:52.167 --> 00:05:55.667
No objeto que estamos chamando,
poremos outro putExtra()

00:05:55.701 --> 00:05:58.200
para especificar
o corpo do email.

00:05:58.234 --> 00:06:01.234
O corpo do email
é o resumo do pedido.

00:06:01.267 --> 00:06:03.167
Vamos rodar o app
no dispositivo.

00:06:03.834 --> 00:06:07.467
Completado o pedido,
eu clico em "Submit".

00:06:07.501 --> 00:06:09.133
Enviamos um intent
ao app de email

00:06:09.167 --> 00:06:12.834
com o assunto preenchido,
e o resumo do pedido aparece.

00:06:14.634 --> 00:06:17.300
O terceiro passo da tarefa
será remover o código

00:06:17.334 --> 00:06:20.267
que exibe o resumo do pedido
no Just Java.

00:06:20.300 --> 00:06:22.834
Agora,
ele aparecerá no email.

00:06:22.868 --> 00:06:25.300
Vou começar modificando
o layout activity_main,

00:06:25.334 --> 00:06:28.300
retirando os textViews
do resumo do pedido.

00:06:28.334 --> 00:06:31.100
No final do layout,
deletarei o cabeçalho

00:06:31.133 --> 00:06:34.434
e o textView que exibia
o resumo do pedido.

00:06:34.467 --> 00:06:37.601
Salvarei e irei
para o arquivo Java.

00:06:37.634 --> 00:06:39.467
No MainActivity.java,

00:06:39.501 --> 00:06:42.200
não preciso mais deste método
displayMessage(),

00:06:42.234 --> 00:06:44.534
que atualizava o textView
do resumo do pedido,

00:06:44.567 --> 00:06:48.200
já que este View e este ID
não existem mais.

00:06:52.501 --> 00:06:54.467
Como eu deletei
o displayMessage(),

00:06:54.501 --> 00:06:56.501
o Android Studio
acusa um erro,

00:06:56.534 --> 00:06:58.501
dizendo que o método
não existe mais,

00:06:58.534 --> 00:07:00.234
então vou deletar isto.

00:07:00.934 --> 00:07:02.601
Analisando o código,
faz sentido.

00:07:02.634 --> 00:07:04.634
Quando clicamos
no botão "Order",

00:07:04.667 --> 00:07:06.501
o método submitOrder()
será chamado,

00:07:06.534 --> 00:07:07.901
este código será executado

00:07:07.934 --> 00:07:11.434
e enviará um intent
ao app de email.

00:07:11.467 --> 00:07:15.801
Não há necessidade de exibir
o resumo do pedido no app mais.

00:07:15.834 --> 00:07:18.100
Vamos ver se o app
ainda está funcionando.

00:07:18.133 --> 00:07:19.834
Quando você deleta
muito código,

00:07:19.868 --> 00:07:22.334
é mais fácil ver logo
se tudo funciona

00:07:22.367 --> 00:07:24.567
e desfazer as mudanças,
se houver erro,

00:07:24.601 --> 00:07:26.934
do que deixar
para mais tarde.

00:07:28.834 --> 00:07:31.634
O app está funcionando.
Parabéns!

00:07:31.667 --> 00:07:34.601
Você adicionou um intent
ao app Just Java.

00:07:34.634 --> 00:07:37.100
Eles são um dos sustentáculos
do Android,

00:07:37.133 --> 00:07:39.133
mas ainda há muitos
componentes Android

00:07:39.167 --> 00:07:41.033
que podem ajudá-lo
a compilar.

00:07:41.067 --> 00:07:44.934
Procure-os por conta própria
depois que terminar este curso.

