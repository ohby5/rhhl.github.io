WEBVTT
Kind: captions
Language: ja

00:00:00.452 --> 00:00:03.620
とても手ごたえのある
タスクでしたね

00:00:03.620 --> 00:00:08.150
要素が色々あり
使ったことのないビューもありました

00:00:08.150 --> 00:00:10.650
ソリューションを
一緒に見ていきましょう

00:00:10.650 --> 00:00:13.840
始めに
これからのステップを並べてみましょう

00:00:13.840 --> 00:00:16.160
第一に
ユーザが名前を入力する

00:00:16.160 --> 00:00:18.250
テキスト欄を追加します

00:00:18.250 --> 00:00:20.880
第二に
注文ボタンが押されたら

00:00:20.880 --> 00:00:24.630
テクスト欄から名前を取り出し
変数に保存します

00:00:24.630 --> 00:00:27.270
第三に全注文内容を更新し
名前が表示される

00:00:27.270 --> 00:00:27.880
ようにします

00:00:29.240 --> 00:00:30.460
では第一のステップからです

00:00:31.500 --> 00:00:34.800
テキスト入力欄を
まだアプリに加えていませんでした

00:00:34.800 --> 00:00:36.250
やり方を Google で検索してみます

00:00:37.270 --> 00:00:38.850
ユーザからの入力情報を
得たいので

00:00:38.850 --> 00:00:42.165
「user input android」と
入力します

00:00:42.165 --> 00:00:45.275
developer.android.com
のサイトはよさそうですね

00:00:46.295 --> 00:00:49.765
このページには「ユーザ入力における
最も有用な手段」が載っています

00:00:49.765 --> 00:00:55.455
タッチジェスチャやキーボード入力
ゲームコントローラについて載っています

00:00:55.455 --> 00:00:59.455
キーボード入力について知りたいので
はじめのリンクを開きます

00:00:59.455 --> 00:01:02.045
ぺージ全体を手早く
見ていきます

00:01:02.045 --> 00:01:05.150
たくさんの XML の例があります
役に立ちそうです

00:01:05.150 --> 00:01:08.710
始め山括弧の後に
ビューの名前があります

00:01:08.710 --> 00:01:11.550
この場合のビューの名前は
EditText のようです

00:01:12.610 --> 00:01:17.260
他の例を見ていくと
それらも EditText ビュー内にあります

00:01:17.260 --> 00:01:22.330
キーボード入力を使うこのビューは
EditText と言うようです

00:01:22.330 --> 00:01:25.269
他の方法は
Common Android Views チートシートです

00:01:26.330 --> 00:01:29.360
EditText はまた
このビュー一覧にもあり

00:01:29.360 --> 00:01:32.670
このアルバム説明の例は
私たちのアプリのネーム欄と似ています

00:01:33.730 --> 00:01:35.680
この XML をコピーし
アプリに追加してみます

00:01:36.850 --> 00:01:39.790
ネーム欄は注文フォームの一番上

00:01:39.790 --> 00:01:42.910
トッピングのヘッダの上ですから
ここに加えます

00:01:42.910 --> 00:01:45.440
すぐに ヒントのシンボルを
解決できないという

00:01:45.440 --> 00:01:46.449
エラーが表示されます

00:01:47.600 --> 00:01:51.430
これはアルバムの説明テキストについてですが
チートシート用でした

00:01:51.430 --> 00:01:55.640
これは消去し
私たちのヒント「ネーム」に換えます

00:01:55.640 --> 00:01:58.640
注文フォームの一番上
トッピングヘッダの上に

00:01:58.640 --> 00:02:01.910
ネーム欄を置きたいので
ここに入れます

00:02:01.910 --> 00:02:05.150
この縦方向一線のレイアウトの
始めの 子 となります

00:02:05.150 --> 00:02:08.109
では次に全ての属性が
希望に沿って設定されているか確認します

00:02:09.120 --> 00:02:10.220
はじめにビュー ID があります

00:02:10.220 --> 00:02:13.350
album_description_view という名前です

00:02:13.350 --> 00:02:15.590
これはチートシートの例ですので
もっと適切な

00:02:15.590 --> 00:02:18.000
名前に替えます

00:02:19.020 --> 00:02:20.470
name field（ネーム欄）にします

00:02:21.840 --> 00:02:24.419
次は良く知っている
幅と高さの属性です

00:02:26.000 --> 00:02:29.052
テキスト編集欄の幅は今
親と同じになっています

00:02:29.052 --> 00:02:33.620
つまりこの欄は
親の一線のレイアウトと同じ幅ということです

00:02:33.620 --> 00:02:34.960
次は高さです

00:02:34.960 --> 00:02:36.820
これはコンテンツを折り返すためにあります

00:02:36.820 --> 00:02:39.380
中のコンテンツと
同じ高さになります

00:02:39.380 --> 00:02:42.630
この2つの値はよさそうなので
このままにします

00:02:42.630 --> 00:02:44.230
次はヒントです

00:02:44.230 --> 00:02:46.450
この属性はこれまで
扱っていません

00:02:46.450 --> 00:02:49.800
この文字列を解決できないという
エラーが出ています

00:02:49.800 --> 00:02:51.580
EditText アンドロイドのドキュメントを参照し

00:02:51.580 --> 00:02:55.020
この属性の意味を
調べてみましょう

00:02:56.020 --> 00:03:00.220
EditText アンドロイドを検索すると
そのドキュメントページが見つかります

00:03:00.220 --> 00:03:05.040
クラスの簡単な概要に続いて
XML 属性のリストがあります

00:03:05.040 --> 00:03:08.900
テキスト編集クラスはテキストビューと
ビューから継承されているのがわかります

00:03:08.900 --> 00:03:12.250
だからここに
継承された XML 属性があるのです

00:03:12.250 --> 00:03:14.720
開いたら
「android hint」を探します

00:03:15.990 --> 00:03:18.230
これが
探していた属性です

00:03:18.230 --> 00:03:21.270
右にスクロールすると

00:03:21.270 --> 00:03:24.860
テキストが空欄のときに表示されるヒント
とあります

00:03:24.860 --> 00:03:27.850
これによりユーザは
入力すべき内容を把握できます

00:03:27.850 --> 00:03:31.870
デモをお見せしたアプリでは
ヒントテキストはネームとありました

00:03:31.870 --> 00:03:35.440
ですから 私たちのコードでは
この文字列を消しNameと入力します

00:03:36.500 --> 00:03:37.750
次に入力タイプです

00:03:37.750 --> 00:03:41.690
これも新しい属性です
ドキュメントを見ましょう

00:03:41.690 --> 00:03:44.790
Android input type（入力タイプ）
と入力します

00:03:44.790 --> 00:03:46.100
ここにありますが

00:03:46.100 --> 00:03:50.830
これはテキスト欄に置かれるデータタイプだと
説明があります

00:03:50.830 --> 00:03:54.980
ユーザがテキストを入力する方法を
入力メソッドが決定するのに使われます

00:03:54.980 --> 00:03:58.240
これは少し曖昧な説明ですが
この属性をクリックし

00:03:58.240 --> 00:03:59.610
詳細を見てみましょう

00:03:59.610 --> 00:04:02.760
InputTypeの
完全な説明があります

00:04:02.760 --> 00:04:05.780
これは設定できる
値のリストです

00:04:05.780 --> 00:04:09.750
チートシートの例では
XML は textMultiLine となっていました

00:04:09.750 --> 00:04:14.120
つまりテキスト編集欄で
複数行のテキストが利用できるということです

00:04:14.120 --> 00:04:16.470
私達のアプリでは
人の名前が長すぎるということはないので

00:04:16.470 --> 00:04:19.550
一行あれば
よいでしょう

00:04:19.550 --> 00:04:21.959
テキストを入力タイプとしましょう

00:04:21.959 --> 00:04:25.010
textMultiline を消去し
テキストを入力開始すると

00:04:25.010 --> 00:04:29.710
オートコンプリートの
全ての選択肢が表示されます

00:04:29.710 --> 00:04:31.910
テキストを選択し「Enter」を押します

00:04:31.910 --> 00:04:34.660
では EditText欄が表示されるか
確認するため

00:04:34.660 --> 00:04:36.180
デバイスでアプリを使ってみます

00:04:36.180 --> 00:04:38.490
アプリが起動すると
ネーム欄がありますね

00:04:38.490 --> 00:04:39.410
素晴らしい

00:04:39.410 --> 00:04:40.055
入力もOKです

00:04:40.055 --> 00:04:42.540
しかし
名前が小文字で始まってしまいます

00:04:42.540 --> 00:04:47.260
初めの文字を大文字で
入力したいのですが…

00:04:47.260 --> 00:04:51.030
修正するには
ここで入力タイプを変更し

00:04:51.030 --> 00:04:52.350
他のオプションも見てみます

00:04:53.390 --> 00:04:57.713
textCapcharacters 
textCapwords や textCapsentences

00:04:57.713 --> 00:05:00.210
他にもたくさんあります

00:05:00.210 --> 00:05:02.350
大文字小文字について
扱っているのがよさそうです

00:05:03.690 --> 00:05:05.530
これらの説明を
読みましたが

00:05:05.530 --> 00:05:08.500
textCapwords は
試す価値がありそうです

00:05:08.500 --> 00:05:10.000
これをコピーして使いましょう

00:05:11.040 --> 00:05:13.699
textを
textCapwords で置き換えます

00:05:14.930 --> 00:05:16.170
ではアプリをまた見てみましょう

00:05:16.170 --> 00:05:19.415
キーボードは大文字で表示されていて
大文字で入力開始できました

00:05:19.415 --> 00:05:22.306
あとの文字は小文字になり
スペースを加えると

00:05:22.306 --> 00:05:24.088
次の初めの文字は大文字になりました

00:05:24.088 --> 00:05:25.380
上出来です

00:05:25.380 --> 00:05:29.220
もう一点気づいたのは
ネーム欄とトッピングヘッダの

00:05:29.220 --> 00:05:31.645
間にもう少しスペースが欲しいということです

00:05:31.645 --> 00:05:36.010
縦方向のスペースは16 dpにしていたので
同じにしましょう

00:05:36.010 --> 00:05:38.816
EditText 欄の下の余白に
入れることもできますが

00:05:38.816 --> 00:05:42.800
トッピングヘッダの上の余白に
加えてしまいましょう

00:05:42.800 --> 00:05:45.700
スペースができ
ネーム欄も正常に表示されています

00:05:46.730 --> 00:05:49.650
これで第一のステップの
XML の変更は終了です

00:05:49.650 --> 00:05:51.970
今度は java コードの変換です

00:05:51.970 --> 00:05:54.340
第二のステップでは
注文ボタンがクリックされると

00:05:54.340 --> 00:05:57.650
テキスト欄の名前が取り出され
変数に保存されるようにします

00:05:58.730 --> 00:06:03.140
この欄を人の目で見るのは容易ですが
Android アプリは

00:06:03.140 --> 00:06:06.980
この名前をここの全注文内容に加えたいというユーザの意図は
分かっていません

00:06:08.070 --> 00:06:10.840
ここでは Lyla のハードコードされた名前が今も表示されています

00:06:10.840 --> 00:06:13.190
切り替えてこの名前を使いたいと思います

00:06:13.190 --> 00:06:16.540
これは 全注文内容を更新するために
チェックボックスに印が付けられているか

00:06:16.540 --> 00:06:19.560
否かを確認する方法を
学んだ時と似ています

00:06:19.560 --> 00:06:22.560
EditText欄をどのように読み込むのかは
まだ習っていませんね

00:06:22.560 --> 00:06:23.570
Google 検索してみましょう

00:06:23.570 --> 00:06:29.190
EditText 欄アンドロイドからテキストを取得する方法
を入力し検索してみます

00:06:29.190 --> 00:06:30.390
初めの検索結果がよさそうです

00:06:30.390 --> 00:06:32.720
StackOverflow の質問ページです

00:06:32.720 --> 00:06:35.880
質問を見てもいいですが
主には答えを探しています

00:06:35.880 --> 00:06:40.050
このページが役立つかどうか
見ていきます

00:06:40.050 --> 00:06:43.510
この答えは緑のチェックマークがあり
「いいね！」もたくさんもらっています

00:06:43.510 --> 00:06:45.610
もっと良く読んでみたいと思います

00:06:45.610 --> 00:06:47.810
コードスニペットから始めます

00:06:47.810 --> 00:06:51.820
このコードはアクティビティクラスに採用できそうです
私たちが探しているのは

00:06:51.820 --> 00:06:53.030
FindViewById メソッドだからです

00:06:53.030 --> 00:06:57.970
このIDを持つビューのビューヒエラルキーを
検索しているからです

00:06:57.970 --> 00:07:01.910
このビューを見つけたら
EditText ビューに置変換し

00:07:01.910 --> 00:07:05.250
テキストと呼ばれる変数に
保存します

00:07:05.250 --> 00:07:09.100
二行目に
値と呼ばれる文字列変数を示し

00:07:09.100 --> 00:07:10.330
その中に保存します

00:07:10.330 --> 00:07:14.751
ここにはたくさんのカッコ
点や文字がありますが

00:07:14.751 --> 00:07:18.780
EditText欄からテキストを取り出そうとしていると
分かると思います

00:07:18.780 --> 00:07:23.260
そして値と呼ばれる文字列変数の中に
取り出した内容を保存します

00:07:23.260 --> 00:07:27.120
このコードをコピーして
アプリに貼り付け機能するか見てみましょう

00:07:27.120 --> 00:07:31.480
MainActivity のクラスでは
submitOrder メソッドでコードを追加します

00:07:31.480 --> 00:07:34.400
このメソッドを選んだ理由は
ここで注文ボタンがクリックされ

00:07:34.400 --> 00:07:37.170
ネーム欄からの読み込みを
ここで行なうからです

00:07:38.230 --> 00:07:41.260
StackOverflowに投稿されたコードを
メソッドの上に

00:07:41.260 --> 00:07:41.820
貼り付けます

00:07:43.110 --> 00:07:46.610
シンボルを解決できないという
エラーがすぐに出てしまいます

00:07:46.610 --> 00:07:50.340
ネーム欄のビューIDに
置き換える必要があります

00:07:50.340 --> 00:07:52.440
layout.xml に戻ります

00:07:52.440 --> 00:07:56.588
EditText 欄と
name_field のビューIDは入力済みです

00:07:56.588 --> 00:08:01.410
ですから Java ファイルで
これをR.id.name_fieldに替えます

00:08:01.410 --> 00:08:04.530
もうエラーではないので
アプリでを試してもいいのですが

00:08:04.530 --> 00:08:07.400
このコードが機能するかどうか
どうやったらわかるのでしょうか

00:08:07.400 --> 00:08:10.520
ここにログメッセージを追加し

00:08:10.520 --> 00:08:14.300
値が実際にこの欄のネームになっているかどうか
検証することができます

00:08:14.300 --> 00:08:16.760
ログメッセージのコードはこれです

00:08:16.760 --> 00:08:20.110
ネームの次にコロン
そして値の文字列と入力します

00:08:21.110 --> 00:08:23.150
この変数において
値は曖昧な名前です

00:08:23.150 --> 00:08:25.260
「name（ネーム）」
とします

00:08:25.260 --> 00:08:28.460
この方がより具体的な
名前になります

00:08:28.460 --> 00:08:31.005
EditTextの変数名も

00:08:31.005 --> 00:08:33.760
name field（ネーム欄）とします

00:08:33.760 --> 00:08:37.070
Text だけだと
コード内で混乱が生じることがあります

00:08:37.070 --> 00:08:40.299
ではアプリを実行し
このログメッセージを確認します

00:08:40.299 --> 00:08:40.840
やってみます

00:08:40.840 --> 00:08:42.190
注文フォームで入力し

00:08:42.190 --> 00:08:45.790
注文ボタンを押し
ここでログを確認します

00:08:46.810 --> 00:08:51.210
MainActivityの新しいメッセージ
Name: Antigravity Anthony が表示されます

00:08:51.210 --> 00:08:52.680
いいみたいです

00:08:52.680 --> 00:08:56.360
このコードで実際に
この欄から名前を取り出されたようです

00:08:56.360 --> 00:08:59.620
よし
変数にユーザ名が入り

00:08:59.620 --> 00:09:04.060
ログを使って
正しい名前だと確認したので

00:09:04.060 --> 00:09:06.330
全注文内容を更新し
この名前を表示することができます

00:09:07.380 --> 00:09:10.280
全注文内容にこの正しい名前を
表示させるには

00:09:10.280 --> 00:09:13.860
このメソッドに入力パラメータとして
パスする必要があります

00:09:13.860 --> 00:09:16.610
つまり
全注文内容作成メソッドを呼び出す際

00:09:16.610 --> 00:09:20.450
入力引数として
ネーム変数をパスさせます

00:09:20.450 --> 00:09:22.410
まずそこを変更しましょう

00:09:22.410 --> 00:09:24.840
ネームを入力引数として追加すると

00:09:24.840 --> 00:09:29.660
呼び出しがメソッドシグネチャと一致せず
エラーになります

00:09:29.660 --> 00:09:31.950
メソッドの定義をスクロールダウンしていき

00:09:31.950 --> 00:09:35.670
String name（文字列名）を
入力パラメータとして追加できます

00:09:35.670 --> 00:09:38.410
Java ドキュメントも更新できます

00:09:38.410 --> 00:09:41.600
createOrderSummary メソッド内で
この変数が使えます

00:09:41.600 --> 00:09:46.630
ハードコードされた名前を消去し
このネーム変数に連結します

00:09:47.930 --> 00:09:51.360
要約すると
name_field からネームを取得し

00:09:51.360 --> 00:09:55.590
それを入力値として
createOrderSummary メソッドにパスします

00:09:55.590 --> 00:09:59.620
このメソッド内で
そのネームを全注文内容に追加できます

00:09:59.620 --> 00:10:01.720
アプリを実行しコードを確認しましょう

00:10:01.720 --> 00:10:05.200
アプリが起動したら
名前を入力しトッピングを選択し

00:10:05.200 --> 00:10:06.790
注文数を変えます

00:10:06.790 --> 00:10:08.600
それから注文ボタンを押します

00:10:08.600 --> 00:10:11.190
先ほど入力した名前が
全注文内容に

00:10:11.190 --> 00:10:12.160
反映されました

00:10:12.160 --> 00:10:13.458
やった！

00:10:13.458 --> 00:10:17.140
名前を変更し
注文を押すとまた更新されます

00:10:17.140 --> 00:10:17.800
いいですね

00:10:17.800 --> 00:10:22.440
アプリの全ての要素が機能しているので
このログメッセージは消しても構いません

00:10:22.440 --> 00:10:24.900
もう一度アプリを実行し
全て機能しているか確認もできます

00:10:26.000 --> 00:10:28.640
では戻って
これらの問題に答えましょう

00:10:28.640 --> 00:10:31.700
アプリに加えたビューは
EditText です

00:10:31.700 --> 00:10:35.260
二番目の質問は
このビューからテキストを取得するのに

00:10:35.260 --> 00:10:37.010
呼び出したJavaメソッドは何かです

00:10:38.120 --> 00:10:40.910
コードに戻って
確認しましょう

00:10:40.910 --> 00:10:42.885
ネーム欄を意味するEditTextのJavaオブジェクトを

00:10:42.885 --> 00:10:46.710
ビューヒエラルキーから
検索します

00:10:46.710 --> 00:10:49.570
それをnameFieldという変数に
保存します

00:10:49.570 --> 00:10:52.310
そのオブジェクトにメソッドを呼び出しました

00:10:52.310 --> 00:10:56.310
getText メソッドを呼び出しました
これは入力引数を使わず

00:10:56.310 --> 00:10:58.500
他のオブジェクトの戻り値を持ちます

00:10:59.510 --> 00:11:01.460
これは３番目の質問に繋がりますね

00:11:01.460 --> 00:11:04.790
getText メソッドで
返されるデータタイプは？

00:11:04.790 --> 00:11:06.330
答えはEditable（編集可能）で

00:11:06.330 --> 00:11:09.540
これはAndroidのドキュメントを読めば
分かります

00:11:09.540 --> 00:11:14.320
Edit Text Classでは
スクロールダウンすると全ての公開メソッドが見られます

00:11:14.320 --> 00:11:17.970
GetText は
テキストビューが表示される

00:11:17.970 --> 00:11:19.350
テキストを返す方法として表示されています

00:11:19.350 --> 00:11:21.960
返されるデータタイプはEditableです

00:11:21.960 --> 00:11:27.280
これは編集可能なオブジェクトを返し
ドットとメソッド名を加えれば

00:11:27.280 --> 00:11:30.750
このオブジェクトに
他のメソッドを呼び出せます

00:11:30.750 --> 00:11:35.730
この場合は編集可能オブジェクトに
toStringメソッドを呼び出しており

00:11:35.730 --> 00:11:38.790
toStringメソッドで文字列が
返され

00:11:38.790 --> 00:11:41.050
ネーム変数に保存されます

00:11:42.080 --> 00:11:45.880
これはより発展的なコンセプトで
メソッド呼び出し連鎖と呼ばれます

00:11:45.880 --> 00:11:49.560
一つのメソッドを呼び出し
返り値を取得し

00:11:49.560 --> 00:11:52.800
もう一つのメソッドを呼び出して
これがオブジェクトを返せば そこに次の

00:11:52.800 --> 00:11:53.980
メソッドを呼び出せるからです

00:11:53.980 --> 00:11:57.690
次から次へと
メソッドを呼び出せます

00:11:57.690 --> 00:12:01.230
メソッド呼び出し連鎖を行なう理由は
getText メソッドで

00:12:01.230 --> 00:12:02.650
編集可能オブジェクトが返されるからです

00:12:02.650 --> 00:12:05.920
編集可能オブジェクトは文字列変数内に
保存できません

00:12:05.920 --> 00:12:09.980
それはこの Android Studio で
互換性なしのエラーが出たことから分かりますね

00:12:09.980 --> 00:12:14.410
toString を加えたら
この全ての返り値は文字列で

00:12:14.410 --> 00:12:17.790
ネーム変数に
保存できます

00:12:17.790 --> 00:12:20.550
ドキュメントを確認すれば
正しいことが分かります

00:12:20.550 --> 00:12:23.160
getTextメソッドで
編集可能オブジェクトが返されます

00:12:23.160 --> 00:12:25.660
編集可能クラスで
これをクリックすると

00:12:25.660 --> 00:12:27.880
toString と呼ばれるメソッドが見つかるはずです

00:12:27.880 --> 00:12:28.600
スクロールダウンし

00:12:28.600 --> 00:12:32.830
公開メソッドのセクションに
toString はありません

00:12:32.830 --> 00:12:34.670
でも 継承されたメソッドです

00:12:34.670 --> 00:12:38.520
このドロップダウンを開くと
toString がメソッドだとわかります

00:12:38.520 --> 00:12:40.930
返り値は文字列です

00:12:44.850 --> 00:12:48.000
返され そこに
toString メソッドを呼び出せます

00:12:48.000 --> 00:12:50.670
toString メソッドは文字列を呼び出します
それで

00:12:50.670 --> 00:12:53.680
この右側の全てが
文字列を返すのです

00:12:53.680 --> 00:12:57.150
それはnameと呼ばれる文字列変数に
保存できます

00:12:58.270 --> 00:13:00.180
今回のコードのタスクは長かったですね

00:13:01.330 --> 00:13:04.070
ちょっと休憩し
戻ってきてください

00:13:04.070 --> 00:13:07.620
次はユーザの注文に基づいて
値段を変える方法を学びます

00:13:07.620 --> 00:13:09.740
そのため
コントロールフローについて学びます

