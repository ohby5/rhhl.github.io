WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.701
Até agora vimos códigos snippet
flutuando isolados.

00:00:03.734 --> 00:00:06.167
Neste vídeo, vamos avaliar
como os códigos

00:00:06.200 --> 00:00:08.267
se encaixam
num app de Android.

00:00:08.300 --> 00:00:11.501
Desde que o EarthquakeAsyncTask
tem sua própria classe,

00:00:11.534 --> 00:00:13.968
por que não usar
um arquivo de Java separado?

00:00:14.000 --> 00:00:16.501
Quando fizermos
uma requisição de rede

00:00:16.534 --> 00:00:19.067
para os dados de terremotos
e recebermos o resultado

00:00:19.100 --> 00:00:23.200
no onPostExecute, queremos
fazer o update da UI.

00:00:23.234 --> 00:00:25.534
Mas como vamos ter
referências às visualizações

00:00:25.567 --> 00:00:27.200
de update da tela?

00:00:27.234 --> 00:00:29.300
Essas visualizações
são parte do layout

00:00:29.334 --> 00:00:30.968
na atividade principal.

00:00:31.000 --> 00:00:35.834
Em Java podemos declarar
que a EarthquakeAsyncTask

00:00:35.868 --> 00:00:37.501
é uma innerclass.

00:00:37.534 --> 00:00:39.734
Isso significa que toda
a classe Async

00:00:39.767 --> 00:00:43.400
pode entrar na atividade principal
de definição de classe.

00:00:43.434 --> 00:00:45.868
Uma innerclass
como EarthquakeAsynctask

00:00:45.901 --> 00:00:49.667
tem uma referência implícita
à atividade principal de fora.

00:00:49.701 --> 00:00:52.934
Uma instância da classe
EarthquakeAsyncTask

00:00:52.968 --> 00:00:56.667
só pode existir numa instância
da atividade principal.

00:00:56.701 --> 00:00:57.868
Em outras palavras,

00:00:57.901 --> 00:01:03.100
não há EarthquakeAsyncTask
sem uma atividade principal.

00:01:03.133 --> 00:01:06.400
Há alguns riscos de memória
associados a isso,

00:01:06.434 --> 00:01:08.701
que vão ser abrangidos
mais tarde nesta aula.

00:01:08.734 --> 00:01:11.067
Por enquanto, saiba que
como uma innerclass,

00:01:11.100 --> 00:01:14.167
a EarthquakeAsyncTask
pode acessar

00:01:14.200 --> 00:01:16.100
quaisquer variáveis globais
e métodos

00:01:16.133 --> 00:01:18.300
a instância
da atividade principal.

00:01:18.334 --> 00:01:20.801
Por exemplo,
na atividade principal,

00:01:20.834 --> 00:01:23.801
se declararmos a variável global
para o TextView

00:01:23.834 --> 00:01:25.901
que mostra a força
do terremoto,

00:01:25.934 --> 00:01:30.234
podemos referir ao TextView
no método OnPostExecute

00:01:30.267 --> 00:01:32.267
para fazer update do texto.

00:01:32.300 --> 00:01:35.167
Outra razão para você optar
para declarar algo

00:01:35.200 --> 00:01:36.968
como innerclass de outra classe

00:01:37.000 --> 00:01:40.601
é manter o código concentrado
e com menos arquivos Java.

00:01:40.634 --> 00:01:44.234
Isso é útil se as duas classes
são relacionadas.

00:01:44.267 --> 00:01:45.367
Por exemplo,

00:01:45.400 --> 00:01:49.834
a EarthquakeAsyncTask
só é usada na atividade principal

00:01:49.868 --> 00:01:52.634
para que possamos fazer
da EarthquakeAsyncTask

00:01:52.667 --> 00:01:54.367
uma classe privada.

00:01:54.400 --> 00:01:55.968
Em vez de ser pública.

00:01:56.000 --> 00:01:57.534
Agora vou passar para Chris

00:01:57.567 --> 00:01:59.934
para que ele demonstre um exemplo
de um código real

00:01:59.968 --> 00:02:02.167
em vez de linhas pretas
horizontais.

00:02:02.200 --> 00:02:04.133
Com a amostra
que vou lhe mostrar,

00:02:04.167 --> 00:02:06.200
espero que comece a ver
todos os conceitos

00:02:06.234 --> 00:02:08.534
dos quais estamos falando
nos últimos vídeos.

00:02:08.567 --> 00:02:11.400
Este é o código no projeto
para o app NetworkConnect

00:02:11.434 --> 00:02:14.367
que é um dos apps de amostra
disponíveis no Android Studio.

00:02:14.400 --> 00:02:15.868
Para chegar nele antes,

00:02:15.901 --> 00:02:20.200
vou até "arquivos", seleciono
"novo" e "importar amostra".

00:02:21.501 --> 00:02:24.634
Aqui está a UI para navegar
todos os códigos de amostra

00:02:24.667 --> 00:02:26.367
disponíveis no Android Studio.

00:02:26.400 --> 00:02:29.767
Dá para ver que há
vários submenus por tópicos.

00:02:29.801 --> 00:02:31.667
Coisas como Android TV,

00:02:31.701 --> 00:02:34.200
amostras sobre como fazer
tarefas em 2º plano.

00:02:34.234 --> 00:02:38.801
Eu vou usar a barra de pesquisa
e pesquisar por "Network".

00:02:40.000 --> 00:02:42.667
Legal. Embaixo do menu
de Conectividade,

00:02:42.701 --> 00:02:45.467
o segundo item é
o app NetworkConnect.

00:02:45.501 --> 00:02:46.968
E falaremos dele agora.

00:02:47.000 --> 00:02:50.167
Esse app tem que pegar
os primeiros 500 caracteres

00:02:50.200 --> 00:02:53.234
de HTML crua do site
Google.com.

00:02:53.267 --> 00:02:55.300
Quando clicamos
o botão de busca,

00:02:55.334 --> 00:02:59.000
o app faz uma requisição de rede
numa thread de 2º plano.

00:02:59.033 --> 00:03:01.000
E vamos ver a resposta crua
de HTML

00:03:01.033 --> 00:03:03.701
aparecendo no texto
na parte de baixo.

00:03:03.734 --> 00:03:06.868
Vamos olhar os bastidores
de como o código é escrito.

00:03:06.901 --> 00:03:09.367
Aqui vemos que o DownloadTask
é uma subclasse

00:03:09.400 --> 00:03:10.834
de AsyncTask.

00:03:10.868 --> 00:03:12.767
Chama o carregamento
do método de rede

00:03:12.801 --> 00:03:14.501
que faz uma requisição de rede

00:03:14.534 --> 00:03:16.334
e converte o resultado
em stream de entrada,

00:03:16.367 --> 00:03:18.567
que é uma stream arbitrária
de dados,

00:03:18.601 --> 00:03:20.934
em uma resposta de string
que volta.

00:03:21.534 --> 00:03:23.767
Se você perceber bem,
a classe download

00:03:23.801 --> 00:03:27.868
é declarada como uma innerclass
da atividade principal.

00:03:28.400 --> 00:03:31.467
Isso significa que a definição total
da classe de download

00:03:31.501 --> 00:03:36.667
está localizada entre chaves
na atividade principal.

00:03:36.701 --> 00:03:39.033
Veremos as implicações disso
mais tarde.

00:03:39.067 --> 00:03:40.367
Quando o app for lançado,

00:03:40.400 --> 00:03:42.000
a atividade principal é criada

00:03:42.033 --> 00:03:43.968
e, aqui, podemos ver
o layout.

00:03:44.000 --> 00:03:46.734
Quando o botão de busca
é clicado no menu de opções,

00:03:46.767 --> 00:03:48.567
uma nova tarefa de download
é criada

00:03:48.601 --> 00:03:51.701
e o método de execução
é chamado nessa tarefa,

00:03:51.734 --> 00:03:56.367
passando pelo site Google.com
tendo uma URL como parâmetro.

00:03:56.400 --> 00:03:59.000
Vamos examinar a tarefa
de download mais de perto.

00:03:59.033 --> 00:04:00.100
Como já foi mencionado,

00:04:00.133 --> 00:04:04.033
AsyncTask tem subclasse
e três parâmetros genéricos.

00:04:04.067 --> 00:04:06.367
Especificamos o tipo de dados
"string" para o 1º parâmetro,

00:04:06.400 --> 00:04:09.067
que é a entrada
para o método doInBackground.

00:04:09.100 --> 00:04:11.300
Então, usamos "Void"
para o parâmetro de progresso

00:04:11.334 --> 00:04:15.234
porque não reportamos updates
de progresso da UI neste caso.

00:04:15.267 --> 00:04:18.367
A dica é que não há
onProgressUpdate

00:04:18.400 --> 00:04:19.868
implementado aqui.

00:04:19.901 --> 00:04:22.100
E, por fim, temos
tipos de dado String

00:04:22.133 --> 00:04:24.100
como resultado
do método doInBackground,

00:04:24.133 --> 00:04:27.868
que também passa com entrada
do método onPostExecute.

00:04:27.901 --> 00:04:30.701
Olhando o método doInBackground
mais de perto,

00:04:30.734 --> 00:04:33.167
que foi chamado
quando executamos a tarefa,

00:04:33.200 --> 00:04:36.200
aceitamos um número variável
de argumentos string,

00:04:36.234 --> 00:04:39.133
que estão armazenados
na array "URLs".

00:04:39.167 --> 00:04:40.767
Então, na chamada
loadFromNetwork,

00:04:40.801 --> 00:04:43.667
extraímos o primeiro elemento
da array de URLs,

00:04:43.701 --> 00:04:45.667
usando o índice "0".

00:04:45.701 --> 00:04:47.300
Então, baixamos dados da rede.

00:04:47.334 --> 00:04:52.400
Note que a definição
está fora das chaves

00:04:52.434 --> 00:04:54.501
da tarefa de download.

00:04:54.534 --> 00:04:57.033
Normalmente, não podemos
chamar métodos privados

00:04:57.067 --> 00:04:58.801
ou variáveis
numa classe diferente.

00:04:58.834 --> 00:05:01.801
Mas como a classe de download
é uma innerclass,

00:05:01.834 --> 00:05:03.267
isso é aceitável.

00:05:03.300 --> 00:05:05.200
Depois que a tarefa de 2º plano
é finalizada,

00:05:05.234 --> 00:05:07.601
a resposta de string
volta como resultado

00:05:07.634 --> 00:05:09.300
do método doInBackground.

00:05:09.334 --> 00:05:10.801
Depois que esse
método é executado,

00:05:10.834 --> 00:05:12.834
o sistema chama o método
onPostExecute

00:05:12.868 --> 00:05:14.834
passando no resultado
da string.

00:05:14.868 --> 00:05:16.367
Então logamos a mensagem.

00:05:16.400 --> 00:05:18.567
Há um comportamento especial
nesta amostra

00:05:18.601 --> 00:05:20.300
que faz o fragmento
do log funcionar,

00:05:20.334 --> 00:05:22.901
e demonstra a mensagem
de log do sistema na tela.

00:05:22.934 --> 00:05:25.934
Quando você chama "Log.i"
para logar mensagens,

00:05:25.968 --> 00:05:29.200
a saída vai aparecer
na parte de baixo da tela do app.

00:05:29.234 --> 00:05:31.501
Você não terá que usar
o fragmentador de log no seu app.

00:05:31.534 --> 00:05:33.367
Isso é uma boa aula
de amostra.

00:05:33.400 --> 00:05:37.467
A maior dica é que no método onPost
da AsyncTask,

00:05:37.501 --> 00:05:39.934
podemos pegar a resposta
da thread de 2º plano

00:05:39.968 --> 00:05:41.400
e fazer update da UI.

00:05:41.434 --> 00:05:43.734
Você viu como
uma AsyncTask pode ser declarada

00:05:43.767 --> 00:05:45.567
como innerclass numa
atividade,

00:05:45.601 --> 00:05:48.501
e fará o mesmo
na sua própria subclasse

00:05:48.534 --> 00:05:50.567
de AsyncTask
no app "Você Sentiu?".

