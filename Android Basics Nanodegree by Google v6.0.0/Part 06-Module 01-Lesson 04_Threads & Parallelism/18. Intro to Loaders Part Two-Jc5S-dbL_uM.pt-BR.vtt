WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:02.133
Mencionamos que quando
a atividade implementa

00:00:02.167 --> 00:00:04.133
o método LoaderCallback
em onCreateLoader,

00:00:04.167 --> 00:00:06.300
precisamos criar e devolver
um loader,

00:00:06.334 --> 00:00:07.701
então como fazemos isso?

00:00:07.734 --> 00:00:09.367
Bem, para criar um loader,

00:00:09.400 --> 00:00:12.434
vamos fazer uma subclasse
da classe AsyncTask loader.

00:00:12.467 --> 00:00:15.467
A AsyncTaskLoader tem todos
os benefícios de um loader,

00:00:15.501 --> 00:00:18.100
como ser administrado
pelo LoaderManager,

00:00:18.133 --> 00:00:21.234
e nos bastidores,
é usado numa AsyncTask

00:00:21.267 --> 00:00:22.634
para fazer a tarefa.

00:00:22.667 --> 00:00:24.801
Interagimos com
a AsyncTaskLoader

00:00:24.834 --> 00:00:26.567
tal como com
qualquer outro loader.

00:00:26.601 --> 00:00:28.868
O AsyncTaskLoader
herda comportamento

00:00:28.901 --> 00:00:30.267
da classe loader.

00:00:30.300 --> 00:00:33.701
É também uma classe genérica
com parâmetro genérico "D".

00:00:33.734 --> 00:00:36.000
Descendo até a seção
"métodos públicos",

00:00:36.033 --> 00:00:39.000
vemos que o parâmetro "D"
é usado como valor de retorno

00:00:39.033 --> 00:00:41.167
do método LoadInBackground.

00:00:41.200 --> 00:00:42.734
Esse método também
é abstrato.

00:00:42.767 --> 00:00:44.634
Temos que definir
um comportamento

00:00:44.667 --> 00:00:47.300
e temos que devolver um valor
com qualquer tipo de dado,

00:00:47.334 --> 00:00:49.968
contanto que
a declaração de classe especifique

00:00:50.000 --> 00:00:52.467
qual é o tipo de dados
de cara.

00:00:53.634 --> 00:00:56.133
Acho que um exemplo
vai ajudar a esclarecer

00:00:56.167 --> 00:00:59.033
e unir todas essas coisas
que cobrimos.

00:00:59.067 --> 00:01:00.968
Esse tutorial
é um pouco antigo,

00:01:01.000 --> 00:01:02.734
como pode dizer pela interface.

00:01:02.767 --> 00:01:04.767
Mas gosto da simplicidade
desse código.

00:01:04.801 --> 00:01:06.000
O objetivo desse código

00:01:06.033 --> 00:01:08.067
é mostrar uma lista
de funcionários

00:01:08.100 --> 00:01:10.367
ao carregar os dados
de uma thread de 2º plano

00:01:10.400 --> 00:01:12.267
com um AsyncTaskLoader.

00:01:12.300 --> 00:01:15.434
O link está aqui embaixo,
caso você queira ver.

00:01:15.467 --> 00:01:18.033
Vamos ver a classe loader
de funcionários.

00:01:18.067 --> 00:01:19.133
Como pode ver,

00:01:19.167 --> 00:01:21.601
é uma extensão da
classe AsyncTaskLoader.

00:01:21.634 --> 00:01:23.534
Para o parâmetro genérico,
em chaves,

00:01:23.567 --> 00:01:25.767
especificamos uma lista
de funcionários.

00:01:25.801 --> 00:01:27.634
Isso significa que
o valor de retorno

00:01:27.667 --> 00:01:29.234
do método
LoadInBackground

00:01:29.267 --> 00:01:30.868
é uma lista de funcionários.

00:01:30.901 --> 00:01:33.634
Certo, dentro do
método LoadinBackground

00:01:33.667 --> 00:01:36.834
vemos criada numa nova
lista array de funcionários.

00:01:36.868 --> 00:01:38.667
Adicionamos três
itens à lista

00:01:38.701 --> 00:01:40.501
e retornamos a lista.

00:01:40.534 --> 00:01:44.400
A tarefa feita neste método
pode ser feito na thread principal

00:01:44.434 --> 00:01:47.868
porque não é um cálculo caro
ou uma requisição de rede.

00:01:47.901 --> 00:01:50.334
Mas quem escreveu este artigo
quis dar um exemplo

00:01:50.367 --> 00:01:52.701
para mostrar a classe
AsyncTaskLoader.

00:01:53.267 --> 00:01:55.033
Também temos um constructor
para criar

00:01:55.067 --> 00:01:57.033
uma instância
de novos funcionários.

00:01:57.067 --> 00:01:59.834
Dentro dela chamamos
a superclasse constructor

00:01:59.868 --> 00:02:01.501
e passamos o contexto.

00:02:01.534 --> 00:02:02.734
E só isso.

00:02:02.767 --> 00:02:05.801
Viu? É bem simples
implementar um loader.

00:02:05.834 --> 00:02:07.267
Voltamos um pouco

00:02:07.300 --> 00:02:09.300
e podemos ver como o loader
tem sido usado

00:02:09.334 --> 00:02:10.968
no contexto do app.

00:02:11.000 --> 00:02:13.033
Na declaração
de ActivityClass,

00:02:13.067 --> 00:02:17.000
vemos que a atividade principal
se estende da FragmentAcrivity

00:02:17.033 --> 00:02:20.567
e implementa a interface
LoaderManager.Loadercallback.

00:02:20.601 --> 00:02:23.968
O tipo genérico especificado
é uma lista de funcionários.

00:02:24.000 --> 00:02:27.868
Descendo, note que isso significa
que a atividade tem que implementar

00:02:27.901 --> 00:02:29.968
três métodos callback abstratos:

00:02:30.000 --> 00:02:34.234
onCreateLoader, onLoaderFinished
e onLoaderReset.

00:02:34.267 --> 00:02:36.567
Note que o tipo de dados
da lista de funcionários

00:02:36.601 --> 00:02:38.868
é usada por todos
os métodos callback.

00:02:38.901 --> 00:02:40.601
Mesmo tendo muitas símbolos,

00:02:40.634 --> 00:02:43.334
leia "List Employee"
como um item só.

00:02:43.367 --> 00:02:45.767
Este mesmo item é inserido
em lugares diferentes

00:02:45.801 --> 00:02:47.767
pelas assinaturas
do método callback.

00:02:47.801 --> 00:02:50.167
Por exemplo, no método
onCreateLoader,

00:02:50.200 --> 00:02:52.067
volta um carregamento
que carrega dados

00:02:52.100 --> 00:02:55.667
na forma de lista de funcionários,
o mesmo item que usamos acima.

00:02:55.701 --> 00:02:59.167
Dentro do método, criamos
um novo loader de funcionários

00:02:59.200 --> 00:03:01.300
que se estende
de LoadersList Employee,

00:03:01.334 --> 00:03:03.801
então bate com
o valor de retorno.

00:03:03.834 --> 00:03:05.834
Então voltamos à instância
do loader.

00:03:05.868 --> 00:03:07.801
No método onLoadFinished,

00:03:07.834 --> 00:03:09.901
recebemos duas entradas:

00:03:09.934 --> 00:03:12.033
um loader e um resultado.

00:03:12.067 --> 00:03:14.634
O resultado é do tipo de dados
"List Employee".

00:03:14.667 --> 00:03:17.467
E as cargas do loader
"List Employee Data".

00:03:17.501 --> 00:03:20.601
O valor que nos importa
é este objeto de resultado.

00:03:20.634 --> 00:03:23.968
Pegamos a lista e renovamos
os dados no adaptador,

00:03:24.000 --> 00:03:26.434
o que vai renovar
a lista a qual está ligado.

00:03:26.467 --> 00:03:28.133
No método onLoaderReset,

00:03:28.167 --> 00:03:31.334
recebemos uma entrada:
o próprio loader.

00:03:31.868 --> 00:03:34.467
Como só temos um loader
na atividade,

00:03:34.501 --> 00:03:36.367
podemos limpar
os dados anteriores

00:03:36.400 --> 00:03:38.367
que o loader nos deu
da última vez.

00:03:38.400 --> 00:03:41.734
Definimos o adaptador de dados
para ser uma lista vazia.

00:03:41.767 --> 00:03:43.033
Eis o cenário completo.

00:03:43.067 --> 00:03:45.534
Na atividade,
para iniciar o loader,

00:03:45.567 --> 00:03:48.767
pegamos o LoaderManager
e chamamos initLoader.

00:03:48.801 --> 00:03:53.901
Aliás, getSupportLoaderManager
é o mesmo que getLoaderManager,

00:03:53.934 --> 00:03:56.067
mas esta versão usa
a versão suporte

00:03:56.100 --> 00:03:57.667
do LoaderManager.

00:03:57.701 --> 00:03:59.267
Na chamada initLoader,

00:03:59.300 --> 00:04:02.567
o Manager verifica para ver
se o loader já foi criado.

00:04:02.601 --> 00:04:05.200
E passa a cópia existente dele.

00:04:05.234 --> 00:04:07.267
Se a instância do loader
não existir,

00:04:07.300 --> 00:04:08.901
a chamada onLoaderCreate
callback

00:04:08.934 --> 00:04:10.801
é ativada para criar
uma nova instância.

00:04:10.834 --> 00:04:14.400
Podemos criar uma nova instância
employee loader e retorná-la.

00:04:14.434 --> 00:04:15.901
Eis o cenário completo.

00:04:15.934 --> 00:04:18.567
Na atividade,
para iniciar o loader,

00:04:18.601 --> 00:04:21.634
pegamos o LoaderManager
e chamamos initLoader.

00:04:21.667 --> 00:04:26.300
Aliás, getSupportLoaderManager
é o mesmo que getLoaderManager,

00:04:26.334 --> 00:04:28.334
mas esta versão usa
a versão suporte

00:04:28.367 --> 00:04:30.167
do LoaderManager.

00:04:30.200 --> 00:04:32.200
Na chamada initLoader,

00:04:32.234 --> 00:04:35.734
o Manager verifica para ver
se o loader já foi criado.

00:04:35.767 --> 00:04:38.734
E passa a cópia existente dele.

00:04:38.767 --> 00:04:40.667
Se a instância do loader
não existir,

00:04:40.701 --> 00:04:42.334
a chamada onLoaderCreate
callback

00:04:42.367 --> 00:04:44.601
é ativada para criar
uma nova instância.

00:04:44.634 --> 00:04:47.834
Podemos criar uma nova instância
employee Loader e retorná-la.

00:04:47.868 --> 00:04:49.667
Note que depois que iniciamos
o loader,

00:04:49.701 --> 00:04:51.734
o código se chama
forceLoad.

00:04:51.767 --> 00:04:55.300
Isso requer acionar o loader
a começar a tarefa de 2º plano.

00:04:55.801 --> 00:04:58.334
É um bom treino colocar
a chamada forceLoad

00:04:58.367 --> 00:05:00.334
na subclasse do loader.

00:05:00.367 --> 00:05:02.534
Você override o método
onStartLoading

00:05:02.567 --> 00:05:05.667
numa classe de loader
e chama forceLoad de lá.

00:05:05.701 --> 00:05:08.467
O método onStartLoading
é acionado automaticamente

00:05:08.501 --> 00:05:10.000
de um inItLoader.

00:05:10.033 --> 00:05:13.400
Depois de chamar forceLoad,
o loader se inicia.

00:05:13.434 --> 00:05:16.968
O método loadInBackground
roda na thread de 2º plano

00:05:17.000 --> 00:05:19.033
e uma lista de funcionários
é criada

00:05:19.067 --> 00:05:21.267
e volta como
o resultado do loader.

00:05:21.300 --> 00:05:23.267
Depois que o loader termina
de carregar,

00:05:23.300 --> 00:05:26.200
vai informar o LoaderManager
que, então, passará os dados

00:05:26.234 --> 00:05:28.334
ao método onLoadFinish.

00:05:28.367 --> 00:05:30.300
Quando o método
onLoadFinish é chamado,

00:05:30.334 --> 00:05:31.701
com a lista de funcionários,

00:05:31.734 --> 00:05:34.234
então fazemos update
do adaptador com os novos dados,

00:05:34.267 --> 00:05:36.300
fazendo com que a lista
se renove e saia.

00:05:36.334 --> 00:05:38.167
Quando a atividade é fechada,

00:05:38.200 --> 00:05:40.868
o LoadManager
vai destruir o loader

00:05:40.901 --> 00:05:44.133
e vai nos informar quando os dados
que foram fornecidos pelo loader

00:05:44.167 --> 00:05:45.601
não são mais válidos.

00:05:45.634 --> 00:05:49.367
Nesse caso, temos que removê-lo
da interface e parar de usá-lo.

00:05:49.400 --> 00:05:52.067
Se a atividade for destruída
antes que o carregamento termine,

00:05:52.100 --> 00:05:54.067
então este método
não será chamado.

00:05:54.100 --> 00:05:56.067
Se você rodar esse código
no nosso aparelho,

00:05:56.100 --> 00:05:58.834
o app vai ter uma aparência
como a desta tela.

00:05:58.868 --> 00:06:01.367
Eu sei. A interface
parece meio antiquada.

00:06:01.400 --> 00:06:03.400
Mas é porque o emulador
do Android Studio

00:06:03.434 --> 00:06:06.400
já teve muitos updates
desde à criação deste tutorial.

00:06:06.434 --> 00:06:08.167
Agora que já
completarmos o círculo

00:06:08.200 --> 00:06:09.367
sobre como o loader

00:06:09.400 --> 00:06:11.234
e o loaderManager
callbacks funcionam,

00:06:11.267 --> 00:06:13.501
e como já discutimos
como implementar os loaders aqui,

00:06:13.534 --> 00:06:15.234
quero que tente responder
este quiz

00:06:15.267 --> 00:06:16.667
preenchendo as lacunas.

00:06:16.701 --> 00:06:19.000
Qual é o tipo de loader
que usa uma AsyncTask

00:06:19.033 --> 00:06:20.834
para fazer a tarefa de 2º plano?

00:06:20.868 --> 00:06:23.000
Para criar um loader customizado
que pega a lista

00:06:23.033 --> 00:06:24.501
de objetos Earthquake,

00:06:24.534 --> 00:06:26.400
podemos definir uma classe
de EarthquakeLoader

00:06:26.434 --> 00:06:27.934
que estende de quê?

00:06:27.968 --> 00:06:29.467
Na classe EarthquakeLoader,

00:06:29.501 --> 00:06:33.100
temos que override qual método,
que vai rodar na thread de 2º plano

00:06:33.133 --> 00:06:34.801
e retornar
uma lista de terremotos?

00:06:34.834 --> 00:06:36.133
Novamente, como pista,

00:06:36.167 --> 00:06:39.501
pode escolher as respostas
possíveis nas notas abaixo do quiz.

