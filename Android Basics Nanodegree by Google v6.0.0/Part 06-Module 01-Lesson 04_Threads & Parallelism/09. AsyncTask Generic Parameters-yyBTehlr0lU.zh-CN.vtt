WEBVTT
Kind: captions
Language: zh-CN

00:00:00.025 --> 00:00:07.045
AsyncTask 具有三个泛型参数 params、progress 和 result

00:00:07.045 --> 00:00:11.309
并且 AsyncTask 方法使用 此泛型参数作为我们要使用的

00:00:11.309 --> 00:00:14.360
实际数据类型的占位符

00:00:14.360 --> 00:00:17.536
方法签名涉及 param、progress 和

00:00:17.536 --> 00:00:19.286
result 占位符数据类型

00:00:19.286 --> 00:00:22.056
在应用中将 AsyncTtask 划入子类时

00:00:22.056 --> 00:00:26.647
可以用要使用的数据类型 例如 字符串或

00:00:26.647 --> 00:00:30.550
地震或其他对象类型替换 占位符

00:00:30.550 --> 00:00:33.420
我会在下面的代码段 中介绍

00:00:33.420 --> 00:00:35.650
各个泛型参数的 用途

00:00:36.660 --> 00:00:39.960
downloadfilestask 类 的用途在于使用一个或

00:00:39.960 --> 00:00:44.740
多个 URL 在发布 progress 时 下载各个文件

00:00:44.740 --> 00:00:45.260
最后

00:00:45.260 --> 00:00:50.610
任务会以字节为单位返回 所有下载文件的总大小

00:00:50.610 --> 00:00:53.850
定义此类后 我们可以调用构造函数

00:00:53.850 --> 00:00:57.700
创建下载文件 任务对象实例

00:00:57.700 --> 00:01:01.120
然后 我们可以立即 执行任务并

00:01:01.120 --> 00:01:05.330
传入想要获取的任意 数量的文件 URL

00:01:05.330 --> 00:01:08.723
在这里我们传入三个 URL 即 url1、url2 和 url3

00:01:08.723 --> 00:01:12.421
我们来仔细看一下 类的定义

00:01:12.421 --> 00:01:16.800
它是从 AsyncTask 中扩展 而来的子类

00:01:16.800 --> 00:01:20.830
请注意 AsyncTask 名称 后面的括号中包含三个

00:01:20.830 --> 00:01:22.390
类的名称

00:01:22.390 --> 00:01:24.880
第一个泛型参数为 params

00:01:24.880 --> 00:01:28.620
其为发送至后台任务的 in parameter 数据类型

00:01:29.910 --> 00:01:33.840
在代码段中 params 数据类型为 URL

00:01:33.840 --> 00:01:38.720
这意味着 doInBackground 方法 将会接受 URL 输入列表

00:01:38.720 --> 00:01:40.150
你还没有见过这种“...”标记

00:01:40.150 --> 00:01:44.250
但这些标记的意思是 我们可以在这里放入

00:01:44.250 --> 00:01:48.930
数量可变的参数 这种参数通常称为“可变参数”

00:01:48.930 --> 00:01:51.800
只要在此 URL 中的 数据类型相同

00:01:51.800 --> 00:01:53.800
输入任何数量的参数就都有效

00:01:54.820 --> 00:01:58.649
这表明你可以使用 一个、两个或

00:01:58.649 --> 00:02:02.105
多个 URL 执行任务 具体取决于 你要下载多少文件

00:02:02.105 --> 00:02:04.396
回到 doInBackground 方法

00:02:04.396 --> 00:02:08.949
输入参数存储在 称为 URL 的数组变量中

00:02:08.949 --> 00:02:13.040
我们可以使用 urls.length 检查 URL 数组的长度

00:02:13.040 --> 00:02:17.000
然后我们可以使用熟悉的 方括号符号访问

00:02:17.000 --> 00:02:18.660
数组的每个元素

00:02:18.660 --> 00:02:22.940
URL 让我们可以访问数组的 zeroth 元素等

00:02:22.940 --> 00:02:26.650
在本示例中我们使用 for 循环迭代到 URL 数组的

00:02:26.650 --> 00:02:32.220
每个元素并使用 Downloader 类 实际下载文件

00:02:32.220 --> 00:02:35.720
我们还在 totalSize 整数变量中 保持所有文件的

00:02:35.720 --> 00:02:37.480
运行总大小

00:02:38.510 --> 00:02:42.550
记住 doInBackground 可在 UI 线程之外发生

00:02:42.550 --> 00:02:46.630
所以即使 doInBackground 部分 需要一段时间 我们的应用也会保持响应

00:02:47.870 --> 00:02:50.460
第二个泛型参数 是 progress

00:02:50.460 --> 00:02:51.770
它是用于测量后台

00:02:51.770 --> 00:02:54.750
线程中进行的工作进度的 数据类型

00:02:56.170 --> 00:02:59.710
在 downloadfilestask 中 我们会定期发布更新

00:02:59.710 --> 00:03:02.890
然后使用完成的百分比 更新 UI

00:03:02.890 --> 00:03:08.016
为了进行此操作 我们指定整数 作为 progress 参数

00:03:08.016 --> 00:03:11.360
这意味着我们在后台 工作发生时使用

00:03:11.360 --> 00:03:14.479
整数值调用 发布进度

00:03:14.479 --> 00:03:19.620
然后在由主线程调用的 onProgressUpdate 方法中

00:03:19.620 --> 00:03:24.580
接收该整数输入值并 可以修改 UI

00:03:24.580 --> 00:03:29.670
我们在这里的输入数据类型 后面再次看到了三个点标记

00:03:29.670 --> 00:03:33.990
它表示我们可以接受数量可变的 输入参数

00:03:33.990 --> 00:03:38.450
如果你使用两个值从 后台线程中调用发布进度

00:03:38.450 --> 00:03:42.330
那么在 onProgressUpdate 中 将会收到两个输入

00:03:42.330 --> 00:03:46.330
如果你同时下载多个文件 并且想要显示每个文件的

00:03:46.330 --> 00:03:49.450
不同进度值 那么这个功能 非常有用

00:03:50.490 --> 00:03:55.040
与上面的 URL 输入类似 该进度变量也是数组

00:03:55.040 --> 00:03:59.380
我们可以使用具有索引 位置的方括号 例如 progress [0]

00:03:59.380 --> 00:04:02.460
来访问每个进度值

00:04:02.460 --> 00:04:05.890
然后就可以使用新的进度值 更新 UI

00:04:07.030 --> 00:04:11.340
与上面的 URL 输入类似 该进度变量也是数组

00:04:12.400 --> 00:04:16.089
我们可以使用具有索引 位置的方括号 例如 progress [0]

00:04:16.089 --> 00:04:19.290
来访问每个进度值

00:04:19.290 --> 00:04:21.990
然后就可以使用新的进度值 更新 UI

00:04:23.890 --> 00:04:28.170
现在 我们来介绍第三个也就是 最后一个泛型参数 result

00:04:29.220 --> 00:04:34.080
Result 是 doInBackground 方法中的 返回值数据类型

00:04:34.080 --> 00:04:37.880
你可以将其看作来自后台工作的 结果数据类型

00:04:39.340 --> 00:04:43.950
在本案例中 我们在下载完所有文件后 返回 totalsize

00:04:43.950 --> 00:04:49.240
doInBackground 方法签名指定 long 作为返回数据类型

00:04:49.240 --> 00:04:52.610
请注意 long 的 首字母 L 为大写

00:04:52.610 --> 00:04:57.530
我们知道在过去 long 是类似 int 的原生 Java 数据类型

00:04:57.530 --> 00:05:00.630
包含广泛的值范围

00:05:00.630 --> 00:05:05.210
但是 泛型数据类型在这里必须是 对象数据类型

00:05:05.210 --> 00:05:09.670
所以我们使用首字母 L 为大写的 Long 它只是包含在旧的

00:05:09.670 --> 00:05:12.550
原生 long 数据类型中的 一种对象版本

00:05:12.550 --> 00:05:18.010
在 AsyncTask 中 Long 结果 被传递到 onPostExectute 中

00:05:18.010 --> 00:05:20.420
现在已回到 UI 线程

00:05:20.420 --> 00:05:24.130
在此案例中我们不使用以 点表示的变量参数标记

00:05:24.130 --> 00:05:26.800
onPostExecute 方法的输入

00:05:26.800 --> 00:05:31.620
必须是已在类声明中指定 数据类型的单个值

00:05:31.620 --> 00:05:32.670
在本示例中

00:05:32.670 --> 00:05:37.250
我们只是想显示一个包含 检索到的文件大小的对话

00:05:37.250 --> 00:05:40.120
由于指定子类的 方式不同

00:05:40.120 --> 00:05:43.140
因此我们可能并不需要所有 泛型数据类型

00:05:43.140 --> 00:05:47.820
例如 可能会没有输入 参数、没有返回值或者

00:05:47.820 --> 00:05:49.510
没有进度值

00:05:49.510 --> 00:05:53.740
在这些情况下 为泛型参数 使用 void

00:05:53.740 --> 00:05:57.600
确保 void 中的 v 为大写 因为泛型

00:05:57.600 --> 00:06:00.442
参数必须为对象数据类型

00:06:00.442 --> 00:06:03.183
现在 我们来进行测验以 巩固刚学到的内容

00:06:03.183 --> 00:06:07.438
查看提供的代码 StepIt 并填写 泛型类型的空白和

00:06:07.438 --> 00:06:10.510
downloadwebpagetask 的 类声明

