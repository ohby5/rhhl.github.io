WEBVTT
Kind: captions
Language: pt-BR

00:00:00.534 --> 00:00:03.734
Toca aqui! Nossos alunos estão
se tornando desenvolvedores.

00:00:03.767 --> 00:00:07.133
Muito legal! Espere, Joe,
não quero ser estraga-prazeres,

00:00:07.167 --> 00:00:09.601
mas não falou da pegadinha
da AsyncTask?

00:00:09.634 --> 00:00:11.567
Não! Vamos só comemorar!

00:00:11.601 --> 00:00:13.400
Cara, temos que contar!

00:00:13.434 --> 00:00:15.133
Está bem. Conte você.

00:00:15.167 --> 00:00:16.501
Está bem.

00:00:16.534 --> 00:00:19.234
Vamos pensar no que acontece
quando abro o app

00:00:19.267 --> 00:00:21.067
e inicio "EarthquakeActivity".

00:00:21.100 --> 00:00:23.601
Neste ponto, temos uma instância
de atividade na memória.

00:00:23.634 --> 00:00:25.467
Então, no método onCreate,

00:00:25.501 --> 00:00:27.868
fizemos outra instância
de um objeto AsyncTask,

00:00:27.901 --> 00:00:29.801
que começa a rodar
numa thread de 2º plano

00:00:29.834 --> 00:00:32.000
e abre uma conexão HTTP.

00:00:32.033 --> 00:00:33.367
Essa é a pegadinha:

00:00:33.400 --> 00:00:35.200
antes que a AsyncTask finalize,

00:00:35.234 --> 00:00:37.801
o que acontece
se eu girar o meu telefone?

00:00:37.834 --> 00:00:41.634
Bem, para mostrar a UI
na nova orientação,

00:00:41.667 --> 00:00:43.601
o sistema precisa criar
uma nova atividade

00:00:43.634 --> 00:00:45.534
e um novo layout
de visualização.

00:00:45.567 --> 00:00:47.734
Como a memória é limitada
num celular,

00:00:47.767 --> 00:00:49.901
isso significa que o sistema
deve destruir

00:00:49.934 --> 00:00:53.167
a atividade antiga e recuperar
a memória que foi ocupada.

00:00:53.200 --> 00:00:56.033
Mas como a AsyncTask
é uma innerclass

00:00:56.067 --> 00:00:57.534
da atividade original,

00:00:57.567 --> 00:00:59.400
essa memória não pode
ser recuperada

00:00:59.434 --> 00:01:01.767
até que a AsyncTask
termine de ser executada.

00:01:01.801 --> 00:01:03.501
Deixe-me explicar
o que quero dizer.

00:01:03.534 --> 00:01:06.067
Note que toda vez que o nosso
telefone é girado,

00:01:06.100 --> 00:01:08.367
uma nova atividade
é criada.

00:01:09.267 --> 00:01:12.868
E pelo nosso código,
uma nova instância AsyncTask.

00:01:12.901 --> 00:01:14.701
Isso inicia uma nova
thread de 2º plano

00:01:14.734 --> 00:01:17.534
e abre outra conexão HTTP.

00:01:17.567 --> 00:01:19.767
Isso é um desperdício
porque agora temos

00:01:19.801 --> 00:01:23.300
duas AsyncTasks
e duas atividades

00:01:23.334 --> 00:01:25.434
usando a memória
ao mesmo tempo,

00:01:25.467 --> 00:01:27.367
duas vezes mais do que antes.

00:01:27.400 --> 00:01:30.334
O que acontece quando
a 1ª AsyncTask é finalizada?

00:01:30.367 --> 00:01:32.534
Bem, o resultado da tarefa
não é mais útil

00:01:32.567 --> 00:01:35.434
porque as visualizações
não aparecem mais na tela,

00:01:35.467 --> 00:01:37.601
o que é um desperdício
dos recursos do aparelho:

00:01:37.634 --> 00:01:41.033
pegar e traduzir uma resposta
que nunca será visualizada, certo?

00:01:41.067 --> 00:01:43.367
Mas e se girarmos
o telefone diversas vezes?

00:01:43.400 --> 00:01:45.501
Agora temos um monte
de AsyncTasks

00:01:45.534 --> 00:01:47.100
e atividades na memória.

00:01:47.133 --> 00:01:49.534
Todas tentando rodar
e se comunicar com a rede.

00:01:49.567 --> 00:01:53.267
Como resultado, usamos toda essa
memória adicional sem necessidade,

00:01:53.300 --> 00:01:55.400
até deixando o celular
mais lento,

00:01:55.434 --> 00:01:57.601
enquanto só precisamos
de uma atividade

00:01:57.634 --> 00:02:00.901
e um AsyncTask para o que
está sendo demonstrado na tela.

00:02:00.934 --> 00:02:02.834
Além do mais,
se você pensar bem,

00:02:02.868 --> 00:02:05.501
todas essas novas tarefas
vão receber o mesmo resultado

00:02:05.534 --> 00:02:08.033
porque não há muitos
dados de terremotos mudando

00:02:08.067 --> 00:02:10.701
durante os poucos segundos
que giramos o telefone.

00:02:10.734 --> 00:02:13.400
O ideal é que sempre que
você criar uma nova atividade

00:02:13.434 --> 00:02:15.267
para apoiar uma
mudança de orientação,

00:02:15.300 --> 00:02:17.501
seria mais eficiente
usar o resultado original

00:02:17.534 --> 00:02:19.501
do 1ª requisição de HTTP,

00:02:19.534 --> 00:02:21.601
isso se ela for finalizada
com sucesso.

00:02:21.634 --> 00:02:23.834
Em vez disso, temos múltiplas
requisições de rede

00:02:23.868 --> 00:02:25.200
no mesmo servidor.

00:02:25.234 --> 00:02:27.267
Todas pegando e traduzindo
a mesma resposta.

00:02:27.300 --> 00:02:29.300
É um desperdício. Que droga!

00:02:29.334 --> 00:02:31.067
Chris, você está
assustando os alunos.

00:02:31.100 --> 00:02:32.934
Deve haver
uma forma melhor!

00:02:32.968 --> 00:02:34.868
Na verdade, há.

00:02:35.367 --> 00:02:37.701
Assista ao vídeo
"Android Performance Patterns"

00:02:37.734 --> 00:02:39.234
que colocamos o link abaixo,

00:02:39.267 --> 00:02:40.701
e responda este quiz

00:02:40.734 --> 00:02:42.701
sobre qual componente
do Android

00:02:42.734 --> 00:02:44.701
ajuda a solucionar
esta questão?

