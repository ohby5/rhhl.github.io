WEBVTT
Kind: captions
Language: zh-CN

00:00:00.300 --> 00:00:04.030
现有代码的问题 在 MainActivity onCreate

00:00:04.030 --> 00:00:07.740
方法上 我们尝试在主线程上 执行网络请求

00:00:07.740 --> 00:00:12.292
现在 我们需要将这两个 方法调用移动到 AsyncTask 中

00:00:12.292 --> 00:00:16.719
fetchEarthquakeData 方法调用 应在后台线程上运行

00:00:16.719 --> 00:00:19.693
而 updateUI 调用 应该在我们

00:00:19.693 --> 00:00:23.169
接收到地震结果对象后 于主线程或 UI 线程上运行

00:00:23.169 --> 00:00:25.650
好 接下来我们进行一些实时编程

00:00:25.650 --> 00:00:30.620
首先 我将定义一个 AsyncTask 子类 称为 EarthquakeAsyncTask

00:00:30.620 --> 00:00:33.915
同时 我将其定义为 MainActivity 的私有内部类

00:00:33.915 --> 00:00:36.500
此时 如果尚未 导入 AsyncTask

00:00:36.500 --> 00:00:39.923
我可以使用 Android Studio 中的固定快捷键 Alt+Enter

00:00:39.923 --> 00:00:43.878
在 Java 文件顶部 自动导入 AsyncTask 类

00:00:45.803 --> 00:00:48.622
如你所见 它已经导入到这里

00:00:48.622 --> 00:00:51.069
但此时会看到这里 有一条红色波浪线

00:00:51.069 --> 00:00:54.738
Android Studio 仍然报告错误 因此 我会再次使用固定快键键

00:00:54.738 --> 00:00:58.250
Alt+Enter 来自动生成 需要覆盖的方法

00:00:59.530 --> 00:01:02.080
接着 选择 实施方法

00:01:02.080 --> 00:01:05.580
然后 在此选择确定 (OK) 来实施 doInBackground 方法的存根

00:01:06.790 --> 00:01:09.250
现在 我们来检查一下 这里使用的泛型类型

00:01:09.250 --> 00:01:12.090
我已为输入参数指定 String 数据类型

00:01:12.090 --> 00:01:16.770
因为字符串 usgs URL 将成为 doInBackground 方法的输入

00:01:16.770 --> 00:01:20.040
对进度参数使用了 Void 因为在这一特定任务中

00:01:20.040 --> 00:01:22.900
我不需要不断更新 用户进度

00:01:22.900 --> 00:01:26.130
对于结果参数 我指定了 Event 数据类型

00:01:26.130 --> 00:01:29.920
因为我希望后台工作 的结果成为 Event 对象

00:01:29.920 --> 00:01:33.095
现在 我们便可将 fetchEarthquakeData 调用直接移动到

00:01:33.095 --> 00:01:37.044
doInBackground 方法中 但 我们还需要再修改几处

00:01:37.044 --> 00:01:41.400
但此时 我不会对仅供这一特定 USGS URL 使用的文本进行硬编码

00:01:41.400 --> 00:01:44.964
而是通过访问 url 数组的 0 元素

00:01:44.964 --> 00:01:46.710
使用输入参数

00:01:46.710 --> 00:01:50.140
这样 此 EarthquakeAsyncTask 便可供任何字符串 URL 使用

00:01:51.140 --> 00:01:52.570
我还会返回 Event 对象

00:01:52.570 --> 00:01:54.870
作为 doInBackground 方法的返回值

00:01:54.870 --> 00:01:58.280
现在 我们还希望覆盖 onPostExecuteCallback 方法

00:01:58.280 --> 00:02:01.686
在该方法中 我们接收到了 之前在 doInBackground

00:02:01.686 --> 00:02:03.191
方法中返回的 Event 对象

00:02:03.191 --> 00:02:06.740
很好 至此我们已完成定义 EarthquakeAsyncTask

00:02:06.740 --> 00:02:10.695
我之前还对该方法和类 添加了注释

00:02:10.695 --> 00:02:15.435
现在 我们回到 onCreate 方法 中的 MainActivity 此时我便可

00:02:15.435 --> 00:02:20.037
创建新任务 然后对该任务调用 execute 同时传入特定的 URL

00:02:20.037 --> 00:02:24.314
好了 现在我们继续进行编译 并在设备上运行此应用

00:02:24.314 --> 00:02:27.044
好了 现在请看我们的 应用再也不会崩溃了

00:02:27.044 --> 00:02:28.335
哇-喔！

00:02:28.335 --> 00:02:29.276
如你所见

00:02:29.276 --> 00:02:33.628
应用中显示了有关厄瓜多尔 发生的 7.8 级地震的详细信息

00:02:33.628 --> 00:02:39.670
现在 183 人有震感 平均来说 他们感觉像是 9.1 级地震

00:02:39.670 --> 00:02:42.150
哇 那可真是一场大地震啊

00:02:43.600 --> 00:02:46.520
无论如何 如果你想查看 我刚刚写下的代码

00:02:46.520 --> 00:02:49.090
可通过下面的链接 访问 GitHub 资源库

00:02:49.090 --> 00:02:52.540
如果你已能够完成 本练习 那么 祝贺你

00:02:52.540 --> 00:02:54.587
如果不能 也无需担心

00:02:54.587 --> 00:02:58.070
对于那些仅在数月或数周前才开始 接触 Java 和 Android 的初学者

00:02:58.070 --> 00:03:01.953
请通过在使用泛型类型的类的 子类中执行回调方法

00:03:01.953 --> 00:03:05.491
来进行网络 调用 哇

00:03:05.491 --> 00:03:07.626
好多概念 扑面而来啊

00:03:07.626 --> 00:03:09.790
这些知识最终会 让你感到骄傲的

