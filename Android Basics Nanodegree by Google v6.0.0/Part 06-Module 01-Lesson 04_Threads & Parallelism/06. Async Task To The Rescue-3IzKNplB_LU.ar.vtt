WEBVTT
Kind: captions
Language: ar

00:00:00.367 --> 00:00:03.001
‫لنعد إلى تطبيق (أشعرت به؟) للحظة

00:00:03.767 --> 00:00:05.067
‫عندما تركناه آخر مرة..

00:00:05.167 --> 00:00:09.934
‫لاحظنا أن التطبيق ينهار بسبب خطأ
‫(تشبيك على الخيط الرئيسي)

00:00:10.334 --> 00:00:14.367
‫أجل، فآندرويد لا يسمح للمطورين
‫بطلبات التشبيك على الخيط الرئيسي

00:00:14.634 --> 00:00:17.468
‫لأن هذا يجعل تطبيقاتنا
‫متأخرة أو بطيئة الاستجابة

00:00:17.667 --> 00:00:20.635
‫بإلقاء خطأ يؤدي لانهيار تطبيقنا..

00:00:20.868 --> 00:00:23.736
‫فهذا يجبر المطورين على
‫استخدام أفضل الممارسات..

00:00:23.901 --> 00:00:26.201
‫وتشغيل كود التشبيك على خيط خلفي

00:00:26.467 --> 00:00:28.701
‫ثم يرجع النتائج إلى خيط واجهة المستخدم

00:00:28.968 --> 00:00:34.469
‫لذا اعلم أن إنشاء الخيوط وتنسيق العمل
‫بينهم، وتواصل النتائج ذهاباً وإياباً..

00:00:34.701 --> 00:00:36.701
‫أحد أصعب التحديات
‫في علوم الحاسب

00:00:37.100 --> 00:00:40.734
‫في حالتنا، لا نحتاج حقاً
‫لقوة الخيوط الكاملة..

00:00:41.267 --> 00:00:45.068
‫جُل ما نريده هو تشغيل مهمة واحدة،
‫وهي طلب HTTP..

00:00:45.367 --> 00:00:49.034
‫على خيط منفصل عن ذاك
‫الذي يعالج أحداث الواجهة

00:00:49.367 --> 00:00:53.235
‫أجل، إذ توقع مهندسو إطار عمل آندرويد
‫أن هذا سيكون احتياجاً شائعاً..

00:00:53.467 --> 00:00:57.701
‫وأنشأوا فئة جافا تجعل تنفيذ
‫هذا النمط سهلاً جداً

00:00:57.968 --> 00:00:59.735
‫وتسمى
‫AsyncTask

00:01:00.267 --> 00:01:02.634
‫كلمة Async هي اختصار Asynchronous
‫(غير مُزامن)

00:01:02.701 --> 00:01:05.135
‫والتي تعني أشياء تحدث
‫في توقيتات مختلفة

00:01:05.868 --> 00:01:10.402
‫مثلاً، الفيديو الذي تشاهده الآن
‫مثال على التعلم غير المُزامن

00:01:10.868 --> 00:01:14.302
‫إذ لا تحتاج أن تكون في قاعة محاضرات
‫في وقت معين لتشاهده

00:01:15.000 --> 00:01:18.000
‫AsyncTask متميز لتنفيذ مهام
‫منفردة قصيرة الأجل..

00:01:18.267 --> 00:01:21.267
‫دون إرهاق إدارة خيط عمل قياسي

00:01:21.934 --> 00:01:24.967
‫إنها غير مناسبة لكل
‫حالة خيوط رغم ذلك..

00:01:25.501 --> 00:01:30.002
‫إذا مررت بحالة احتجت فيها خيوطاً
‫لتدوم أكثر من بضعة ثوانٍ..

00:01:30.334 --> 00:01:32.101
‫فستحتاج شيئاً أكثر فاعلية

00:01:32.434 --> 00:01:36.634
‫لذا تأكد من تفقدك سلسلة فيديو
‫(أنماط أداء آندرويد) حول الخيوط..

00:01:36.767 --> 00:01:38.601
‫الموضح رابطها أدناه لمعلومات أكثر

00:01:38.701 --> 00:01:43.202
‫على أية حالة، ولأننا لا نريد لواجهة
‫تطبيقنا أن تتجمد لبضع ثوانٍ..

00:01:43.267 --> 00:01:45.501
‫بينما يجلب التطبيق بيانات من الإنترنت..

00:01:46.033 --> 00:01:49.267
‫فإن AsyncTask مطابق لاحتياجنا
‫في هذا الجزء من تطبيقنا

00:01:49.667 --> 00:01:51.067
‫لننظر إلى هذا تفصيلاً

00:01:51.467 --> 00:01:55.301
‫توفر AsyncTask طريقة سهلة لنناول
‫العمل إلى خيط خلفية..

00:01:55.567 --> 00:01:59.201
‫ثم نتلقى النتائج متى انتهت
‫لنُحدث واجهة المستخدم

00:01:59.767 --> 00:02:04.767
‫لاحظ أن فترة قصيرة ستمر بالخيط الرئيسي
‫ليحصل على النتائج ويُحدث الواجهة

00:02:05.167 --> 00:02:09.068
‫لذا وبانتهاء العمل، لسنا بحاجة
‫إلى خيط الخلفية بعدها

