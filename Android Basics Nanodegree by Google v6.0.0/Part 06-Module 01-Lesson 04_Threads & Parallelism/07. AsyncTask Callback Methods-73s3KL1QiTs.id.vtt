WEBVTT
Kind: captions
Language: id

00:00:00.387 --> 00:00:04.870
AsyncTask ini tidak sama dengan kelas-kelas
lain yang pernah kita gunakan.

00:00:04.870 --> 00:00:06.120
Semua kelas yang lain,

00:00:06.120 --> 00:00:09.443
seperti activity atau view,
melakukan pekerjaan di thread utama.

00:00:09.443 --> 00:00:11.663
Ya, tapi, dengan AsyncTask,

00:00:11.663 --> 00:00:15.886
sebagian dari kelas ini dijalankan
pada thread utama di latar depan.

00:00:15.886 --> 00:00:19.868
Dan bagian yang lain
dijalankan di thread yang terpisah,

00:00:19.868 --> 00:00:22.682
yang tentu saja di latar belakang.

00:00:22.682 --> 00:00:26.510
Ya, sehingga AsyncTask berkaitan
dengan lebih dari satu thread.

00:00:26.510 --> 00:00:29.610
Jadi mari kita pelajari
bersama-sama langkah demi langkah.

00:00:29.610 --> 00:00:32.740
AsyncTask merupakan kelas abstrak.

00:00:32.740 --> 00:00:37.385
Anda belajar pertama tentang kelas abstrak
dari kursus terakhir bersama Jessica saat

00:00:37.385 --> 00:00:40.495
Anda membangun
aplikasi bahasa Miwok.

00:00:40.495 --> 00:00:43.595
Kelas abstrak berisi beberapa
metode yang dibiarkan kosong

00:00:43.595 --> 00:00:49.425
bagi kita sebagai pengembang untuk mengesampingkan dan
memberikan implementasi kita sendiri.

00:00:49.425 --> 00:00:54.050
Untuk menggunakan AsyncTask,
kita perlu membuat subkelas kustom.

00:00:54.050 --> 00:00:56.470
Kita akan menamainya EarthQuakeAsyncTask.

00:00:58.110 --> 00:01:01.995
Subkelas ini diperlukan untuk mengesampingkan
metode doInBackground().

00:01:03.340 --> 00:01:06.970
Dari demonstrasi awal kita,
tugas apa pun yang Anda ingin dilakukan

00:01:06.970 --> 00:01:11.780
di thread latar belakang harus dimasukkan
dalam metode doInBackground().

00:01:13.120 --> 00:01:15.780
Setelah Anda memperoleh data
gempa bumi dari server,

00:01:15.780 --> 00:01:17.330
mungkin Anda perlu memperbarui UI.

00:01:17.330 --> 00:01:23.360
Tapi untuk memperbarui UI, Anda harus berada di
thread utama, bukan di thread latar belakang.

00:01:25.130 --> 00:01:29.320
Jadi, bagaimana cara mengomunikasikan antara
thread utama dan latar belakang?

00:01:29.320 --> 00:01:34.020
Anda dapat mengesampingkan metode dalam
AsyncTask yang bernama onPostExecute().

00:01:34.020 --> 00:01:38.320
Metode ini berjalan di thread utama
yang saya sorot dalam warna hijau.

00:01:38.320 --> 00:01:41.790
Metode ini akan dipanggil setelah
pekerjaan latar belakang selesai,

00:01:41.790 --> 00:01:43.996
sehingga metode ini
disebut onPostExecute().

00:01:45.550 --> 00:01:47.990
Jika saya mengungkap lebih banyak perincian
tentang metode,

00:01:47.990 --> 00:01:51.460
kita bisa lihat bahwa metode
doInBackground() mengembalikan hasil.

00:01:52.790 --> 00:01:58.263
Hasil itu diberikan sebagai input
kepada metode onPostExecute().

00:01:58.263 --> 00:02:02.526
Jika hasil dari metode doInBackground()
adalah daftar gempa bumi dari

00:02:02.526 --> 00:02:07.187
server, maka dalam onPostExecute(), daftar
data itu sekarang dimigrasi kembali

00:02:07.187 --> 00:02:10.651
ke thread utama di mana kita bisa
memperbarui ListView di aplikasi untuk

00:02:10.651 --> 00:02:11.930
menampilkan data baru.

00:02:13.140 --> 00:02:18.540
Jika perlu, ada juga
metode AsyncTask yang bernama OnPreExecute(),

00:02:18.540 --> 00:02:22.420
yang dipanggil di thread utama
sebelum pekerjaan latar belakang dimulai,

00:02:22.420 --> 00:02:24.440
maka namanya onPreExecute().

00:02:24.440 --> 00:02:28.930
Pengembang akan mengesampingkan metode ini jika
ada yang perlu dilakukan

00:02:28.930 --> 00:02:30.930
sebelum bersiap melakukan
pekerjaan latar belakang.

00:02:32.590 --> 00:02:35.540
Kadang pekerjaan latar belakang
bisa sangat lama.

00:02:36.920 --> 00:02:40.320
Beberapa pengembang mungkin ingin memberi tahu
pengguna tentang kemajuan dalam

00:02:40.320 --> 00:02:41.010
tugas latar belakang.

00:02:42.280 --> 00:02:45.000
Misalnya, aplikasi dapat mengunduh
foto dari internet,

00:02:45.000 --> 00:02:47.070
dan menampilkan progress
bar pada saat yang sama.

00:02:48.446 --> 00:02:52.786
Di dalam metode doInBackground(),
kita dapat secara periodik memanggil

00:02:52.786 --> 00:02:56.978
metode publishProgress dan
memberikan nilai kemajuan baru.

00:02:56.978 --> 00:03:01.252
Lalu kita bisa mengesampingkan
metode onProgressUpdate yang ada di

00:03:01.252 --> 00:03:06.301
thread utama, yang dapat digunakan untuk
memperbarui UI dengan nilai kemajuan baru,

00:03:06.301 --> 00:03:08.850
yang dalam hal ini adalah 72%.

00:03:08.850 --> 00:03:12.700
Mari kita lihat dokumentasi untuk
kelas AsyncTask.

00:03:12.700 --> 00:03:15.219
Kita bisa scroll ke bawah ke
bagian metode dan

00:03:15.219 --> 00:03:19.319
Anda bisa lihat bahwa doInBackground
didaftar sebagai metode abstrak.

00:03:19.319 --> 00:03:22.480
Jadi kita harus
mengimplementasikan metode ini.

00:03:22.480 --> 00:03:26.124
Kita juga mengenali metode lain
seperti onPreExecute(),

00:03:26.124 --> 00:03:28.662
onProgressUpdate, dan onPostExecute.

00:03:28.662 --> 00:03:31.934
Metode-metode ini tidak abstrak,
sehingga kita tidak wajib

00:03:31.934 --> 00:03:33.745
mengimplementasikannya.

00:03:34.905 --> 00:03:38.411
Scroll ke atas lagi, kita juga temukan
contoh kode kelas bernama

00:03:38.411 --> 00:03:42.815
DownloadFileTask yang
merupakan subkelas AsyncTask.

00:03:42.815 --> 00:03:46.060
Kita akan bahas lebih
dalam contoh ini nanti.

00:03:46.060 --> 00:03:49.700
Tapi intinya adalah bahwa dalam
metode doInBackground(), sebuah dokumen

00:03:49.700 --> 00:03:54.680
diunduh, yang bisa jadi butuh waktu lama,
sehingga dilakukan di thread latar belakang.

00:03:54.680 --> 00:03:57.910
Perhatikan bahwa input dalam
metode doInBackground() dapat berupa daftar

00:03:57.910 --> 00:04:02.350
item yang akan diproses, yang dalam hal ini
adalah daftar dokumen yang akan diunduh.

00:04:02.350 --> 00:04:04.940
Kemajuan dilaporkan secara bertahap dan

00:04:04.940 --> 00:04:08.590
kita dapat memperbarui layar dengan
kemajuan persentase sejauh ini.

00:04:08.590 --> 00:04:12.420
Setelah pekerjaan latar belakang selesai,
kita tampilkan dialog berisi berapa besar

00:04:12.420 --> 00:04:15.110
byte informasi yang
berhasil diunduh.

00:04:16.279 --> 00:04:20.483
Dalam kuis ini, saya ingin Anda mengisi
tabel ini tentang metode panggilan balik

00:04:20.483 --> 00:04:22.528
paling umum dalam AsyncTask.

00:04:22.528 --> 00:04:27.240
Jelaskan seperti apa setiap metode disebutkan
dengan kata-kata Anda sendiri, lalu tunjukkan

00:04:27.240 --> 00:04:31.640
apakah metode itu berjalan di thread utama atau
di thread latar belakang.

00:04:31.640 --> 00:04:34.120
Anda bisa memeriksa tautan di bawah
kuis jika butuh bantuan.

