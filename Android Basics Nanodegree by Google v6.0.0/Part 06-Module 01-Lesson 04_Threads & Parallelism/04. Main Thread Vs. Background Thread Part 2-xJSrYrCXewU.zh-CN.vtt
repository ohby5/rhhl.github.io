WEBVTT
Kind: captions
Language: zh-CN

00:00:01.020 --> 00:00:03.730
你以前可能遇到过
这种问题

00:00:03.730 --> 00:00:06.980
使用手机上的一个应用时
点击一个按钮

00:00:06.980 --> 00:00:09.640
该按钮将执行
一系列操作

00:00:09.640 --> 00:00:12.760
例如 它会从 Internet 中
获取数据、播放音乐或

00:00:12.760 --> 00:00:17.240
进行一些数据处理从而在
图片上应用模糊效果

00:00:17.240 --> 00:00:20.920
但是点击这个按钮之后
你的程序会出现

00:00:20.920 --> 00:00:23.520
短时间的停滞 而这段时间
让人感觉很不舒服

00:00:23.520 --> 00:00:25.130
这非常令人讨厌

00:00:25.130 --> 00:00:27.835
你不确定程序是崩溃了
还是出现了其他问题

00:00:27.835 --> 00:00:29.370
但是片刻之后

00:00:29.370 --> 00:00:32.150
一切又突然回到
你的掌控之中

00:00:32.150 --> 00:00:35.760
为什么会出现程序停滞又突然
回复正常的情况?

00:00:35.760 --> 00:00:39.440
多半是因为你的应用正在尝试
处理某些耗时的

00:00:39.440 --> 00:00:42.480
工作 例如从 Internet 中
获取信息

00:00:42.480 --> 00:00:45.350
问题是 如果 Internet 连接
不稳定 或者

00:00:45.350 --> 00:00:48.710
需要传输大量数据
网络请求等工作

00:00:48.710 --> 00:00:51.090
则可能就会花费很长的时间

00:00:51.090 --> 00:00:55.400
我们必须设置与 web 服务器
的连接、发送请求、

00:00:55.400 --> 00:00:58.750
等待响应
然后解析该响应

00:00:58.750 --> 00:01:01.970
在你等待整个过程
完成时 主线程中

00:01:01.970 --> 00:01:04.410
不会发生任何事情

00:01:04.410 --> 00:01:08.110
所以 如果用户在网络请求
发生时点击应用中的

00:01:08.110 --> 00:01:09.820
其他按钮

00:01:09.820 --> 00:01:14.940
在完成网络操作之前 该应用
无法对用户作出响应

00:01:14.940 --> 00:01:19.890
更糟糕的是 如果用户愤怒地
多次点击按钮

00:01:19.890 --> 00:01:24.660
则会对这些事件进行提示 直到
应用完成当前的任务

00:01:24.660 --> 00:01:29.120
如果你在应用被使用的情况下
请求 UI 线程处理

00:01:29.120 --> 00:01:32.382
耗时的工作 则将会面临应用
停滞的风险

00:01:33.420 --> 00:01:36.000
事实上 如果你的应用
阻塞 UI 线程

00:01:36.000 --> 00:01:40.100
超过一定时间 Androids
将会显示对话框告知

00:01:40.100 --> 00:01:45.120
用户 你的应用未响应
并询问用户是否要将其关闭

00:01:45.120 --> 00:01:49.450
这为我们在 Android 中构建应用
提供了一条重要规则

00:01:49.450 --> 00:01:52.160
即不要阻塞主 UI 线程

00:01:53.240 --> 00:01:56.550
幸运的是 Android 设备
擅长多任务处理

00:01:56.550 --> 00:01:57.270
— 是吗?
— 是的

00:01:58.350 --> 00:02:02.990
— 如果用户点击按钮 我们希望
应用响应用户的输入

00:02:02.990 --> 00:02:06.210
此问题的解决方法就是
在各个独立的后台线程

00:02:06.210 --> 00:02:10.780
或工作者线程中处理
网络请求、数据处理

00:02:10.780 --> 00:02:15.730
和音频播放等工作
从而释放 UI 以便

00:02:15.730 --> 00:02:19.350
用户在等待所有作业
完成的过程中仍可以

00:02:19.350 --> 00:02:22.770
使用应用进行滚动和点击并
进行任何操作

00:02:22.770 --> 00:02:25.940
— 所以理论上 你想用多少线程
就可以用多少 对吧?

00:02:25.940 --> 00:02:29.350
就是说可以并行执行
更多的工作

00:02:29.350 --> 00:02:30.090
— 是的

00:02:30.090 --> 00:02:33.540
但这个应用
只需要一个后台线程

00:02:34.780 --> 00:02:38.600
后台线程一次只能
进行一项操作 但是

00:02:38.600 --> 00:02:41.680
如果因为 Internet 连接很慢
或不稳定导致

00:02:41.680 --> 00:02:45.550
网络请求需要花费较长时间
那也没关系

00:02:45.550 --> 00:02:49.380
主线程仍然可以在不影响
用户体验的情况下

00:02:49.380 --> 00:02:51.780
快速处理所有用户输入事件

00:02:51.780 --> 00:02:53.070
— 没错 另外

00:02:53.070 --> 00:02:54.510
后台工作完成之后

00:02:54.510 --> 00:02:56.920
就没有必要让该线程
继续处于活动状态

00:02:56.920 --> 00:03:00.180
在本视频中 我们了解到
应用可以将作业拆分

00:03:00.180 --> 00:03:03.740
到单个线程中 从而可以在
后台处理特定任务

00:03:03.740 --> 00:03:05.700
同时让 UI 线程保持空闲状态

00:03:05.700 --> 00:03:08.560
这意味着可以让应用
更加快速可用

