WEBVTT
Kind: captions
Language: ar

00:00:00.501 --> 00:00:04.435
‫ليست AsyncTask على غرار الفئات الأخرى
‫التي استخدمناها للآن

00:00:04.834 --> 00:00:07.301
‫الفئات الأخرى مثل
‫activity أو view..

00:00:07.467 --> 00:00:09.335
‫تنفذ عملها على الخيط الرئيسي

00:00:09.601 --> 00:00:13.569
‫لكن في AsyncTask، بعض الأجزاء
‫ستعمل على الخيط الرئيسي..

00:00:13.934 --> 00:00:14.934
‫وفي الواجهة

00:00:15.968 --> 00:00:21.035
‫وبعض أجزاءها الأخرى ستعمل على خيط
‫منفصل في الخلفية، كما هو واضح

00:00:22.801 --> 00:00:26.235
‫أجل لأن AsyncTask تتعامل
‫مع أكثر من خيط..

00:00:26.501 --> 00:00:28.835
‫لذا لندرس هذا سوية وخطوة بخطوة

00:00:29.567 --> 00:00:31.934
‫AsyncTask هي فئة تجريدية

00:00:32.734 --> 00:00:37.034
‫عرفت الفئات المجردة في
‫الدورة الماضية مع (جيسيكا)

00:00:37.334 --> 00:00:39.401
‫عندما بنيت تطبيق Miwok للغات

00:00:40.267 --> 00:00:44.901
‫والفئات المجرد تحتوي وظائف
‫فارغة لنا نحن المطورين..

00:00:45.167 --> 00:00:48.367
‫لنتجاوزها.. ونضع تركيباتنا الخاصة

00:00:49.367 --> 00:00:51.268
‫لاستخدام AsyncTask..

00:00:51.534 --> 00:00:53.701
‫سنحتاج لإنشاء فئة فرعية مُخصصة

00:00:54.000 --> 00:00:56.667
‫وسنسميها
‫EarthquakeAsyncTask

00:00:58.100 --> 00:01:02.100
‫الفئة الفرعية مطلوبة لتجاوز الوظيفة
‫doInBackground

00:01:03.267 --> 00:01:05.068
‫من عرضنا السابق..

00:01:05.234 --> 00:01:08.367
‫أياً كان العمل الذي تريد إنجازه
‫في خيط الخلفية..

00:01:08.601 --> 00:01:11.901
‫يجب تضمينه في الوظيفة
‫doInBackground

00:01:13.033 --> 00:01:15.600
‫ما أن تحصل على بيانات
‫الزلزال من الملقم..

00:01:15.767 --> 00:01:17.834
‫فلربما ستريد تحديث الواجهة

00:01:18.133 --> 00:01:22.001
‫ولكن لتحديث الواجهة،
‫يجب أن تكون على الخيط الرئيسي

00:01:22.234 --> 00:01:23.434
‫وليس خيط الخلفية

00:01:25.100 --> 00:01:28.334
‫فكيف تتواصل مع خيطي الرئيسي والخلفي؟

00:01:29.300 --> 00:01:33.400
‫يمكنك تجاوز وظيفة في
‫AsyncTask تسمى onPostExecute

00:01:33.968 --> 00:01:37.735
‫هذه الوظيفة تعمل على الخيط الرئيسي
‫ولذا لونتها بالأخضر

00:01:38.300 --> 00:01:41.600
‫وسيتم استدعاء هذه الوظيفة
‫بعد انتهاء العمل في الخلفية

00:01:41.801 --> 00:01:44.535
‫ولهذا تسمى (تنفيذ عند النشر)
‫onPostExecute

00:01:45.534 --> 00:01:49.001
‫إذا كشفت تفاصيل أكثر
‫عن الوظائف، فسترى..

00:01:49.300 --> 00:01:51.634
‫أن doInBackground تُرجع نتيجة..

00:01:52.767 --> 00:01:55.635
‫هذه النتيجة تمرر كمدخل..

00:01:55.767 --> 00:01:57.735
‫إلى وظيفة onPostExecute

00:01:58.400 --> 00:02:02.400
‫إذا كانت نتيجة وظيفة doInBackground
‫قائمة زلازل من الملقم..

00:02:02.667 --> 00:02:04.368
‫إذاً وثم في onPostExecute..

00:02:04.667 --> 00:02:07.967
‫فإن هذه القائمة ستُهجر عائدة
‫إلى الخيط الرئيسي

00:02:08.234 --> 00:02:09.935
‫حيث نحدث واجهة القائمة..

00:02:10.300 --> 00:02:12.234
‫والتطبيق ليعرض البيانات الجديدة

00:02:13.100 --> 00:02:14.267
‫إن احتجت..

00:02:14.367 --> 00:02:18.068
‫فتوجد وظيفة AsyncTask أخرى
‫تسمى OnPreExecut

00:02:18.534 --> 00:02:22.201
‫والتي تستدعى من الخيط الرئيسي
‫قبل بدء العمل في الخلفية

00:02:22.400 --> 00:02:24.334
‫وبذا اسمها (تنفيذ قبل التشغيل)

00:02:24.434 --> 00:02:27.168
‫المطورون سيتجاوزون هذه الوظيفة..

00:02:27.400 --> 00:02:31.001
‫إذا كان هنالك شيء يجب فعله
‫قبل تحضير العمل في الخلفية

00:02:32.501 --> 00:02:36.102
‫في بعض الأحيان قد يستغرق العمل
‫في الخلفية وقتاً طويلاً جداً

00:02:36.767 --> 00:02:41.334
‫قد يرغب بعض المطورون في إطلاع المستخدم
‫على التقدم في المهمة الخلفية

00:02:42.234 --> 00:02:47.202
‫مثلاً، تطبيق ينزل صورة من الإنترنت
‫قد يعرض شريط التقدم للوقت الراهن

00:02:48.400 --> 00:02:50.201
‫ضمن وظيفة doInBackground..

00:02:50.400 --> 00:02:53.467
‫يمكننا تكرار استدعاء وظيفة
‫publishProgress..

00:02:53.834 --> 00:02:55.834
‫ونمرر قيمة تقدم جديدة

00:02:57.100 --> 00:03:00.534
‫ثم يمكننا تجاوز وظيفة
‫onProgressUpdate..

00:03:00.834 --> 00:03:02.501
‫والتي تحدث في الخيط الرئيسي

00:03:02.801 --> 00:03:06.235
‫والتي يمكن استخدامها لتحديث
‫الواجهة بقيمة التقدم الجديدة

00:03:06.534 --> 00:03:08.368
‫وهي 72% في هذه الحالة

00:03:08.801 --> 00:03:12.335
‫لننظر إلى توثيقات فئة AsyncTask

00:03:12.701 --> 00:03:15.035
‫يمكننا التمرير لأسفل إلى قسم الوظائف..

00:03:15.200 --> 00:03:19.134
‫لتجد أن وظيفة doInBackground
‫مسرودة على أنها وظيفة تجريدية

00:03:19.467 --> 00:03:21.934
‫إذاً فنحن بحاجة إلى كتابة هذه الوظيفة

00:03:22.501 --> 00:03:25.701
‫كما نتعرف على وظائف أخرى مثل
‫onPreExecute

00:03:25.801 --> 00:03:28.168
‫وonProgressUpdate
‫وonPostExecute

00:03:28.868 --> 00:03:30.535
‫هذه الوظائف ليست تجريدية

00:03:30.868 --> 00:03:33.402
‫لذا لسنا في حاجة إلى تعديل هذه الوظائف

00:03:34.834 --> 00:03:37.834
‫بالتمرير لأعلى مجدداً،
‫نجد كود مثال..

00:03:37.901 --> 00:03:39.835
‫لفئة تسمى
‫DownloadFilesTask

00:03:40.367 --> 00:03:42.034
‫والتي تتفرع من AsyncTask

00:03:42.767 --> 00:03:45.601
‫سنتحدث عن هذا المثال بالتفصيل لاحقاً

00:03:46.033 --> 00:03:49.166
‫ولكن النبذة الرئيسية في
‫وظيفة doInBackground..

00:03:49.267 --> 00:03:51.734
‫يتم تحميل ملف، قد يستغرق وقتاً طويلاً

00:03:52.267 --> 00:03:53.901
‫لذا يُجرى في خيط خلفية

00:03:54.601 --> 00:03:59.001
‫لاحظ أن مدخل doInBackground قد يكون
‫قائمة عناصر لمعالجتها..

00:03:59.334 --> 00:04:01.801
‫وهي في هذه الحالة قائمة ملفات لتنزيلها

00:04:02.300 --> 00:04:04.600
‫يتم الإبلاغ عن التقدم بتزايد

00:04:04.801 --> 00:04:07.934
‫ويمكننا تحديث الشاشة
‫بنسبة التقدم حتى الآن

00:04:08.467 --> 00:04:10.634
‫بعد إكمال العمل في الخلفية..

00:04:10.834 --> 00:04:15.201
‫نعرض مربع حوار بعدد البايتات
‫المُحملة بنجاح

00:04:16.234 --> 00:04:21.901
‫في هذا الاختبار، أريدك أن تعبئ هذا
‫الجدول بأشهر وظائف AsyncTask

00:04:22.734 --> 00:04:25.734
‫صف بتعبيرك متى تستدعى كل وظيفة

00:04:26.000 --> 00:04:29.200
‫ثم حدد ما إذا كانت الوظيفة تعمل
‫على الخيط الرئيسي..

00:04:29.701 --> 00:04:31.168
‫أم على خيط الخلفية

00:04:31.601 --> 00:04:34.302
‫يمكنك مراجعة الرابط أدناه
‫إن احتجت المساعدة

