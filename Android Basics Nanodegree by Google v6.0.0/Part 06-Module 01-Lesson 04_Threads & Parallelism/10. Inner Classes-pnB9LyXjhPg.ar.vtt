WEBVTT
Kind: captions
Language: ar

00:00:00.067 --> 00:00:03.334
‫حتى الآن كنا ننظر لمقتطفات
‫مستقلة عن بعضها

00:00:03.834 --> 00:00:07.635
‫في هذا الفيديو سنرى كيف
‫يتراكب الكود مع تطبيق آندرويد

00:00:08.467 --> 00:00:11.368
‫حيث أن EarthquakeAsyncTask
‫فئة مستقلة..

00:00:11.667 --> 00:00:13.568
‫لم لا نستخدم ملف جافا مستقل؟

00:00:14.334 --> 00:00:18.935
‫ما أن ننفذ طلب الشبكة لبيانات الزلازل
‫ونسترجع النتائج..

00:00:19.167 --> 00:00:20.901
‫وفي onPostExecute خاصتنا..

00:00:21.234 --> 00:00:22.968
‫نريد تحديث واجهة المستخدم

00:00:23.334 --> 00:00:26.868
‫ولكن كيف نحصل على إشارة للواجهات
‫على الشاشة لنحدثها؟

00:00:27.467 --> 00:00:30.934
‫تلك الواجهات هي جزء من المخطط
‫الذي وضعناه في MainActivity

00:00:31.067 --> 00:00:35.801
‫في جافا، اتضح أنه يمكننا إعلان
‫EarthquakeAsyncTask..

00:00:36.067 --> 00:00:37.501
‫كفئة داخلية

00:00:37.701 --> 00:00:40.268
‫هذا يعني أن كامل تعريف
‫فئة AsyncTask..

00:00:40.334 --> 00:00:43.202
‫يمكن وضعه في تعريف فئة MainActivity

00:00:43.467 --> 00:00:46.001
‫فئة داخلية مثل EarthquakeAsyncTask..

00:00:46.033 --> 00:00:49.600
‫تحتفظ ضمنياً بإشارة إلى
‫فئة MainActivity الخارجية

00:00:49.934 --> 00:00:52.967
‫نسخة من فئة EarthquakeAsyncTask..

00:00:53.334 --> 00:00:56.434
‫يمكن أن توجد فقط داخل نسخة
‫من MainActivity

00:00:56.901 --> 00:00:58.001
‫أو بمعنى آخر..

00:00:58.100 --> 00:01:00.601
‫لا توجد EarthquakeAsyncTask..

00:01:00.767 --> 00:01:02.800
‫دون MainActivity مُغلفة لها

00:01:03.567 --> 00:01:06.468
‫توجد مخاطرة حقيقية بالذاكرة
‫تقترن بهذا..

00:01:06.734 --> 00:01:08.602
‫والتي سنغطيها لاحقاً في هذا الدرس

00:01:08.734 --> 00:01:11.201
‫ولكن للآن اعرف أن الفئة الداخلية..

00:01:11.300 --> 00:01:13.500
‫فإن نسخة EarthquakeAsyncTask..

00:01:13.567 --> 00:01:18.068
‫يمكنها الوصول لأي متغير أو وظيفة عامة
‫في نسخة MainActivity المُغلفة لها

00:01:18.434 --> 00:01:20.767
‫على سبيل المثال، وفي MainActivity..

00:01:20.934 --> 00:01:25.601
‫إذا أعلنا متغير TextView عام
‫ليعرض قوة الزلزال..

00:01:25.901 --> 00:01:30.268
‫يمكننا الإشارة إلى واجهة النص في
‫وظيفة onPostExecute في AsyncTask..

00:01:30.334 --> 00:01:31.835
‫لتحدث النص

00:01:32.567 --> 00:01:36.900
‫سبب آخر يدعوك لإنشاء
‫فئة داخلية في فئة أخرى..

00:01:37.000 --> 00:01:40.300
‫هو إبقاء كود جافا كثيفاً
‫يستخدم ملفات جافا أقل

00:01:40.767 --> 00:01:44.101
‫هذا مفيد تحديداً إذا كانت
‫الفئتان متقاربتان جداً

00:01:44.334 --> 00:01:49.734
‫مثلاً، لن تستخدم EarthquakeAsyncTask
‫إلا من خلال MainActivity..

00:01:50.100 --> 00:01:54.300
‫لذا يمكننا جعل EarthquakeAsyncTask
‫فئة خاصة

00:01:54.367 --> 00:01:55.701
‫بدلاً من فئة عام

00:01:56.067 --> 00:02:01.968
‫سأتركك الآن مع (كريس) ليرشدك عبر كود
‫حقيقي بدلاً من الخطوط الأفقية السوداء

00:02:02.300 --> 00:02:03.867
‫بالعينة التي سأريك إياها..

00:02:04.000 --> 00:02:08.367
‫نأمل أن ترى كيف تجتمع كل المفاهيم التي
‫تحدثنا عنها في مقاطع الفيديو السابقة

00:02:08.534 --> 00:02:11.035
‫هذا كود في مشروع تطبيق NetworkConnect..

00:02:11.067 --> 00:02:13.935
‫وهي أحد التطبيقات العينة
‫في آندرويد ستوديو

00:02:14.501 --> 00:02:18.068
‫لنحصل عليه أولاً، ذهبت إلى
‫قائمة (ملف) واخترت (جديد)

00:02:18.300 --> 00:02:20.067
‫ثم اخترت (استيراد عينة)

00:02:21.701 --> 00:02:25.635
‫ستجد هنا واجهة لتصفح كافة
‫عينات الكود في آندرويد ستوديو

00:02:26.067 --> 00:02:29.267
‫وكما ترى هنا، ستجد عدة
‫قوائم فرعية مفصولة بالموضوع

00:02:29.767 --> 00:02:31.468
‫أشياء مثل (تلفاز آندرويد)

00:02:32.033 --> 00:02:33.901
‫وعينات تنفيذ مهام في الخلفية

00:02:33.968 --> 00:02:36.402
‫لكني سأذهب هنا واستخدم شريط البحث..

00:02:36.901 --> 00:02:38.769
‫وأبحث عن Network

00:02:39.767 --> 00:02:42.268
‫ورائع، تحت قائمة (التوصيل)..

00:02:42.634 --> 00:02:46.535
‫فالعنصر الثاني تطبيق Network Connect
‫وهو ما سنتحدث عنه الآن

00:02:47.033 --> 00:02:52.734
‫يهدف تطبيق NetworkConnect لجلب أول 500
‫رمز في HTML الخام من موقع (جوجل)

00:02:53.234 --> 00:02:55.168
‫عندما ننقر زر Fetch..

00:02:55.467 --> 00:02:58.634
‫يقوم التطبيق بإنشاء طلب
‫شبكة في (خيط معالجة خلفي)

00:02:59.167 --> 00:03:03.367
‫وسنرى استجابة HTML الخام في
‫النصف الأسفل من الشاشة

00:03:03.868 --> 00:03:06.602
‫لننظر إلى الكواليس وكيف كُتب الكود

00:03:06.901 --> 00:03:10.602
‫نرى هنا أن DownloadTask
‫فئة فرعية من AsyncTask

00:03:10.934 --> 00:03:14.268
‫وتستدعي وظيفة loadFromNetwork
‫والتي تنفذ طلب شبكة..

00:03:14.467 --> 00:03:18.135
‫وتحول عبارة المدخل الناتجة
‫وهي عبارة بيانات عشوائية

00:03:18.534 --> 00:03:20.534
‫إلى استجابة String تقوم بإرجاعها

00:03:21.634 --> 00:03:27.268
‫لو لاحظت، فقد تم إعلان فئة download
‫كفئة داخلية من MainActivity

00:03:28.367 --> 00:03:31.235
‫هذا يعني أن كامل تعريف فئة download..

00:03:31.334 --> 00:03:36.568
‫يقع بين قوسي الفتح والإغلاق المعقوفين
‫لتعريف فئة MainActivity الأكبر

00:03:37.100 --> 00:03:38.634
‫سنرى تبعيات هذا لاحقاً

00:03:39.167 --> 00:03:41.968
‫عند تشغيل التطبيق،
‫يتم إنشاء MainActivity..

00:03:42.100 --> 00:03:43.701
‫ونرى هنا ضبط المخطط

00:03:44.167 --> 00:03:46.634
‫عند نقر زر (جلب) في قائمة الخيارات..

00:03:46.801 --> 00:03:51.602
‫يتم إنشاء DownloadTask جديد،
‫ويتم استدعاء execute عليها

00:03:51.901 --> 00:03:56.168
‫وتمرر موقع google.com
‫كرابط وكباراميتر

00:03:56.634 --> 00:03:58.901
‫لننظر عن كثب الآن إلى DownloadTask

00:03:59.100 --> 00:04:01.701
‫كما ذكرنا آنفاً، فإننا نفرع AsyncTask..

00:04:01.834 --> 00:04:03.934
‫ونحدد 3 باراميترات عامة..

00:04:04.167 --> 00:04:06.367
‫نحدد نوع البيانات String
‫للباراميتر الأول..

00:04:06.467 --> 00:04:08.834
‫وهو مُدخل وظيفة doInBackground

00:04:08.968 --> 00:04:11.168
‫ثم نستخدم Void لباراميتر التقدم..

00:04:11.267 --> 00:04:15.068
‫لأننا لا نُحدث التقدم دورياً للواجهة
‫في هذه الحالة

00:04:15.300 --> 00:04:19.400
‫وأهم ما تخلينا عنه هو
‫onProgressUpdate

00:04:19.934 --> 00:04:20.934
‫وأخيراً..

00:04:21.000 --> 00:04:24.067
‫لدينا نوع بيانات String لنتيجة
‫doInBackground

00:04:24.133 --> 00:04:27.467
‫والتي تمرر أيضاً كمدخل إلى
‫وظيفة onPostExecute

00:04:28.234 --> 00:04:32.935
‫بالنظر أقرب إلى doInBackground والتي
‫تستدعى عند تنفيذ المهمة للمرة الأولى

00:04:33.367 --> 00:04:36.301
‫نباشر بتوقع عدد متغير من وسطاء String

00:04:36.400 --> 00:04:39.067
‫والتي تخزن في المصفوفة المسماة urls

00:04:39.267 --> 00:04:43.667
‫ثم في استدعاء loadFromNetwork
‫نستخرج العنصر الأول من مصفوفة urls..

00:04:43.767 --> 00:04:45.534
‫باستخدام مؤشر الموضع صفر

00:04:45.701 --> 00:04:47.302
‫بعدها نحمل البيانات من الشبكة

00:04:47.367 --> 00:04:51.367
‫مجدداً لاحظ أن تعريف loadFromNetwork
‫يقع خارجي قوسي الفتح..

00:04:51.601 --> 00:04:54.135
‫والإغلاق المعقوفين لـDownloadTask

00:04:54.567 --> 00:04:58.501
‫عادة لا يمكن استدعاء الوظائف
‫أو المتغيرات الخاصة في فئة أخرى..

00:04:58.868 --> 00:05:02.736
‫ولكن حيث أن DownloadTask
‫فئة داخلية، فهذا مقبول

00:05:03.234 --> 00:05:08.668
‫مع اكتمال العمل في الخلفية ترجع استجابة
‫String كنتيجة لوظيفة doInBackground

00:05:09.234 --> 00:05:12.901
‫بعد تنفيذ هذه الوظيفة، يستدعي
‫النظام وظيفة onPostExecute

00:05:13.167 --> 00:05:14.701
‫ممراً لها النتيجة في String

00:05:14.901 --> 00:05:16.068
‫ثم نسجل الرسالة

00:05:16.501 --> 00:05:19.868
‫يوجد سلوك خاص في هذه العينة
‫تجعل جزء السجل يعمل

00:05:20.267 --> 00:05:22.801
‫والذي يعرض رسائل سجلات
‫النظام على الشاشة

00:05:22.901 --> 00:05:25.968
‫عندما تستدعي log.i أو log.v
‫لتسجيل الرسائل..

00:05:26.067 --> 00:05:29.134
‫فسيتم عرض مخرجاته أسفل الشاشة
‫في تطبيقنا كذلك

00:05:29.367 --> 00:05:31.367
‫لن تحتاج لاستخدامه في تطبيقك..

00:05:31.467 --> 00:05:33.201
‫ولكنها وظيفة مفيدة للعينات

00:05:33.434 --> 00:05:37.668
‫على أية حال، وهدفنا هو أن وظيفة
‫onPostExecute في AsyncTask..

00:05:37.868 --> 00:05:41.268
‫يمكننا أخذ الاستجابة من خيط الخلفية
‫وتحديث واجهة المستخدم

00:05:41.334 --> 00:05:45.168
‫حيث رأيت كيف تُعلن AsyncTask
‫كفئة داخلية في نشاط ما..

00:05:45.601 --> 00:05:47.168
‫ستحظى بفرصة فعل المثل..

00:05:47.334 --> 00:05:50.634
‫بكتابة فئتك الفرعية من AsyncTask
‫في تطبيق (أشعرت به؟)

