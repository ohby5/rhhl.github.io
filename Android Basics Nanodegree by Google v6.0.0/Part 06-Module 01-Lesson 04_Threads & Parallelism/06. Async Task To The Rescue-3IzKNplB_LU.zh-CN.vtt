WEBVTT
Kind: captions
Language: zh-CN

00:00:00.420 --> 00:00:03.790
让我们暂且回到 "Did you feel it?" 应用

00:00:03.790 --> 00:00:07.650
上次我们观察到 该应用会由于一个

00:00:07.650 --> 00:00:10.350
NetworkOnMainThread 异常 在启动时崩溃

00:00:10.350 --> 00:00:13.510
是的 Android 不允许 开发人员在主线程上

00:00:13.510 --> 00:00:17.680
进行网络请求 因为这会造成应用无响应和延迟

00:00:17.680 --> 00:00:20.910
通过抛出一个异常 使应用崩溃

00:00:20.910 --> 00:00:25.220
可以强制开发人员 使用最优的方法

00:00:25.220 --> 00:00:29.020
并且在后台线程上运行网络代码 然后将结果返回给 UI 线程

00:00:29.020 --> 00:00:32.610
没错 所以在计算机科学中 理解创建线程

00:00:32.610 --> 00:00:34.050
协调线程之间的工作

00:00:34.050 --> 00:00:37.160
以及将结果来回传递 是最难的问题之一

00:00:37.160 --> 00:00:41.320
对我们来说 我们根本不需要线程的全部功能

00:00:41.320 --> 00:00:45.420
我们只需要在一个单独的线程上 运行一个任务 也就是 HTTP 请求

00:00:45.420 --> 00:00:49.420
该线程不能是 用于处理我们的 UI 线程事件的线程

00:00:49.420 --> 00:00:52.785
是的 因此 Android 框架工程师 预料到这会变成

00:00:52.785 --> 00:00:53.725
一个普遍需求

00:00:53.725 --> 00:00:57.995
并创建了专门的 Java 类 使这一模式变得非常简单

00:00:57.995 --> 00:01:00.325
这个类叫做 AsyncTask

00:01:00.325 --> 00:01:01.725
Async 是异步 (asynchronous) 的缩写

00:01:01.725 --> 00:01:04.739
意思是 事物可以在不同的时间进行

00:01:05.880 --> 00:01:06.580
例如

00:01:06.580 --> 00:01:10.920
你现在正在观看的视频 就是异步学习的一个示例

00:01:10.920 --> 00:01:15.075
你不需要在特定时间 坐在教室里来看视频

00:01:15.075 --> 00:01:18.290
AsyncTask 适合于 短期的一次性任务

00:01:18.290 --> 00:01:20.897
避免管理标准作业线程 所需要的开销

00:01:21.980 --> 00:01:24.350
它不能完美适用于 所有的线程情况

00:01:24.350 --> 00:01:28.590
但是如果需要使用 仅存在几秒钟的线程

00:01:28.590 --> 00:01:32.470
就需要使用 更加可靠的方式

00:01:32.470 --> 00:01:35.200
没错 因此请务必观看一下关于线程的 “Android 性能模式”视频系列

00:01:35.200 --> 00:01:38.740
下面的链接 提供了详细的信息

00:01:38.740 --> 00:01:42.070
既然我们不希望 应用从 Internet 检索数据时

00:01:42.070 --> 00:01:46.060
UI 会卡住几秒钟 那么 AsyncTask

00:01:46.060 --> 00:01:49.710
对于应用的这一部分来说 是非常合适的

00:01:49.710 --> 00:01:51.530
让我们详细地了解一下吧

00:01:51.530 --> 00:01:55.754
AsyncTask 提供了一种方式 可以简单地将作业转到后台线程

00:01:55.754 --> 00:01:59.278
并且在作业完成时随时接收到结果 用于更新 UI

00:01:59.278 --> 00:02:02.643
请注意 主线程接收到结果并更新 UI

00:02:02.643 --> 00:02:05.200
只需要很少的时间

00:02:05.200 --> 00:02:08.850
因此作业完成后 我们就不再需要该后台线程了

