WEBVTT
Kind: captions
Language: zh-TW

00:00:00.430 --> 00:00:02.969
現在來看我們的Java應用程式的主活動

00:00:02.969 --> 00:00:06.190
當我們檢視顯示訊息方法

00:00:06.190 --> 00:00:08.570
并嘗試理解這里的代碼

00:00:08.570 --> 00:00:13.870
即使 findViewById 方法不是這個類別中宣告

00:00:13.870 --> 00:00:18.740
我們也知道它實際上是在 AppCompatActivity 中的超類別中定義的

00:00:18.740 --> 00:00:20.440
setContentView也是同樣如此

00:00:20.440 --> 00:00:23.820
這是在 AppCompatActivity 類別內定義的

00:00:23.820 --> 00:00:26.710
但是 這個方法的作用是什么

00:00:26.710 --> 00:00:29.300
我們為什么需要傳遞進入一個資源 ID

00:00:29.300 --> 00:00:31.930
我們會要在這里寫出多余的括弧

00:00:31.930 --> 00:00:34.410
為了回答這個問題我 我需要總結一下到目前為止我們學過的內容

00:00:34.410 --> 00:00:37.720
并告訴你為這段代碼為什么會在這里

00:00:38.870 --> 00:00:40.350
你是否還記得這個圖

00:00:40.350 --> 00:00:44.910
當你按一下設備 它會打開一個主活動窗口.

00:00:44.910 --> 00:00:48.650
利用我們的代碼 主活動的 onCreate 方法被

00:00:48.650 --> 00:00:49.770
系統調用

00:00:49.770 --> 00:00:53.220
在這個方法內 有一個名為 setContentView 的方法

00:00:53.220 --> 00:00:55.340
此方法有一個資源版面 ID

00:00:55.340 --> 00:00:59.710
在前面練習中 我們傳進了一個文字檢視圖用于設定內容檢視圖

00:00:59.710 --> 00:01:01.950
但是我們的應用程式需要多個檢視圖

00:01:01.950 --> 00:01:04.650
現在我們傳入一個版面資源ID

00:01:04.650 --> 00:01:06.980
這對應于一個 XML 檔

00:01:06.980 --> 00:01:09.560
當我們設定內容檢視圖后 主活動開始執行

00:01:09.560 --> 00:01:13.200
找到 XML 版面檔 然后逐行讀取內容

00:01:13.200 --> 00:01:18.140
對于每個檢視圖 它會擴展 或者為檢視圖建立一個 Java 物件

00:01:18.140 --> 00:01:19.860
它會分析 XML 檔

00:01:19.860 --> 00:01:23.040
然后建立這個 Java 物件的整個階層

00:01:23.040 --> 00:01:27.090
當它擴展每個檢視圖時 實際是在調用建構函式

00:01:27.090 --> 00:01:31.600
NewTextView 或 NewLinearLayout 然后傳遞進入所有這些屬性

00:01:31.600 --> 00:01:34.760
位于 Java 物件之中 這樣可以正確建立物件

00:01:34.760 --> 00:01:38.700
請注意 我們并沒有為 
NewTextView or NewLinearLayout 書寫代碼

00:01:38.700 --> 00:01:40.650
以設定字體大小

00:01:40.650 --> 00:01:44.540
所有這些工作都由都是由活動的擴展處理序完成

00:01:44.540 --> 00:01:48.290
為了在應用程式運行時與這些檢視圖互動 并變更它們

00:01:48.290 --> 00:01:49.830
例如變更文字或

00:01:49.830 --> 00:01:54.480
按鈕 我們需要找到這些 Java 物件

00:01:54.480 --> 00:01:58.560
找到之后 我們可以將它們存儲為主活動中的變數

00:01:58.560 --> 00:02:01.360
記住 我們并不從頭建立新的 TextViews

00:02:01.360 --> 00:02:04.310
我們只是在這個檢視圖階層中找到現有的檢視圖

00:02:06.060 --> 00:02:08.639
這些變數是我們已經在主活動中使用的變數.

00:02:08.639 --> 00:02:13.160
我們為數量、價格和價格訊息設定一個變數

00:02:13.160 --> 00:02:15.830
既有區域變數 也有全域變數

00:02:15.830 --> 00:02:19.520
為了在檢視圖階層中與檢視圖互動 我們應建立

00:02:19.520 --> 00:02:21.149
引用特定檢視圖的變數

00:02:22.500 --> 00:02:25.765
例如我們可以建立 我們建立一個名為 quantity 的文字檢視圖

00:02:25.765 --> 00:02:28.580
將引用這里的這個TextView

00:02:28.580 --> 00:02:31.340
如果你按一下UI中的加號或減號

00:02:31.340 --> 00:02:34.340
就可以更改TextView文字 以顯示不同的數字

00:02:36.220 --> 00:02:39.340
我們還可以建立一個名為orderSummaryTextView 的變數

00:02:39.340 --> 00:02:41.730
這個變數指向這個TextView

00:02:41.730 --> 00:02:44.590
當你按一下order按鈕時

00:02:44.590 --> 00:02:47.660
orderSummaryTextView就會更改其文字以顯示新的訂單摘要

00:02:47.660 --> 00:02:51.680
因此你可以看到 設定指向這些檢視圖的變量

00:02:51.680 --> 00:02:55.440
可以用于程式運行時變更 UI

00:02:55.440 --> 00:02:59.430
但是我們如何連結這里的變數

00:02:59.430 --> 00:03:00.790
到這個 TextView 呢

00:03:00.790 --> 00:03:03.780
我們如何進行這里的orderSummaryTextView

00:03:03.780 --> 00:03:04.495
與這個 TextView 之間的連結呢

00:03:06.250 --> 00:03:08.139
在版面 XML 檔里

00:03:08.139 --> 00:03:11.699
還記得我們已經把檢視圖 ID 指派給特定的檢視圖嗎

00:03:12.953 --> 00:03:17.400
對于這個 TextView 
我們可以提供 quantity.text.view 檢視圖 ID

00:03:17.400 --> 00:03:21.340
對于這個檢視圖 我們為它提供一個 ID 
即 order.summary.text.view

00:03:21.340 --> 00:03:24.240
為檢視圖指派 ID 是可選的

00:03:24.240 --> 00:03:28.760
如果你想要在以后指向一個檢視圖 只應該指派一個檢視圖 ID

00:03:28.760 --> 00:03:33.180
例如 你可以指派檢視圖 ID 給任何項止 但是并不需要這樣做

00:03:33.180 --> 00:03:37.470
我們只需要稍后在我們的 Java 代碼中引用這兩個檢視圖就可以了

00:03:37.470 --> 00:03:39.860
現在讓我們為這兩個檢視圖指派 ID

00:03:40.880 --> 00:03:43.900
好了 我們已經確定這些檢視圖具有檢視圖 ID

00:03:43.900 --> 00:03:46.700
因此我們可以稍后在 Java 代碼中引用它們

00:03:46.700 --> 00:03:51.350
我們還確定我們想要變數指向這些檢視圖

00:03:51.350 --> 00:03:53.740
讓我們能夠操作這些檢視圖

00:03:53.740 --> 00:03:57.680
但是我們仍然需要確切地知道如何進行

00:03:57.680 --> 00:04:01.160
這個變數與這個特定 Java 物件之間的連結

00:04:01.160 --> 00:04:04.700
對于這個變數和這個 Java 物件 也是同樣如此

00:04:04.700 --> 00:04:08.820
在 AppCompatActivity 類別中 我想顯示一個特殊的方法

00:04:08.820 --> 00:04:12.560
它的名稱是 findViewById 而且它會接收一個資源 ID 輸入項

00:04:13.810 --> 00:04:16.290
findViewById 方法

00:04:16.290 --> 00:04:21.220
查找對應于這個 ID 的檢視圖 而這個 ID 是作為輸入項傳遞的

00:04:21.220 --> 00:04:23.790
活動

00:04:23.790 --> 00:04:28.890
在 xml 中的檢視圖階層中 onCreate 方法處理這個 xml 檔

00:04:28.890 --> 00:04:30.560
正如我前面所說的那樣

00:04:30.560 --> 00:04:34.350
活動 onCreate 方法建立一個檢視圖階層

00:04:34.350 --> 00:04:39.405
然后 findViewByID 方法運行 并找到這個檢視圖建層中的檢視圖

00:04:39.405 --> 00:04:43.615
此方法的返回值是一個檢視圖型式的物件

00:04:43.615 --> 00:04:47.415
這個左側欄顯示所有這些方法的返回值

00:04:47.415 --> 00:04:51.815
這意味著 在我們的活動代碼內 我們可以調用 findViewById,

00:04:51.815 --> 00:04:56.670
傳入我們需要的檢視圖的資源 ID 然后它將返回一個檢視圖物件

00:04:56.670 --> 00:04:59.980
然后 我們將它存放為活動內的一個變數

00:05:02.170 --> 00:05:04.300
MainActivity Java 代碼應該是這樣的

00:05:05.360 --> 00:05:07.230
我們可以調用 findViewById

00:05:07.230 --> 00:05:12.140
然后將我們想要的檢視圖的資源 ID 作為一個輸入項傳入

00:05:12.140 --> 00:05:15.050
我們為這個TextView提從一個ID 
即order.summary.text.view

00:05:15.050 --> 00:05:19.370
在這里我們可以
將它引用為R.id.order_summary_text_view

00:05:19.370 --> 00:05:23.490
這個方法將會運行 并且搜尋整個檢視圖階層

00:05:23.490 --> 00:05:24.930
尋找具有這個ID的檢視圖

00:05:26.110 --> 00:05:31.030
然后 它透過此方法的返回值返回這個Java物件

00:05:31.030 --> 00:05:34.790
我們可以把這個返回值存入左側的

00:05:34.790 --> 00:05:39.290
這個名為orderSummaryTextView的變數 這個變數是檢視圖型別的

00:05:39.290 --> 00:05:42.610
因此 這返回一個檢視圖 我們把它存入檢視圖變數

00:05:42.610 --> 00:05:47.280
稍后在MainActivity中 我們還可以調用findViewById

00:05:47.280 --> 00:05:53.120
然后傳入這個資源ID 即R.id.quantity_text_view 
它指向這里的這個TextView

00:05:53.120 --> 00:05:55.610
這是數量拾取器中的TextView

00:05:55.610 --> 00:05:58.847
當調用它時 活動會尋找整個檢視圖階層

00:05:58.847 --> 00:06:01.460
然后嘗試找到具有這個ID的檢視圖

00:06:01.460 --> 00:06:03.265
然后它會返回這個檢視圖

00:06:03.265 --> 00:06:07.190
我們可以把它存放到名稱為quantity_text_view的變數

00:06:07.190 --> 00:06:09.490
這個變數也是View資料型別的變數

00:06:10.490 --> 00:06:13.440
這就告訴我們怎樣在主活動中獲取

00:06:13.440 --> 00:06:17.190
quantityTextView和orderSummaryTextView變數

00:06:17.190 --> 00:06:20.800
以及這些變數如何連結到檢視圖階層中的這些Java物件

00:06:20.800 --> 00:06:21.396
另外說一下

00:06:21.396 --> 00:06:25.460
在左側欄 我列出了所有這些變數的資料型別

00:06:26.690 --> 00:06:29.750
因此這兩個變數是檢視圖型別的 而且是在這里宣告的

