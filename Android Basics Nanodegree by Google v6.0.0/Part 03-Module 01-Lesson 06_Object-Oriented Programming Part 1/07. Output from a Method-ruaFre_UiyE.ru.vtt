WEBVTT
Kind: captions
Language: ru

00:00:00.300 --> 00:00:03.370
Мы только что разобрали как вызывать
метод и вводить входные значения.

00:00:03.370 --> 00:00:04.260
&gt;&gt; Подожди-ка.

00:00:04.260 --> 00:00:06.790
Ты говоришь о вводе величины
в этот, как его...

00:00:06.790 --> 00:00:08.270
метод <i>calculateРrice</i>?

00:00:08.270 --> 00:00:09.300
&gt;&gt;Именно так.

00:00:09.300 --> 00:00:11.850
А теперь мы хотим получить
от него возвращаемое значение.

00:00:11.850 --> 00:00:12.765
&gt;&gt;Обожаю эти значения!

00:00:12.765 --> 00:00:13.930
&gt;&gt; Какое выберем?

00:00:13.930 --> 00:00:15.300
Может, цена? Это же

00:00:15.300 --> 00:00:16.550
все-таки метод расчета цены.

00:00:16.550 --> 00:00:19.750
&gt;&gt; Ага, общая цена заказа и будет
возвращаемой величиной.

00:00:19.750 --> 00:00:21.310
&gt;&gt; Ладно, так и сделаем!

00:00:21.310 --> 00:00:23.510
&gt;&gt; Хорошо.
Тебе вилку дать?

00:00:25.820 --> 00:00:26.980
&gt;&gt; А надо?

00:00:26.980 --> 00:00:31.340
&gt;&gt; В Java выходное значение метода
известно как возвращаемое значение.

00:00:31.340 --> 00:00:35.640
В примерах кода вы могли видеть
слово <i>return</i> внутри метода или

00:00:35.640 --> 00:00:39.090
видели слово <i>return</i> в комментарии над ним.

00:00:39.090 --> 00:00:42.170
Давайте узнаем больше о
возвращаемой величине для методов.

00:00:42.170 --> 00:00:46.900
Я задам поиск в Google по параметру
возвращаемая величина в Java методе .

00:00:46.900 --> 00:00:48.780
Первая ссылка мне нравится.

00:00:48.780 --> 00:00:51.420
Эта статья рассказывает о
возвращаемой из метода величине.

00:00:52.710 --> 00:00:55.240
Тут сказано, что выполнение
метода заканчивается,

00:00:55.240 --> 00:00:59.510
когда мы закончили все описания в методе
или все строки в методе.

00:00:59.510 --> 00:01:04.319
Или когда мы достигли первого оператора
возврата, какой бы из них ни шел первым.

00:01:04.319 --> 00:01:07.370
Метода также завершится, если мы
вызовем исключение или

00:01:07.370 --> 00:01:10.410
ошибку, но в этом курсе мы
не будем это рассматривать.

00:01:10.410 --> 00:01:12.710
В основном, мы сосредоточимся
на первых двух случаях.

00:01:14.240 --> 00:01:18.230
Итак, в коде вам может встретиться
<i>return</i> с точкой с запятой.

00:01:18.230 --> 00:01:21.100
Это значит, что метод должен закончиться и

00:01:21.100 --> 00:01:24.150
любая строка, следующая после
этого, не будет выполняться.

00:01:25.440 --> 00:01:28.170
Или же вам может встретиться вот такое.

00:01:28.170 --> 00:01:32.230
<i>Return</i>, затем величина и точка с запятой.

00:01:32.230 --> 00:01:35.280
Это и есть возвращение
выходного значения из метода.

00:01:36.470 --> 00:01:37.900
Вот пример.

00:01:37.900 --> 00:01:40.140
Это код для метода <i>getArea</i>.

00:01:40.140 --> 00:01:43.420
Он должен вычислять площадь
прямоугольника,

00:01:43.420 --> 00:01:46.010
определенного как ширина,
умноженная на длину.

00:01:46.010 --> 00:01:51.100
Итак, внутри метода у нас есть <i>return</i>
со следующей за ним возвращаемой

00:01:51.100 --> 00:01:54.660
величиной. Возвращаемая величиина -
переменная width [ширина] умноженная на

00:01:54.660 --> 00:01:56.610
переменную height [длина].
Она равняется целому

00:01:56.610 --> 00:02:01.270
числу. И это число возвращается как
выходная величина для данного метода.

00:02:01.270 --> 00:02:02.760
В отличие от входных параметров,

00:02:02.760 --> 00:02:05.890
где можно иметь много вхдных параметров,
перечисленных между открывающими

00:02:05.890 --> 00:02:10.389
и закрывающими круглыми скобками, тут
допускается только одна возвращаемая

00:02:10.389 --> 00:02:13.530
величина. А тип данных этой возвращаемой
величины уточнен тут.

00:02:13.530 --> 00:02:18.300
Мы могли бы вернуть любое другое число,
лишь бы оно было целым.

00:02:18.300 --> 00:02:21.050
Например, нельзя вернуть строку,

00:02:21.050 --> 00:02:24.170
потому что это не сопоставимо с
введенным типом данных.

00:02:24.170 --> 00:02:27.930
Вы уже наверное понимаете, что в Java
есть особое значение для

00:02:27.930 --> 00:02:29.550
слова <i>return</i>.

00:02:29.550 --> 00:02:33.480
Его нельзя использовать для
названия переменных или методов.

00:02:33.480 --> 00:02:35.549
Такие слова называются
ключевыми Java словами.

00:02:37.140 --> 00:02:38.960
Я могу задать поиск
ключевых Java слов.

00:02:41.370 --> 00:02:43.740
Вот переченьвсех ключевых Java слов.

00:02:43.740 --> 00:02:46.880
Вы заметили, что некоторые из них
мы уже встречали ранее.

00:02:46.880 --> 00:02:49.460
Такие как <i>int, public</i>, и <i>private</i>.

00:02:49.460 --> 00:02:50.710
Список довольно короткий.

00:02:50.710 --> 00:02:53.440
И все эти слова имеют особое значение в
Java, когда вы вводите

00:02:53.440 --> 00:02:53.940
их в свой код.

00:02:53.940 --> 00:02:58.640
А значит, вы не можете их использовать
в приложении как идентификатор

00:02:58.640 --> 00:03:00.560
вроде названия переменных или методов.

00:03:00.560 --> 00:03:04.140
Вы также увидите, что <i>return</i>
это особое ключевое слово в Java.

00:03:04.140 --> 00:03:07.780
Оно зарезервировано для того, чтобы
вернуть выходную величину из метода.

00:03:09.140 --> 00:03:12.240
Возвращаясь к предыдущему примеру
создания сообщения о погоде,

00:03:12.240 --> 00:03:17.150
мы можем создать строку и затем вернуть
ее, назначив возвращаемое сообщение.

00:03:17.150 --> 00:03:19.230
Тип данных этой перменной - строка.

00:03:19.230 --> 00:03:25.150
Что случится, если я добавлю строку кода
после этого оператора возврата?

00:03:25.150 --> 00:03:28.390
Тогда я получу сообщение об ошибке о
недостижимом операторе,

00:03:28.390 --> 00:03:31.230
потому что компьютер не
доберется до этих строк кода,

00:03:31.230 --> 00:03:32.690
стоящих после оператора возврата,

00:03:32.690 --> 00:03:35.690
ведь это бы завершило метод в той точке.

00:03:35.690 --> 00:03:38.570
Поэтому удаляйте любые строки кода,
идущие после оператора возврата.

00:03:39.640 --> 00:03:43.100
Что если вам не нужно, чтобы метод
возвращал какие-либо выходные величины?

00:03:43.100 --> 00:03:45.390
Рассмотрим парочку примеров в <i>MainActivity</i>

00:03:45.390 --> 00:03:47.295
приложения <i>Just Java App</i>.
Методы увеличения и

00:03:47.295 --> 00:03:52.415
уменьшения на единицу это примеры
того, где нет выходного значения.

00:03:52.415 --> 00:03:53.905
Когда вызываетется метод уменьшения

00:03:53.905 --> 00:03:58.405
значения, он усиленно обновляет
<i>UI</i> в методе <i>displayQuantity</i>.

00:03:58.405 --> 00:04:01.045
Нет никакого выходного значения
для возврата.

00:04:01.045 --> 00:04:04.185
То же и с методом увеличения - усиленная
работа проводится,

00:04:04.185 --> 00:04:07.455
когда вы вызываете <i>displayQuantity</i>
и это обновляет экран.

00:04:07.455 --> 00:04:10.430
Вы наверное думаете, а где же
тогда оператор возврата.

00:04:10.430 --> 00:04:14.180
Метод завершит выполнение, когда все
строки кода будут

00:04:14.180 --> 00:04:17.089
завершены или когда он дойдет
до оператора возврата.

00:04:17.089 --> 00:04:20.320
Я могла бы добавить <i>return;</i>, вот так.

00:04:21.570 --> 00:04:24.870
Тогда метод завершится как только
дойдет до этой строки.

00:04:24.870 --> 00:04:27.200
Android Studio мне выдает предупреждение.

00:04:27.200 --> 00:04:31.570
Тут сказано, что возврат необязателен в
последнем операторе в методе <i>void</i>.

00:04:31.570 --> 00:04:35.900
Так как я ничего не возвращаю, я просто
могу удалить эту строку.

00:04:35.900 --> 00:04:38.080
Так будет меньше строк кода и
его будет легче читать.

00:04:38.080 --> 00:04:39.750
Мне так больше нравится.

00:04:39.750 --> 00:04:43.100
Чтобы указать, что возвращающего
значения нет, важно, чтобы

00:04:43.100 --> 00:04:46.570
сигнатура метода говорила, что
возвращаемые данные <i>void</i> [пустые].

00:04:46.570 --> 00:04:49.390
<i>Void</i> просто означает, что нет
никакой возвращаемой величины.

00:04:49.390 --> 00:04:51.310
В Java есть особый способ передачи этого,

00:04:51.310 --> 00:04:53.940
вот поэтому существуют
ключевые словая Java.

00:04:53.940 --> 00:04:56.720
Вернемся к списку ключевых слов Java,
и действительно,

00:04:56.720 --> 00:04:58.280
мы видим, что <i>void</i> находится в списке.

00:04:59.310 --> 00:05:01.310
Так что, если у вас нет
возврщаемой величины,

00:05:01.310 --> 00:05:04.130
убедитесь, что вы не оставили
пустое место, вот так.

00:05:04.130 --> 00:05:07.470
Потому что в таком случае это будет
синтаксичекой ошибкой Java.

00:05:07.470 --> 00:05:09.430
Просто введите <i>void</i> с маленькой буквы <i>V</i>.

00:05:10.500 --> 00:05:12.310
А теперь прочтите статью самостоятельно.

00:05:12.310 --> 00:05:17.190
Можете пропустить то, что вам понятно
или задать поиск в Google, чтобы найти

00:05:17.190 --> 00:05:18.090
больше информации.

00:05:18.090 --> 00:05:21.310
Когда проясните для себя
кое-что из статьи, можете

00:05:21.310 --> 00:05:22.249
перейти к заданию.

00:05:23.500 --> 00:05:24.560
Проверьте инструкции.

00:05:24.560 --> 00:05:28.290
Там будет ссылка на коды к
четырем разным методам.

00:05:28.290 --> 00:05:30.440
В каждом из них есть ошибка.

00:05:30.440 --> 00:05:33.560
Ваше задание найти ошибку
в каждом из методов.

00:05:34.850 --> 00:05:37.110
Так как есть несколько вариантов
как исправить код,

00:05:37.110 --> 00:05:40.710
считайте, что комментарий документа
Java вверху каждого метода верен.

00:05:40.710 --> 00:05:42.210
Код должен с ним сопоставляться.

00:05:43.410 --> 00:05:44.680
Вот так выглядят методы.

00:05:45.810 --> 00:05:48.120
Определите номер строки, в которой
содержится ошибка.

00:05:48.120 --> 00:05:51.060
Номер строки находится в левой
колонке, вот тут.

00:05:51.060 --> 00:05:55.100
Затем напишите короткое описание
того, почему в строке ошибка.

00:05:55.100 --> 00:05:56.872
Номер строки пишем сюда, описание - сюда.

00:05:56.872 --> 00:05:57.993
Как закончите,

00:05:57.993 --> 00:05:59.765
перейдите к видео с ответами.

