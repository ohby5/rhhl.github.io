WEBVTT
Kind: captions
Language: fr

00:00:00.560 --> 00:00:04.010
Passons en revue chacune de 
ces méthodes puis remplissons le tableau.

00:00:04.010 --> 00:00:07.560
C'est le gist du code que nous vous avons
fourni dans les notes de l'instructeur.

00:00:07.560 --> 00:00:09.120
Commençons par la méthode 1.

00:00:09.120 --> 00:00:12.580
Cette méthode est destinée à
créer un message de rappel pour

00:00:12.580 --> 00:00:14.490
un événement de calendrier particulier.

00:00:14.490 --> 00:00:17.930
Le message sera composé
du nom de l'événement, et

00:00:17.930 --> 00:00:22.610
du lieu de l'événement ainsi que le
nombre de minutes à pied d'où vous êtes.

00:00:22.610 --> 00:00:25.910
Ainsi, le nom de la méthode est
createCalendarEventReminder en

00:00:25.910 --> 00:00:30.750
Camel Case, puis la liste des entrées 
est en entre l'ouverture et

00:00:30.750 --> 00:00:32.640
fermeture des parenthèses ici.

00:00:32.640 --> 00:00:36.660
Il y a trois paramètres d'entrée,
la première est la chaîne eventName,

00:00:36.660 --> 00:00:40.340
puis l'emplacement de la chaîne, et puis
int minutesAway.

00:00:40.340 --> 00:00:42.150
La sortie de cette méthode ou

00:00:42.150 --> 00:00:46.660
la valeur de retour est le rappel du
message, qui est le texte.

00:00:46.660 --> 00:00:49.050
Voilà donc pourquoi le type de données de
de retour est une chaîne.

00:00:50.380 --> 00:00:53.110
Et voilà ce que ça donne
rempli dans le tableau.

00:00:53.110 --> 00:00:56.740
Techniquement, cela devrait être
un mot sans espaces, mais

00:00:56.740 --> 00:00:59.240
ça ne rentre pas dans cette case.

00:00:59.240 --> 00:01:01.210
Et ceci est la deuxième méthode.

00:01:01.210 --> 00:01:05.540
Le but de cette méthode est de déduire un
nombre de points qui ont été utilisés

00:01:05.540 --> 00:01:09.120
à partir du nombre total de points,
qui est 100.

00:01:09.120 --> 00:01:12.500
Alors, elle renvoie le nombre
restant de points.

00:01:12.500 --> 00:01:15.670
Le nom de la méthode est
appelé deductPoints et

00:01:15.670 --> 00:01:18.730
il y a un paramètre d'entrée
entre cette ouverture et

00:01:18.730 --> 00:01:25.000
fermeture de parenthèse, il se nomme
pointsUsed, et le type de données est int.

00:01:25.000 --> 00:01:28.680
La valeur de retour est numberOfPoints
restants, et c'est un nombre,

00:01:28.680 --> 00:01:30.570
c'est pourquoi le type de données
de retour est un int.

00:01:31.880 --> 00:01:34.510
Dans le tableau,
voilà à quoi ça ressemblerait.

00:01:34.510 --> 00:01:36.410
Et ceci est la troisième méthode,

00:01:36.410 --> 00:01:40.900
le but de cette méthode est de créer
une chaîne de texte qui dit que la somme

00:01:40.900 --> 00:01:46.490
de toutes les longueurs des déplacement,
cette méthode est findTotalTripLength.

00:01:46.490 --> 00:01:49.920
Ensuite, nous allons vers la droite
pour voir tous les paramètres.

00:01:49.920 --> 00:01:52.550
Nous avons trois paramètres d'entrée
ici entre l'ouverture et

00:01:52.550 --> 00:01:56.210
la fermeture des parenthèses, et
ils sont séparés par des virgules.

00:01:56.210 --> 00:01:58.610
Le premier est Int distanceOfFirstTrip,

00:01:58.610 --> 00:02:04.580
le second est Int distanceOfSecondTrip,
et Int distanceOfThirdTrip.

00:02:04.580 --> 00:02:09.520
Ainsi, dans cette méthode, on peut se
référer à chacune de ces variables.

00:02:09.520 --> 00:02:14.380
Ce sont des nombres entiers, vous pouvez 
les ajouter à la longueur totale du voyage

00:02:14.380 --> 00:02:16.190
qui commence à deux miles.

00:02:16.190 --> 00:02:20.340
Et puis nous pouvons concaténer ça
dans cette chaîne de message.

00:02:21.460 --> 00:02:25.510
Ce message est un texte, donc la valeur 
de retour de la méthode est une chaîne.

00:02:26.890 --> 00:02:28.320
Voilà à quoi ça
ressemble dans le tableau.

