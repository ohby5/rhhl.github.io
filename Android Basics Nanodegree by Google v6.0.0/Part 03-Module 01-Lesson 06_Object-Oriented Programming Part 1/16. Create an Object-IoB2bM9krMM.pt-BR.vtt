WEBVTT
Kind: captions
Language: pt-BR

00:00:00.554 --> 00:00:02.340
No último vídeo, 
eu falei rapidamente

00:00:02.340 --> 00:00:04.524
que um construtor
é definido dentro da classe,

00:00:04.684 --> 00:00:07.250
e é usado para criar
as instâncias de objetos.

00:00:07.750 --> 00:00:10.769
Então, chamamos o construtor
<i>TextView</i> para criar essa instância,

00:00:10.819 --> 00:00:13.135
e o chamamos de novo 
para criar outra instância,

00:00:13.135 --> 00:00:14.367
e assim por diante.

00:00:14.367 --> 00:00:17.195
Vamos ver o código para
como chamar um construtor.

00:00:17.795 --> 00:00:20.865
Lembra de como criamos uma 
nova varável inteira

00:00:20.865 --> 00:00:24.127
chamada <i>quantity</i>, e a ajustamos
para um valor inicial de dois?

00:00:24.637 --> 00:00:26.837
A criação de um novo objeto
e seu armazenamento

00:00:26.837 --> 00:00:29.430
dentro de uma variável
vai seguir um formato parecido.

00:00:29.710 --> 00:00:31.242
Vai ser mais ou menos assim.

00:00:32.052 --> 00:00:35.382
Só que em vez do <i>int data type</i>, 
temos um <i>object data type</i>.

00:00:35.982 --> 00:00:38.784
O <i>object data type</i>
é o nome que damos à classe.

00:00:39.574 --> 00:00:40.920
Neste caso, será <i>TextView</i>.

00:00:41.490 --> 00:00:42.697
Pode ser qualquer coisa,

00:00:42.697 --> 00:00:45.210
desde que siga as convenções
para nomes de variáveis.

00:00:45.550 --> 00:00:47.425
Então, o chamaremos
de <i>priceTextView</i>.

00:00:47.465 --> 00:00:49.756
Então o ajustamos para
equivaler ao novo objeto.

00:00:49.756 --> 00:00:52.045
Mas podemos subdividir
o lado direito ainda mais.

00:00:52.445 --> 00:00:54.580
O lado direito segue o formato

00:00:54.580 --> 00:00:57.692
de <i>new</i> seguido
pelo <i>object data type</i>,

00:00:57.862 --> 00:00:59.269
que neste caso é o <i>TextView</i>.

00:00:59.849 --> 00:01:02.558
Isto chama o construtor
definido em uma classe <i>TextView</i>

00:01:02.558 --> 00:01:05.148
para que tenhamos parênteses

00:01:05.148 --> 00:01:07.430
com os argumentos de entrada
para o construtor.

00:01:07.650 --> 00:01:10.158
Então, se o construtor
requer um <i>context object</i>,

00:01:10.588 --> 00:01:12.528
temos que passar um <i>context</i> aqui.

00:01:13.168 --> 00:01:16.192
Lembre que o <i>context object</i>
lhe ajuda a acessar

00:01:16.192 --> 00:01:19.876
os recursos do aplicativo e outras coisas
sobre o ambiente do aplicativo.

00:01:20.766 --> 00:01:23.740
Então, é assim que é criado
um novo objeto <i>TextView</i>,

00:01:23.980 --> 00:01:25.222
chamando o construtor,

00:01:25.542 --> 00:01:28.990
e então armazenando este novo <i>object</i>
dentro de uma variável,

00:01:29.070 --> 00:01:30.416
chamada <i>priceTextView</i>.

00:01:30.976 --> 00:01:34.237
E essa variável só pode conter
um único objeto <i>TextView</i>,

00:01:34.447 --> 00:01:36.235
como definido pelo <i>data type</i>.

00:01:36.865 --> 00:01:39.567
Vejamos outro exemplo 
de como criar um objeto <i>ImageView</i>

00:01:39.567 --> 00:01:41.323
e armazená-lo
dentro de uma variável.

00:01:41.573 --> 00:01:45.070
O <i>data type</i> é <i>ImageView</i>,
a variável se chama <i>coffeeImageView</i>.

00:01:45.500 --> 00:01:49.474
E temos o operador de atribuição
seguido por <i>newImageView</i>.

00:01:49.994 --> 00:01:53.129
Isso é soletrado do mesmo modo
que o <i>object data type</i> aqui.

00:01:53.659 --> 00:01:57.125
Como estamos chamando o construtor
e temos que passar qualquer entrada,

00:01:57.125 --> 00:01:59.893
temos parênteses e então
colocamos as entradas lá.

00:02:00.353 --> 00:02:02.778
Veja um terceiro exemplo
que cria um <i>button object</i>

00:02:02.948 --> 00:02:04.705
e o armazena nesta variável.

00:02:05.515 --> 00:02:07.814
O tipo de dados é <i>Button</i>,
o nome da variável

00:02:07.814 --> 00:02:09.582
é <i>submitOrderButton</i>,
e então dizemos,

00:02:09.582 --> 00:02:11.981
<i>newButton</i>
para chamar o construtor.

00:02:12.751 --> 00:02:15.468
Você pode até definir
seu próprio <i>object data type</i>.

00:02:15.528 --> 00:02:18.114
Digamos, por exemplo,
que criei uma definição de classe

00:02:18.114 --> 00:02:19.220
para <i>CatView</i>.

00:02:19.630 --> 00:02:22.467
Então eu poderia usar esta linha
para criar um novo <i>CatView</i>.

00:02:22.687 --> 00:02:25.468
Neste caso, o construtor
requer uma sequência de caracteres

00:02:25.468 --> 00:02:26.541
para o nome do <i>cat</i>,

00:02:26.541 --> 00:02:29.126
então é por isso que coloquei
<i>tiger</i> entre parênteses

00:02:29.126 --> 00:02:31.309
e passei isso para
o construtor <i>CatView</i>.

00:02:31.869 --> 00:02:35.062
Para determinar o que passar
como entrada a esses construtores

00:02:35.062 --> 00:02:37.996
você precisa olhar ou
para o arquivo,

00:02:37.996 --> 00:02:39.580
da classe <i>Javadoc</i>,

00:02:39.580 --> 00:02:41.444
ou para o arquivo da classe de origem.

00:02:41.484 --> 00:02:44.639
Todos esses casos usam a palavra <i>new</i>
para criar um novo <i>object</i>.

00:02:45.349 --> 00:02:47.447
Se voltarmos à lista
de palavras-chave Java,

00:02:47.577 --> 00:02:50.909
então encontramos que
a palavra <i>new</i> está nessa lista.

00:02:51.959 --> 00:02:53.954
Às vezes quando você está
olhando para a documentação,

00:02:54.244 --> 00:02:57.145
ela pode lhe aconselhar a usar
um <i>factory method</i>

00:02:57.145 --> 00:02:58.382
para criar um objeto.

00:02:58.652 --> 00:03:00.570
Isto é, em vez de um construtor.

00:03:00.950 --> 00:03:02.169
Veja um exemplo,

00:03:02.369 --> 00:03:03.964
Para criar um novo <i>MediaPlayer</i>,

00:03:04.164 --> 00:03:08.131
a documentação lhe aconselha
a usar o <i>method MediaPlayer.create</i>

00:03:08.591 --> 00:03:10.744
E isso devolve
um <i>MediaPlayer object</i>

00:03:10.744 --> 00:03:12.960
que pode ser armazenado
dentro dessa variável.

00:03:13.070 --> 00:03:15.859
Ele segue o formato
do <i>object data type</i>,

00:03:15.979 --> 00:03:18.931
o <i>MediaPlayer</i> com M maiúsculo,
ponto,

00:03:19.081 --> 00:03:22.461
e o <i>factory method name</i>,
que é <i>create</i> neste caso.

00:03:22.531 --> 00:03:26.216
E aí você passa os argumentos de entrada,
para inicializar o <i>MediaPlayer</i>.

00:03:27.156 --> 00:03:29.584
Este é outro exemplo
de como criar um <i>Toast</i>.

00:03:30.234 --> 00:03:31.797
Um <i>toast</i> é uma mensagem

00:03:31.797 --> 00:03:34.008
que aparece temporariamente
no seu aplicativo,

00:03:34.008 --> 00:03:34.918
depois desaparece.

00:03:35.308 --> 00:03:38.022
O código começa com <i>Toast</i>,
com T maiúsculo,

00:03:38.362 --> 00:03:40.167
porque este é um
<i>object data type</i>.

00:03:40.177 --> 00:03:42.860
E então tempo um ponto
e depois <i>makeText</i>,

00:03:42.860 --> 00:03:44.330
que é o <i>factory method name</i>.

00:03:44.640 --> 00:03:47.920
Então passamos os argumentos de entrada
para criar esse <i>Toast</i>.

00:03:48.600 --> 00:03:50.741
Para saber qual é 
o <i>factory method name</i>

00:03:50.741 --> 00:03:52.478
e quais são os argumentos
de entrada,

00:03:52.478 --> 00:03:55.075
você precisa checar a documentação
para a classe <i>Toast</i>.

00:03:55.125 --> 00:03:58.074
Geralmente, para saber se você
deveria criar um <i>object</i>

00:03:58.074 --> 00:04:00.349
usando um construtor
ou um <i>factory method</i>,

00:04:00.349 --> 00:04:02.781
você pode buscar no Google
como criar esse <i>object</i>.

00:04:03.191 --> 00:04:06.263
Usar um construtor é a forma
mais comum de criar um novo <i>object</i>.

00:04:06.653 --> 00:04:09.091
É menos comum do que 
usar um <i>factory method</i>,

00:04:09.311 --> 00:04:11.504
mas para ter certeza
de qual você deveria usar,

00:04:11.524 --> 00:04:14.214
você pode buscar no Google
sobre como criar esse <i>object</i>.

00:04:14.654 --> 00:04:17.341
Essa é uma chance de praticar
com a criação de <i>objects</i>.

00:04:17.741 --> 00:04:20.283
Em cada uma dessas linhas de código,
existe um erro.

00:04:20.713 --> 00:04:22.191
Descubra qual é o erro,

00:04:22.321 --> 00:04:25.197
e então escreva a linha correta de código
nos espaços abaixo.

