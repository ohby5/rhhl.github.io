WEBVTT
Kind: captions
Language: ru

00:00:00.470 --> 00:00:03.770
Мы создали упрощенную
версию класса <i>TextView</i>,

00:00:03.770 --> 00:00:06.810
которая будет сохранена
в файле <i>TextView.java</i>.

00:00:06.810 --> 00:00:08.290
Иы упростили чтобы вам было легче

00:00:08.290 --> 00:00:11.060
понять как должен выглядеть класс.

00:00:11.060 --> 00:00:13.710
В начале стоит модификатор доступа.

00:00:13.710 --> 00:00:15.100
Он обозначен как <i>public</i> поэтому

00:00:15.100 --> 00:00:19.480
другие процессы, как неактивность,
могут использовать класс <i>TextView</i>.

00:00:19.480 --> 00:00:21.040
Псоле стоит слово <i>class</i>.

00:00:21.040 --> 00:00:24.310
Это показывает java
что это определение класса.

00:00:24.310 --> 00:00:26.400
После у нас стоит название класса.

00:00:26.400 --> 00:00:30.590
Название класса в Java - с заглавной
буквы и в горбатом регистре.

00:00:30.590 --> 00:00:34.360
Поэтому пробелов нет и слова
начинаются с заглавных букв.

00:00:34.360 --> 00:00:36.800
Здесь есть еще текст,
но мы рассмотрим его позже.

00:00:36.800 --> 00:00:39.304
Важно то что у нас есть
открывающая скобка и

00:00:39.304 --> 00:00:42.354
в конце определения -
закрывающая скобка.

00:00:42.354 --> 00:00:47.130
Внутри класса <i>TextView</i>
у нас есть множество переменных.

00:00:47.130 --> 00:00:51.140
Каждая из них представляет поле в
<i>TextView</i>, поэтому у нас есть поле для

00:00:51.140 --> 00:00:55.700
для текста и поле
для цвета текста в <i>TextView</i>.

00:00:55.700 --> 00:00:57.850
Есть и другие поля, но помните

00:00:57.850 --> 00:00:59.928
что это упрощенная версия
класса <i>TextView</i>.

00:01:01.000 --> 00:01:04.239
Также у вас есть переменная
чтобы хранить сведения

00:01:04.239 --> 00:01:05.740
о контексте приложения.

00:01:05.740 --> 00:01:08.750
Вы можете прочитать больше
о контексте в заметках ниже, но

00:01:08.750 --> 00:01:13.170
в двух словах - это способ
доступа к информации о приложении

00:01:13.170 --> 00:01:16.670
например, к ресурсам приложения
при помощи контекста.

00:01:17.870 --> 00:01:19.990
Все это - алгоритмы <i>TextView</i>.

00:01:19.990 --> 00:01:23.690
Алгоритм <i>setText</i> использует строку
в качестве исходных данных.

00:01:23.690 --> 00:01:28.840
И меняет глобальную переменную <i>mText</i>
чтобы она использовала это значение.

00:01:28.840 --> 00:01:32.480
Похожим образом <i>setTextColor</i>
берет новый цвет и

00:01:32.480 --> 00:01:36.080
и меняет его состояние чтобы
получить новое цветовое значение.

00:01:36.080 --> 00:01:38.045
Есть еще алгоритмы
такие как <i>getText</i> и

00:01:38.045 --> 00:01:42.920
<i>getTextColor</i>, которые выдают внутрен-
нюю текстовую строку или цвет текста.

00:01:44.080 --> 00:01:48.091
И еще, вы наверное заметили
что эти глобальные переменные

00:01:48.091 --> 00:01:49.651
тут все начинаются с прописной m.

00:01:49.651 --> 00:01:51.510
M значит <i>member</i> <i>variable</i> 
(переменная-член), и

00:01:51.510 --> 00:01:55.330
это все - переменные-
члены этого класса <i>TextView</i>.

00:01:55.330 --> 00:01:58.580
Переменная-член это еще
один способ назначить поле или

00:01:58.580 --> 00:02:00.990
состояние в классе <i>TextView</i>.

00:02:00.990 --> 00:02:03.380
Вот упрощенный класс <i>ImageView</i>.

00:02:03.380 --> 00:02:05.320
Вы найдете его в файле ImageView.java.

00:02:06.400 --> 00:02:10.580
Он начинается с класса <i>public</i>
а затем <i>ImageView</i> - это имя класса.

00:02:10.580 --> 00:02:13.550
Затем идут открывающие
и закрывающие скобки.

00:02:13.550 --> 00:02:15.980
Это определяет состояние <i>ImageView</i>.

00:02:15.980 --> 00:02:17.730
Обычно, полей больше чем здесь,

00:02:17.730 --> 00:02:20.000
я просто хотела показать вам пример.

00:02:20.000 --> 00:02:25.680
Это целая переменная, она называется
<i>mImageId</i>, m - по упомянутой причине.

00:02:25.680 --> 00:02:28.340
В не хранится resource id

00:02:28.340 --> 00:02:31.160
изображения, которое должно быть
показано в этом <i>ImageView</i>.

00:02:31.160 --> 00:02:34.470
Ниже, у нас есть конструктор,
который собирает

00:02:34.470 --> 00:02:36.390
новый объект <i>ImageView</i>.

00:02:36.390 --> 00:02:38.730
Он берет эти исходные из контекста.

00:02:38.730 --> 00:02:40.809
А потом инициализирует
эти переменные.

00:02:42.120 --> 00:02:43.088
Далее берем алгоритм.

00:02:43.088 --> 00:02:47.190
Он называется <i>setImage</i> и берет
это исходное, resource ID, для

00:02:47.190 --> 00:02:50.500
нового изображения, которое надо
показать в этом <i>ImageView</i>.

00:02:50.500 --> 00:02:53.850
Внутри алгоритма мы дополняем
внутреннюю переменную для image ID.

00:02:55.100 --> 00:02:57.691
Повторю, мы создали упрощенные
классы <i>TextView</i> и

00:02:57.691 --> 00:03:01.880
ImageView чтобы помочь вам
понять концепцию классов.

00:03:01.880 --> 00:03:05.200
А теперь посмотрим на настоящую
версию этих классов внутри

00:03:05.200 --> 00:03:06.110
сборки Android.

00:03:07.950 --> 00:03:09.240
Чтобы увидеть код для

00:03:09.240 --> 00:03:13.240
классов Java в Android, нужно
установить это расширение Chrome,

00:03:13.240 --> 00:03:14.960
Если вы не пользуетесь
браузером Chrome,

00:03:14.960 --> 00:03:17.989
в заметках ниже вы найдете
как добраться до этих файлов.

00:03:19.020 --> 00:03:19.520
Ok.

00:03:21.840 --> 00:03:26.081
Как только расширение Chrome
установлено, я поищу нечто, похожее

00:03:26.081 --> 00:03:30.260
на <i>TextView</i> Android, и
посмотрю справочник для этого класса,

00:03:30.260 --> 00:03:34.830
и там должна быть вот такая ссылка,
указывающая на источник.

00:03:34.830 --> 00:03:36.730
Это для очень опытных разработчиков.

00:03:36.730 --> 00:03:41.420
Если вам интересен код
использованный для этого <i>TextView</i>.

00:03:41.420 --> 00:03:45.850
Это файл <i>TextView.java</i>
созданный кем-то в команде Android.

00:03:45.850 --> 00:03:47.970
Как вы видите,
он очень длинный и сложный.

00:03:47.970 --> 00:03:49.739
Но в нем есть все главные
части класса.

00:03:51.010 --> 00:03:55.330
Он начинается с класса <i>public</i>,
потом <i>TextView</i>, имя класса, и

00:03:55.330 --> 00:03:57.280
открывающая скобка и

00:03:57.280 --> 00:03:59.500
закрывающая скобка вот здесь - внизу.

00:04:00.930 --> 00:04:04.340
Вверху класса мы видим поля и

00:04:04.340 --> 00:04:07.200
это описывает состояние класса.

00:04:07.200 --> 00:04:13.470
Например видно что <i>TextColor</i> это поле
а также видим что <i>text</i> тоже поле.

00:04:13.470 --> 00:04:17.560
А вот конструктор для <i>TextView</i>
который использует контекст.

00:04:17.560 --> 00:04:22.560
Если я нажму Cmd+F, или Ctl+F в
Windows, то я могу попробовать найти

00:04:22.560 --> 00:04:24.050
<i>setText</i>.

00:04:24.050 --> 00:04:26.250
А вот и алгоримт <i>setText</i>.

00:04:26.250 --> 00:04:29.835
Этот алгоритм определяет
значение строки в <i>TextView</i>.

00:04:29.835 --> 00:04:31.205
А если я поищу <i>GetText</i> то

00:04:31.205 --> 00:04:35.605
также увижу что этот алгоритм создает
текст который отбражается в TextView.

00:04:35.605 --> 00:04:38.275
Вы поняли идею и можете
сами все рассмотреть.

00:04:39.545 --> 00:04:42.245
Если я поищу страницу
документации <i>ImageView</i>,

00:04:42.245 --> 00:04:46.750
то смогу увидеть весь код
для класса <i>ImageView</i>.

00:04:46.750 --> 00:04:49.370
В файле указано <i>public class ImageView</i>,

00:04:49.370 --> 00:04:52.460
а все эти поля определяют
состояние <i>ImageView</i>,

00:04:52.460 --> 00:04:55.810
еще есть множество алгоритмов
в самом конце файла.

00:04:55.810 --> 00:04:57.810
Код в этом файле тоже достаточно сложный,

00:04:57.810 --> 00:05:00.360
в нем тысячи строк кода.

00:05:00.360 --> 00:05:03.060
Лучшее в объектно-ориентированном
программировании

00:05:03.060 --> 00:05:06.500
это то что вам не надо
знать все эти подробности.

00:05:06.500 --> 00:05:10.200
Разработчик может использовать
<i>TextView</i> и <i>ImageView</i> в приложении

00:05:10.200 --> 00:05:13.630
не зная массу подробностей
о том что происходит у них внутри.

