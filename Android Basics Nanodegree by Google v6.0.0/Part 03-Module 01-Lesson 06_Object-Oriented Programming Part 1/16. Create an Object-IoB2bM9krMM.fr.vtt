WEBVTT
Kind: captions
Language: fr

00:00:00.520 --> 00:00:03.270
Dans la dernière vidéo, j’ai brièvement 
mentionné qu’un constructeur est

00:00:03.270 --> 00:00:07.910
défini à l’intérieur de la classe, et il est 
utilisé pour créer des instances d’objet.

00:00:07.910 --> 00:00:10.610
Donc on appelle le constructeur TextView
pour créer cette instance,

00:00:10.610 --> 00:00:14.220
et on l’appelle encore pour créer
une autre instance, et ainsi de suite.

00:00:14.220 --> 00:00:17.190
Regardons le code pour savoir comment
appeler réellement un constructeur.

00:00:18.250 --> 00:00:22.280
Est-ce que vous vous souvenez on a créé 
une nouvelle variable entière nommée quantité et

00:00:22.280 --> 00:00:24.960
on l’a définie pour qu’elle soit 
d’une valeur initiale de deux ?

00:00:24.960 --> 00:00:26.340
Créer un nouvel objet et

00:00:26.340 --> 00:00:29.120
le stocker dans une variable va 
suivre un format similaire.

00:00:30.200 --> 00:00:32.200
Cela ressemblera à quelque chose 
comme ça.

00:00:32.200 --> 00:00:36.150
Mais, au lieu d’avoir le type de données 
int, on a un type de données objet.

00:00:36.150 --> 00:00:38.770
Le type de données objet est le nom 
que nous avons donné à la classe.

00:00:38.770 --> 00:00:41.650
Dans ce cas, c’est TextView.

00:00:41.650 --> 00:00:45.700
Ça peut être n’importe quoi tant que ça suit 
les conventions pour les noms de variable.

00:00:45.700 --> 00:00:47.720
Donc, on l’appelle simplement 
priceTextView.

00:00:47.720 --> 00:00:49.600
Puis on le définit égal à un nouvel objet.

00:00:49.600 --> 00:00:51.740
Mais on peut décomposer ce 
côté à droite davantage.

00:00:52.800 --> 00:00:58.060
Le côté à droite suit le format de nouveau
suivit par le type de données objet,

00:00:58.060 --> 00:01:00.190
qui est TextView dans ce cas.

00:01:00.190 --> 00:01:03.510
Ça appelle le constructeur 
défini dans une classe TextView donc

00:01:03.510 --> 00:01:07.940
on a les parenthèses avec les arguments 
d’entrée pour le constructeur.

00:01:07.940 --> 00:01:10.790
Donc, si le constructeur
a besoin d’un objet contextuel

00:01:10.790 --> 00:01:13.490
alors on a besoin de passer un 
contexte ici.

00:01:13.490 --> 00:01:18.120
Souvenez-vous que l’objet contextuel aide 
à accéder aux ressources de l’application

00:01:18.120 --> 00:01:19.870
et d’autres choses en lien avec
l’environnement de l’application.

00:01:20.940 --> 00:01:24.140
Donc, c’est créé un nouvel objet 
TextView entièrement

00:01:24.140 --> 00:01:26.060
en appelant le constructeur et

00:01:26.060 --> 00:01:31.200
ensuite en stockant ce nouvel objet 
dans une variable appelée priceTextView.

00:01:31.200 --> 00:01:34.830
Et cette variable ne peut 
contenir qu’un seul objet TextView

00:01:34.830 --> 00:01:36.080
comme défini par son type de données.

00:01:37.210 --> 00:01:39.850
Ici, c’est un autre exemple pour 
créer un objet ImageView et

00:01:39.850 --> 00:01:41.840
le stocker dans une variable.

00:01:41.840 --> 00:01:45.770
Le type de donnée est ImageView,le 
nom de la variable est coffeeImageView.

00:01:45.770 --> 00:01:50.450
Et ensuite nous avons l’opérateur de 
tâche suivi par la nouvelle ImageView.

00:01:50.450 --> 00:01:53.830
Cela s’écrit exactement de la même façon 
que le type de données objet ici.

00:01:53.830 --> 00:01:57.320
Puisqu’on appelle le constructeur et 
on doit passer toutes les entrées

00:01:57.320 --> 00:02:00.620
on a des parenthèses et ensuite 
on met les entrées là-dedans.

00:02:00.620 --> 00:02:03.420
Voilà un troisième exemple qui 
crée un objet Button et

00:02:03.420 --> 00:02:05.700
le stocke dans cette variable.

00:02:05.700 --> 00:02:08.479
Le type de données est Button,le nom
de la variable est submitOrderButton,

00:02:08.479 --> 00:02:11.950
et ensuite, nous disons
nouveau Button appelle le constructeur.

00:02:13.140 --> 00:02:15.850
Vous pouvez même définir vos 
propres types de données objet.

00:02:15.850 --> 00:02:19.820
Disons, par exemple, j’ai créé
une définition de classe pour CatView.

00:02:19.820 --> 00:02:22.820
Ensuite je pourrais utiliser cette ligne 
pour créer un nouveau CatView.

00:02:22.820 --> 00:02:25.380
Dans ce cas le constructeur
a besoin d’une chaîne de données pour

00:02:25.380 --> 00:02:29.180
le nom du chat, c’est pourquoi 
j’ai mis Tiger entre parenthèses et

00:02:29.180 --> 00:02:32.280
je l’ai passé dans le constructeur 
de CatView.

00:02:32.280 --> 00:02:35.690
Pour déterminer ce qu’il faut passer 
comme entrées à ces constructeurs, vous

00:02:35.690 --> 00:02:41.450
devez regarder soit la classe du fichier 
Javadoc soit le fichier de classe source.

00:02:41.450 --> 00:02:45.680
Tous ces cas utilisent le mot 
new pour créer un nouvel objet.

00:02:45.680 --> 00:02:47.730
Si on retourne à la liste de mots-clefs 
de Java,

00:02:47.730 --> 00:02:51.040
alors, en effet, on trouve bien que 
le mot new est dans la liste.

00:02:52.190 --> 00:02:54.710
Parfois quand vous 
regardez la documentation,

00:02:54.710 --> 00:02:58.820
elle peut conseiller d’utiliser une 
méthode mère pour créer un objet.

00:02:58.820 --> 00:03:01.510
Et ceci à la place d’un constructeur.

00:03:01.510 --> 00:03:02.710
Voilà un exemple.

00:03:02.710 --> 00:03:04.290
Pour créer un nouveau MediaPlayer,

00:03:04.290 --> 00:03:09.040
la documentation vous conseille 
d’utiliser la méthode MediaPlayer.create.

00:03:09.040 --> 00:03:13.250
Et ça renvoie à un objet MediaPlayer
qui peut être stocké dans la variable.

00:03:13.250 --> 00:03:17.176
Il suit le format du type de donnée 
objet, le MediaPlayer avec

00:03:17.176 --> 00:03:22.720
M majuscule, dot et le nom de la méthode
mère, qui est créée dans ce cas.

00:03:22.720 --> 00:03:26.110
Ensuite vous le passez dans les arguments
d’entrée pour actualiser ce média player.

00:03:27.390 --> 00:03:29.710
Voici un autre exemple montrant
comment créer un Toast.

00:03:30.900 --> 00:03:33.700
Un Toast est un message qui apparait 
temporairement dans votre application et

00:03:33.700 --> 00:03:34.389
disparait ensuite.

00:03:35.420 --> 00:03:38.540
Donc le code commence avec Toast
avec la lettre majuscule T car

00:03:38.540 --> 00:03:39.800
c’est le type de données objet.

00:03:39.800 --> 00:03:44.050
Et ensuite, on a un dot et ensuite makeText
qui est le nom de méthode mère.

00:03:44.050 --> 00:03:48.730
Et ensuite nous passons les arguments 
d’entrée pour créer ce Toast.

00:03:48.730 --> 00:03:51.800
Pour savoir quel est le nom de la méthode 
mère et quels sont les arguments d’entrée,

00:03:51.800 --> 00:03:55.280
nous devons vérifier la documentation pour
la classe Toast.

00:03:55.280 --> 00:03:58.440
En général, afin de savoir si nous 
devons créer un objet en utilisant

00:03:58.440 --> 00:04:01.780
un constructeur ou avec une méthode mère,
vous pouvez lancer une recherche Google

00:04:01.780 --> 00:04:03.640
sur comment créer cet objet.

00:04:03.640 --> 00:04:06.940
L’utilisation d’un constructeur est le moyen
le plus courant de créer un objet.

00:04:06.940 --> 00:04:10.180
L’utilisation d’une méthode mère est moins 
courante, mais pour être sûre de savoir

00:04:10.180 --> 00:04:12.690
lequel vous devez utiliser, vous pouvez 
simplement faire une recherche Google sur

00:04:12.690 --> 00:04:13.820
comment créer cet objet.

00:04:15.000 --> 00:04:18.180
Voici une occasion pour s’entrainer 
à créer des objets.

00:04:18.180 --> 00:04:20.050
Dans chacune de ces lignes de code,
il y a une erreur.

00:04:21.160 --> 00:04:22.380
Déterminez quelle est l’erreur et

00:04:22.380 --> 00:04:24.770
ensuite écrivez la ligne de code 
exact dans les cases ci-dessous.

