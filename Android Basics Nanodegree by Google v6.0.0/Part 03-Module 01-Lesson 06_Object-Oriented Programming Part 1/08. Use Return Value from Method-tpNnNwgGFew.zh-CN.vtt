WEBVTT
Kind: captions
Language: zh-CN

00:00:00.940 --> 00:00:04.070
首先我们要修改 calculatePrice 方法的签明

00:00:04.070 --> 00:00:06.480
来设定正确的返回值数据类型

00:00:06.480 --> 00:00:08.640
我们假设输入参数的个数为0

00:00:09.850 --> 00:00:12.840
这是定义 calculatePrice 的地方

00:00:12.840 --> 00:00:15.930
这个方法的目的是计算整个订购的价格

00:00:15.930 --> 00:00:18.160
并且返回它

00:00:18.160 --> 00:00:19.660
价格应该是一个整数 所以

00:00:19.660 --> 00:00:22.670
我们需要把返回值的数据类型从 void 变成 int

00:00:23.730 --> 00:00:25.800
第一个任务就完成了

00:00:25.800 --> 00:00:29.130
提示还说要确保没有输入参数

00:00:29.130 --> 00:00:29.930
我这里也没有

00:00:31.020 --> 00:00:34.150
第二个任务就是修改方法内部的代码

00:00:34.150 --> 00:00:36.798
保证能够正确的计算订单价格

00:00:36.798 --> 00:00:39.220
假设一杯咖啡是 $5.00

00:00:40.770 --> 00:00:43.880
在这个方法内 我们使用订购杯数

00:00:43.880 --> 00:00:46.460
将它乘以每杯咖啡的价格 $5.00

00:00:47.700 --> 00:00:49.860
这等于整个订购价格

00:00:49.860 --> 00:00:51.100
这行代码就完成了

00:00:52.250 --> 00:00:56.920
但有两个问题 变量 price 从未使用

00:00:56.920 --> 00:00:59.490
而且还有一个错误提示我们缺少返回值的声明

00:00:59.490 --> 00:01:03.470
本来应该返回一个整数 但我们什么也没返回

00:01:03.470 --> 00:01:07.120
现在我们的代码就是这样的

00:01:07.120 --> 00:01:12.060
我们需要一行代码来声明返回值 并且把一个值放在这里

00:01:12.060 --> 00:01:13.950
返回值就是一个价格

00:01:13.950 --> 00:01:18.220
因此我放入 price 就是我们上面定义的变量

00:01:18.220 --> 00:01:20.760
现在没有错误了

00:01:20.760 --> 00:01:22.650
我们还应该修改 Java 注释

00:01:22.650 --> 00:01:27.060
所以我们声明 要返回总价

00:01:27.060 --> 00:01:30.090
当有人调用这个方法时就知道会得到什么了

00:01:31.600 --> 00:01:35.730
所以现在 我们已经完成这个方法定义的所有部分了

00:01:35.730 --> 00:01:38.600
现在我们转到调用这个方法的位置

00:01:38.600 --> 00:01:41.939
在 submitOrder 方法内 我们会调用 calculatePrice 方法

00:01:43.240 --> 00:01:46.120
现在 calculatePrice 是浮动在中间某处的

00:01:46.120 --> 00:01:49.130
我把它复制粘贴到这里

00:01:49.130 --> 00:01:52.830
因为在计算这个订购价格之前

00:01:52.830 --> 00:01:55.500
在 submitorder 方法中 现在我们有个专门的方法

00:01:55.500 --> 00:01:57.670
所以把它粘贴在这儿

00:01:57.670 --> 00:01:59.910
再删掉多余的分号

00:01:59.910 --> 00:02:03.170
你应该注意到了 在这个方法里 price 是个局部变量

00:02:03.170 --> 00:02:04.910
在这个方法中也是

00:02:04.910 --> 00:02:06.520
所以名字相同也没事

00:02:06.520 --> 00:02:09.258
因为他们在不同的变量作用域中

00:02:09.258 --> 00:02:13.100
在这里的 price 变量和这里的这个完全没有关系

00:02:13.100 --> 00:02:16.300
它们的建立与更新都是完全独立的

00:02:16.300 --> 00:02:19.750
一旦这个方法执行完 price 变量就消失了

00:02:20.830 --> 00:02:23.230
回到 submitOrder 方法中

00:02:23.230 --> 00:02:24.810
我们计算一个价格

00:02:24.810 --> 00:02:29.680
把它存储到变量中 我们可以用它来创建一个 priceMessage 变量

00:02:30.820 --> 00:02:33.390
所以事实上 所有代码都没变

00:02:33.390 --> 00:02:34.800
我们连接上整型变量 price

00:02:34.800 --> 00:02:39.490
和字符串 Total：$

00:02:39.490 --> 00:02:43.680
然后我们再拼接上 Thank you! 显示在屏幕上

00:02:43.680 --> 00:02:47.960
删除这些多余的空白行 保存

00:02:47.960 --> 00:02:49.410
在设备上运行一下

00:02:50.660 --> 00:02:52.250
改变数量

00:02:52.250 --> 00:02:55.700
点击 ORDER 它就显示正确的价格为 $25

00:02:56.790 --> 00:02:57.825
太好了 运转正常

00:02:57.825 --> 00:03:00.864
但我怎么能确定 calculatePrice 实际上发挥作用了呢？

00:03:00.864 --> 00:03:05.640
因为与我们之前的程序相比 用户并不能看到明显变更

00:03:05.640 --> 00:03:09.524
有一些技巧可以用来核实你更改的代码

00:03:09.524 --> 00:03:10.644
已经生效

00:03:10.644 --> 00:03:14.420
我可以让他返回一个很大的值 例如700

00:03:14.420 --> 00:03:16.972
保存代码 然后运行

00:03:16.972 --> 00:03:20.671
现在我希望 如果我变更数量

00:03:20.671 --> 00:03:25.226
点击 ORDER 按钮 它应该显示价格是 $700

00:03:25.226 --> 00:03:29.190
这样我就知道 calculatePrice 方法实际上被调用了

00:03:30.250 --> 00:03:31.610
运行正常

00:03:32.910 --> 00:03:35.040
现在我撤销这个更改

00:03:35.040 --> 00:03:38.120
另一个检查这个方法是否执行的办法是

00:03:38.120 --> 00:03:39.220
在这里加入断点

00:03:40.230 --> 00:03:43.390
我点这个调试小图标

00:03:43.390 --> 00:03:45.040
然后我们的程序进入调试模式

00:03:46.370 --> 00:03:47.530
如果我改变数量

00:03:47.530 --> 00:03:51.250
点击 ORDER 我希望程序在这里暂停

00:03:53.140 --> 00:03:54.580
的确暂停了

00:03:54.580 --> 00:03:57.460
现在我们位于 calculatePrice 方法中

00:03:57.460 --> 00:04:00.100
quantity 是个全局变量

00:04:00.100 --> 00:04:05.340
如果我转到下一行 可以看到这里有一个局部变量 price

00:04:05.340 --> 00:04:12.670
它被设定为 $15 因为数量是 3*5=15

00:04:12.670 --> 00:04:15.777
所以检查过 calculatedPrice 方法后

00:04:15.777 --> 00:04:18.834
如果我点击 Resume 它会在屏幕上正确更新

