WEBVTT
Kind: captions
Language: es

00:00:00.490 --> 00:00:02.155
¿Recuerdas las cajas?

00:00:02.155 --> 00:00:02.929
¿Qué cajas?

00:00:02.929 --> 00:00:04.090
Estas cajas.

00:00:06.060 --> 00:00:06.910
¿Te acuerdas?

00:00:06.910 --> 00:00:08.270
Claro, las recuerdo.

00:00:08.270 --> 00:00:10.540
Son variables donde puedes poner
un valor dentro

00:00:10.540 --> 00:00:11.250
Sí.

00:00:11.250 --> 00:00:13.200
Y puedes combinar múltiples variables

00:00:13.200 --> 00:00:15.020
para crear un objeto JAVA mayor.

00:00:15.020 --> 00:00:16.790
Así que tomas dos o más variables

00:00:16.790 --> 00:00:18.420
para hacer algo más grande.

00:00:18.420 --> 00:00:19.709
-Exacto.
-Vale.

00:00:20.559 --> 00:00:21.751
Como un <i>TextView</i>.

00:00:21.751 --> 00:00:23.960
Si, podemos tener una variable entera.

00:00:23.960 --> 00:00:25.920
Esta es para el tamaño de la fuente.

00:00:25.920 --> 00:00:26.940
- Exacto.
- Vale.

00:00:27.702 --> 00:00:30.327
Y puedes tener también
una variable de cadena de texto.

00:00:30.327 --> 00:00:32.200
Y la variable es para el propio texto.

00:00:32.200 --> 00:00:36.240
Sí y ambas van dentro del <i>TextView</i>
como el estado de <i>TextView</i>.

00:00:36.240 --> 00:00:38.890
Y podemos interactuar con todo
usando diferentes métodos

00:00:38.890 --> 00:00:39.900
que usaremos después.

00:00:39.900 --> 00:00:40.630
Exacto.

00:00:40.630 --> 00:00:41.860
Vale, probémoslo.

00:00:42.480 --> 00:00:46.220
Como decíamos, la aparición de <i>TextView</i>
en una pantalla como esta

00:00:46.220 --> 00:00:49.690
se controla con un objeto JAVA
dentro de la aplicación.

00:00:49.690 --> 00:00:52.300
Esto es un ejemplo 
del objeto JAVA de <i>TexView</i>.

00:00:52.300 --> 00:00:55.700
Es como una caja
y dentro contiene un estado.

00:00:55.890 --> 00:00:58.250
El estado se compone
de un montón de campos.

00:00:58.250 --> 00:01:00.750
Un campo es una variable,
como en la lección 2,

00:01:00.750 --> 00:01:02.760
cuando estudiamos
las variables globales.

00:01:02.760 --> 00:01:04.200
Puede haber un campo de texto

00:01:04.200 --> 00:01:06.080
que contenga 
la cadena de texto <i>Hoy</i>

00:01:06.080 --> 00:01:08.710
que será el texto
que muestre la pantalla al final.

00:01:09.210 --> 00:01:11.090
También puede haber un entero de campo

00:01:11.090 --> 00:01:13.640
que contenga
el tamaño de fuente de este texto.

00:01:13.640 --> 00:01:14.910
Hay muchos más campos,

00:01:14.910 --> 00:01:17.130
como color del texto o tipo de fuente

00:01:17.130 --> 00:01:19.460
que conforman el estado del <i>TextView</i>.

00:01:19.460 --> 00:01:21.900
No los representé en este dibujo.

00:01:21.900 --> 00:01:23.940
Para interactuar con este objeto JAVA

00:01:23.940 --> 00:01:26.200
y cambiarlo mientras se ejecuta
la aplicación

00:01:26.200 --> 00:01:28.420
podemos consultar
métodos en el <i>TextView</i>.

00:01:28.420 --> 00:01:30.560
En la lección 3,
estudiamos los métodos.

00:01:31.020 --> 00:01:35.120
Algunos métodos en un TextView 
son <i>setText</i> y <i>getText</i>.

00:01:35.120 --> 00:01:39.410
Hay también métodos
como <i>setTexSize</i>, <i>getTextSize</i> y así.

00:01:39.910 --> 00:01:43.260
Cada método ejecuta
una lista de instrucciones.

00:01:43.260 --> 00:01:45.580
Hay métodos como <i>onDraw</i>
mucho más complejos,

00:01:45.580 --> 00:01:48.050
que se encarga de dibujar
un <i>TexView</i> en la pantalla.

00:01:48.440 --> 00:01:52.110
Todo este objeto <i>TextView</i> contiene
información del estado

00:01:52.110 --> 00:01:54.870
de lo que contiene este <i>TextView</i>.

00:01:54.870 --> 00:01:57.850
Y para interactuar con este <i>TextView</i>
podemos consultar métodos

00:01:57.850 --> 00:02:01.500
para modificar su estado, 
o realizar tareas más complejas.

00:02:02.850 --> 00:02:04.895
Para mostrar el <i>ImageView</i> en la pantalla

00:02:04.905 --> 00:02:08.728
hay un objeto JAVA para <i>ImageView</i>
dentro de la aplicación.

00:02:08.728 --> 00:02:11.040
Este <i>ImageView</i> contiene

00:02:11.040 --> 00:02:14.700
información del estado
como qué tipo de imagen mostrar,

00:02:14.700 --> 00:02:17.700
escala, recortar o centrar.

00:02:17.700 --> 00:02:20.490
El estado de un <i>ImageView</i>
puede tener muchos campos.

00:02:20.490 --> 00:02:22.060
Nos los dibujaré aquí.

00:02:22.430 --> 00:02:25.020
Hay métodos como <i>setImage</i>,
<i>setScaleType</i>,

00:02:25.020 --> 00:02:27.509
y más complejos como <i>onDraw</i>

00:02:27.509 --> 00:02:30.200
para manejar el dibujo
de esta <i>ImageView</i> en la pantalla.

00:02:30.200 --> 00:02:31.950
Como programadores no tenemos

00:02:31.950 --> 00:02:33.830
que recurrir a <i>onDraw</i> explícitamente

00:02:33.830 --> 00:02:35.850
para decirle que lo dibuje en la pantalla.

00:02:35.850 --> 00:02:38.220
Android automáticamente
se encarga de consultarlo.

00:02:38.800 --> 00:02:41.450
Pero es útil poder
recurrir a todos estos métodos

00:02:41.450 --> 00:02:43.620
para cambiar
este <i>ImageView</i> por ejemplo.

00:02:43.830 --> 00:02:45.770
¿Cómo sabemos los campos que hay

00:02:45.770 --> 00:02:47.580
dentro del estado de <i>ImageView</i>

00:02:47.580 --> 00:02:49.960
y cuáles son los métodos
de este <i>ImageView?</i>

00:02:50.430 --> 00:02:51.920
Para responder a esta pregunta,

00:02:51.920 --> 00:02:54.560
hay que buscar la definición de clase
para este objeto.

00:02:55.010 --> 00:02:57.574
Es un archivo que se llama <i>TextView.java</i>

00:02:57.574 --> 00:03:00.430
parecido al que definimos
como <i>MainActivity.java.</i>

00:03:00.890 --> 00:03:04.380
Dentro de este archivo <i>class TextView</i>
hay un montón de códigos

00:03:04.380 --> 00:03:08.180
que nos dan información sobre 
el estado y métodos de <i>TextView</i>.

00:03:08.470 --> 00:03:11.470
Aunque no dice estado
y métodos exactamente

00:03:11.470 --> 00:03:15.270
solo contiene información
del estado y los métodos.

00:03:16.060 --> 00:03:19.470
Serían las reglas que definen
el comportamiento del <i>TextView.</i>

00:03:19.970 --> 00:03:23.250
Esta instancia de objeto puede
contener información específica

00:03:23.250 --> 00:03:27.800
como la cadena de texto <i>Hoy</i>
o el tamaño de fuente 18.

00:03:27.800 --> 00:03:29.286
Incluso puedes usar esta clase

00:03:29.286 --> 00:03:32.303
para crear más instancias
del objeto <i>TextView</i>.

00:03:32.563 --> 00:03:35.000
Estas dos podrían tener
diferentes valores de texto.

00:03:35.000 --> 00:03:37.240
Esta podría incluir
un texto que dice <i>Hola</i>

00:03:37.240 --> 00:03:39.800
y esta podría contener
un texto que dice <i>Adios</i>.

00:03:39.800 --> 00:03:43.410
Podrían tener diferente
fuentes, tamaños, colores, etc.

00:03:44.080 --> 00:03:47.080
Sin embargo, todas se basan
en la plantilla de clase.

00:03:47.520 --> 00:03:50.670
Parece difícil diferenciar entre
clase, objeto o instancia,

00:03:50.670 --> 00:03:51.890
pero es normal.

00:03:51.890 --> 00:03:53.760
Lleva algún tiempo acostumbrarse.

00:03:53.760 --> 00:03:55.630
Esta analogía podría ayudarte.

00:03:55.630 --> 00:03:57.520
Imagínate que es como crear

00:03:57.520 --> 00:03:59.340
el plano del suelo para una casa.

00:03:59.350 --> 00:04:02.010
Puedes usarlo para crear casas.

00:04:02.600 --> 00:04:04.430
Cada casa puede ser un poco diferente

00:04:04.430 --> 00:04:07.110
pero todas están basadas 
en el mismo espacio del plano.

00:04:07.110 --> 00:04:10.020
Es importante señalar
que el plano del suelo no es la casa.

00:04:10.270 --> 00:04:11.760
Es solo un plano.

00:04:12.110 --> 00:04:14.059
Del mismo modo, la clase <i>TextView</i>

00:04:14.059 --> 00:04:17.059
se usa para crear instancias de un objeto.

00:04:17.059 --> 00:04:20.480
Y estas instancias contienen
los valores del texto actual,

00:04:20.480 --> 00:04:23.350
color y tamaños del texto.

00:04:23.350 --> 00:04:25.910
¿Qué aspecto tienen
cada una de estas clases?

