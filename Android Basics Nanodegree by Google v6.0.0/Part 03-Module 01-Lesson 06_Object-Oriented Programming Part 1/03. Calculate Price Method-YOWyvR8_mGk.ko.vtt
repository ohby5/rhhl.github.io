WEBVTT
Kind: captions
Language: ko

00:00:00.210 --> 00:00:04.370
앞서 우리는 디스플레이 메소드에 
수치를 전달할 수 있다고 배웠는데요.

00:00:04.370 --> 00:00:08.350
메소드 입출력에 대해
조금 더 알아보도록 합시다.

00:00:08.350 --> 00:00:11.460
MainActivity 내에 있는 
submitOrder 메소드를 예로 들어보죠.

00:00:12.510 --> 00:00:15.000
이 메소드 안에 코드 덩어리가 들어있다고
생각해 봅시다.

00:00:15.000 --> 00:00:16.670
사용자가 '주문' 버튼을 클릭하면,

00:00:16.670 --> 00:00:19.330
이 submitOrder 메소드가 호출되죠.

00:00:19.330 --> 00:00:23.200
안드로이드 기기에선 이런 매 지시사항이
위에서부터 하나씩 끝까지 수행됩니다.

00:00:23.200 --> 00:00:26.980
그러다 calculatePrice 메소드에 이르면

00:00:30.400 --> 00:00:33.830
이 부분이 MainActivity의 맨아랫부분에
정의되어 있다고 가정합시다.

00:00:33.830 --> 00:00:37.020
안드로이드 기기에서는 이 메소드 역시
위에서부터 명령을 하나하나 수행하는데

00:00:37.020 --> 00:00:41.270
그리고 나서 submitOrder 메소드로
다시 점프해서 돌아오는 거죠.

00:00:41.270 --> 00:00:44.340
그런 후에 메소드 종결부까지
다시 명령을 하나하나 수행하여

00:00:45.268 --> 00:00:47.240
calculatePrice 메소드가 호출되면

00:00:49.510 --> 00:00:53.620
이쪽의 코드 명령을 수행하는 동안
이 입력치를 사용할 수 있게 됩니다.

00:00:53.620 --> 00:00:55.070
이 메소드의 결과로,

00:00:55.070 --> 00:00:58.940
단일 출력치를 호출자로 다시
전달하게 되는 것이죠.

00:00:58.940 --> 00:01:03.030
이런 식으로, 출력치는 그 다음에 나오는
코드에 사용할 수 있습니다.

00:01:03.030 --> 00:01:07.090
자바에서는 이 입력치를 
메소드 입력 파라미터라 하며

00:01:07.090 --> 00:01:09.520
0 혹은 그 이상의 수치를 
파라미터로 가질 수 있습니다.

00:01:10.550 --> 00:01:13.370
자바에서는 출력치를 리턴값이라 하고,

00:01:13.370 --> 00:01:16.470
리턴값으로는 0이나 1을 가질 수 있습니다.

00:01:16.470 --> 00:01:20.420
입력 파라미터의 예로는
calculatePrice 메소드에

00:01:20.420 --> 00:01:22.840
수량치를 전달하는 경우가 있겠는데요.

00:01:22.840 --> 00:01:26.957
이런 식으로 이 메소드에서는 
수량치를 가지고

00:01:26.957 --> 00:01:28.130
주문한 전체 가격을 계산합니다.

00:01:28.130 --> 00:01:31.350
그리고 나서 그 가격을 
리턴값으로 전달하는 것이죠.

00:01:31.350 --> 00:01:34.046
그런 후 submitOrder 메소드
이 아래쪽에서,

00:01:34.046 --> 00:01:38.253
이 전체 가격을 이용하여 
스크린 출력 혹은 계산서 작성 등

00:01:38.253 --> 00:01:40.930
다른 일을 할 수 있게 되는 것입니다.

00:01:40.930 --> 00:01:43.730
요약하자면, 이곳에서는 
calculatePrice 메소드를 정의하고

00:01:43.730 --> 00:01:45.400
여기서 호출하는 것이죠.

00:01:45.400 --> 00:01:49.490
우리는 커피 주문 시 가격을 계산하는
메소드를 만들고자 합니다.

00:01:49.490 --> 00:01:53.410
현재는 submitOrder 메소드에서 
직접 가격을 계산하지만

00:01:53.410 --> 00:01:57.020
가격 계산 로직이 좀 더 복잡해지겠죠.

00:01:57.020 --> 00:01:59.030
그러니 계산용 메소드로 이동해 봅시다.

00:01:59.030 --> 00:02:01.948
이렇게 하면 코드 복붙을 이곳저곳에
하지 않고도 원할 때마다

00:02:01.948 --> 00:02:04.080
호출할 수 있으니까요.

00:02:04.080 --> 00:02:07.730
안드로이드 개발 경험이 쌓이면, 
새 메소드를 만들어야 할 지

00:02:07.730 --> 00:02:11.850
안 그래도 될 지에 대한 
판단력이 생기게 될 겁니다.

00:02:11.850 --> 00:02:14.690
시간과 경험이 쌓이면 
자연스레 따라오게 되죠.

00:02:14.690 --> 00:02:17.640
그러면, 우리는 이제 처음으로 
MainActivity에 스스로

00:02:17.640 --> 00:02:20.800
새 메소드를 만드는 거네요.

00:02:20.800 --> 00:02:24.575
맨땅에서 시작하기 보다는 
우선 올바른 메소드가 무엇인지

00:02:24.575 --> 00:02:28.460
판단하는 법을, 짧은 코드 몇 개를 
읽어보면서 알아보죠.

00:02:28.460 --> 00:02:31.700
지시사항 노트에 
3가지 선택지를 준비했습니다.

00:02:31.700 --> 00:02:35.830
이 3개의 짧은 코드를 읽어보고 
과연 어느 쪽이

00:02:35.830 --> 00:02:40.330
주문 가격 계산 메소드를 올바로 
수행하고 있는지 선택해 보세요.

00:02:40.330 --> 00:02:42.330
지시사항 노트 안에 있는
링크를 클릭하시면,

00:02:42.330 --> 00:02:46.850
A, B, C 세가지의 코드를 
보실 수 있습니다.

00:02:48.380 --> 00:02:49.290
여러분의 목표는

00:02:49.290 --> 00:02:53.360
처음 보는 코드를 읽는 데 
익숙해 지는 겁니다.

00:02:53.360 --> 00:02:57.370
확실한 메소드를 만드는 정확한
규칙을 아직 우리는 배우지 않았지만

00:02:57.370 --> 00:03:01.169
가장 정확한 코드가 이 중 무엇인지
한 번 추측해 보세요.

00:03:02.630 --> 00:03:05.091
구글 서치를 통해

00:03:05.091 --> 00:03:09.140
자바 메소드 정의에 관한 정보를
더 찾아 보시는 것도 좋습니다.

00:03:09.140 --> 00:03:11.450
여러 다른 검색 결과를 클릭하다 보면

00:03:11.450 --> 00:03:15.100
여러분이 이해하지 못하는 형식의 
정보를 발견하게 될 거예요.

00:03:15.100 --> 00:03:18.290
하지만 처음부터 다 알 필요는 없어요.
그냥 익숙해 지는 것만으로 충분합니다.

00:03:18.290 --> 00:03:21.950
지금은 모르는 게 당연한 거니까요.

00:03:21.950 --> 00:03:25.780
이해하는 정보만을 가지고 
해당 내용을 훑어본 후,

00:03:25.780 --> 00:03:28.030
문제와 연관된다고 생각되는 부분만 
갖고 있으면 됩니다.

00:03:29.140 --> 00:03:30.610
자, 이제 3가지 코드를 읽어 보고

00:03:30.610 --> 00:03:34.260
인터넷에서 정보를 참조한 후

00:03:34.260 --> 00:03:37.627
calculatePrice 메소드의 
올바른 작성법을 추측해 보세요.

