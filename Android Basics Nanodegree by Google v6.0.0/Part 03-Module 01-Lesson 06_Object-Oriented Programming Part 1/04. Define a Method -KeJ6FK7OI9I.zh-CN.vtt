WEBVTT
Kind: captions
Language: zh-CN

00:00:00.640 --> 00:00:04.200
在最后一个测验里 为了弄清楚为什么选项C是最好的

00:00:04.200 --> 00:00:08.420
我们回顾一下在 Java 里定义一个方法的实际语法规则

00:00:08.420 --> 00:00:10.820
这也被称为方法签名

00:00:12.090 --> 00:00:13.460
这是个方法签名

00:00:13.460 --> 00:00:16.239
我们之前看过的计算价格的方法

00:00:16.239 --> 00:00:20.100
你可能感到奇怪 为什么这些词按照一定的方式排列

00:00:20.100 --> 00:00:24.470
它们遵循特定的格式 它看起来是这样的

00:00:24.470 --> 00:00:27.050
我知道这看起来真的有些困难但是不要担心

00:00:27.050 --> 00:00:29.040
我们将一个一个地讲解它们

00:00:30.550 --> 00:00:34.250
这个方法签名的第一部分是单词 private

00:00:34.250 --> 00:00:36.400
这被称为 JAVA 的访问修饰符

00:00:37.410 --> 00:00:41.400
它决定谁有权利访问这个 calculatePrice 方法

00:00:41.400 --> 00:00:46.290
最常见的访问修饰符是你将看到的 public 或 private

00:00:46.290 --> 00:00:51.010
这个方法被标记为 private 意味着 calculatePrice

00:00:51.010 --> 00:00:55.590
只能被 MainActivity 里的其他方法调用

00:00:55.590 --> 00:00:56.830
MainActivity 之外的部分

00:00:56.830 --> 00:01:00.750
像其他的 activity 将不能调用这个方法

00:01:00.750 --> 00:01:03.340
对于 MainActivity 它是私有的

00:01:03.340 --> 00:01:04.180
另一方面

00:01:04.180 --> 00:01:09.100
如果标记为一个 public 方法 然后任何人都可以调用这个方法

00:01:09.100 --> 00:01:12.560
无论是在 MainActivity 里面 还是在其他 activity 里

00:01:13.710 --> 00:01:15.120
这有点像这个比喻

00:01:15.120 --> 00:01:18.530
如果你是一个名人和公众人物 那么每个人都知道你

00:01:18.530 --> 00:01:19.730
如果是是一个人

00:01:19.730 --> 00:01:24.420
一直住在你自己的房子里 然后只有几个人认识你

00:01:24.420 --> 00:01:27.930
对于计算 calculatePrice 方法 我们将保持它为 private

00:01:27.930 --> 00:01:30.440
它仅在 MainActivity 里被使用

00:01:30.440 --> 00:01:33.770
接下来是返回数值类型 int

00:01:33.770 --> 00:01:35.560
还记得我们之前的草图吗？

00:01:35.560 --> 00:01:38.360
我们说 当你调用这个方法时 你通过它输入

00:01:38.360 --> 00:01:39.910
就得到一个输出返回？

00:01:39.910 --> 00:01:44.140
返回数据类型是输出返回的数据类型

00:01:44.140 --> 00:01:48.020
到目前为止 我们了解的数据类型是上一节课中的 Int

00:01:48.020 --> 00:01:49.730
和 String 

00:01:49.730 --> 00:01:52.410
这也可以返回一个对象的数据类型

00:01:52.410 --> 00:01:54.449
在之后的课程里 我们将更多地了解对象

00:01:55.700 --> 00:01:58.150
在我们的例子里 这个 calculatePrice 方法

00:01:58.150 --> 00:02:02.030
是返回订单的总价格 它是一个整数

00:02:02.030 --> 00:02:06.540
在社交应用里 如果我有一个方法来获得我在 Facebook 上的朋友的数目

00:02:06.540 --> 00:02:11.130
它会返回一个整数 是朋友的数目

00:02:11.130 --> 00:02:15.390
接下来 我们有方法名 在这个例子里是 calculatePrice

00:02:15.390 --> 00:02:19.730
就像我们如何引用变量名 我们也可以引用方法名

00:02:19.730 --> 00:02:23.790
这样我们就可以执行这个方法里的指令了

00:02:23.790 --> 00:02:28.120
在关于定义方法的相同文档里 我们可以滚动到页面底部

00:02:28.120 --> 00:02:30.690
看到关于命名方法的一节

00:02:30.690 --> 00:02:34.450
之后你可以仔细地阅读它 但是基本上它是说

00:02:34.450 --> 00:02:39.030
方法名应该会以一个动词开始 像 run get compare 或 set

00:02:39.030 --> 00:02:40.880
它以一个小写字母开始

00:02:40.880 --> 00:02:43.360
然后如果它有多个单词就用驼峰式拼写

00:02:43.360 --> 00:02:46.400
在方法名后边 我们有一个输入列表

00:02:46.400 --> 00:02:50.350
它被记在左右括号里面

00:02:50.350 --> 00:02:52.670
只要你想 你可以有多个输入

00:02:52.670 --> 00:02:57.010
如果你不想要任何的输入 你只要有一个空的括号就可以了

00:02:57.010 --> 00:02:59.150
如果你有一个输入 它看起来就像这样

00:02:59.150 --> 00:03:00.730
如果你有多个输入

00:03:00.730 --> 00:03:03.890
要用逗号分开它们

00:03:03.890 --> 00:03:07.110
让我们看一下有一个输入的例子

00:03:07.110 --> 00:03:10.070
也被称为输入参数

00:03:10.070 --> 00:03:14.060
我们定义一个输入参数 通过指定它的数据类型

00:03:14.060 --> 00:03:16.460
和我们为它定义的变量名

00:03:16.460 --> 00:03:18.170
从这个输入和输出的图可以看到

00:03:18.170 --> 00:03:22.370
这将是方法的第一个输入

00:03:23.560 --> 00:03:28.030
在这个方法里 你可以引用 quantity 变量

00:03:28.030 --> 00:03:30.190
它就像其他的变量

00:03:30.190 --> 00:03:32.930
早已经有一个值在里面

00:03:32.930 --> 00:03:36.990
这个值是当你最初调用方法获得的

00:03:36.990 --> 00:03:38.570
你通过这个输入

00:03:40.030 --> 00:03:43.850
如果你想要修改方法签名来增加第二个输入参数

00:03:43.850 --> 00:03:47.290
我们必须指定数据类型

00:03:47.290 --> 00:03:48.980
并为第二个输入参数指定变量名

00:03:48.980 --> 00:03:52.200
然后在这个方法里 我们可以引用 quantity

00:03:52.200 --> 00:03:55.940
或 priceOfOneCup 变量就像普通变量一样

00:03:55.940 --> 00:03:59.220
当你调用这个方法的时候 必须记住要输入

00:03:59.220 --> 00:04:02.790
正确的输入参数的数目来满足方法的要求

00:04:02.790 --> 00:04:06.980
输入必须是正确的数据类型和按照正确的顺序输入

00:04:06.980 --> 00:04:08.380
你不能打乱这些顺序

00:04:08.380 --> 00:04:11.650
否则 方法将会错误地解释它们

00:04:11.650 --> 00:04:15.210
列出你的输入之后 加上一个右括号

00:04:15.210 --> 00:04:16.980
然后是起始大括号

00:04:16.980 --> 00:04:20.640
这将启动方法里的所有列表指令

00:04:20.640 --> 00:04:21.660
所有的这一切之后

00:04:21.660 --> 00:04:25.270
只要添加一个结束大括号来标记方法的结束

00:04:25.270 --> 00:04:27.060
返回我们的文档

00:04:27.060 --> 00:04:30.470
现在这个方法声明会变得更有意义

00:04:30.470 --> 00:04:32.760
首先 我们有访问修饰符

00:04:32.760 --> 00:04:35.120
然后有一个返回类型

00:04:35.120 --> 00:04:39.100
方法名 跟着是输入列表

00:04:39.100 --> 00:04:42.760
在这个例子里 有四个不同的输入参数

00:04:42.760 --> 00:04:46.260
它们每一个有一个数据类型和一个变量名

00:04:46.260 --> 00:04:48.720
然后有一个起始大括号

00:04:48.720 --> 00:04:50.610
里面是所有的指令列表

00:04:50.610 --> 00:04:51.990
然后是结束大括号

00:04:53.100 --> 00:04:54.480
这是方法声明

00:04:55.640 --> 00:04:59.060
在这个测验里 你将有一个机会来练习识别方法声明的

00:04:59.060 --> 00:05:00.850
不同部分

00:05:00.850 --> 00:05:04.120
我们将在讲师注释里提供一些代码

00:05:04.120 --> 00:05:08.000
代码包含了可能出现在任何应用的一堆方法

00:05:08.000 --> 00:05:11.010
对于每一种情况 你能告诉我方法名是什么吗？

00:05:11.010 --> 00:05:12.800
输入参数列表？

00:05:12.800 --> 00:05:14.010
返回数据类型

00:05:15.030 --> 00:05:16.130
我们对 sample 做这些

00:05:17.910 --> 00:05:19.710
这有一个例子

00:05:19.710 --> 00:05:23.520
目标是创建一个基于给定名字的自定义问候语

00:05:23.520 --> 00:05:27.270
返回值将是一个文本形式的问候

00:05:27.270 --> 00:05:29.580
现在 忽略注释

00:05:29.580 --> 00:05:32.570
首先我们有一个方法 在这里是驼峰式拼写

00:05:32.570 --> 00:05:35.130
为 createCustonGreeting

00:05:35.130 --> 00:05:37.650
接下来是输入列表

00:05:37.650 --> 00:05:39.780
这是第一个输入参数

00:05:39.780 --> 00:05:42.490
数据类型是 String 变量名是 firstName

00:05:43.520 --> 00:05:45.570
接下来我们有第二个输入参数

00:05:45.570 --> 00:05:48.390
这是数据类型 这是变量名

00:05:48.390 --> 00:05:51.580
两个输入通过一个逗号隔开

00:05:51.580 --> 00:05:55.290
它们被封闭在左右括号里面

00:05:55.290 --> 00:05:57.350
输出在这

00:05:57.350 --> 00:06:00.605
返回值的数据类型是 String

00:06:00.605 --> 00:06:03.685
因为我们要返回一个问候语 它是一个字符串

00:06:03.685 --> 00:06:07.365
这就像列表里填写的一样

00:06:08.725 --> 00:06:11.245
继续 填补剩余三种方法的空白部分

