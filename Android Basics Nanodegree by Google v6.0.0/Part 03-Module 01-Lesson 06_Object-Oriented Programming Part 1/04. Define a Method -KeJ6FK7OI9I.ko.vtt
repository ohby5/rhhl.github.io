WEBVTT
Kind: captions
Language: ko

00:00:00.640 --> 00:00:04.200
지난 시험에서 선택 사항 C가 왜 
가장 좋았는지를 확인하기 위해,

00:00:04.200 --> 00:00:08.420
[method] 규정을 위한 자바에서의 
실제 신택스 규칙을 살펴보도록 합니다.

00:00:08.420 --> 00:00:10.820
이는 또한 [method signature]로 
알려져 있습니다.

00:00:12.090 --> 00:00:13.460
이것은 가격 계산 [method]를 위한

00:00:13.460 --> 00:00:16.239
[method signature] 
입니다.

00:00:16.239 --> 00:00:20.100
단어들의 순서가 일정한 방식을 
갖는지를 궁금해 할 것입니다.

00:00:20.100 --> 00:00:24.470
이들은 특정 형식을 따르고
이는 다음과 같습니다.

00:00:24.470 --> 00:00:27.050
이것이 상당히 어렵다는 것을 잘 
압니다. 하지만 걱정하지 마십시오.

00:00:27.050 --> 00:00:29.040
하나하나 자세히 설명해 드리도록 
하겠습니다.

00:00:30.550 --> 00:00:34.250
이 [method signature]의 첫 번째 
부분은 [word private]입니다.

00:00:34.250 --> 00:00:36.400
이는 자바 접근 지정자로 알려져 
있습니다.

00:00:37.410 --> 00:00:41.400
이는 이 [method]인 [calculatePrice]에 
누가 접근 하는지를 결정합니다.

00:00:41.400 --> 00:00:46.290
가장 일반적인 접근 지정자는 [public] 
혹은 [private] 입니다.

00:00:46.290 --> 00:00:51.010
이 [method]는 [private]로 표시됩니다.
이는 [calculatePrice]가 [main

00:00:51.010 --> 00:00:55.590
activity]의 다른 [method] 내에서만 
호출될 수 있다는 것을 의미합니다.

00:00:55.590 --> 00:00:56.830
다른 [activities]와 같은 [main activity]

00:00:56.830 --> 00:01:00.750
외부에서 이 [method]를 호출할 수 
없습니다.

00:01:00.750 --> 00:01:03.340
이는 [main activity]에 대해 
[private]입니다.

00:01:03.340 --> 00:01:04.180
반대로,

00:01:04.180 --> 00:01:09.100
이를 [public method]로 표시하면, 
[main activity]의 내부 혹은 다른

00:01:09.100 --> 00:01:12.560
[activities] 내부의 위치 상관없이 
누구든지 이 [method]를 호출할 수 있습니다.

00:01:13.710 --> 00:01:15.120
이는 다음 비유와 비슷합니다.

00:01:15.120 --> 00:01:18.530
유명인이나 공인일 경우
누구든지 알아볼 것입니다.

00:01:18.530 --> 00:01:19.730
개인일 경우,

00:01:19.730 --> 00:01:24.420
항상 집에만 있고
단지 몇 명만 알아볼 것입니다.

00:01:24.420 --> 00:01:27.930
따라서 가격 계산 [method]에 있어
이를 [private]으로 하여

00:01:27.930 --> 00:01:30.440
[main activity] 내에서만 사용될 수 
있도록 할 것입니다.

00:01:30.440 --> 00:01:33.770
다음으로는 데이터 유형을 반환하는 
"int"입니다.

00:01:33.770 --> 00:01:35.560
이전의 표를 
기억하십니까?

00:01:35.560 --> 00:01:38.360
[method]를 호출하면 값을 입력하여 
출력 값을 얻는다고 이야기

00:01:38.360 --> 00:01:39.910
하였습니다.

00:01:39.910 --> 00:01:44.140
반환 데이터 유형은 출력 값에 
반환되는 데이터 유형입니다.

00:01:44.140 --> 00:01:48.020
그리고 지난 과정에서 지금까지 
우리가 배운 데이터 유형은 Int와

00:01:48.020 --> 00:01:49.730
문자열입니다.

00:01:49.730 --> 00:01:52.410
이는 또한 객체 데이터 유형을 반환할 
수 있습니다. 그리고

00:01:52.410 --> 00:01:54.449
다음 장에서 객체에 대해 더 
알아보도록 하겠습니다.

00:01:55.700 --> 00:01:58.150
이 경우, 이 [calculatePrice] [method]는

00:01:58.150 --> 00:02:02.030
정수로 된 주문의 총 가격을 
반환합니다.

00:02:02.030 --> 00:02:06.540
소셜 미디어 앱인 페이스북에서 
내가 가진 친구들의 숫자에 관한

00:02:06.540 --> 00:02:11.130
[method]를 갖는다면 이는 친구들의 
숫자인 정수로 반환될 수 있습니다.

00:02:11.130 --> 00:02:15.390
다음으로 여기서는 [calculatePrice]인 
[method name]입니다.

00:02:15.390 --> 00:02:19.730
각각의 변수들을 참조하는 방법에 따라
각각의 [method]를 참조할 수

00:02:19.730 --> 00:02:23.790
있고 이를 통해 이 [method]의 
명령을 실행할 수 있습니다.

00:02:23.790 --> 00:02:28.120
[method] 규정에 관한 같은 문서를
끝까지 살펴보면 [method] 명명에

00:02:28.120 --> 00:02:30.690
관한 장을 살펴볼 수 있습니다.

00:02:30.690 --> 00:02:34.450
나중에 이를 더욱 자세히 살펴볼 수 있습니다. 
하지만 기본적으로 이것은 [method names]이

00:02:34.450 --> 00:02:39.030
운영하다 나 가지다, 비교하다 나 설정하다 
와 같은 동사로 시작해야 함을 나타냅니다.

00:02:39.030 --> 00:02:40.880
이는 소문자로 시작하고

00:02:40.880 --> 00:02:43.360
여러 단어가 있을 경우 [camel case]를 
사용합니다.

00:02:43.360 --> 00:02:46.400
[method name] 뒤에는
괄호 안에 표시되는

00:02:46.400 --> 00:02:50.350
입력 내용을 
갖습니다.

00:02:50.350 --> 00:02:52.670
입력 내용은 원하는 대로 
사용할 수 있습니다.

00:02:52.670 --> 00:02:57.010
입력 내용이 필요 없을 경우, 
빈 괄호를 넣으면 됩니다.

00:02:57.010 --> 00:02:59.150
하나의 입력 내용만 있을 경우,
다음과 같이 됩니다.

00:02:59.150 --> 00:03:00.730
다양한 입력 내용이 있을 경우,

00:03:00.730 --> 00:03:03.890
각 입력 내용 사이에 콤마를 넣어 
이들을 나눠야 합니다.

00:03:03.890 --> 00:03:07.110
입력 파라미터로 알려진 
하나의 입력 내용만 있는

00:03:07.110 --> 00:03:10.070
예시를 
살펴봅시다.

00:03:10.070 --> 00:03:14.060
이것의 데이터 유형과 우리가 선택한 
변수 명을 명시하여 입력 파라미터를

00:03:14.060 --> 00:03:16.460
규정합니다.

00:03:16.460 --> 00:03:18.170
입력, 출력 표로부터 이것은

00:03:18.170 --> 00:03:22.370
[method]에 대한 첫 입력 내용이 
될 것입니다.

00:03:23.560 --> 00:03:28.030
이제 이 [method] 내에
수량 변수를 참조할 수 있습니다.

00:03:28.030 --> 00:03:30.190
이는 그것의 내부에

00:03:30.190 --> 00:03:32.930
이미 값을 갖고 있는 
다른 변수들과 같습니다.

00:03:32.930 --> 00:03:36.990
값은 처음으로 
[method]를 호출하고 입력 사항을

00:03:36.990 --> 00:03:38.570
작성할 때 나옵니다.

00:03:40.030 --> 00:03:43.850
두 번째 입력 파라미터를 추가하기 
위해 [method signature]를

00:03:43.850 --> 00:03:47.290
변경하고자 한다면 두 번째 입력 
파라미터에 대한 데이터 유형과 변수

00:03:47.290 --> 00:03:48.980
명을 명시하여야 합니다.

00:03:48.980 --> 00:03:52.200
그리고 이 [method] 내에서 
일반 변수와 같은

00:03:52.200 --> 00:03:55.940
한 잔의 변수에 대한 수량이나 가격을 
참조할 수 있습니다.

00:03:55.940 --> 00:03:59.220
[method] 호출에서 입력 내용은 
반드시 올바른 데이터 유형과

00:03:59.220 --> 00:04:02.790
명령이어야 하고 [method]에 필요한 
입력 내용의 올바른 숫자를 입력해야

00:04:02.790 --> 00:04:06.980
하며 그 내용은 반드시 올바른 데이터 
유형과 명령으로 구성되어야 합니다.

00:04:06.980 --> 00:04:08.380
이를 준수하여야 합니다.

00:04:08.380 --> 00:04:11.650
그렇지 않으면 [method]가 이를 잘못 
해석할 수가 있습니다.

00:04:11.650 --> 00:04:15.210
입력 내용을 작성한 후,
닫는 괄호와 [opening brace]를

00:04:15.210 --> 00:04:16.980
추가합니다.

00:04:16.980 --> 00:04:20.640
이는 [method]내의 모든 명령 목록을 
시작합니다.

00:04:20.640 --> 00:04:21.660
이 다음에

00:04:21.660 --> 00:04:25.270
[method]가 끝남을 표시하기 위해 
[closing brace]를 추가합니다.

00:04:25.270 --> 00:04:27.060
문서로 다시 돌아가면

00:04:27.060 --> 00:04:30.470
이 [method declaration]은 더 많은 
것들을 이해할 수 있도록 할 것입니다.

00:04:30.470 --> 00:04:32.760
첫 번째로 접근 지정자가 있습니다.

00:04:32.760 --> 00:04:35.120
그리고 반환 데이터 유형이 있습니다.

00:04:35.120 --> 00:04:39.100
모든 입력 내용 뒤에는 [method 
name]이 있습니다.

00:04:39.100 --> 00:04:42.760
여기에는 4가지의 각기 다른
입력 파라미터가 있습니다.

00:04:42.760 --> 00:04:46.260
그리고 이들 각각은 데이터 유형과 
변수 명을 갖습니다.

00:04:46.260 --> 00:04:48.720
그리고 나서 [opening brace]를 갖습니다.

00:04:48.720 --> 00:04:50.610
모든 명령어 목록은
이것의 내부에 있습니다.

00:04:50.610 --> 00:04:51.990
그 다음 [closing brace]가 있습니다.

00:04:53.100 --> 00:04:54.480
이것이 [method declaration]입니다.

00:04:55.640 --> 00:04:59.060
이번 시험에서 [method declaration]의 
다른 부분들에 대한 식별에

00:04:59.060 --> 00:05:00.850
관해 연습해 보았습니다.

00:05:00.850 --> 00:05:04.120
강사 노트에 일부 코드를 제공할 
것입니다.

00:05:04.120 --> 00:05:08.000
코드는 모든 앱에 사용될 수 있는 
다양한 [methods]를 포함합니다.

00:05:08.000 --> 00:05:11.010
각 경우에 대해, [method name]이 
무엇인지 말할 수 있습니까?

00:05:11.010 --> 00:05:12.800
입력 파라미터 목록은?

00:05:12.800 --> 00:05:14.010
그리고 데이터 유형은?

00:05:15.030 --> 00:05:16.130
예시를 살펴봅시다.

00:05:17.910 --> 00:05:19.710
여기 [method]에 대한 예시가 있습니다.

00:05:19.710 --> 00:05:23.520
주어진 성명에 따라 자신만의 인사 
메시지를 만드는 것입니다.

00:05:23.520 --> 00:05:27.270
반환 값은
일부 문자 형태의 인사가 될 것입니다.

00:05:27.270 --> 00:05:29.580
[comment]는 일단 무시하시기 바랍니다.

00:05:29.580 --> 00:05:32.570
우선 여기서는 [camel case]인 
[method name]을 갖고 이는

00:05:32.570 --> 00:05:35.130
[createCustonGreeting]을 나타냅니다.

00:05:35.130 --> 00:05:37.650
다음으로 입력 내용을 갖습니다.

00:05:37.650 --> 00:05:39.780
이것은 첫 번째 입력 파라미터 입니다.

00:05:39.780 --> 00:05:42.490
데이터 유형은 문자열이고
변수 명은 [firstName]입니다.

00:05:43.520 --> 00:05:45.570
다음으로 두 번째 입력 
파라미터를 갖습니다.

00:05:45.570 --> 00:05:48.390
이것은 데이터 유형이고 
이것은 변수 명 입니다.

00:05:48.390 --> 00:05:51.580
그리고 두 개의 입력 내용은 하나의 
콤마로 나눠졌습니다. 그리고 이들은

00:05:51.580 --> 00:05:55.290
괄호 안에 
표현됩니다.

00:05:55.290 --> 00:05:57.350
그리고 이곳에 출력 값을 갖습니다.

00:05:57.350 --> 00:06:00.605
문자열인 인사에 관한 
반환을 원하기 때문에

00:06:00.605 --> 00:06:03.685
반환 값의 데이터 유형은 
문자열이고

00:06:03.685 --> 00:06:07.365
이는 표에 적어진 내용과 
비슷합니다.

00:06:08.725 --> 00:06:11.245
자 이제 남은 세 개의 [methods]에 
대한 빈칸을 채워봅시다.

