WEBVTT
Kind: captions
Language: zh-CN

00:00:00.920 --> 00:00:03.410
让我们先回到 Just Java 应用

00:00:03.410 --> 00:00:07.260
看一下 MainActivity 类下的 displayMessage 方法

00:00:07.260 --> 00:00:09.950
从这里开始更好理解了

00:00:09.950 --> 00:00:14.350
我们认识到我们已经创建了一个叫做 orderSummaryTextView 的变量

00:00:14.350 --> 00:00:16.760
变量的数据类型是 TextView

00:00:17.790 --> 00:00:19.610
但我们到现在还不理解这一部分

00:00:20.740 --> 00:00:23.290
在下一行 在我们在这个 TextView 对象上调用方法

00:00:24.650 --> 00:00:28.070
我们使用在上面声明的相同的变量名

00:00:28.070 --> 00:00:31.830
调用 orderSummaryTextView.setText 方法

00:00:31.830 --> 00:00:34.290
然后我们传入一个字符串作为这个方法的输入

00:00:35.300 --> 00:00:38.790
这个字符串类型的 message 其实是 displayMessage

00:00:38.790 --> 00:00:40.200
方法的输入参数

00:00:41.720 --> 00:00:45.250
现在我们深入了解一下这部分我们不理解的代码

00:00:45.250 --> 00:00:48.210
虽然 findViewById 像是一个方法调用

00:00:48.210 --> 00:00:53.530
因为它在看起来像输入参数的括号前面

00:00:53.530 --> 00:00:57.458
但是 令人感到奇怪的是这个方法没有在类中任何地方定义

00:00:57.458 --> 00:01:02.355
如果我在名字上双击并且按住 Cmd+F 或者

00:01:02.355 --> 00:01:07.560
如果你是 Windows 按住 Ctrl+F 然后我们就能尝试在这个文件中搜索

00:01:07.560 --> 00:01:10.780
我只看到两个 findViewById

00:01:10.780 --> 00:01:12.790
并且它们使用的方式相同

00:01:12.790 --> 00:01:15.160
但是我没有看到叫做 findViewById的方法

00:01:16.190 --> 00:01:19.640
说到这 早先在 MainActivity 类中

00:01:19.640 --> 00:01:23.450
我们调用了 setContentView 方法 但是你在文件中搜索的话

00:01:23.450 --> 00:01:26.280
MainActivity 中也没有定义

00:01:27.820 --> 00:01:29.620
那么这些方法在哪里定义的呢？

00:01:30.620 --> 00:01:33.610
MainActivity 实际上是一个相当短的文件

00:01:33.610 --> 00:01:35.150
它只有 90 行代码

00:01:35.150 --> 00:01:38.790
但这个类比我们看到的拥有更多的内容

00:01:38.790 --> 00:01:42.200
代码显示 extends AppCompatActivity

00:01:42.200 --> 00:01:45.710
这意味着 MainActivity 类是

00:01:45.710 --> 00:01:49.290
AppCompatActivity 类的功能上的一个扩展

00:01:49.290 --> 00:01:52.790
在你的电脑上 如果你看到 ActionBarActive 没关系

00:01:52.790 --> 00:01:55.450
那是一个旧版本

00:01:55.450 --> 00:01:58.770
你应该使用的最新版本是 AppCompatActivity

00:01:58.770 --> 00:02:02.420
而且 AppCompatActivity 是在旧 Android 设备上是

00:02:02.420 --> 00:02:04.460
支持向下兼容的

00:02:04.460 --> 00:02:07.980
AppCompatActivity 是 Android Support Library 的一部分

00:02:07.980 --> 00:02:11.740
它允许我们在旧 Android 设备上 

00:02:11.740 --> 00:02:15.420
使用 Android最新的 UI 特征

00:02:15.420 --> 00:02:17.940
通过继承 AppCompatActivity 类

00:02:17.940 --> 00:02:20.620
MainActivity 免费获得了这里的所有

00:02:20.620 --> 00:02:24.490
的函数 属性和方法

00:02:24.490 --> 00:02:26.980
我们不需要从这里复制粘贴代码

00:02:26.980 --> 00:02:28.800
我们只需要简单的继承这个类就可以

00:02:30.090 --> 00:02:31.020
如果你感兴趣

00:02:31.020 --> 00:02:35.880
你可以通过 Google 搜索更多关于 AppCompatActivity 的信息

00:02:35.880 --> 00:02:39.700
这里是 AppCompatActivity 类的参考文档

00:02:39.700 --> 00:02:41.920
因为我安装了 Chrome 扩展

00:02:41.920 --> 00:02:43.120
所以我可以查看代码

00:02:43.120 --> 00:02:47.890
这就是 AppCompatActivity 类定义的地方

00:02:47.890 --> 00:02:50.360
你可以看到这里有很多的函数

00:02:50.360 --> 00:02:54.510
但是你不需要理解它们是怎样实现的

00:02:54.510 --> 00:02:58.350
你需要知道的是当你继承 AppCompatActivity 时

00:02:58.350 --> 00:03:01.010
你就免费获得了这些函数

00:03:01.010 --> 00:03:03.580
在更高层次中 你可以这样简化

00:03:03.580 --> 00:03:05.900
这是 MainActivity 类的定义

00:03:05.900 --> 00:03:08.000
在这里你定义了一些方法

00:03:08.000 --> 00:03:12.350
当你继承 AppCompatActivity 后 我们能够从

00:03:12.350 --> 00:03:14.200
AppCompatActivity 中获得属性和方法

00:03:14.200 --> 00:03:17.870
现在它们并没有真正地添加到 MainActivity 类中

00:03:17.870 --> 00:03:19.280
但是你可以想象它们在这

00:03:19.280 --> 00:03:22.930
因为你也可以引用这些属性和方法

00:03:22.930 --> 00:03:26.540
这就是为什么我们的代码能够引用 setContentView或

00:03:26.540 --> 00:03:27.840
findViewById 方法的原因

00:03:27.840 --> 00:03:32.240
因为我们继承了这些方法 所以我们没有在 MainActivity 中定义它们

00:03:32.240 --> 00:03:35.110
MainActivity 是在设备上作为屏幕显示用的

00:03:35.110 --> 00:03:39.520
但是我们没有在 MainActivity 中写这部分代码 这也是继承来的

00:03:39.520 --> 00:03:42.750
在类中 我们没有直接拥有 AppCompatActivity 类的属性和方法

00:03:42.750 --> 00:03:46.840
现在我们知道 它们一直在那 我们可以引用它们

00:03:46.840 --> 00:03:50.260
说到继承 有好也有坏

00:03:50.260 --> 00:03:52.540
有时我们想要继承行为 但是

00:03:52.540 --> 00:03:54.980
有时我们只是想稍作修改

00:03:55.980 --> 00:03:59.900
如果你想从继承的类中改变一些行为

00:03:59.900 --> 00:04:02.230
你可以重载这个方法

00:04:02.230 --> 00:04:07.360
你可以在方法上面加上 @override 这样的话电脑

00:04:07.360 --> 00:04:12.100
就知道你不想要从 AppCompatActivity 继承来的方法

00:04:12.100 --> 00:04:15.830
而是想要你自己定义的方法

00:04:15.830 --> 00:04:18.620
这是一个棘手的难题 它需要很多练习

00:04:18.620 --> 00:04:21.660
我们看一个 关于 AppCompatActivity 类的

00:04:21.660 --> 00:04:23.640
重载方法的例子

00:04:23.640 --> 00:04:26.380
这个方法是 onCreate 方法

00:04:26.380 --> 00:04:31.170
通过在 MainActivity 类中重载 oncreate 方法 我们指定

00:04:31.170 --> 00:04:35.380
当这个类调用时 使用的是我们自己的实现

00:04:35.380 --> 00:04:37.180
如果你不理解 不要担心

00:04:37.180 --> 00:04:40.534
我正要给你一个关于面向对象编程概念

00:04:40.534 --> 00:04:42.350
的简短介绍

00:04:42.350 --> 00:04:46.160
你绝对还有一些其他问题

00:04:46.160 --> 00:04:49.370
而且需要阅读很多关于这个的话题 才能充分

00:04:49.370 --> 00:04:50.860
理解它们

00:04:50.860 --> 00:04:53.771
另一个简化 MainActivity 类和 AppCompatActivity 类之间的

00:04:53.771 --> 00:04:58.220
关系的方法是画一个类层次图

00:04:58.220 --> 00:05:00.930
这与视图层次图是不一样的 因为

00:05:00.930 --> 00:05:05.340
视层次图显示的是视图树 就像之前屏幕上显示的那样

00:05:05.340 --> 00:05:07.810
类层次图显示的是不同 

00:05:07.810 --> 00:05:09.990
Java 类之间的关系

00:05:09.990 --> 00:05:12.860
我们有作为父类的 AppCompatActivity 类

00:05:12.860 --> 00:05:15.868
因为 MainActivity 继承 AppCompatActivity

00:05:15.868 --> 00:05:18.560
它被称为子类

00:05:18.560 --> 00:05:22.200
所以当你看到此种类型定义时 不管继承什么 

00:05:22.200 --> 00:05:23.970
它都被称作父类

00:05:23.970 --> 00:05:25.770
这个被称作子类

00:05:25.770 --> 00:05:29.070
如果你创建另一个叫做 DetailActivity 的 activity

00:05:29.070 --> 00:05:32.340
它继承 AppCompatActivity 那么它就是子类

00:05:32.340 --> 00:05:33.409
这个是父类

00:05:34.720 --> 00:05:37.840
这是另一个 Java 继承的例子

00:05:37.840 --> 00:05:40.520
如果你想一下 会发现 TextView ImageView 和

00:05:40.520 --> 00:05:44.460
按钮有一些共同之处

00:05:44.460 --> 00:05:48.070
这些 View 在屏幕上都有宽度和高度

00:05:48.070 --> 00:05:51.330
虽然我们还没学到 但它们都有一个可见属性

00:05:51.330 --> 00:05:54.400
所以它们可以设置成可见或不可见

00:05:54.400 --> 00:05:58.650
还有一些其他的属性 它们是相同的

00:05:58.650 --> 00:06:02.370
除了把这些属性代码写到 TextView 类中

00:06:02.370 --> 00:06:05.590
然后复制到 ImageView 类和按钮类中

00:06:05.590 --> 00:06:07.610
我们有更聪明的做法

00:06:07.610 --> 00:06:09.980
我们可以创建一个 View 类

00:06:09.980 --> 00:06:14.110
提取这些 View 的相同属性 然后把它们放到

00:06:14.110 --> 00:06:19.730
View 类中 那样的话代码就可以只写一次

00:06:19.730 --> 00:06:22.610
但是我们怎样把 TextView 类和 view 类

00:06:22.610 --> 00:06:24.000
联系起来呢？

00:06:24.000 --> 00:06:26.548
如果你想到继承 那就对了

00:06:26.548 --> 00:06:30.080
在 TextView.java 文件中 我们将要定义 TextView 类

00:06:30.080 --> 00:06:33.240
然后从 View  类中继承所有的数据和方法

00:06:34.270 --> 00:06:37.520
在 TextView 类中 我们不会有太多的代码

00:06:37.520 --> 00:06:41.860
因为 一部分功能已经在 View 类中实现了

00:06:41.860 --> 00:06:43.730
同样可以应用到 ImageView 类和按钮类

00:06:43.730 --> 00:06:46.800
我们不需要写太多代码

00:06:46.800 --> 00:06:49.690
在这些文件中 我们只需要写 ImageView 与 View

00:06:49.690 --> 00:06:53.090
不同的代码即可

00:06:53.090 --> 00:06:57.720
我认为这里要指明区别 所以 ImageView 类必须指明

00:06:57.720 --> 00:07:01.890
ImageView 与 View 类的不同之处

00:07:03.840 --> 00:07:06.960
如果我们不想从 View 类中继承某个行为

00:07:06.960 --> 00:07:11.760
我们只需要在 ImageView 类中指定更新的方法就可以

00:07:11.760 --> 00:07:12.820
或者其他任何类中

00:07:14.070 --> 00:07:16.680
提醒一下在这个例子中的术语

00:07:16.680 --> 00:07:20.039
TextView 是子类  View 是父类

00:07:21.430 --> 00:07:23.280
如果我们回到关于 TextView 类的文档说明

00:07:23.280 --> 00:07:27.310
我们实际上已经明白了这部分

00:07:27.310 --> 00:07:30.000
TextView 继承 View

00:07:30.000 --> 00:07:33.330
现在我们明白它意味着 我们从 View 类

00:07:33.330 --> 00:07:35.280
继承了所有属性和方法

00:07:35.280 --> 00:07:38.330
下面是类层次图

00:07:38.330 --> 00:07:41.884
它表明 TextView 类继承 View 类

00:07:43.730 --> 00:07:46.530
依次向上 View 类继承 Object 类

00:07:47.650 --> 00:07:50.060
如果你浏览周围 你会发现其他类

00:07:50.060 --> 00:07:54.780
EditText 类实质上继承 TextView 类

00:07:54.780 --> 00:07:57.570
所以它从 TextView 类获得行为

00:07:57.570 --> 00:08:00.120
然后添加了一些自己的功能

00:08:01.290 --> 00:08:03.590
所以 EditText 继承 TextView

00:08:03.590 --> 00:08:06.720
TextView 继承 View  View 继承 Object

00:08:06.720 --> 00:08:09.830
这是类继承图

00:08:11.370 --> 00:08:13.950
这样的例子还有很多 你可以浏览好几个小时

00:08:13.950 --> 00:08:17.010
但是我在 TextView 文档页面只给你看一项

00:08:17.010 --> 00:08:20.820
我只给你演示一下设置可见性的方法

00:08:20.820 --> 00:08:24.350
这是 TextView 类中设置可见性的方法

00:08:24.350 --> 00:08:26.860
它决定 View 是可见还是不可见

00:08:28.000 --> 00:08:33.240
如果我点击这个方法 它实际上把我带到了 View 类

00:08:33.240 --> 00:08:36.010
这里描述了这个方法是做什么的

00:08:36.010 --> 00:08:39.860
你可以看到 TextView 对象有一个设置可见性的方法

00:08:39.860 --> 00:08:43.659
它是继承自 View 类

00:08:43.659 --> 00:08:47.470
所以我们从 View 类免费获得这些功能

00:08:47.470 --> 00:08:50.930
我们刚刚讲了很多新概念

00:08:50.930 --> 00:08:56.040
正常情况下 它会贯穿计算机科学课程的整个学期

00:08:56.040 --> 00:08:58.260
我们将要做一些练习

00:08:58.260 --> 00:09:01.170
希望它能贯穿这些知识点

00:09:01.170 --> 00:09:03.010
但是你要花费很多的时间和练习才能

00:09:03.010 --> 00:09:06.610
掌握这些概念

00:09:06.610 --> 00:09:09.700
第一个练习 我想让你创建一个新的 Android 应用

00:09:09.700 --> 00:09:11.530
因为我们不想弄乱 Just Java 应用

00:09:13.070 --> 00:09:14.640
如果你创建了这个工程 然后运行应用

00:09:15.790 --> 00:09:18.630
如果你创建了你自己的应用 你会看见一个 MainActivity 文件

00:09:18.630 --> 00:09:22.530
MainActivity 文件继承自 AppCompatActivity

00:09:22.530 --> 00:09:26.060
在你的 Android Studio 版本中 如果你的 MainActivity

00:09:26.060 --> 00:09:28.760
继承自 ActionBarActivity 也是可以的

00:09:28.760 --> 00:09:32.200
那只是 ActionBarActivity 的一个旧版本

00:09:32.200 --> 00:09:35.650
通过删除这个方法的重载 我们会使用

00:09:35.650 --> 00:09:40.280
AppCompatActivity 类中出现的 onCreate 方法

00:09:40.280 --> 00:09:44.540
这个方法的出现表明我们想要在 MainActivity 中

00:09:44.540 --> 00:09:46.230
使 onCreate 有不同的行为

00:09:46.230 --> 00:09:49.540
所以删除它就会回到 AppCompatActivity 类

00:09:49.540 --> 00:09:52.040
中的原始方法

00:09:52.040 --> 00:09:53.380
当你运行应用的时候

00:09:53.380 --> 00:09:57.250
你注意到它与你第一次运行的时候不一样了吗？

00:09:57.250 --> 00:09:58.510
在这个文本框中写下你的答案

