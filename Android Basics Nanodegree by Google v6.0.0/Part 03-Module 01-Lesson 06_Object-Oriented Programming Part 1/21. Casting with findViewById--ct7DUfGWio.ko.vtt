WEBVTT
Kind: captions
Language: ko

00:00:00.610 --> 00:00:02.650
앱에서 살펴보았던 코드를 
추가하였습니다.

00:00:02.650 --> 00:00:07.660
View orderSummaryTextView
= findViewById 입니다.

00:00:07.660 --> 00:00:13.000
그리고 [order_summary_text_view]에 
대한 [resource ID]를 입력합니다.

00:00:13.000 --> 00:00:15.910
하지만 이는 다음 행의 안드로이드 
스튜디오에서 오류를 발생시킵니다.

00:00:17.750 --> 00:00:21.830
[method] [setText]를 실행할 수 
없다고 합니다.

00:00:21.830 --> 00:00:24.430
이곳에 다른 코드 행을 추가하면,

00:00:24.430 --> 00:00:27.880
이 변수에 적합한 [method]의 유형을 
보여줄 수 있습니다.

00:00:28.890 --> 00:00:32.400
따라서 [orderSummaryTextView] 
변수를 이곳에 만듭니다 그리고

00:00:32.400 --> 00:00:34.330
이것은 [TypeView]입니다. 따라서 옆

00:00:34.330 --> 00:00:37.520
행에서 이에 대한 [methods]를 호출할 
수 있습니다.

00:00:37.520 --> 00:00:40.540
자동완성 기능을 사용할 경우, 
이러한 [methods]는 실질적으로

00:00:40.540 --> 00:00:44.120
[View methods]가 됩니다.

00:00:44.120 --> 00:00:46.140
[TextView]에 대한 특정 [method]가 없습니다.

00:00:47.200 --> 00:00:49.350
예를 들어, [setText] [method]는 없습니다.

00:00:51.320 --> 00:00:54.455
따라서 [setText]를 호출하려고 할 때 
이곳에서 오류가 발생되는 것입니다.

00:00:56.020 --> 00:01:00.890
또한 문자 크기나 색상 등도 설정할 수 
없습니다.

00:01:00.890 --> 00:01:02.350
이 [method]는 어디에 있습니까?

00:01:03.840 --> 00:01:08.700
사실 [TextView]는 더욱 세부적인 
유형의 [View] 입니다.

00:01:10.430 --> 00:01:13.240
따라서 이 객체에 대한 [TextView] [method]를

00:01:13.240 --> 00:01:16.777
호출하고자 한다면, 이것이 [TextView]
객체임을 확인하여야 합니다.

00:01:17.820 --> 00:01:21.160
좋습니다.
자 이제 변수는 [TextView] 객체입니다.

00:01:21.160 --> 00:01:25.750
하지만 [TextView]는 우측 면에서 
작동되고 우리는 단지 일반적인 뷰를

00:01:25.750 --> 00:01:31.090
찾기 때문에 호환되지 않는 유형이라는 
다른 오류가 발생되었습니다.

00:01:31.090 --> 00:01:34.240
이로 인해 [findViewById] [method]가 
[View]를 반환하는 것입니다.

00:01:34.240 --> 00:01:35.558
어떻게 이를 해결할까요?

00:01:35.558 --> 00:01:41.720
[TextView]는 더욱 세부적인 유형의 [View] 
이거나 혹은 [TextView]는 뷰의 하위

00:01:41.720 --> 00:01:47.260
유형이므로, 실질적으로 캐스팅이라는 
것을 사용할 수 있습니다.

00:01:47.260 --> 00:01:51.970
자바에서의 캐스팅은 이 [method]에 
의해 반환되는 [View]를 갖고 실질적으로

00:01:51.970 --> 00:01:54.280
[TextView] 처럼 다룰 수 있음을 의미합니다.

00:01:54.280 --> 00:01:58.760
따라서 우측 면은 실질적인 [TextView] 
객체이고 이것의 내부에 이

00:01:58.760 --> 00:02:02.168
[orderSummaryTextView]의 변수들을 
저장할 수 있게 되었습니다.

00:02:03.460 --> 00:02:06.110
이미 상당히 많은 새로운 개념들을 
언급하였기 때문에 이것이 상당히

00:02:06.110 --> 00:02:07.970
어려운 내용임을 알고 있습니다.

00:02:07.970 --> 00:02:09.210
다시 한 번 설명해 드리도록 하겠습니다.

00:02:10.229 --> 00:02:14.280
[findViewById] [method]는 
[type View]의 객체를 반환합니다.

00:02:14.280 --> 00:02:15.820
이 [notation]을 적음으로써, 해당 객체의

00:02:15.820 --> 00:02:19.690
데이터 유형이 쓰인 괄호들을 중앙에 
배열할 수 있습니다.

00:02:19.690 --> 00:02:23.250
우리는 이 [View]를 [TextView]로 캐스팅 할 것입니다.

00:02:23.250 --> 00:02:27.217
따라서 이곳의 모든 표현들은 
[TextView] 객체를 평가하게 됩니다.

00:02:28.600 --> 00:02:32.140
그리고, 이를 [orderSummary] 
[TextView]인 좌측에 있는 변수에

00:02:32.140 --> 00:02:35.790
저장할 수 있고 이는 [type TextView]의 
유형을 갖게 됩니다.

00:02:35.790 --> 00:02:40.740
다음 행에서, 이 객체에 대한 
[TextView] [methods]를 호출할 수 있습니다.

00:02:40.740 --> 00:02:43.720
모든 문자 [methods]들이 이곳에 
어떻게 나타나는지 확인할 수 있습니까?

00:02:44.840 --> 00:02:48.070
[setAllCaps], [setTextSize], 등.

00:02:48.070 --> 00:02:51.660
따라서 [setText]가 실행되어야 하기 
때문에 이를 지우면 이제 더 이상의

00:02:51.660 --> 00:02:54.170
오류는 없습니다.

00:02:54.170 --> 00:02:57.100
[TextView] [methods]를 호출하고자 할 
경우, [TextView] 객체를 가져야만

00:02:57.100 --> 00:02:59.410
합니다.

00:02:59.410 --> 00:03:02.500
[TextView] 객체를 갖기 위해, 
[findViewById]를 호출하고 이 [View]

00:03:02.500 --> 00:03:06.890
객체를 [TextView]로 캐스팅하여야 
합니다.

00:03:06.890 --> 00:03:09.700
캐스팅 작업의 이유는 뷰 구조 안에

00:03:09.700 --> 00:03:13.440
있는 이곳의 [View]가 실질적으로 
[TextView]이기 때문입니다.

00:03:13.440 --> 00:03:17.520
이를 작동하지 않는 라디오 버튼 
등과 같은 무언가로 캐스팅 하고자 할

00:03:17.520 --> 00:03:20.840
경우, [orderSummaryTextView]가 
실질적인 [TextView]이기 때문에,

00:03:20.840 --> 00:03:23.000
적절한 유형으로 캐스팅 
하여야 합니다.

00:03:24.275 --> 00:03:28.370
이와 같이, [displayQuantity] 
[method]에서, [findViewById]를

00:03:28.370 --> 00:03:32.350
호출하고 이를 [TextView] 수량에 대한 
[resource ID]에 입력합니다.

00:03:32.350 --> 00:03:36.090
이는 [View]를 반환합니다. 그리고 이를 
[TextView]로 캐스팅하면 이를

00:03:36.090 --> 00:03:39.330
[quantityTextView]라는 변수에 저장할 
수 있습니다.

00:03:40.400 --> 00:03:43.450
이 변수는 [type TextView]를 갖기 때문에

00:03:43.450 --> 00:03:48.170
다음 행에서 [setText]와 같이 이에 
대한 [TextView] [methods]를 할 수 있습니다.

00:03:48.170 --> 00:03:51.160
여기에 업데이트 된 [MainActivity] 
코드 사용 캐스팅이 있습니다.

00:03:51.160 --> 00:03:56.400
우리는 이 [Views]를 [TextView]로 캐스팅 
할 수 있으므로 이것들을 [type TextView]를

00:03:56.400 --> 00:04:00.622
가진 변수에 저장합니다. 또한 
[MainActivity] 변수들의 목록은 변수들이므로

00:04:00.622 --> 00:04:05.090
[now quantityTextView]와 [orderSummary 
TextView]는 [type TextView]입니다.

00:04:05.090 --> 00:04:06.820
이들에 대한 [TextView] [method]를

00:04:06.820 --> 00:04:10.810
호출할 수 있고 이들을 [Views]처럼 
다루는 데에 대한 제한은 없습니다.

00:04:10.810 --> 00:04:15.050
자 이제 이 변수들에 대한 [TextView]의 
특별 [methods]를 호출할 수 있습니다.

00:04:15.050 --> 00:04:19.041
예를 들어, [orderSummaryTextView]에 
대한 [setText]를 호출할 수 있고

00:04:19.041 --> 00:04:21.880
[quantityTextView]에 대한 [setText]를 
호출할 수 있습니다.

00:04:21.880 --> 00:04:22.650
아시다시피, 어떠한 데이터 유형이

00:04:22.650 --> 00:04:27.180
어디에 사용되는지에 관해 주의하여야 
합니다.

00:04:27.180 --> 00:04:31.290
지금까지, [method]를 호출하였습니다. 
[setText] [method]가 실질적으로 반환

00:04:31.290 --> 00:04:34.400
값을 가지지 않기 때문에 반환 값에 
대해서는 걱정할 필요가 없습니다.

00:04:34.400 --> 00:04:37.180
[imageView.setImageResource] 
[method]와 같습니다.

00:04:37.180 --> 00:04:39.060
여기에 반환 값은 없습니다.

00:04:39.060 --> 00:04:41.540
하지만 다른 [method]는
반환 값을 가질 수 있습니다.

00:04:41.540 --> 00:04:45.590
예를 들어, [TextView] 클래스에
[getTextSize] [method]를 가지고 있습니다.

00:04:45.590 --> 00:04:47.680
이는 정수를 반환합니다. 따라서 [type

00:04:47.680 --> 00:04:53.410
int]의 크기로 불리는 변수에 이 
[method]의 결과를 저장할 수 있습니다.

00:04:53.410 --> 00:04:55.140
여기 반환 값을 가진 다른 [method]가 
있습니다.

00:04:55.140 --> 00:04:58.270
버튼 클래스에서, [getHeight] 
[method]를 호출할 수 있고

00:04:58.270 --> 00:05:03.420
이는 정수 값을 반환합니다. 따라서 
이를 변수 안에 저장할 수 있습니다.

00:05:03.420 --> 00:05:06.450
예를 들어, 문자열 내에 이 결과를 
저장하고자 하면 이 [method]는

00:05:06.450 --> 00:05:10.810
정수를 반환하기 때문에 오류가 
발생될 것입니다.

00:05:10.810 --> 00:05:14.988
어떠한 유형의 데이터가 [method]에 
입력되고 [method]로부터 어떠한

00:05:14.988 --> 00:05:19.290
데이터 유형이 반환되는지를 알기 
위해 문서를 확인해 보아야 합니다.

00:05:19.290 --> 00:05:21.260
예를 들어, [TextView] 클래스에서,

00:05:21.260 --> 00:05:25.760
어떠한 [method]를 호출할 경우, 
[type int]의 값이 반환됩니다.

00:05:25.760 --> 00:05:28.620
반환 값 데이터 유형은 이곳의 좌측 
행에 있습니다.

00:05:28.620 --> 00:05:33.040
다른 [method]에 대해, 
반환 값 혹은 불 연산자 그리고 아직

00:05:33.040 --> 00:05:38.330
배우지 못한 [floats], [longs] 등과 
같은 것들을 [void]하여야 할 것입니다.

00:05:38.330 --> 00:05:42.790
이 문서 페이지는 또한 각 [method]의 
입력 내용에서 어떤 것이 예상되는

00:05:42.790 --> 00:05:45.010
데이터 유형인지를 보여줍니다.

00:05:45.010 --> 00:05:49.590
예를 들어, [setTextColor] [method]는
입력 내용으로 정수를 요구하고

00:05:49.590 --> 00:05:53.110
반환 값이 [void] 됩니다.
따라서 반환 값은 없습니다.

00:05:53.110 --> 00:05:56.010
어떠한 데이터 유형이 예상되는지를 
알아보기 위해 문서를 확인해 봅시다.

00:05:56.010 --> 00:05:58.750
아니면, 안드로이드 스튜디오에 데이터 
유형이 일치하지 않습니다 라고

00:05:58.750 --> 00:06:01.070
나타내는 오류가 발생될 것입니다.

00:06:01.070 --> 00:06:02.630
자 이제 연습해 볼 차례입니다.

00:06:02.630 --> 00:06:05.580
아래에 네 개의 다른 코드 예시가 있습니다.

00:06:05.580 --> 00:06:10.100
일부 코드는 데이터 유형이 일치하지 
않는 것과 관련된 오류를 포함합니다.

00:06:10.100 --> 00:06:11.165
오류를 발견하게 되면,

00:06:11.165 --> 00:06:15.540
어떻게 이를 수정할 것인지를 아래의 
칸에 적어 보십시오.

00:06:15.540 --> 00:06:19.948
아니면, 코드에 이상이 없을 경우 
오류가 없음을 적을 수 있습니다.

00:06:19.948 --> 00:06:22.545
너무나 다양한 개념들을 배웠기 
때문에 이는 상당히 어려운 문제가 될

00:06:22.545 --> 00:06:26.555
것입니다. 그리고 이 코드는 아직도 
당신에게는 새로운 것일 것입니다.

00:06:26.555 --> 00:06:30.105
시간을 가지고 이 [method]에 대한 
문서를 확인해 보십시오.

00:06:30.105 --> 00:06:33.695
입력 내용과 반환 값이 정확한지 
확인하시고 변수를 규정할 수 있다면

00:06:33.695 --> 00:06:37.665
이곳에 정확한 데이터 유형을 갖게 될 
것입니다.

00:06:37.665 --> 00:06:39.265
또한 [method]를 정확히 사용할 수

00:06:39.265 --> 00:06:42.375
있도록 [method] 호출에 관한 문서를 
확인하시기 바랍니다.

