WEBVTT
Kind: captions
Language: en-US

00:00:00.490 --> 00:00:01.635
Do you remember the boxes?

00:00:01.635 --> 00:00:02.809
&gt;&gt; What boxes?

00:00:02.809 --> 00:00:04.090
&gt;&gt; These boxes.

00:00:04.090 --> 00:00:06.910
&gt;&gt; Huh!
&gt;&gt; You do remember them?

00:00:06.910 --> 00:00:07.480
&gt;&gt; Oh yeah, yeah.

00:00:07.480 --> 00:00:08.260
I do remember them.

00:00:08.260 --> 00:00:10.380
They're variables,
where you can put the value inside.

00:00:10.380 --> 00:00:10.930
Yeah, and

00:00:10.930 --> 00:00:15.020
you can combine multiple of these
variable to create a larger Java object.

00:00:15.020 --> 00:00:16.790
&gt;&gt; Oh, so you can take two or
more variable and

00:00:16.790 --> 00:00:18.420
make into a something bigger.

00:00:18.420 --> 00:00:19.709
&gt;&gt; Exactly.
&gt;&gt; Okay

00:00:19.709 --> 00:00:21.751
&gt;&gt; [SOUND] Like a TextView.

00:00:21.751 --> 00:00:23.960
&gt;&gt; Yeah.
So, we can have an integer variable.

00:00:23.960 --> 00:00:25.640
&gt;&gt; This is for the font size.

00:00:25.640 --> 00:00:26.210
&gt;&gt; Exactly.

00:00:26.210 --> 00:00:27.752
&gt;&gt; Okay.
[SOUND]

00:00:27.752 --> 00:00:28.637
&gt;&gt; And then you can also have

00:00:28.637 --> 00:00:29.460
a string variable.

00:00:29.460 --> 00:00:31.830
&gt;&gt; And the string variable for
the actual text itself.

00:00:31.830 --> 00:00:36.240
&gt;&gt; Yeah, and those can go inside the
TextView as the state of the TextView.

00:00:36.240 --> 00:00:38.970
&gt;&gt; And then we can interact with those
things using different methods that

00:00:38.970 --> 00:00:39.900
we're going to play with next.

00:00:39.900 --> 00:00:40.500
&gt;&gt; Exactly.

00:00:40.500 --> 00:00:41.290
&gt;&gt; Okay.
Let's do that.

00:00:42.480 --> 00:00:46.220
&gt;&gt; As we mentioned earlier, showing
a TextView on the screen like this

00:00:46.220 --> 00:00:49.690
is actually controlled by
a Java object within the app.

00:00:49.690 --> 00:00:52.300
This is an example of
a TextView Java object.

00:00:52.300 --> 00:00:55.890
It's like a box, and
inside of it, it holds state.

00:00:55.890 --> 00:00:58.350
The state is made up
of a bunch of fields.

00:00:58.350 --> 00:01:00.240
A field is a variable,
like in lesson two,

00:01:00.240 --> 00:01:02.760
when we learned about global variables.

00:01:02.760 --> 00:01:05.730
We can have a text field
to store the today string,

00:01:05.730 --> 00:01:09.220
which is going to be the text that's
ultimately displayed on the screen.

00:01:09.220 --> 00:01:13.520
We can also have an integer field to
store the font size of this text.

00:01:13.520 --> 00:01:14.910
There's also a bunch of other fields,

00:01:14.910 --> 00:01:19.460
like text color, font family that
make up the state of the TextView.

00:01:19.460 --> 00:01:21.900
I just didn't draw them in this picture.

00:01:21.900 --> 00:01:23.940
To interact with this Java object and

00:01:23.940 --> 00:01:28.420
change it while the app is running,
we can call methods on the TextView.

00:01:28.420 --> 00:01:31.020
We learned about methods
earlier in lesson three.

00:01:31.020 --> 00:01:35.120
Some example methods on a TextView
are setText and getText.

00:01:35.120 --> 00:01:39.910
You can also have methods like
setTextSize or getTextSize, and so on.

00:01:39.910 --> 00:01:43.190
Each of these methods just
executes a list of instructions.

00:01:43.190 --> 00:01:45.590
You can have more complex
methods like onDraw,

00:01:45.590 --> 00:01:48.440
which handles drawing
a TextView onto the screen.

00:01:48.440 --> 00:01:53.350
So overall, this TextView object holds
state information on what this TextView

00:01:53.350 --> 00:01:57.850
contains, and you can call methods
to interact with this TextView,

00:01:57.850 --> 00:02:01.500
such as to modify the state,
or to do more complex actions.

00:02:02.850 --> 00:02:06.565
To show an ImageView on the screen,
we actually have a Java object for

00:02:06.565 --> 00:02:08.838
ImageView inside of the app.

00:02:08.838 --> 00:02:13.710
This particular ImageView contains state
information, like which image should

00:02:13.710 --> 00:02:17.680
be shown, as well as the scale type,
like center crop.

00:02:17.680 --> 00:02:20.490
Again there's a bunch of other fields
that make up the state of an ImageView,

00:02:20.490 --> 00:02:22.250
I just didn't draw them here.

00:02:22.250 --> 00:02:25.759
There's methods like setImage,
setScaleType, and even more complex

00:02:25.759 --> 00:02:30.330
methods, like onDraw, to handle drawing
this ImageView onto the screen.

00:02:30.330 --> 00:02:31.560
Note that, as developers,

00:02:31.560 --> 00:02:35.480
we don't explicitly have to call onDraw
to tell it to draw onto the screen.

00:02:35.480 --> 00:02:39.880
Android handles calling this
automatically for us, but it is useful

00:02:39.880 --> 00:02:43.910
to be able to call these methods to
change the ImageView, for example.

00:02:43.910 --> 00:02:47.580
So how do we know what all the fields
are inside the state of an ImageView,

00:02:47.580 --> 00:02:50.530
and what all the methods
are of this ImageView?

00:02:50.530 --> 00:02:53.980
To answer that question we have to look
at the class definition for that object.

00:02:55.010 --> 00:02:57.574
It's a file called TextView.java,

00:02:57.574 --> 00:03:00.890
similar to how we defined
MainActivity.java.

00:03:00.890 --> 00:03:05.130
Inside this class TextView file,
we have a bunch of code that

00:03:05.130 --> 00:03:08.530
talks about the state of
the TextView as well as the methods.

00:03:08.530 --> 00:03:12.240
Now it doesn't say state and
methods exactly, but it just contains

00:03:12.240 --> 00:03:14.990
information on the state and
it contains information on the methods.

00:03:16.020 --> 00:03:19.970
You can thank of this as defining
the rules of how a TextView behaves.

00:03:19.970 --> 00:03:25.750
This object instance can hold specific
information like the text string today.

00:03:25.750 --> 00:03:26.760
Or the text size 18.

00:03:26.760 --> 00:03:32.420
You can also use this class to create
even more TextView object instances,

00:03:32.420 --> 00:03:34.290
and these could have
a different text string value.

00:03:34.290 --> 00:03:37.010
I think this one could
hold text that says hello,

00:03:37.010 --> 00:03:39.800
and this one could hold
text that says goodbye.

00:03:39.800 --> 00:03:43.050
They could have different font sizes,
different text colors, etc.

00:03:44.080 --> 00:03:47.520
However, they're all based
off of the class template.

00:03:47.520 --> 00:03:50.670
You may find it hard to distinguish
between a class and an object instance,

00:03:50.670 --> 00:03:51.890
but that's okay.

00:03:51.890 --> 00:03:53.760
It takes some time to get used to.

00:03:53.760 --> 00:03:55.630
Here's an analogy to help you.

00:03:55.630 --> 00:03:59.270
You can think of it as creating
a floor plan for a house.

00:03:59.270 --> 00:04:02.680
You can use this floor plan
to create the actual homes.

00:04:02.680 --> 00:04:04.320
Each of these homes can
be slightly different.

00:04:04.320 --> 00:04:06.990
But they're all based off
of this base floor plan.

00:04:06.990 --> 00:04:10.270
It's important to note that the floor
plan is not a house itself.

00:04:10.270 --> 00:04:12.110
It's just the plan.

00:04:12.110 --> 00:04:17.079
Similarly, the TextView class is used
to create these object instances.

00:04:17.079 --> 00:04:20.480
So these instances are the ones
with the actual text values,

00:04:20.480 --> 00:04:23.350
text color values, and text sizes.

00:04:23.350 --> 00:04:25.010
So what does one of
these classes look like?

