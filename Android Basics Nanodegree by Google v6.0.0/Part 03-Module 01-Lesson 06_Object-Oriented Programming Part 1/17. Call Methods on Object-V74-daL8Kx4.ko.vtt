WEBVTT
Kind: captions
Language: ko

00:00:00.860 --> 00:00:04.030
이전에 살펴보았던 메시지 표시 
[method]에 대해 살펴보도록 합시다.

00:00:05.030 --> 00:00:07.570
이것이 이곳에서 실제로 어떻게 
실행되는지를 살펴보고자 하였습니다.

00:00:08.630 --> 00:00:12.450
지금까지 배운 내용을 살펴보면, 
[TextView] 객체라는 것이 있고

00:00:12.450 --> 00:00:15.670
이는 [orderSummaryTextView]라는 
변수임을 알 수 있습니다.

00:00:15.670 --> 00:00:18.870
그리고 우리가 잘 모르는 다양한 
코드들을 나타내고 있습니다.

00:00:18.870 --> 00:00:22.820
하지만 다음 행에, 우리는 
[prderSummaryTextView]라는 변수를

00:00:22.820 --> 00:00:25.030
사용하여 문자들이 이 메시지가 
되도록 할 것입니다.

00:00:26.250 --> 00:00:29.470
객체에 대한 [method] 호출에 대해 더 
알아보도록 합시다.

00:00:31.250 --> 00:00:34.920
객체에 대한 [method] 호출에서 
다음과 같은 형식을 따라야 합니다.

00:00:34.920 --> 00:00:39.560
객체 변수명을 입력합니다. 
여기에서는 [titleTextView]입니다.

00:00:39.560 --> 00:00:41.160
그리고 점을 추가합니다.

00:00:41.160 --> 00:00:45.350
여기에서는 [setText]라는 [method 
name]을 따라 진행되게 됩니다.

00:00:45.350 --> 00:00:49.390
이 [method]는 [TextView] 자바 클래스에서 
이 같은 방식으로 규정됩니다.

00:00:49.390 --> 00:00:53.250
[method declaration]은 또한 문자열의 
입력 파라미터가 있는지를 명시합니다.

00:00:53.250 --> 00:00:58.060
따라서 괄호를 넣고 입력내용인 
문자열을 입력합니다.

00:00:58.060 --> 00:00:59.700
그리고 세미콜론으로 내용을 
끝마칩니다.

00:01:00.920 --> 00:01:05.459
이 코드 행을 입력할 때, [titleTextView] 
객체를 변환하여 이 내용을 화면에

00:01:05.459 --> 00:01:08.100
표시하게 됩니다.

00:01:08.100 --> 00:01:10.490
이곳에 객체 변수명을 
사용하는 이유는,

00:01:10.490 --> 00:01:13.600
해당 앱에 다양한 [TextViews]가 
사용될 수 있기 때문입니다.

00:01:13.600 --> 00:01:16.379
따라서 정확한 객체 인스턴스에 대한 
[method] 호출을 가능하게 합니다.

00:01:17.560 --> 00:01:20.980
[input argument]를 나타낼 때, 
[method declaration]에 따라 정확한

00:01:20.980 --> 00:01:24.620
명령의 [arguments]를 나타내는지를 
확인합니다.

00:01:25.660 --> 00:01:29.460
따라서 입력 내용이 없을 경우, 빈 
괄호를 넣게 됩니다.

00:01:29.460 --> 00:01:32.820
입력 내용을 [method]에 입력하는 
방식은 앞선 3장에서 배운 내용과

00:01:32.820 --> 00:01:34.110
같습니다.

00:01:34.110 --> 00:01:36.140
객체 변수명과 [dot]을 포함한 [method 
name]을 구분하여야 함을

00:01:36.140 --> 00:01:38.450
명심하십시오.

00:01:38.450 --> 00:01:42.450
여기 같은 [titleTextView] 객체에 대한 
다른 예시가 있습니다.

00:01:42.450 --> 00:01:45.190
여기에 [setTextSize] [method]를 
호출하도록 하겠습니다.

00:01:45.190 --> 00:01:49.220
이 [method]는 새로운 문자 크기에 
대한 입력 값으로 정수 값을 갖습니다.

00:01:49.220 --> 00:01:51.830
따라서 이 같은 경우에, 다음 문자 
크기로 18을 입력하면 됩니다.

00:01:52.980 --> 00:01:55.510
안드로이드 장치에서 이 코드 행을 
실행할 때, 이 [titleTextView]를 18의

00:01:55.510 --> 00:02:00.460
더 큰 폰트 크기를 갖도록 변경할 
것입니다.

00:02:00.460 --> 00:02:02.260
본 예시에서, [TextView] 객체에 대해

00:02:02.260 --> 00:02:06.540
[warningTextView]라는 [method]를 
호출합니다.

00:02:07.580 --> 00:02:11.140
[setTextColor]라는 [method]는 새로운 
색상을 입력합니다.

00:02:12.140 --> 00:02:16.010
색상은 [Color.RED]와 같이 표시됨을 
명심하십시오.

00:02:16.010 --> 00:02:17.670
문서의 색상에 관한 내용을 살펴볼 때,

00:02:17.670 --> 00:02:22.030
스크롤을 내려 붉은 색이 이곳에 
규정되었는지를 확인해 볼 수 있습니다.

00:02:22.030 --> 00:02:25.290
여기에 사용할 수 있는 다양한 
색상들이 있습니다.

00:02:26.370 --> 00:02:30.850
[setTextColor]는 [Color.BLUE] 또는 
[Color.BLACK]로 호출할 수 있습니다.

00:02:30.850 --> 00:02:33.835
마지막으로, [ImageView]에 관한 
[method] 호출의 예시입니다.

00:02:34.882 --> 00:02:39.230
[ImageView] 객체는 
[welcomeImageView]라는 변수명을

00:02:39.230 --> 00:02:41.260
갖고 [setImageResource] [method]를 
여기에 호출합니다.

00:02:42.380 --> 00:02:46.135
이 [method]는 [ImageView]에서 
설정한 새로운 이미지를 입력합니다.

00:02:47.400 --> 00:02:51.580
새로운 이미지를 [R.drawable] 형식의 
[resource ID]로 나타냅니다.

00:02:51.580 --> 00:02:53.000
그리고 이것은 파일명입니다. 이것은

00:02:54.100 --> 00:02:58.610
자바 코드에서 [resource IDs]를 
사용하는 예시입니다.

00:02:58.610 --> 00:03:02.059
[TextView] 객체에 호출한 완전한 
[method] 목록을 얻기 위해,

00:03:02.059 --> 00:03:04.867
[TextView] 안드로이드 문서 페이지를 
확인해 보시기 바랍니다.

00:03:04.867 --> 00:03:08.810
[TextView] 안드로이드를 검색하고 
이곳의 클릭을 통해 얻을 수 있습니다.

00:03:09.840 --> 00:03:12.110
이것은 이미 확인한 페이지 입니다.

00:03:12.110 --> 00:03:15.740
이 페이지에 명시된 XML 속성에 
관해서는 잘 알고 있습니다.

00:03:16.830 --> 00:03:19.900
스크롤을 내리면 [text view] 클래스 
내의 모든 [public methods]의 목록을

00:03:19.900 --> 00:03:20.790
확인할 수 있습니다.

00:03:21.910 --> 00:03:22.870
무언가를 찾고자 한다면, Cmd+F

00:03:22.870 --> 00:03:27.210
혹은 윈도우에서는 
Ctrl+F를 사용하면 됩니다.

00:03:27.210 --> 00:03:29.900
앞서 사용하였던 [setTextColor] 
[method]를 찾아보도록 하겠습니다.

00:03:31.200 --> 00:03:32.740
이곳에 [setTextColor] [method]가

00:03:32.740 --> 00:03:35.310
있습니다. 입력 파라미터로 정수의 
색상을 가지고 있습니다.

00:03:36.420 --> 00:03:40.540
모든 [method]는 [TextView] 클래스의 
[public methods]로 규정되었습니다.

00:03:40.540 --> 00:03:43.170
이것이 우리가 지금 이러한 
[methods]를 호출하는 이유입니다.

00:03:43.170 --> 00:03:44.910
이들이 [private methods]로 규정되면, 
이곳에 나타나는 이들의 내용을

00:03:44.910 --> 00:03:46.210
확인할 수 없을 것입니다.

00:03:47.400 --> 00:03:49.070
이러한 [method]를 호출할 때,

00:03:49.070 --> 00:03:52.370
어떠한 입력 파라미터를 
필요로 하는지를 확인하고

00:03:52.370 --> 00:03:55.680
정확한 명령과 데이터 유형을 
입력하여야 합니다.

00:03:56.910 --> 00:03:58.040
코드를 살펴보면, [methods] 호출 시

00:03:58.040 --> 00:04:02.130
[dot notation]을 확인하지 못하는 
경우가 있을 것입니다.

00:04:02.130 --> 00:04:06.150
이는 클래스 내부에 있을 때와 외부에 
있을 때에 따라 달라집니다.

00:04:06.150 --> 00:04:08.730
[TextView] 클래스 내의 예를 
살펴보도록 합시다.

00:04:08.730 --> 00:04:12.540
일부 다른 [method] 뿐만 아니라 
규정된 [setText] [method]를 갖게 되었습니다.

00:04:12.540 --> 00:04:16.589
다른 [method]로부터 [setText] 
[method]를 호출하도록 만드십시오.

00:04:16.589 --> 00:04:21.040
[setText] 호출 후 입력 파라미터의 
입력을 통해 이를 할 수 있습니다.

00:04:21.040 --> 00:04:24.070
하지만 [dot]은 어디에 있고 객체 
변수명은 어디에 있습니까?

00:04:24.070 --> 00:04:28.800
사실 이 행은 [this.setText("Hello")]에 
대한 행입니다.

00:04:28.800 --> 00:04:31.360
이는 현재의 객체 인스턴스를 
나타냅니다.

00:04:31.360 --> 00:04:34.800
그리고 나서 [setText]가 
이 객체에 호출됩니다.

00:04:34.800 --> 00:04:38.880
이는 객체에 대한 [methods] 호출에서 
더욱 익숙한 형식입니다.

00:04:38.880 --> 00:04:42.301
하지만 [this.part]는 표현되었고 이는 
우리의 코드를 더욱 간결하게 만드는

00:04:42.301 --> 00:04:47.380
선택 사항이 되며 우리는 이를 
[setText("Hello)]라고 합니다.

00:04:47.380 --> 00:04:50.670
클래스 내부에서의 [setTexts] 호출과 
외부에서의 [setTexts] 호출의 차이점을

00:04:50.670 --> 00:04:53.800
숙지하십시오.

00:04:53.800 --> 00:04:55.990
이 클래스 내에서 
다양한 [TextView]를 가지고 있을 때

00:04:55.990 --> 00:04:59.380
어떠한 [TextView]를 문자 설정에 
사용하고자 하는지는 매우 명확하기

00:04:59.380 --> 00:05:03.380
때문에 이에 관해 생각해 보면, 더 잘 
이해가 될 것입니다.

00:05:03.380 --> 00:05:06.280
[TextView] 클래스를 
내부로 가져오는 것과

00:05:06.280 --> 00:05:08.970
외부에 두는 것에 대한 
다른 차이점이 있습니다.

00:05:08.970 --> 00:05:12.330
[TextView] 클래스 내부에서는, [private 
variables]와 [private methods]에

00:05:12.330 --> 00:05:14.210
접근이 가능합니다.

00:05:14.210 --> 00:05:16.060
[TextView] 클래스 외부에서는, [private]

00:05:16.060 --> 00:05:21.150
[methods]를 사용할 수 없고 [private 
variables]에 접근할 수 없습니다.

00:05:21.150 --> 00:05:25.100
[MainActivity] 클래스 내에서는, 
[TextView] 클래스의 [public

00:05:25.100 --> 00:05:27.300
methods]와 [public variables]만 접근 
가능합니다.

