WEBVTT
Kind: captions
Language: pt-BR

00:00:00.490 --> 00:00:01.532
Você lembra das caixas?

00:00:02.387 --> 00:00:04.750
- Que caixas?
- Estas caixas! [SOM]

00:00:06.116 --> 00:00:07.290
- Você lembra delas?
- Sim!

00:00:07.302 --> 00:00:08.200
Sim, eu lembro delas.

00:00:08.283 --> 00:00:10.310
São variáveis onde pode colocar o valor.

00:00:10.350 --> 00:00:13.040
Sim, e é possível combinar
várias destas variáveis

00:00:13.101 --> 00:00:14.920
​​para criar um objeto Java maior.

00:00:14.990 --> 00:00:16.620
Para poder pegar duas ou mais variáveis

00:00:16.790 --> 00:00:18.190
e transformar em algo maior?

00:00:18.412 --> 00:00:19.040
- Exato.
- Ok!

00:00:19.735 --> 00:00:21.415
[SOM] Como uma <i>TextView</i>.

00:00:21.772 --> 00:00:23.827
Sim, então podemos ter
uma variável integral.

00:00:23.956 --> 00:00:25.580
Esta será para o tamanho da fonte.

00:00:25.580 --> 00:00:26.455
- Exato.
- Ok.

00:00:27.833 --> 00:00:29.420
E você pode ter
uma variável <i>string</i>.

00:00:29.458 --> 00:00:31.700
E a variável <i>string</i>
para&nbsp;o próprio texto.

00:00:31.821 --> 00:00:36.230
Sim, e essas podem ir para dentro&nbsp;da
<i>TextView</i> como o estado da <i>TextView</i>.

00:00:36.240 --> 00:00:37.901
E aí podemos interagir
com essas coisas

00:00:37.990 --> 00:00:39.870
usando os métodos
que ensinamos em seguida.

00:00:39.900 --> 00:00:41.335
- Exato.
- Tudo bem, vamos lá.

00:00:42.460 --> 00:00:45.821
Como mencionamos anteriormente,
mostrar uma <i>TextView</i> na tela desse jeito

00:00:46.194 --> 00:00:49.228
é na verdade controlado
por um objeto Java no aplicativo.

00:00:49.690 --> 00:00:52.024
Esse aqui é um exemplo
de um objeto <i>TextView</i> Java.

00:00:52.295 --> 00:00:55.076
É como uma caixa, e dentro,
tem o Estado.

00:00:55.901 --> 00:00:57.987
O Estado é constituído
por&nbsp;um alguns campos.

00:00:58.310 --> 00:01:00.523
Um campo é uma variável,
como na Lição 2,

00:01:00.775 --> 00:01:02.153
com as variáveis ​​globais.

00:01:02.775 --> 00:01:05.384
Nós podemos ter um campo de texto
para armazenar a <i>string</i> Hoje,

00:01:05.730 --> 00:01:08.332
que vai ser o texto
a exibir na tela.

00:01:09.236 --> 00:01:12.769
Também podemos ter um campo integral
para armazenar o tamanho de fonte do texto.

00:01:13.563 --> 00:01:15.883
Também outros campos,
como cor do texto, família da fonte,

00:01:17.033 --> 00:01:18.676
compõem o estado
da <i>TextView</i>.

00:01:19.415 --> 00:01:21.163
Eu só não os escrevi nesta imagem.

00:01:21.901 --> 00:01:25.680
Para interagir com este objeto Java
e mudá-lo durante a execução do aplicativo,

00:01:25.950 --> 00:01:27.741
Nós podemos invocar métodos na <i>TextView</i>.

00:01:28.420 --> 00:01:30.424
Aprendemos sobre métodos
anteriormente na Lição 3.

00:01:31.020 --> 00:01:34.658
Alguns exemplos de métodos
de <i>TextView</i> são <i>setText</i> e <i>getText</i>.

00:01:35.120 --> 00:01:37.310
Também pode ter métodos
como <i>setTextSize</i>,

00:01:37.655 --> 00:01:39.316
ou <i>getTextSize</i>,
e assim por diante.

00:01:39.870 --> 00:01:42.781
Cada um destes métodos executa
apenas uma lista de instruções.

00:01:43.236 --> 00:01:45.378
Você pode ter métodos mais complexos,
como o <i>onDraw</i>,

00:01:45.612 --> 00:01:47.907
que permite desenhar
uma <i>TextView</i> na tela.

00:01:48.440 --> 00:01:51.618
No geral, este objeto <i>TextView</i>
mantém informações do estado

00:01:51.981 --> 00:01:54.067
que a <i>TextView</i> contém,

00:01:54.320 --> 00:01:57.581
e você pode invocar&nbsp;métodos
para interagir com a <i>TextView</i>,

00:01:57.833 --> 00:02:01.500
como modificar o Estado,
ou fazer ações mais complexas.

00:02:02.880 --> 00:02:06.330
Para mostrar uma <i>ImageView</i> na tela,
nós temos um objeto Java

00:02:06.455 --> 00:02:08.258
para a <i>ImageView</i> dentro do aplicativo.

00:02:08.860 --> 00:02:12.135
Esta ImageView em particular
contém informações de estado,

00:02:12.400 --> 00:02:14.307
como a imagem que deve ser mostrada,

00:02:14.550 --> 00:02:16.953
bem como o <i>ScaleType</i>
e o <i>centerCrop</i>.

00:02:17.660 --> 00:02:21.507
Mais campos compõem o estado da <i>ImageView</i>,
eu só não os escrevi aqui.

00:02:22.250 --> 00:02:24.590
Há métodos como <i>setImage</i>, <i>setScaleType</i>,

00:02:24.990 --> 00:02:27.156
e métodos ainda mais complexos,
como o <i>onDraw</i>,

00:02:27.320 --> 00:02:29.532
para desenhar esta <i>ImageView</i> na tela.

00:02:30.307 --> 00:02:31.560
Note que,
como desenvolvedores,

00:02:31.560 --> 00:02:35.101
não temos que chamar&nbsp;explicitamente
<i>onDraw</i> para desenhar na tela.

00:02:35.440 --> 00:02:37.944
Android faz essa chamada
automaticamente&nbsp;para nós.

00:02:38.760 --> 00:02:43.249
Mas é útil saber invocar estes métodos
para, por exemplo,&nbsp;mudar a <i>ImageView</i>.

00:02:43.926 --> 00:02:47.329
Então como sabemos quais os campos
dentro de um estado de <i>ImageView</i>,

00:02:47.560 --> 00:02:49.790
e todos os métodos desta <i>ImageView</i>?

00:02:50.530 --> 00:02:54.036
Para responder, precisamos olhar
para a definição da classe desse objeto.

00:02:54.970 --> 00:02:57.218
É um arquivo chamado <i>TextView.java</i>,

00:02:57.403 --> 00:03:00.104
semelhante à forma como
definimos <i>MainActivity.java</i>.

00:03:00.873 --> 00:03:04.480
No arquivo dessa classe de <i>TextView</i>,
temos um monte de código

00:03:04.572 --> 00:03:08.020
que fala do estado da <i>TextView</i>,
bem como dos métodos.

00:03:08.516 --> 00:03:10.953
Ele não diz estado
e métodos exatamente,

00:03:11.335 --> 00:03:15.021
mas contém informações sobre o estado
e informações sobre os métodos.

00:03:16.012 --> 00:03:19.329
Você pode pensar nisso como definir
as regras de como uma <i>TextView</i> se comporta.

00:03:19.938 --> 00:03:25.378
Esta instância de objeto pode conter informações
específicas, como a <i>string</i> de texto Hoje.

00:03:25.730 --> 00:03:27.107
ou o tamanho de texto 18.

00:03:27.760 --> 00:03:31.698
Também podemos usar esta classe
para criar mais instâncias de objetos <i>TextView</i>,

00:03:32.449 --> 00:03:34.369
e estas podiam ter um valor de <i>string</i> diferente.

00:03:34.628 --> 00:03:37.200
Acho que esta poderia
conter um texto que diz Olá,

00:03:37.230 --> 00:03:39.329
e esta poderia conter
texto que diz Adeus.

00:03:39.815 --> 00:03:43.267
Poderiam ter diferentes
tamanhos de fonte, cores, etc.

00:03:44.080 --> 00:03:46.787
Porém, todas são baseadas no modelo de classe.

00:03:47.569 --> 00:03:50.695
Você pode achar difícil distinguir
entre classe e instância de objeto,

00:03:50.898 --> 00:03:51.507
mas tudo bem.

00:03:51.876 --> 00:03:53.218
Leva algum tempo até se acostumar.

00:03:53.730 --> 00:03:54.996
Olhe uma analogia para ajudá-lo.

00:03:55.630 --> 00:03:58.541
Você pode pensar nisso como
a criação da planta de uma casa.

00:03:59.230 --> 00:04:01.926
Pode usar esta planta
para criar casas de verdade.

00:04:02.610 --> 00:04:04.184
Cada casa pode ser um pouco diferente.

00:04:04.461 --> 00:04:06.461
Mas todas elas são baseadas nesta planta.

00:04:06.970 --> 00:04:09.852
Importa notar que a planta em si, não é uma casa.

00:04:10.240 --> 00:04:11.341
É apenas um plano.

00:04:12.070 --> 00:04:16.627
A classe <i>TextView</i> é usada de forma similar
para criar estas instâncias de objetos.

00:04:17.070 --> 00:04:20.491
Então estas são as instâncias
que contêm valores de texto,

00:04:20.500 --> 00:04:22.572
de cores de texto
e de tamanhos de texto.

00:04:23.347 --> 00:04:25.015
Então, como é uma dessas classes?

