WEBVTT
Kind: captions
Language: ko

00:00:00.520 --> 00:00:03.700
자바 코드 안의 XML 리소스를 
레퍼런스할 수 있음을 배웠습니다.

00:00:04.710 --> 00:00:08.680
하지만 리소스와 자바 코드와의
관계는 정확히 무엇일까요?

00:00:08.680 --> 00:00:11.380
전체 앱 상에서는 어떻게 같이
움직이는 것일까요?

00:00:12.460 --> 00:00:15.215
JustJava 앱 아이콘을 클릭하는
데서부터 시작해 봅시다.

00:00:16.335 --> 00:00:18.615
이러면 Main Activity가 열립니다.

00:00:18.615 --> 00:00:21.925
아직은 아무것도 보이지 않네요.
초기화 중이니까요.

00:00:21.925 --> 00:00:25.835
다행히도 복잡한 activity 
초기화 과정의 대부분은

00:00:25.835 --> 00:00:28.565
안드로이드가 자동으로 
실행해 줍니다.

00:00:28.565 --> 00:00:31.995
우리가 신경써야 할 부분은
Main Activity 파일 내에서

00:00:31.995 --> 00:00:34.875
onCreate method 메소드가
자동으로 호출된다는 겁니다.

00:00:34.875 --> 00:00:37.590
이 때 activity가 만들어지는 
것입니다.

00:00:37.590 --> 00:00:40.580
여러 명령이 있는데 
이 중에 중요한 라인은

00:00:40.580 --> 00:00:45.120
setContentView, 그리고 그 다음에
오는 레이아웃 파일의 리소스 ID죠.

00:00:45.120 --> 00:00:47.640
'R.layout.activity_main' 
형태가 됩니다.

00:00:47.640 --> 00:00:52.280
이는 activity 상의 내용 보기가
메인 XML file에서 

00:00:55.720 --> 00:00:59.700
이건 메소드 호출이고 
입력 파라미터는 이 리소스 ID군요.

00:00:59.700 --> 00:01:02.600
내용 보기를 위해 사용할 
레이아웃을 설정하면

00:01:02.600 --> 00:01:07.660
안드로이드 기기가 이를 작동시켜
이 XML 레이아웃 파일을 분석합니다.

00:01:07.660 --> 00:01:09.410
분석한다는 건 이 파일을 읽고

00:01:09.410 --> 00:01:12.490
'이건 직선 레이아웃이군' 이런
식으로 해석하려 한다는 것이죠.

00:01:12.490 --> 00:01:13.570
오, 이건 텍스트뷰네요.

00:01:13.570 --> 00:01:15.270
이건 속성 등을 나타내는 거고요.

00:01:15.270 --> 00:01:18.850
이 파일이 가진 정보를 
읽어내려 하고 있군요.

00:01:18.850 --> 00:01:21.960
안드로이드 기기는 파일을
위에서부터 읽어나갑니다.

00:01:21.960 --> 00:01:24.670
여기서 직선 레이아웃이 있음을
알게 되는 거죠.

00:01:24.670 --> 00:01:29.170
그리고 자바 객체를 확장하여
이 직선 레이아웃을 표시합니다.

00:01:29.170 --> 00:01:30.570
다음 라인에서는

00:01:30.570 --> 00:01:36.120
텍스트뷰를 자식처럼 이렇게 
붙여야 한다는 것 등을 알게 되죠.

00:01:36.120 --> 00:01:39.865
2과에서 살펴본 뷰 계층구조와
비슷하게 되어 가는 군요.

00:01:39.865 --> 00:01:43.125
전에는 말씀드린 적 없지만
이것은 사실

00:01:43.125 --> 00:01:45.265
자바 객체의 계층구조예요.

00:01:45.265 --> 00:01:47.975
이후 동영상에서 자바 객체에 관해
더 자세하게 배우게 될 겁니다.

00:01:47.975 --> 00:01:50.515
지금은 완전히 다 이해하지
않아도 괜찮아요.

00:01:50.515 --> 00:01:53.085
다음 라인에서는 
직선 레이아웃을 위한

00:01:53.085 --> 00:01:55.385
자바 객체 확장이 필요함을
보게 됩니다.

00:01:55.385 --> 00:01:58.855
LinearLayout 역시 여기에
자식처럼 붙게 되죠.

00:01:58.855 --> 00:02:00.480
그 다음이 버튼 엘리먼트입니다.

00:02:00.480 --> 00:02:03.300
이것은 이 LinearLayout에 
자식으로 첨가됩니다.

00:02:03.300 --> 00:02:07.470
우리가 필요한 뷰 계층구조에
필요한 모든 뷰를 확장할 때까지

00:02:07.470 --> 00:02:09.280
이렇게 파일을 아래로 
읽어나가는 겁니다.

00:02:09.280 --> 00:02:13.740
자바 객체 뷰 계층구조가
완성되면, 앱이 작동할 때

00:02:13.740 --> 00:02:15.470
이를 조작하여 변화시킬 수
있게 됩니다.

00:02:16.570 --> 00:02:19.930
여기 텍스트뷰 같은 객체는
스테이트 정보를 담고 있죠.

00:02:19.930 --> 00:02:23.070
텍스트 내용 및 색깔, 크기
같은 정보들이죠.

00:02:23.070 --> 00:02:26.880
객체에는 또한 메소드가 있어서
이를 호출하여 그 내부 스테이트를

00:02:26.880 --> 00:02:29.130
바꿀 수 있습니다.

00:02:29.130 --> 00:02:31.670
예를 들면, 앱이 작동하는 동안
텍스트 내용을 바꿀 수 있어요.

00:02:32.690 --> 00:02:36.700
이 모든 객체와의 상호작용을
객체 지향 프로그래밍이라고 합니다.

00:02:36.700 --> 00:02:40.220
이후 동영상에서 더 자세하게
다루게 될 거예요.

00:02:40.220 --> 00:02:44.230
요약하자면, main activity에서 
이 레이아웃에 setContentView를

00:02:44.230 --> 00:02:49.440
호출하면, 이 레이아웃을 읽고
자바 객체를 확장하게 됩니다.

00:02:49.440 --> 00:02:53.590
이 자바 객체는 앱의 
뷰 계층구조를 형성합니다.

00:02:53.590 --> 00:02:56.920
MainActivity는 이 계층구조를 
파악하여, 여러분이

00:02:56.920 --> 00:03:00.400
MainActivity와 상호작용할 때
이 객체들을 업데이트 합니다.

