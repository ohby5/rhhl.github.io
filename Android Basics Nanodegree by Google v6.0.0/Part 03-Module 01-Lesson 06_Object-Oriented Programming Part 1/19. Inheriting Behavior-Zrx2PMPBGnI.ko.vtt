WEBVTT
Kind: captions
Language: ko

00:00:00.920 --> 00:00:03.410
잠시 Just Java 앱으로 돌아가보죠

00:00:03.410 --> 00:00:07.260
MainActivity 클래스
displayMessage 메소드를 봅시다

00:00:07.260 --> 00:00:09.950
여기서 조금씩 더 이해되기 시작해요

00:00:09.950 --> 00:00:14.350
우리는 이미 orderSummary
텍스트 뷰라는 변수를 만들었어요

00:00:14.350 --> 00:00:16.760
이 변수의 데이터 종류는
텍스트 뷰입니다

00:00:17.790 --> 00:00:19.610
우리는 아직 이 부분을
이해하지 못했어요

00:00:20.740 --> 00:00:23.290
다음 줄에서, 이 텍스트 뷰
개체에서 메소드를 호출해요

00:00:24.650 --> 00:00:28.070
우리는 여기 위에서 선언한
것과 같은 변수 이름을 사용해요

00:00:28.070 --> 00:00:31.830
orderSummaryTextView.setText를
호출합니다

00:00:31.830 --> 00:00:34.290
그리고 메소드의 입력값으로
문자열을 넘깁니다

00:00:35.300 --> 00:00:38.790
이 문자열 메시지는 원래
메시지 메소드를 표시하는

00:00:38.790 --> 00:00:40.200
입력 파라미터로 왔어요

00:00:41.720 --> 00:00:45.250
이제 우리가 이해하지 못한
코드의 이 부분을 파헤쳐봅시다

00:00:45.250 --> 00:00:48.210
findViewByld는 메소드
호출처럼 보이네요

00:00:48.210 --> 00:00:53.530
입력 선언 처럼 보이는 것을 가진
이 괄호 뒤에 따라오기 때문이죠

00:00:53.530 --> 00:00:57.458
하지만 이상하게도, 이 메소드는
이 클래스의 어디에서도 정의되지 않았죠

00:00:57.458 --> 00:01:02.355
이 이름을 더블클릭하고
cmd+F를 누르거나

00:01:02.355 --> 00:01:07.560
윈도우에서 ctrl+F를 누르면
이 파일에서 검색할 수 있어요

00:01:07.560 --> 00:01:10.780
findViewByld 나타난
두 경우가 보이네요

00:01:10.780 --> 00:01:12.790
그들은 비슷한 방법으로 쓰였고요

00:01:12.790 --> 00:01:15.160
하지만 findVIewByld라는
메소드를 보이지 않아요

00:01:16.190 --> 00:01:19.640
앞서 MainActivity 클래스에
있었던 것으로 얘기하자면

00:01:19.640 --> 00:01:23.450
setContentView 호출을 봤죠
하지만 이걸 파일에서 찾으면

00:01:23.450 --> 00:01:26.280
이 또한 MainActivity에
정의되지 않았어요

00:01:27.820 --> 00:01:29.620
그럼 이 메소드들은 어디서 정의될까요?

00:01:30.620 --> 00:01:33.610
MainActivity는 사실
꽤 짧은 파일입니다

00:01:33.610 --> 00:01:35.150
90줄밖에 되지 않죠

00:01:35.150 --> 00:01:38.790
하지만 클래스에는
눈에 보이는 것 이상이 있죠

00:01:38.790 --> 00:01:42.200
코드는 AppCompatActivity를
상속하라고 말합니다

00:01:42.200 --> 00:01:46.010
이것은 MainActivity가
AppCompatActivity의

00:01:46.010 --> 00:01:48.780
기능의 상속이라는 뜻입니다

00:01:49.290 --> 00:01:52.790
당신의 컴퓨터에 ActionBarActivity가
있어도 괜찮아요

00:01:52.790 --> 00:01:55.450
이것의 더 오래된 버전이거든요

00:01:55.450 --> 00:01:58.770
당신이 사용해야 할 최신 버전은
AppCompatActivity입니다

00:01:58.770 --> 00:02:02.210
AppCompatActivity는
더 오래된 Android 기기에서

00:02:02.210 --> 00:02:04.250
이전 호환성 지원을 해줍니다

00:02:04.460 --> 00:02:07.980
AppCompatActivity는
Android 지원 라이브러리의 일부죠

00:02:07.980 --> 00:02:11.740
이는 우리가 오래된
Android기기를 사용할 때도

00:02:11.740 --> 00:02:15.420
Android의 최신 UI 기능을
사용하게 해줍니다

00:02:15.420 --> 00:02:17.940
AppCompatActivity 클래스를
상속함으로써

00:02:17.940 --> 00:02:20.620
우리는 여기
MainActivity 안에서

00:02:20.620 --> 00:02:24.250
모든 기능, 모든 상태,
모든 메소드를 무료로 얻어요

00:02:24.490 --> 00:02:26.980
우리는 여기서 코드를
복사하거나 붙여넣을 필요가 없죠

00:02:26.980 --> 00:02:28.840
그저 그 클래스를 상속하기만 하면 되죠

00:02:30.090 --> 00:02:31.020
관심이 있다면

00:02:31.020 --> 00:02:35.880
AppCompatActivity의
정보를 구글에서 찾을 수 있어요

00:02:35.880 --> 00:02:39.380
AppCompatActivity 클래스에
대한 참고 문서가 여기 있어요

00:02:39.700 --> 00:02:41.920
전 Chrome 확장을 설치했으므로

00:02:41.920 --> 00:02:43.120
소스를 볼 수 있습니다

00:02:44.130 --> 00:02:47.890
이것은 AppCompatActivity
클래스가 정의된 코드입니다

00:02:47.890 --> 00:02:50.360
여기 기능이 많은 걸 볼 수 있지만

00:02:50.360 --> 00:02:54.510
중요한 것은 이것이 작동하는
방법을 이해하지 않아도 된다는 거죠

00:02:54.510 --> 00:02:58.350
당신이 해야 할 일은 App
CompatActivity를 상속할 때

00:02:58.350 --> 00:03:00.320
무료로 이 기능을 모두 얻는 겁니다

00:03:01.010 --> 00:03:03.220
높은 단계에서 이것을
이렇게 가시화할 수 있어요

00:03:03.580 --> 00:03:05.900
이것은 MainActivity의
클래스 정의입니다

00:03:05.900 --> 00:03:08.000
여기 정의된 메소드가 좀 있다고 해요

00:03:08.000 --> 00:03:12.350
AppCompatActivity를 상속하면
우리는 상태에 접근할 수 있고

00:03:12.350 --> 00:03:14.200
AppCompatActivity의
메소드에도 접근할 수 있죠

00:03:14.200 --> 00:03:17.870
그들은 물리적으로 메인 액티비티
클래스에 추가되지 않았지만

00:03:17.870 --> 00:03:19.280
그들이 여기 있는 걸 상상할 수 있어요

00:03:19.280 --> 00:03:22.930
여전히 그 상태와 메소드를
참조할 수 있기 때문이죠

00:03:22.930 --> 00:03:25.840
우리 코드는 그렇게
setContentView나

00:03:25.840 --> 00:03:27.840
findViewByld를 참조합니다

00:03:27.840 --> 00:03:32.240
우리가 그 메소드를 물려받았기에
MainActivity에 그걸 정의하지 않아요

00:03:32.240 --> 00:03:35.110
MainActivity는 기기
화면에 보이지만

00:03:35.110 --> 00:03:39.520
우리는 그걸 물려 받았기 때문에
메인 액티비티 안에 그 코드를 쓰지 않죠

00:03:39.520 --> 00:03:42.750
직접적으로 클래스 내
AppCompatActivity의

00:03:42.750 --> 00:03:46.840
상태나 메소드를 갖고 있지 않지만
그들은 여기 있고 참조할 수 있어요

00:03:46.840 --> 00:03:50.260
무언가 물려받는 것에는
좋은 점과 나쁜 점이 있어요

00:03:50.260 --> 00:03:52.540
가끔 우리는 행동을 물려받지만

00:03:52.540 --> 00:03:54.980
다른 때엔 그걸 약간
수정하고 싶을 거예요

00:03:55.980 --> 00:03:59.900
물려받은 클래스의 행동을
바꾸고 싶다면

00:03:59.900 --> 00:04:02.230
특정 메소드를 오버라이드해야 합니다

00:04:02.230 --> 00:04:07.360
당신이 AppCompatActivity의
이 메소드 버전을 원하지 않는다는 걸

00:04:07.360 --> 00:04:12.100
컴퓨터가 알 수 있도록 @override를
메소드의 상단에 추가할 수 있어요

00:04:12.100 --> 00:04:15.830
하지만, 여기 정의한 메소드
버전을 원한다면요

00:04:15.830 --> 00:04:18.620
그건 까다로운 주제이고
연습이 많이 필요해요

00:04:18.620 --> 00:04:21.500
하지만 우리는
AppCompatActivity 클래스의

00:04:21.500 --> 00:04:23.640
메소드 오버라이딩의 예를 봤어요

00:04:23.640 --> 00:04:25.850
그 메소드는 onCreate입니다

00:04:26.380 --> 00:04:30.650
onCreate 메소드를
메인 액티비티에서 오버라이딩하면

00:04:30.650 --> 00:04:35.380
메소드르 호출했을 때 발생하는 것을
위한 실행을 특정지을 수 있습니다

00:04:35.380 --> 00:04:37.180
이걸 바로 이해하지 못해도 걱정마세요

00:04:37.180 --> 00:04:40.534
객체 지향 프로그래밍
개념 더미의 간략한 요약을

00:04:40.534 --> 00:04:42.350
드리려고 했을 뿐입니다

00:04:42.350 --> 00:04:46.160
당연히 아직 여러분에게
떠다니는 질문이 있을 겁니다

00:04:46.160 --> 00:04:48.930
그걸 완전히 이해하려면
아직 이 주제에 대해서

00:04:48.930 --> 00:04:50.380
더 읽어야 합니다

00:04:50.860 --> 00:04:53.771
MainActivity와
AppCompatActivity 클래스의

00:04:53.771 --> 00:04:58.220
관계를 가시화하는 방법은
클래스 계층 다이어그램을 그리는 거예요

00:04:58.220 --> 00:05:00.480
이건 뷰 계층 다이어그램과 달라요

00:05:00.480 --> 00:05:05.340
뷰 계층 다이어그램은 화면에
보여지는 뷰 나무를 보여주니까요

00:05:05.340 --> 00:05:08.360
클래스 계층 다이어그램은
다른 Java 클래스들 간의

00:05:08.360 --> 00:05:09.780
관계를 보여줍니다

00:05:09.990 --> 00:05:12.860
슈퍼클래스로
AppCompatActivity가 있죠

00:05:12.860 --> 00:05:15.868
MainActivity는 AppCompat
Activity로부터 상속받으므로

00:05:15.868 --> 00:05:18.560
이건 서브클래스입니다

00:05:18.560 --> 00:05:22.200
이 클래스 정의를 언제 보든
어떤 것이 슈퍼클래스로

00:05:22.200 --> 00:05:23.730
정의되어 있든 간에요

00:05:23.970 --> 00:05:25.770
이건 서브클래스입니다

00:05:25.770 --> 00:05:29.070
DetailActivity라는
다른 액티비티를 만들고

00:05:29.070 --> 00:05:32.340
AppCompatActivity를 상속하면
이것이 서브클래스가 되고

00:05:32.340 --> 00:05:33.539
이것은 슈퍼클래스입니다

00:05:34.720 --> 00:05:37.840
Java 클래스 상속의 다른 예가 있어요

00:05:37.840 --> 00:05:40.520
이것에 대해 생각하면,
텍스트 뷰, 이미지 뷰, 버튼 뷰는

00:05:40.520 --> 00:05:44.460
모두 그들에게 공통적인 면을 갖고 있죠

00:05:44.460 --> 00:05:48.070
이 모든 뷰들은 화면에서
너비와 높이를 가집니다

00:05:48.070 --> 00:05:51.330
아직 배우지 않았지만
그들은 가시 상태를 가집니다

00:05:51.330 --> 00:05:54.400
그들은 보이거나 안 보이게 될 수 있죠

00:05:54.400 --> 00:05:58.190
다른 속성들도 있는데요,
그것도 그들 사이에서 공통됩니다

00:05:58.650 --> 00:06:02.370
텍스트 뷰 클래스 안에서
이 속성을 위해 코드를 쓰는 대신

00:06:02.370 --> 00:06:05.590
이미지 뷰 전체로 이걸 복사하고
버튼 클래스에도 그렇게 해요

00:06:05.590 --> 00:06:07.610
우린 좀 더 똑똑한 걸 해요

00:06:07.610 --> 00:06:09.660
우린 뷰 클래스를 만들 수 있죠

00:06:09.980 --> 00:06:13.460
이 뷰들에서 공통 속성을 추출해서

00:06:13.460 --> 00:06:18.990
그걸 이 뷰 클래스 안에 넣으면,
코드는 한 번만 쓰이면 됩니다

00:06:19.730 --> 00:06:22.610
그럼 텍스트 뷰 클래스와
뷰 클래스 사이의 연결은

00:06:22.610 --> 00:06:24.000
어떻게 만들까요?

00:06:24.000 --> 00:06:26.548
상속을 생각한다면, 맞습니다

00:06:26.548 --> 00:06:30.080
TextView Java 파일에서
텍스트 뷰 클래스를 정의합니다

00:06:30.080 --> 00:06:33.240
그렇게 뷰 클래스로부터
이 모든 데이터와 메소드를 상속합니다

00:06:34.270 --> 00:06:37.520
그럼 TextView 클래스 안에
많은 코드를 갖지 않아도 되죠

00:06:37.520 --> 00:06:41.860
기능의 일부가 이미
뷰 클래스 안에 쓰였기 때문이죠

00:06:41.860 --> 00:06:44.390
이미지 뷰와 버튼 클래스에도
같은 방법이 적용됩니다

00:06:44.390 --> 00:06:46.800
많은 코드를 사용하지 않아도 되죠

00:06:46.800 --> 00:06:49.690
이 파일들에서, 우린 단지
View 클래스와 비교해서

00:06:49.690 --> 00:06:52.550
ImageView의 다른 점을
쓰면 됩니다

00:06:53.090 --> 00:06:57.720
이건 델타를 특정짓는 것이고
ImageView 클래스는

00:06:57.720 --> 00:07:01.890
View 클래스와 비교해서 Image
View의 다른 점만 특정지으면 됩니다

00:07:03.840 --> 00:07:06.960
View 클래스로부터 특정 행동을
상속하지 않고 싶다면

00:07:06.960 --> 00:07:11.630
우린 그저 ImageView 클래스나
다른 클래스에서 업데이트 된 행동을

00:07:11.630 --> 00:07:12.820
특정지으면 됩니다

00:07:14.070 --> 00:07:16.440
이 경우, 용어를 상기시키자면

00:07:16.440 --> 00:07:20.039
TextView는 서브클래스이고
View는 슈퍼클래스입니다

00:07:21.430 --> 00:07:24.410
TextView 클래스에 대한
문서로 돌아가보면

00:07:24.410 --> 00:07:26.870
이제 이 부분을 이해해요

00:07:27.310 --> 00:07:29.770
TextView가
View를 상속한다고 하죠

00:07:30.000 --> 00:07:33.330
이제 이것이 View 클래스로부터
상태와 메소드를 상속하는 것을

00:07:33.330 --> 00:07:34.950
의미한다는 것을 압니다

00:07:35.280 --> 00:07:38.030
여기 아래엔 클래스
계층 다이어그램이 있네요

00:07:38.330 --> 00:07:41.884
TextView 클래스가
View 클래스로부터 상속받습니다

00:07:43.730 --> 00:07:46.530
다음으로 뷰 클래스는
Object 클래스로부터 상속받고요

00:07:47.650 --> 00:07:50.710
탐색해보면 다른
클래스도 찾을 수 있어요

00:07:50.710 --> 00:07:54.780
TextView 클래스로부터
상속하는 EditText 같은 거요

00:07:54.780 --> 00:07:57.570
이는 TextView 클래스의
행동을 받고

00:07:57.570 --> 00:08:00.120
이에 더 특정한 기능을 추가해요

00:08:01.290 --> 00:08:03.590
EditText는
TextView로부터 상속받죠

00:08:03.590 --> 00:08:06.720
TextView는 View로부터,
View는 Object로부터요

00:08:06.930 --> 00:08:09.830
이건 클래스 계층 다이어그램입니다

00:08:11.370 --> 00:08:13.950
할게 더 많고
몇 시간 동안 이걸 볼 수 있어요

00:08:13.950 --> 00:08:17.010
TextView 문서 페이지에서
한 가지를 보여드리죠

00:08:17.620 --> 00:08:20.820
setVisibility 메소드를
보여드리고 싶어요

00:08:20.820 --> 00:08:24.350
TextView 클래스 안의 Java
setVisibility 메소드예요

00:08:24.350 --> 00:08:26.860
이건 뷰가 보일지 안 보일지를 정해요

00:08:28.000 --> 00:08:33.240
이 메소드를 클릭하면
이 View 클래스로 데려다줍니다

00:08:33.240 --> 00:08:36.010
이 메소드가 무엇을 하는지 서술했죠

00:08:36.010 --> 00:08:39.860
TextView 개체가 setVisibility
메소드를 가지는 게 보이죠

00:08:39.860 --> 00:08:43.659
하지만 이는 사실 View 클래스에서
상속받았습니다

00:08:43.659 --> 00:08:47.470
View 클래스로부터
이 기능을 무료로 얻었죠

00:08:47.470 --> 00:08:50.930
좋아요, 새 개념을 많이 다뤘죠

00:08:50.930 --> 00:08:55.180
보통 이건 컴퓨터 과학 코스의
한 학기에 퍼져있습니다

00:08:56.040 --> 00:08:58.260
우리는 이제 연습을 조금 해볼텐데

00:08:58.260 --> 00:09:01.170
이것이 당신을 위한
선을 연결해주길 바라요

00:09:01.170 --> 00:09:03.930
하지만 이 개념들을
완전히 습득할 때까지

00:09:03.930 --> 00:09:05.750
더 많은 시간과 연습이 필요합니다

00:09:06.610 --> 00:09:09.700
네, 첫 연습으로, 다른
새 Android 앱을 만드세요

00:09:09.700 --> 00:09:11.530
Just Java 앱을
망치고 싶지 않으니까요

00:09:13.070 --> 00:09:14.640
프로젝트를 만들어서 앱을 실행하세요

00:09:15.790 --> 00:09:18.630
앱을 만들면 MainActivity
파일을 보게 될 겁니다

00:09:18.630 --> 00:09:22.530
MainActivity 파일은 App
CompatActivity로부터 상속합니다

00:09:22.530 --> 00:09:26.060
당신의 Android Studio 버전에서
MainActivity가

00:09:26.060 --> 00:09:28.760
ActionBarActivity로부터
상속해도 괜찮습니다

00:09:28.760 --> 00:09:31.570
그건 AppCompatActivity의
이전 버전이거든요

00:09:32.200 --> 00:09:35.650
이 메소드 오버라이드를 삭제하여
onCreate 메소드가

00:09:35.650 --> 00:09:39.850
AppCompatActivity 클래스에
나타나는 방식으로 돌아갈 겁니다

00:09:40.280 --> 00:09:43.660
이 메소드의 존재는 우리가
onCreate를 위해

00:09:43.660 --> 00:09:46.230
MainActivity의 다른 행동을
원한다고 말해줍니다

00:09:46.230 --> 00:09:49.540
이걸 삭제하면 우리는
AppCompatActivity 클래스의

00:09:49.540 --> 00:09:51.240
기존 행동을 다시 얻게 되죠

00:09:52.000 --> 00:09:53.380
앱을 실행할 때

00:09:53.380 --> 00:09:57.250
처음 실행한 앱과 비교해
어떤 다른 점을 발견했나요?

00:09:57.250 --> 00:09:58.650
이 텍스트 박스에 답을 쓰세요

