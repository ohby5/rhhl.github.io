WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:01.310
Wait.

00:00:01.310 --> 00:00:02.240
&gt;&gt; What's wrong?

00:00:02.240 --> 00:00:04.950
&gt;&gt; When did this turn into
a cooking show all of a sudden?

00:00:04.950 --> 00:00:07.270
&gt;&gt; Since we had to talk about methods?

00:00:07.270 --> 00:00:08.625
&gt;&gt; Care to explain, Rachael Ray?

00:00:08.625 --> 00:00:11.650
&gt;&gt; [LAUGH] Well,
have you ever baked a cake before?

00:00:11.650 --> 00:00:13.570
&gt;&gt; I have eaten a cake before.

00:00:13.570 --> 00:00:14.120
&gt;&gt; Okay.

00:00:14.120 --> 00:00:15.790
Well, then you're fully qualified for
this.

00:00:15.790 --> 00:00:16.360
&gt;&gt; Okay.

00:00:16.360 --> 00:00:20.140
&gt;&gt; All you have to do to bake
a cake is to put in flour, sugar.

00:00:20.140 --> 00:00:20.840
&gt;&gt; The ingredients.

00:00:20.840 --> 00:00:21.351
Okay.
&gt;&gt; The ingredients.

00:00:21.351 --> 00:00:22.210
Yeah.

00:00:22.210 --> 00:00:24.730
And then you follow
the instructions of the recipe.

00:00:24.730 --> 00:00:28.240
&gt;&gt; Okay.
&gt;&gt; And then out comes a cake.

00:00:28.240 --> 00:00:29.950
&gt;&gt; Like this?

00:00:29.950 --> 00:00:31.070
&gt;&gt; Yeah.

00:00:31.070 --> 00:00:31.870
&gt;&gt; Okay.
Well

00:00:31.870 --> 00:00:33.820
connect the analogy to
the methods one more time.

00:00:33.820 --> 00:00:35.265
&gt;&gt; Okay.
Sure so for

00:00:35.265 --> 00:00:37.185
a method you can put in inputs.

00:00:37.185 --> 00:00:39.955
&gt;&gt; Like we did the quantity for
the display method?

00:00:39.955 --> 00:00:43.545
&gt;&gt; Yeah, and then you execute
the instructions of the method.

00:00:43.545 --> 00:00:46.340
&gt;&gt; Okay, almost like the recipe for
making a cake?

00:00:46.340 --> 00:00:46.955
&gt;&gt; Mm-hm.

00:00:46.955 --> 00:00:48.840
Then you can have
the output value returned.

00:00:48.840 --> 00:00:51.873
&gt;&gt; Outputs, they are delicious.

00:00:51.873 --> 00:00:55.660
&gt;&gt; [LAUGH]
&gt;&gt; Let's look up more information

00:00:55.660 --> 00:00:58.220
about input parameters for methods.

00:00:58.220 --> 00:01:01.460
I'm going to do a Google search for
Jjava method parameter.

00:01:01.460 --> 00:01:04.250
The first link looks good so
I'm going to click on it.

00:01:04.250 --> 00:01:08.240
Now this article talks about
passing information to a method.

00:01:08.240 --> 00:01:12.270
Here's a code snippet that computes
the monthly payments for a home loan.

00:01:12.270 --> 00:01:16.850
It has four input parameters,
loan amount, interest rate, future value

00:01:16.850 --> 00:01:20.440
of the loan, as well as the number
periods of the length of the loan.

00:01:20.440 --> 00:01:24.680
And then inside this method we see
that we can use these input parameters

00:01:24.680 --> 00:01:28.100
simply as variables to do
our math calculations.

00:01:28.100 --> 00:01:29.710
When we call the compute payment method,

00:01:29.710 --> 00:01:33.890
we have to make sure we pass in
the inputs in this specific order.

00:01:33.890 --> 00:01:37.130
So the loan amount has to go first,
and then the rate and so on.

00:01:37.130 --> 00:01:38.480
For the quiz in this section,

00:01:38.480 --> 00:01:41.520
you'll have the chance to review
this article in more detail.

00:01:41.520 --> 00:01:43.970
Within the main activity
of the desk Java app,

00:01:43.970 --> 00:01:46.990
we're going to be modifying
the display quantity method and

00:01:46.990 --> 00:01:49.800
the input parameter to
give you some practice.

00:01:49.800 --> 00:01:52.680
Notice that in the decrement
method of our app,

00:01:52.680 --> 00:01:54.880
what we call the display
quantity method,

00:01:54.880 --> 00:01:58.670
we're passing the quantity variable
over as input to this method.

00:01:58.670 --> 00:02:01.110
But the input parameter
is called 'number', so

00:02:01.110 --> 00:02:04.420
whenever we want to refer to this input,
we just have to say number.

00:02:04.420 --> 00:02:07.880
Now technically we could have used
the global quantity variable within this

00:02:07.880 --> 00:02:11.150
method instead of passing
it as an input parameter.

00:02:11.150 --> 00:02:14.430
but for the purposes of teaching
you about input parameters,

00:02:14.430 --> 00:02:16.370
let's just leave it like this.

00:02:16.370 --> 00:02:19.480
I can change this call to
the display quantity method so

00:02:19.480 --> 00:02:21.300
it passes input, the number 30.

00:02:21.300 --> 00:02:27.090
This is valid because it still
matches the input data type.

00:02:27.090 --> 00:02:29.430
So in the decrement method when
we call it display quantity,

00:02:29.430 --> 00:02:32.750
it will jump down here and
it will execute these instructions, and

00:02:32.750 --> 00:02:35.320
the variable number will
have the value of 30.

00:02:35.320 --> 00:02:40.140
I'll run it on my device to show you,
so now when I run the minus button on my

00:02:40.140 --> 00:02:43.090
app, it will display
a quantity of 30 here.

00:02:43.090 --> 00:02:44.390
So let me try that.

00:02:45.410 --> 00:02:47.970
There.
And it actually happened like that.

00:02:47.970 --> 00:02:52.380
I can also create a different variable
and pass that as an input to the method.

00:02:52.380 --> 00:02:55.560
Here I've created a local variable
called some quantity, and

00:02:55.560 --> 00:02:56.610
I initialized it to 100.

00:02:56.610 --> 00:02:59.770
I passed this variable
as input to this method,

00:02:59.770 --> 00:03:04.290
and now the number variable
inside here has a value of 100.

00:03:04.290 --> 00:03:06.350
Let me run this on the device.

00:03:06.350 --> 00:03:10.224
Now I expect when I hit the minus
button the quantity will update to 100.

00:03:11.280 --> 00:03:12.120
And it does.

00:03:12.120 --> 00:03:14.630
These are just some things
you can do to experiment with

00:03:14.630 --> 00:03:17.560
passing in different inputs to a method.

00:03:17.560 --> 00:03:19.510
As you work with input parameters,

00:03:19.510 --> 00:03:22.680
another term that you might
come across is arguments.

00:03:22.680 --> 00:03:24.000
When you call a method,

00:03:24.000 --> 00:03:27.570
the inputs being passed to that
method are called the arguments.

00:03:27.570 --> 00:03:28.730
Now this is kind of a funny word.

00:03:28.730 --> 00:03:31.630
Because when you think of arguments,
you think of people yelling and

00:03:31.630 --> 00:03:32.510
cursing at each other.

00:03:32.510 --> 00:03:34.310
But this is not like that.

00:03:34.310 --> 00:03:37.220
Arguments are simply the inputs
being passed to a method.

00:03:37.220 --> 00:03:42.150
Input parameters are the actual
inputs in your method declaration and

00:03:42.150 --> 00:03:44.550
those are the variables that
are used within your method.

00:03:44.550 --> 00:03:48.060
So that's a slight difference between
input parameter and arguments.

00:03:48.060 --> 00:03:49.790
In any case, go ahead and
read the article and

00:03:49.790 --> 00:03:53.040
the instructor notes
about method parameters.

00:03:53.040 --> 00:03:55.850
Then go ahead and
experiment with the code in your app.

00:03:55.850 --> 00:03:58.650
First try to rename
the number input parameter

00:03:58.650 --> 00:04:01.380
within the display quantity
method declaration.

00:04:01.380 --> 00:04:03.850
Just simply give it
a different variable name.

00:04:03.850 --> 00:04:07.740
Then go ahead and fix any errors,
and then run the app again.

00:04:07.740 --> 00:04:10.660
For the next test, go ahead and
change the data type

00:04:10.660 --> 00:04:15.280
of the number input parameter from
an int to something else like String.

00:04:15.280 --> 00:04:18.660
Observe what happens and
then go ahead and undo the change.

00:04:18.660 --> 00:04:21.269
If you want to experiment with
other things, go right ahead.

00:04:21.269 --> 00:04:22.690
For example, if you have a question,

00:04:22.690 --> 00:04:25.560
what would happen if I do x,
then just go ahead and try it.

