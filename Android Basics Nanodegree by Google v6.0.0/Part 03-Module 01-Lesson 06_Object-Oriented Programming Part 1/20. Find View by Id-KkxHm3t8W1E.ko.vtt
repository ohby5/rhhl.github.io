WEBVTT
Kind: captions
Language: ko

00:00:00.430 --> 00:00:02.969
저스트 자바 앱의 [main activity]로 
돌아가 보도록 합시다.

00:00:02.969 --> 00:00:06.190
메시지 표시 [method]를 
분명히 살펴보았고

00:00:06.190 --> 00:00:08.570
이곳의 모든 사항들을 
확인하였습니다.

00:00:08.570 --> 00:00:13.870
비록 [findViewById] [method]가 이 
클래스 내에서 규정되지 않더라도 이제

00:00:13.870 --> 00:00:18.740
이것이 실질적으로 [AppCompatActivity]의 
슈퍼 클래스에서 규정되었음을 알고 있습니다.

00:00:18.740 --> 00:00:20.440
[setContentView]와 같습니다.

00:00:20.440 --> 00:00:23.820
이것은 [AppCompatActivity] 클래스 
내에서 규정됩니다.

00:00:23.820 --> 00:00:26.710
하지만 실제로 이 [method]에서 
발생되는 것은 무엇이고 [resource

00:00:26.710 --> 00:00:29.300
ID]를 입력하여야 하는 이유는 무엇입니까?

00:00:29.300 --> 00:00:31.930
여분의 괄호를 넣어야 하는 
이유는 무엇입니까?

00:00:31.930 --> 00:00:34.410
이 질문에 답하기 위해, 지금까지 
우리가 배운 내용들을 요약하고 이

00:00:34.410 --> 00:00:37.720
코드들이 이곳에 존재하는 이유를 
알려드리겠습니다.

00:00:38.870 --> 00:00:40.350
이 표를 기억하십니까?

00:00:40.350 --> 00:00:44.910
장치의 앱 아이콘을 클릭하면
[main activity]가 열립니다.

00:00:44.910 --> 00:00:48.650
코드 내에서 [main activity]의 
[onCreate] [method]는 시스템에 의해

00:00:48.650 --> 00:00:49.770
호출됩니다.

00:00:49.770 --> 00:00:53.220
이 [method] 내에 [resource] 레이아웃 
ID가 더해진 [setContentView]라는

00:00:53.220 --> 00:00:55.340
[method]를 갖습니다.

00:00:55.340 --> 00:00:59.710
앞선 연습에서 [content view] 설정을 위해 
하나의 [text view]를 입력하였습니다.

00:00:59.710 --> 00:01:01.950
하지만 앱에 하나 이상의 뷰가 
필요합니다.

00:01:01.950 --> 00:01:04.650
따라서 레이아웃 [resource ID]를 
입력합니다.

00:01:04.650 --> 00:01:06.980
이것은 XML에 표시해 줍니다.

00:01:06.980 --> 00:01:09.560
[content view]를 설정하고 나면, 
[activity]가 실행되고

00:01:09.560 --> 00:01:13.200
XML 레이아웃 파일을 찾아
각 행의 내용을 확인합니다.

00:01:13.200 --> 00:01:18.140
각 뷰에서, 이를 확장하거나
이에 대한 자바 객체를 만듭니다.

00:01:18.140 --> 00:01:19.860
이것은 XML 파일을 확인하고 나서

00:01:19.860 --> 00:01:23.040
이 자바 객체의 전체 구조를 
만듭니다.

00:01:23.040 --> 00:01:27.090
이들 각 뷰를 확장할 때, 
이는 실질적으로 생성자,

00:01:27.090 --> 00:01:31.600
[NewTextView]나 [NewLinearLayout]를 
호출하며 그 다음 자바 객체에 이 모든

00:01:31.600 --> 00:01:34.760
속성들을 입력하고 이를 통해 정확히 
설정되게 됩니다.

00:01:34.760 --> 00:01:38.700
[NewTextView]나 [NewLinearLayout]에 대한 
코드를 작성하고 폰트 크기를 설정할

00:01:38.700 --> 00:01:40.650
필요가 없음을 기억하십시오.

00:01:40.650 --> 00:01:44.540
모든 것들은 [activity]의 확장 과정을 
통해 다뤄집니다.

00:01:44.540 --> 00:01:48.290
앱 구동 그리고 예를 들어, 
문자나 버튼 변경과 같은 사항의

00:01:48.290 --> 00:01:49.830
변경 시 이러한 뷰들의 상호 작용을

00:01:49.830 --> 00:01:54.480
위해 이러한 자바 객체를 검색해야 
합니다.

00:01:54.480 --> 00:01:58.560
이들을 검색하고 나면, [main 
activity]에 변수로 저장할 수 있습니다.

00:01:58.560 --> 00:02:01.360
[scratch]로부터 새로운 [TextView]를 
만들어 내는 것이 아님을 명심하십시오.

00:02:01.360 --> 00:02:04.310
단지 뷰구조에서 기존의 것을 
검색하는 것입니다.

00:02:06.060 --> 00:02:08.639
이들은 [main activity]에서 지금까지 
사용한 변수입니다.

00:02:08.639 --> 00:02:13.160
수량, 가격, 가격 메시지에 대한 변수가 
있습니다.

00:02:13.160 --> 00:02:15.830
여기에는 지역과 전역 변수들이 섞여 
있습니다.

00:02:15.830 --> 00:02:19.520
뷰 구조내 뷰들의 상호작용을 위해, 
이러한 특정 뷰들을 참조하는

00:02:19.520 --> 00:02:21.149
변수들을 만들어야 합니다.

00:02:22.500 --> 00:02:25.765
예를 들어, 이곳의 [TextView]를 
참조하는 수량 [text view]라는 변수를

00:02:25.765 --> 00:02:28.580
만들 수 있습니다.

00:02:28.580 --> 00:02:31.340
UI의 + 혹은 - 버튼을 클릭하면

00:02:31.340 --> 00:02:34.340
다른 숫자들을 나타내도록 [TextView]의
문자를 변경할 수 있습니다.

00:02:36.220 --> 00:02:39.340
또한 이 [TextView]를 나타내는 
[orderSummaryTextView]라는 변수를

00:02:39.340 --> 00:02:41.730
갖습니다.

00:02:41.730 --> 00:02:44.590
주문 버튼을 클릭하면
[orderSummaryTextView]가

00:02:44.590 --> 00:02:47.660
새로운 주문 요약을 보여주는 
내용으로 문자를 변경할 것입니다.

00:02:47.660 --> 00:02:51.680
따라서 이러한 뷰의 일부가 앱 구동 시 
UI 변경에 유용하다는 것을 나타내는

00:02:51.680 --> 00:02:55.440
변수를 갖도록 하는 방법을 살펴볼 수 
있습니다.

00:02:55.440 --> 00:02:59.430
하지만 이곳의 변수와 
이 [TextView]의 사이를

00:02:59.430 --> 00:03:00.790
어떻게 연결합니까?

00:03:00.790 --> 00:03:03.780
이곳의 [orderSummaryTextView]와 
이 [TextView] 사이를

00:03:03.780 --> 00:03:04.495
어떻게 연결합니까?

00:03:06.250 --> 00:03:08.139
레이아웃 XML 파일로 돌아가 봅시다.

00:03:08.139 --> 00:03:11.699
뷰 ID들을 특정 뷰들에 배정하였던
것을 기억하십니까?

00:03:12.953 --> 00:03:17.400
이 [TextView]에, quantity.text.view의
뷰 ID를 부여하였습니다.

00:03:17.400 --> 00:03:21.340
이 뷰에, order.summary.text.view.라는
ID를 부여하였습니다.

00:03:21.340 --> 00:03:24.240
뷰들에 ID를 배정하는 것은 
선택 사항 이고

00:03:24.240 --> 00:03:28.760
나중에 참조할 뷰에 대해서만 뷰 ID를
부여하면 됩니다.

00:03:28.760 --> 00:03:33.180
예를 들어, 모든 것에 뷰 ID를 배정할 
수 있지만 이는 불필요한 것입니다.

00:03:33.180 --> 00:03:37.470
나중에 자바 코드에서 참조할 두 
뷰들에만 부여하면 됩니다.

00:03:37.470 --> 00:03:39.860
이 두 뷰들에 ID를 부여하여
봅시다.

00:03:40.880 --> 00:03:43.900
좋습니다. 뷰들에 
뷰 ID를 부여하였고

00:03:43.900 --> 00:03:46.700
나중에 이들을 자바 코드에서 
참조할 수 있게 되었습니다.

00:03:46.700 --> 00:03:51.350
또한 이 뷰들을 다룰 수 있도록 
이 뷰들을 나타낼

00:03:51.350 --> 00:03:53.740
변수가 필요합니다.

00:03:53.740 --> 00:03:57.680
이 변수들과 
특정 자바 객체를

00:03:57.680 --> 00:04:01.160
어떻게 연결하는지를 
아직 잘 모릅니다.

00:04:01.160 --> 00:04:04.700
이 변수와 자바 객체도 마찬가지 
입니다.

00:04:04.700 --> 00:04:08.820
[AppCompatActivity] 클래스에서
특별한 방법을 보여주고자 합니다.

00:04:08.820 --> 00:04:12.560
이것은 [findViewById]이고
[resource ID]로 입력됩니다.

00:04:13.810 --> 00:04:16.290
[findViewById] [method]는

00:04:16.290 --> 00:04:21.220
입력된 ID에 상응하는 뷰를 
검색합니다.

00:04:21.220 --> 00:04:23.790
[activity]는 [onCreate] [method]에서

00:04:23.790 --> 00:04:28.890
수행되는 XML의 뷰 구조에서 이 뷰를 
검색합니다.

00:04:28.890 --> 00:04:30.560
이처럼 [activity] [onCreate]

00:04:30.560 --> 00:04:34.350
[method]가 뷰 구조를 설정하고 
[findViewById] [method]가 실행되어

00:04:34.350 --> 00:04:39.405
뷰 구조 내에서 뷰를 검색하는 것을 
이미 언급하였습니다.

00:04:39.405 --> 00:04:43.615
이 [method]의 반환 값은
[type View]의 객체 입니다.

00:04:43.615 --> 00:04:47.415
좌측 행은 이 모든 [methods]에 대한 
반환 값을 보여줍니다.

00:04:47.415 --> 00:04:51.815
이는 [activity] 코드에서 
[findViewById]를 호출할 수 있음을

00:04:51.815 --> 00:04:56.670
의미하고 이는 우리가 원하는 뷰의 
[resource ID]에 입력된 뷰 객체를

00:04:56.670 --> 00:04:59.980
반환하며 이를 [activity] 내에 변수로 
저장할 수 있습니다.

00:05:02.170 --> 00:05:04.300
[MainActivity] 자바 코드는 이처럼 
진행될 것입니다.

00:05:05.360 --> 00:05:07.230
[findViewById]를 호출할 수 있고

00:05:07.230 --> 00:05:12.140
우리가 원하는 뷰의 [resource ID]를 
입력하게 됩니다.

00:05:12.140 --> 00:05:15.050
이 [TextView]에 order.summary.text.view 
ID를 부여하였습니다.

00:05:15.050 --> 00:05:19.370
따라서 이곳에서 이를 
R.id.order_summary_text_view로 나타냅니다.

00:05:19.370 --> 00:05:23.490
이 [method]는 실행되어 전체 뷰 
구조를 검색하고 이 ID의 뷰를 찾을

00:05:23.490 --> 00:05:24.930
것입니다.

00:05:26.110 --> 00:05:31.030
그리고 이 자바 객체를 이 [method]의 
반환 값으로 반환할 것입니다.

00:05:31.030 --> 00:05:34.790
반환 값을 orderSummaryTextView인 
좌측의 이 변수에 저장할 수 있습니다.

00:05:34.790 --> 00:05:39.290
그리고 이는 [type view]의 변수가 
됩니다.

00:05:39.290 --> 00:05:42.610
따라서 이것은 뷰를 반환하고
이를 뷰 변수의 내부에 저장합니다.

00:05:42.610 --> 00:05:47.280
또한 나중에 [MainActivity]에서, 
[findViewById]를 호출할 수 있습니다.

00:05:47.280 --> 00:05:53.120
그리고 이곳에서 이 [TextView]를 
나타내는 [resource ID]를 입력합니다.

00:05:53.120 --> 00:05:55.610
이것은 수량 피커의 
[TextView] 입니다.

00:05:55.610 --> 00:05:58.847
이것이 호출되면, [activity]는 
뷰 구조를 검색하고

00:05:58.847 --> 00:06:01.460
이 ID를 가진 뷰를 찾을 것입니다.

00:06:01.460 --> 00:06:03.265
그리고 이것은 이 뷰를 반환하고

00:06:03.265 --> 00:06:07.190
우리는 이를 quantity_text_view 변수에 
저장할 수 있게 됩니다.

00:06:07.190 --> 00:06:09.490
이 변수는 또한 
뷰의 데이터 유형입니다.

00:06:10.490 --> 00:06:13.440
이것은 [MainActivity] 내에 
[quantityTextView]와

00:06:13.440 --> 00:06:17.190
[orderSummaryTextView] 변수를 갖는 
방법을 설명합니다.

00:06:17.190 --> 00:06:20.800
그리고 이 변수들은 뷰 구조 내의 자바 
객체를 연결할 수 있습니다.

00:06:20.800 --> 00:06:21.396
참고로,

00:06:21.396 --> 00:06:25.460
좌측 행의 이 각 변수들에 대한 데이터 
유형을 이곳에 나열하였습니다.

00:06:26.690 --> 00:06:29.750
따라서 이 두 변수들은 이곳에 규정된 
것과 같이 [type view]를 갖습니다.

