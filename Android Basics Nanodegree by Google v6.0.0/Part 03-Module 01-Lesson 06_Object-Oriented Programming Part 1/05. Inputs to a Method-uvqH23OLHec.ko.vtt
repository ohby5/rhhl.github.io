WEBVTT
Kind: captions
Language: ko

00:00:00.350 --> 00:00:01.350
잠깐만요.

00:00:01.350 --> 00:00:02.350
&gt;&gt; 무슨 일이예요?

00:00:02.350 --> 00:00:04.950
&gt;&gt; 우리, 언제부터 
요리 프로그램을 하고 있는 거죠?

00:00:04.950 --> 00:00:07.270
&gt;&gt; 메소드에 관한 얘기 할 때부터?

00:00:07.270 --> 00:00:08.625
&gt;&gt; Rachael Ray씨, 설명 좀 해주시죠?

00:00:08.625 --> 00:00:11.650
&gt;&gt; [LAUGH] 음,
케이크 구워 본 적 있으세요?

00:00:11.650 --> 00:00:13.570
&gt;&gt; 먹어본 적이야 있죠.

00:00:13.570 --> 00:00:14.120
&gt;&gt; 알겠어요.

00:00:14.120 --> 00:00:15.790
그럼, 자격은 충분해요.

00:00:15.790 --> 00:00:16.360
&gt;&gt; 좋아요.

00:00:16.360 --> 00:00:20.140
&gt;&gt; 케이크를 구우려면
밀가루, 설탕을 넣기만 하면 되요.

00:00:20.140 --> 00:00:20.840
&gt;&gt; 재료들 말이죠.

00:00:20.840 --> 00:00:21.351
좋아요.
&gt;&gt; 네, 재료요.

00:00:21.351 --> 00:00:22.210
예.

00:00:22.210 --> 00:00:24.730
그리고 레시피에 나온 대로
따라가는 거죠.

00:00:24.730 --> 00:00:28.240
&gt;&gt; 좋아요.
&gt;&gt; 그러면 케이크가 되는 거예요.

00:00:28.240 --> 00:00:29.950
&gt;&gt; 이렇게요?

00:00:29.950 --> 00:00:31.070
&gt;&gt; 그래요.

00:00:31.070 --> 00:00:31.870
&gt;&gt; 좋아요.
음,

00:00:31.870 --> 00:00:33.820
이 비유를 메소드에 다시 한 번만
연결해 설명해 주세요.

00:00:33.820 --> 00:00:35.265
&gt;&gt; 좋아요.
메소드를 만들려면

00:00:35.265 --> 00:00:37.185
입력을 해야 하잖아요.

00:00:37.185 --> 00:00:39.955
&gt;&gt; 디스플레이 메소드에
수량값을 넣은 것처럼 말이죠?

00:00:39.955 --> 00:00:43.545
&gt;&gt; 그래요, 그리고 나서
메소드의 명령을 수행하는 거예요.

00:00:43.545 --> 00:00:46.340
&gt;&gt; 알겠어요, 그러니까 케이크를
굽기 위한 레시피처럼 말이죠?

00:00:46.340 --> 00:00:46.955
&gt;&gt; 으-흠.

00:00:46.955 --> 00:00:48.840
그러면 출력이 
리턴값으로 나오는 거죠.

00:00:48.840 --> 00:00:51.873
&gt;&gt; 출력이라, 맛있네요.

00:00:51.873 --> 00:00:55.660
&gt;&gt; [LAUGH]
&gt;&gt; 메소드에 들어가는

00:00:55.660 --> 00:00:58.220
입력 파라미터에 대해 더 알아보죠.

00:00:58.220 --> 00:01:01.460
자바 메소드 파라미터에 대해
구글 검색을 해볼께요.

00:01:01.460 --> 00:01:04.250
처음 나온 링크가 괜찮아 보이네요.
클릭해보죠.

00:01:04.250 --> 00:01:08.240
이 글은 메소드에 정보를 전달하는
법에 관한 내용이군요.

00:01:08.240 --> 00:01:12.270
여기 나온 짧은 코드는 주택 융자금 
상환 월부금 계산을 하는 건데요.

00:01:12.270 --> 00:01:16.850
입력 파라미터가 4개 있군요.
상환금액, 이자율, 융자금 미래가치,

00:01:16.850 --> 00:01:20.440
그리고 융자 상환 기간 수치입니다.

00:01:20.440 --> 00:01:24.680
이 메소드를 보시면 
이 입력 파라미터를 변수로 사용해서

00:01:24.680 --> 00:01:28.100
계산을 할 수 있음을 알 수 있습니다.

00:01:28.100 --> 00:01:29.710
상환금 계산 메소드를 호출하면,

00:01:29.710 --> 00:01:33.890
이 정확한 순서대로 입력해야 합니다.

00:01:33.890 --> 00:01:37.130
맨 처음이 상환금액이고 그 다음이
이자율, 이런 식으로 말이죠.

00:01:37.130 --> 00:01:38.480
이 파트에 낸 퀴즈를 풀려면,

00:01:38.480 --> 00:01:41.520
이 글 전체를 자세히 읽어보시는 게
좋을 겁니다.

00:01:41.520 --> 00:01:43.970
데스크 자바 앱의 
메인 액티비티 상에서,

00:01:43.970 --> 00:01:46.990
수량 디스플레이 메소드와 
입력 파라미터를 수정해서

00:01:46.990 --> 00:01:49.800
여러분에게 실습할 수 있는 
기회를 드릴 거예요.

00:01:49.800 --> 00:01:52.680
우리 앱에서 디스플레이 수량 
메소드라고 부르는 감소 메소드에선

00:01:54.880 --> 00:01:58.670
입력한다는 사실을 기억하세요.

00:01:58.670 --> 00:02:01.110
하지만 입력 패러미터 이름이 
'number'이므로

00:02:01.110 --> 00:02:04.420
이 입력치를 가리킬 때 역시 
number라고 지칭해 주어야 합니다.

00:02:04.420 --> 00:02:07.880
기술적으로는, 
입력 파라미터로 전달하는 대신에

00:02:07.880 --> 00:02:11.150
이 메소드 내의 글로벌 수량 변수를 
사용할 수도 있습니다.

00:02:11.150 --> 00:02:14.430
하지만 여러분께 입력 파라미터에 대해 
알려드리는 게 목적이기 때문에,

00:02:14.430 --> 00:02:16.370
그냥 이대로 두기로 하죠.

00:02:16.370 --> 00:02:19.480
이 호출문을 
디스플레이 수량 메소드로 바꿔

00:02:19.480 --> 00:02:21.300
숫자 30을 
입력으로 전달할 수 있습니다.

00:02:21.300 --> 00:02:27.090
입력 데이터 타입에 부합하므로
이렇게 해도 괜찮습니다.

00:02:27.090 --> 00:02:29.430
디스플레이 수량이라 부르는
이 감소 메소드에서는,

00:02:29.430 --> 00:02:32.750
이 쪽 아래로 점프해서 
이 명령들을 수행한 후에

00:02:32.750 --> 00:02:35.320
변수 수치가 30이 되는 것입니다.

00:02:35.320 --> 00:02:40.140
이걸 제 기기에서 작동시켜 보여드리죠.
앱에서 마이너스 버튼을 누르면

00:02:40.140 --> 00:02:43.090
여기에 30이라는 수량이 표시됩니다.

00:02:43.090 --> 00:02:44.390
한 번 해보죠.

00:02:45.410 --> 00:02:47.970
여기 보이시죠.
실제로는 이렇게 해서 나오는 수치입니다.

00:02:47.970 --> 00:02:52.380
다른 변수를 만들어서 이를 메소드에
입력할 수도 있습니다.

00:02:52.380 --> 00:02:55.560
여기에 some quantity라는 
로컬 변수를 만들었어요. 그리고

00:02:55.560 --> 00:02:56.610
100으로 초기화했습니다.

00:02:56.610 --> 00:02:59.770
이 변수를 메소드에 
입력치로 전달했어요.

00:02:59.770 --> 00:03:04.290
이제 이 안에 있는 수치 변수값이
100이 되었습니다.

00:03:04.290 --> 00:03:06.350
기기에서 작동해 보죠.

00:03:06.350 --> 00:03:10.224
마이너스 버튼을 누르면 수량이
100으로 업데이트 될 겁니다.

00:03:11.280 --> 00:03:12.120
보시는 대로요.

00:03:12.120 --> 00:03:14.630
여기 있는 것들은 
입력치를 달리해서

00:03:14.630 --> 00:03:17.560
메소드에 시험 삼아 
전달해 보실 수 있어요.

00:03:17.560 --> 00:03:19.510
입력 파라미터를 사용하다 보면,

00:03:19.510 --> 00:03:22.680
아규먼트(argument)라는 용어를
접하게 되실 겁니다.

00:03:22.680 --> 00:03:24.000
메소드를 호출할 때,

00:03:24.000 --> 00:03:27.570
전달되는 입력치를 
아규먼트라고 합니다.

00:03:27.570 --> 00:03:28.730
어찌 보면 재미있는 표현이죠.

00:03:28.730 --> 00:03:31.630
아규먼트라는 말을 생각해 보면,
사람들이 소리지르거나 서로한테

00:03:31.630 --> 00:03:32.510
욕하는 장면이 떠오르잖아요.

00:03:32.510 --> 00:03:34.310
하지만 여기서는 아닙니다.

00:03:34.310 --> 00:03:37.220
아규먼트란 단순히 메소드에 전달되는
입력치를 뜻하는 용어니까요.

00:03:37.220 --> 00:03:42.150
입력 파라미터는 메소드 선언에
들어가는 실제 입력이며

00:03:42.150 --> 00:03:44.550
메소드 안에서 사용하는 변수입니다.

00:03:44.550 --> 00:03:48.060
따라서 입력 파라미터와 아규먼트는
약간의 차이가 있는 것이죠.

00:03:48.060 --> 00:03:49.790
어쨌든 글을 계속 읽어보죠. 
작성자는 여기서

00:03:49.790 --> 00:03:53.040
메소드 파라미터에 관해 
언급하고 있는데요.

00:03:53.040 --> 00:03:55.850
해당 코드를 여러분 앱으로 한번
실험해 보세요.

00:03:55.850 --> 00:03:58.650
먼저 number라는 이름을 
디스플레이 수량 메소드 선언에 있는 

00:04:01.380 --> 00:04:03.850
변수명만 바꿔 주면 됩니다.

00:04:03.850 --> 00:04:07.740
그리고 에러 발생시 이를 수정하고
앱에서 작동시켜 보세요.

00:04:07.740 --> 00:04:10.660
다음 테스트는, 입력 파라미터 수치의 
데이터 종류를 바꿔보는 겁니다.

00:04:10.660 --> 00:04:15.280
int에서 String 같이 말이죠.

00:04:15.280 --> 00:04:18.660
그러면 어떻게 되는지 확인해본 후
바꿨던 내용을 원래대로 되돌리세요.

00:04:18.660 --> 00:04:21.269
다른 걸로도 시험해보고 싶으시다면
얼마든지 좋습니다.

00:04:21.269 --> 00:04:22.690
예를 들어, 이러이러하게 해보면
어떻게 될지가 궁금하시다면

00:04:22.690 --> 00:04:25.560
망설이지 말고 직접 해보세요.

