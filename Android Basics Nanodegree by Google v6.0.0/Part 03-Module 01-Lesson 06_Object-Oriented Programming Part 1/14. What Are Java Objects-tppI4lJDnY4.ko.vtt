WEBVTT
Kind: captions
Language: ko

00:00:00.490 --> 00:00:01.635
이 박스들 기억하세요?

00:00:01.635 --> 00:00:02.809
&gt;&gt; 무슨 박스 말인가요?

00:00:02.809 --> 00:00:04.090
&gt;&gt; 이거요.

00:00:04.090 --> 00:00:06.910
&gt;&gt; 아!
&gt;&gt; 이제 기억나세요?

00:00:06.910 --> 00:00:07.480
&gt;&gt; 오 예, 예.

00:00:07.480 --> 00:00:08.260
이제 기억났어요.

00:00:08.260 --> 00:00:10.380
변수라고 하잖아요.
특정한 값을 저장할 수 있는 곳이죠.

00:00:10.380 --> 00:00:10.930
맞아요. 그리고

00:00:10.930 --> 00:00:15.020
이 변수들을 여러 개 조합해서 
자바 객체를 만들 수 있죠.

00:00:15.020 --> 00:00:16.790
&gt;&gt; 오, 그러니까 두 개 이상의 
변수를 가지고

00:00:16.790 --> 00:00:18.420
더 큰 뭔가를 만들 수 있다는 말이죠.

00:00:18.420 --> 00:00:19.709
&gt;&gt; 맞아요.
&gt;&gt; 알겠어요

00:00:19.709 --> 00:00:21.751
&gt;&gt; [SOUND] 텍스트뷰처럼 말이죠.

00:00:21.751 --> 00:00:23.960
&gt;&gt; 그래요.
이제 정수형 변수를 만들 수 있어요.

00:00:23.960 --> 00:00:25.640
&gt;&gt; 이건 폰트 사이즈고요.

00:00:25.640 --> 00:00:26.210
&gt;&gt; 맞아요.

00:00:26.210 --> 00:00:27.752
&gt;&gt; 알겠어요.
[SOUND]

00:00:27.752 --> 00:00:28.637
&gt;&gt; 이렇게 문자형 변수를

00:00:28.637 --> 00:00:29.460
가질 수도 있어요.

00:00:29.460 --> 00:00:31.830
&gt;&gt; 문자형 변수 안에는 실제 텍스트가
들어가는 거네요.

00:00:31.830 --> 00:00:36.240
&gt;&gt; 그래요, 텍스트뷰 안에 
스테이트 형태로 들어갈 수 있어요.

00:00:36.240 --> 00:00:38.970
&gt;&gt; 그리고 다음에 등장하는 
다양한 메소드를 이용해서

00:00:38.970 --> 00:00:39.900
이 변수들과 교류할 수 있는 거로군요.

00:00:39.900 --> 00:00:40.500
&gt;&gt; 바로 그래요.

00:00:40.500 --> 00:00:41.290
&gt;&gt; 좋아요.
한 번 해봅시다.

00:00:42.480 --> 00:00:46.220
&gt;&gt; 이미 설명드린 대로, 텍스트 뷰를
이렇게 스크린 상에 표시하는 것은

00:00:46.220 --> 00:00:49.690
앱 안의 자바 객체를 통해 
컨트롤 합니다.

00:00:49.690 --> 00:00:52.300
이것은 텍스트뷰 자바 객체를 
예로 들어본 것인데요.

00:00:52.300 --> 00:00:55.890
이렇게 상자처럼 그 안에 
스테이트를 저장하는 거죠.

00:00:55.890 --> 00:00:58.350
스테이트는 여러 개의
필드로 구성됩니다.

00:00:58.350 --> 00:01:00.240
필드는 2과에서 배운 대로
변수의 하나예요.

00:01:00.240 --> 00:01:02.760
글로벌 변수를 공부할 때 설명했었죠.

00:01:02.760 --> 00:01:05.730
여기 '투데이' 스트링을 
이 텍스트 필드에 저장할 수 있어요.

00:01:05.730 --> 00:01:09.220
이 필드에 저장한 텍스트가
나중에 스크린 상에 표시되는 거죠.

00:01:09.220 --> 00:01:13.520
이 텍스트의 폰트 사이즈를 저장할
정수 필드를 설정할 수도 있어요.

00:01:13.520 --> 00:01:14.910
여러 가지 다른 필드도 있어요.

00:01:14.910 --> 00:01:19.460
텍스트 색이나 폰트 종류처럼 말이죠. 이들이
텍스트뷰 내의 스테이트를 구성합니다.

00:01:19.460 --> 00:01:21.900
이 그림에는 다 그리지 않았어요.

00:01:21.900 --> 00:01:23.940
자바 객체와 교류하고 앱이 실행중일 때

00:01:23.940 --> 00:01:28.420
이를 변화시키기 위해서,
텍스트뷰 상에서 메소드를 호출할 수 있습니다.

00:01:28.420 --> 00:01:31.020
3과에서 이미 메소드에 관해
배운 바 있죠.

00:01:31.020 --> 00:01:35.120
텍스트뷰 상에서의 메소드에는
setText와 getText 등이 있습니다.

00:01:35.120 --> 00:01:39.910
setTextSize 혹은 getTextSize 등의
메소드도 역시 사용 가능합니다.

00:01:39.910 --> 00:01:43.190
각각의 메소드는 일군의 지시사항만을 
수행합니다.

00:01:43.190 --> 00:01:45.590
더 복잡한 형태의 메소드를 사용할 수도
있어요.예를 들어 onDraw는

00:01:45.590 --> 00:01:48.440
텍스트뷰를 스크린 상에
표시하는 역할을 수행하죠.

00:01:48.440 --> 00:01:53.350
요약하자면, 이 텍스트뷰 객체는 
그 내용을 스테이트에 저장하며,

00:01:53.350 --> 00:01:57.850
메소드를 호출하여 이 텍스트뷰의
스테이트를 수정하거나,

00:01:57.850 --> 00:02:01.500
더 복잡한 액션을 수행하도록
텍스트뷰와 교류할 수 있는 것입니다.

00:02:02.850 --> 00:02:06.565
이미지뷰를 스크린에 구현하기 위해,
이미지뷰 용의 자바 객체가

00:02:06.565 --> 00:02:08.838
이미 앱 안에 자리하고 있죠.

00:02:08.838 --> 00:02:13.710
이 이미지뷰에는 이미지를 어떻게 
표시할 것인가에 대한 정보 및

00:02:13.710 --> 00:02:17.680
가운데 정렬과 같은 텍스트 구성 관련
스테이트 정보가 들어 있습니다.

00:02:17.680 --> 00:02:20.490
이미지뷰의 스테이트를 구성하는
다른 필드들도 있어요.

00:02:20.490 --> 00:02:22.250
여기에는 그리지 않았습니다.

00:02:22.250 --> 00:02:25.759
setImage이나 setScaleType 같은 
메소드, 그리고 onDraw처럼

00:02:25.759 --> 00:02:30.330
이 이미지뷰를 스크린에 그려내 주는 
더 복잡한 메소드도 있습니다.

00:02:30.330 --> 00:02:31.560
명심하실 것은, 우리 같은 개발자들의 경우

00:02:31.560 --> 00:02:35.480
스크린에 구현하기 위해 onDraw를 
굳이 호출할 필요는 없다는 겁니다.

00:02:35.480 --> 00:02:39.880
안드로이드에서는 자동으로 호출이
이뤄집니다. 하지만 이런 메소드를

00:02:39.880 --> 00:02:43.910
호출하여 이미지뷰를 바꾸는 법을 알면
확실히 유용하겠죠.

00:02:43.910 --> 00:02:47.580
그럼 어떤 필드가, 그리고 어떤 
메소드가 이미지뷰 스테이트에

00:02:47.580 --> 00:02:50.530
들어가 있는 지를 우리는 어떻게 
알 수 있을까요?

00:02:50.530 --> 00:02:53.980
이 질문에 답하려면, 해당 객체의
클래스 정의를 살펴볼 필요가 있습니다.

00:02:55.010 --> 00:02:57.574
이건 TextView.java.라고 하는 파일인데,

00:02:57.574 --> 00:03:00.890
우리가 MainActivity.java.를
정의한 방식과 유사합니다.

00:03:00.890 --> 00:03:05.130
이 클래스 텍스트뷰 파일에는,
코드 덩어리가 들어 있습니다.

00:03:05.130 --> 00:03:08.530
메소드 뿐만 아니라 텍스트뷰의 
스테이트도 알려주죠.

00:03:08.530 --> 00:03:12.240
지금 상황에선 스테이트나 메소드를
정확히 알려주는 게 아니라, 그에 관한

00:03:12.240 --> 00:03:14.990
정보만을 담고 있을 뿐입니다.

00:03:16.020 --> 00:03:19.970
텍스트뷰가 작동하는 규칙만 정의해
놓은 걸로 생각하시면 돼요.

00:03:19.970 --> 00:03:25.750
이 객체 변수는 'today'라고 적힌 텍스트, 혹은
텍스트 사이즈 18과 같은

00:03:25.750 --> 00:03:26.760
특정한 정보를 저장할 수 있습니다.

00:03:26.760 --> 00:03:32.420
이 클래스를 사용하여 더 많은 텍스트뷰
객체 인스턴스를 만들 수 있으며,

00:03:32.420 --> 00:03:34.290
여기에는 다른 텍스트 값이 
들어갈 수 있죠.

00:03:34.290 --> 00:03:37.010
여기에 'hello'라는 텍스트 값이
들어갈 수 있을 것 같고,

00:03:37.010 --> 00:03:39.800
여기엔 'goodbye'라는 텍스트가
들어갈 수 있겠네요.

00:03:39.800 --> 00:03:43.050
폰트 크기나 글자색을 다르게 지정하는
등의 일이 가능합니다.

00:03:44.080 --> 00:03:47.520
하지만, 이들은 전부 클래스 템플릿을
기반으로 합니다.

00:03:47.520 --> 00:03:50.670
클래스와 객체 인스턴스를 구분하는 게
좀 어렵게 느껴지실 지도 모르겠군요.

00:03:50.670 --> 00:03:51.890
하지만 괜찮아요.

00:03:51.890 --> 00:03:53.760
익숙해 지는덴 시간이 걸리는 법이죠.

00:03:53.760 --> 00:03:55.630
이렇게 비유하면 이해가 쉬울 거예요.

00:03:55.630 --> 00:03:59.270
집의 평면도를 설계하는 것과 같다고
생각하시면 돼요.

00:03:59.270 --> 00:04:02.680
평면도를 사용해서 실제 집을
만들잖아요.

00:04:02.680 --> 00:04:04.320
각각의 집 구조는 다 조금씩
달라질 수 있죠.

00:04:04.320 --> 00:04:06.990
하지만 그 모두는 평면도에 기반해서
만들어지는 겁니다.

00:04:06.990 --> 00:04:10.270
평면도가 집 그 자체는 아니라는 걸
인지하는 게 중요해요.

00:04:10.270 --> 00:04:12.110
그건 설계도일 뿐이죠.

00:04:12.110 --> 00:04:17.079
마찬가지로, 텍스트뷰 클래스는
객체 인스턴스를 만드는 데 사용됩니다.

00:04:17.079 --> 00:04:20.480
실제 텍스트 값이나 텍스트 색 혹은
사이즈 등의 정보를 지니고 있는 건

00:04:20.480 --> 00:04:23.350
이 인스턴스 들이예요.

00:04:23.350 --> 00:04:25.010
그럼 각각의 클래스는 어떤
모습일까요?

