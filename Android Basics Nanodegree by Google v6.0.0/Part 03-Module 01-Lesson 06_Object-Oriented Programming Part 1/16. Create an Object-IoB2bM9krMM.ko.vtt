WEBVTT
Kind: captions
Language: ko

00:00:00.520 --> 00:00:03.270
지난 동영상에서, 생성자는 
클래스 안에서 정의되며

00:00:03.270 --> 00:00:07.910
객체 인스턴스를 만드는데 사용한다고
간략하게 설명한 바 있습니다.

00:00:07.910 --> 00:00:10.610
따라서 이 인스턴스를 만들려면 
TextView 생성자를 호출하고

00:00:10.610 --> 00:00:14.220
다른 인스턴스를 만들려면
또다시 호출하고, 이렇게 말이죠.

00:00:14.220 --> 00:00:17.190
생성자를 호출하는 방법을
코드에서 확인해 봅시다.

00:00:18.250 --> 00:00:22.280
수량이라는 새 정수형 변수를
만들고 초기 값을 2로 맞추는

00:00:22.280 --> 00:00:24.960
방법을 기억하시나요?

00:00:24.960 --> 00:00:26.340
새 객체를 만들고

00:00:26.340 --> 00:00:29.120
변수 내에 저장하는 것 역시
비슷한 포맷을 따릅니다.

00:00:30.200 --> 00:00:32.200
대충 이런 식이죠.

00:00:32.200 --> 00:00:36.150
하지만 int 데이터 형이 아니라
객체 데이터 형입니다.

00:00:36.150 --> 00:00:38.770
객체 데이터 유형은 
클래스 명에 붙이는 대로입니다.

00:00:38.770 --> 00:00:41.650
이 경우에는 TextView죠.

00:00:41.650 --> 00:00:45.700
변수 이름 규칙에 맞기만 하면
어떤 이름이라도 상관없습니다.

00:00:45.700 --> 00:00:47.720
그러면 우리는 이것을
priceTextView라고 부르기로 하죠.

00:00:47.720 --> 00:00:49.600
이제 새 객체와 동일해 집니다.

00:00:49.600 --> 00:00:51.740
하지만 이 우변은 좀 더
잘게 쪼개볼 수 있습니다.

00:00:52.800 --> 00:00:58.060
우변의 경우 new로 시작하고
거기에 객체 데이터 유형이 붙습니다.

00:00:58.060 --> 00:01:00.190
여기선 TextView가 되겠죠.

00:01:00.190 --> 00:01:03.510
TextView 클래스에서 정의된
생성자를 여기서 호출합니다.

00:01:03.510 --> 00:01:07.940
따라서 여기에 괄호로 
생성자로의 입력 아규먼트를 넣죠.

00:01:07.940 --> 00:01:10.790
그러므로, 생성자가 
컨텍스트 객체를 요구할 경우

00:01:10.790 --> 00:01:13.490
여기서 컨텍스트를 전달해야 합니다.

00:01:13.490 --> 00:01:18.120
컨텍스트 객체는 앱 리소스 및 
기타 앱 환경 관련 부분에 대한

00:01:18.120 --> 00:01:19.870
접근을 도와준다는 사실을
기억하세요.

00:01:20.940 --> 00:01:24.140
이렇게 해서 생성자를 호출하여

00:01:24.140 --> 00:01:26.060
새로운 TextView 객체를 만들면

00:01:26.060 --> 00:01:31.200
priceTextView라는 변수에
이 새 객체를 저장할 수 있습니다.

00:01:31.200 --> 00:01:34.830
이 변수는 데이터 유형이 
정하는 대로 한 가지의

00:01:34.830 --> 00:01:36.080
TextView 객체만 가질 수 있습니다.

00:01:37.210 --> 00:01:39.850
ImageView 객체를 만들고
변수에 저장하는 예를

00:01:39.850 --> 00:01:41.840
한 가지 더 보도록 하죠.

00:01:41.840 --> 00:01:45.770
데이터 유형은 ImageView고,
변수명은 coffeeImageView입니다.

00:01:45.770 --> 00:01:50.450
그 다음에 할당 연산자,
그 뒤에 새 ImageView가 옵니다.

00:01:50.450 --> 00:01:53.830
철자는 여기 객체 데이터 유형과 
완전히 똑같습니다.

00:01:53.830 --> 00:01:57.320
생성자를 호출하고
입력을 전달해야 하므로,

00:01:57.320 --> 00:02:00.620
이렇게 괄호 안에 입력을 넣습니다.

00:02:00.620 --> 00:02:03.420
세 번째 예는 버튼 객체를 만들고

00:02:03.420 --> 00:02:05.700
이 변수에 저장하는 것입니다.

00:02:05.700 --> 00:02:08.479
데이터 유형은 Button이고,
변수명은 submitOrderButton입니다.

00:02:08.479 --> 00:02:11.950
그 다음에 새 버튼이 생성자를
호출하게 하는 것이죠.

00:02:13.140 --> 00:02:15.850
객체 데이터 유형은 원하는 대로
정의하면 됩니다.

00:02:15.850 --> 00:02:19.820
예를 들어, 여기 제가 Catview라는
클래스 정의를 만들었는데요.

00:02:19.820 --> 00:02:22.820
그러면 이 라인을 이용해
새 CatView를 만들 수 있죠.

00:02:22.820 --> 00:02:25.380
이 경우엔, 생성자가 고양이 이름을 
입력 문자열로 요구하기 때문에

00:02:29.180 --> 00:02:32.280
CatView 생성자로 전달했습니다.

00:02:32.280 --> 00:02:35.690
이 생성자에 무엇을 입력으로 
전달할 것인지 결정하려면

00:02:35.690 --> 00:02:41.450
클래서 자바 doc 파일이나 
소스 파일을 살펴봐야 합니다.

00:02:41.450 --> 00:02:45.680
여기 전부에선 새 객체를 만들기
위해 new라는 단어를 썼습니다.

00:02:45.680 --> 00:02:47.730
자바 키워드 목록으로 돌아가 보면,

00:02:47.730 --> 00:02:51.040
new라는 말이 목록에 있음을
발견할 수 있죠.

00:02:52.190 --> 00:02:54.710
자료를 살펴보다 보면,

00:02:54.710 --> 00:02:58.820
팩토리 메소드로 객체를 만들라는
말을 가끔 볼 수 있을 겁니다.

00:02:58.820 --> 00:03:01.510
생성자를 대신한 것인데요.

00:03:01.510 --> 00:03:02.710
예를 하나 들어 보죠.

00:03:02.710 --> 00:03:04.290
새 미디어플레이어를 만들기 위해,

00:03:04.290 --> 00:03:09.040
자료에서는 MediaPlayer.create라는
메소드를 사용하라고 권하고 있습니다.

00:03:09.040 --> 00:03:13.250
이는 MediaPlayer 객체를 리턴하여
이 변수 안에 저장할 수 있게 하죠.

00:03:13.250 --> 00:03:17.176
형식을 보면 먼저 객체 데이터 유형, 
여기선 MediaPlayer겠죠. M은 대문자로

00:03:17.176 --> 00:03:22.720
하고 점을 찍은 후 팩토리 
메소드명이 옵니다.여기서는 create죠.

00:03:22.720 --> 00:03:26.110
그리고 입력 아규먼트를 전달하여
플레이어를 초기화 시킵니다.

00:03:27.390 --> 00:03:29.710
이제 토스트(Toast)를 만드는 
예를 보겠습니다.

00:03:30.900 --> 00:03:33.700
토스트란 앱에서 일시적으로 
튀어나왔다가 사라지는

00:03:33.700 --> 00:03:34.389
메세지를 말합니다.

00:03:35.420 --> 00:03:38.540
코드는 Toast로 시작합니다.
T는 대문자여야 하는데, 그 이유는

00:03:38.540 --> 00:03:39.800
객체 데이터 유형이기 때문입니다.

00:03:39.800 --> 00:03:44.050
뒤에 점을 찍고 팩토리 메소드명 
makeText를 붙입니다.

00:03:44.050 --> 00:03:48.730
그리고 입력 아규먼트를 전달하여
토스트 메세지를 만듭니다.

00:03:48.730 --> 00:03:51.800
팩토리 메소드명과 입력 아규먼트가
무엇인지 알기 위해서는

00:03:51.800 --> 00:03:55.280
자료에 있는 
토스트 클래스 부분을 확인해 보세요.

00:03:55.280 --> 00:03:58.440
일반적으로, 객체를 만드는 데 
생성자를 쓸 지 팩토리 메소드를

00:03:58.440 --> 00:04:01.780
쓸 지 알기 위해선 
해당 객체를 만드는 법을

00:04:01.780 --> 00:04:03.640
구글 검색으로 찾아보면 됩니다.

00:04:03.640 --> 00:04:06.940
새 객체를 만드는 데는 생성자
형성이 가장 일반적입니다.

00:04:06.940 --> 00:04:10.180
팩토리 메소드를 써야 하는 상황은
그리 흔하지 않습니다. 하지만

00:04:10.180 --> 00:04:12.690
어떤 쪽을 써야 할 지 확실하게 
알려면 해당 객체 만드는 법을

00:04:12.690 --> 00:04:13.820
구글 검색으로 찾아 보세요.

00:04:15.000 --> 00:04:18.180
객체 만드는 법을 실습해 볼
기회입니다.

00:04:18.180 --> 00:04:20.050
각 코드 라인마다
오류가 한 가지 있습니다.

00:04:21.160 --> 00:04:22.380
어떤 오류인지 찾은 다음

00:04:22.380 --> 00:04:24.770
아래 빈 칸에 올바른 코드를 
적어 보세요.

