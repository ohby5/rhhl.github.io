WEBVTT
Kind: captions
Language: pt-BR

00:00:00.940 --> 00:00:04.070
Primeiro, vamos modificar
a assinatura do método <i>calculatePrice</i>

00:00:04.070 --> 00:00:06.480
para receber o tipo correto
de dados de <i>return</i>.

00:00:06.480 --> 00:00:09.020
Também vamos presumir que
há zero parâmetros de <i>input</i>.

00:00:09.850 --> 00:00:12.840
É aqui que o método
<i>calculatePrice</i> é definido.

00:00:12.840 --> 00:00:15.930
O propósito deste método
é calcular o preço total do pedido

00:00:15.930 --> 00:00:18.160
e depois retornar ele.

00:00:18.160 --> 00:00:19.660
O preço deve ser um integral,

00:00:19.660 --> 00:00:22.670
então precisamos mudar
o tipo de <i>return</i> de <i>void</i> pra <i>int</i>.

00:00:23.730 --> 00:00:25.730
Isso cuida da primeira tarefa.

00:00:25.730 --> 00:00:29.130
O questionário também pede para verificar
se não há parâmetros de <i>input</i>,

00:00:29.130 --> 00:00:30.280
e é isso que temos aqui.

00:00:31.020 --> 00:00:34.150
A segunda tarefa é
modificar o conteúdo do método

00:00:34.150 --> 00:00:37.138
para certificar-nos de que estamos
computando o preço correto.

00:00:37.138 --> 00:00:39.220
E presumindo $5.00
por uma xícara de café.

00:00:40.770 --> 00:00:43.940
Dentro deste método estamos pegando
a quantidade de xícaras pedida.

00:00:43.940 --> 00:00:46.460
E a estamos multiplicando
por $5 por xícara.

00:00:47.700 --> 00:00:49.860
Isso equivale ao preço total.

00:00:49.860 --> 00:00:51.400
Então esta linha está resolvida.

00:00:52.250 --> 00:00:56.920
Mas há duas questões que vejo,
o preço variável nunca é usado

00:00:56.920 --> 00:00:59.490
e há um erro que diz
que falta a instrução de <i>return</i>.

00:00:59.490 --> 00:01:03.470
Ele espera que nós retornemos uma integral
mas não estamos retornando nada.

00:01:03.470 --> 00:01:07.120
Neste momento, nosso código
é o mesmo que se nós tivéssemos dito isto.

00:01:07.120 --> 00:01:12.060
Precisamos de uma linha que diga <i>return</i>
e então colocar um valor aqui

00:01:12.060 --> 00:01:13.950
e o valor em <i>return</i> é um preço.

00:01:13.950 --> 00:01:18.220
Então, vou apenas colocar o preço,
que é uma variável definida aqui.

00:01:18.220 --> 00:01:20.760
Legal, agora todos os erros desaparecem.

00:01:20.760 --> 00:01:22.650
Também devemos modificar
o <i>Java DOC</i>.

00:01:22.650 --> 00:01:27.060
Para especificarmos
que estamos mudando o preço total.

00:01:27.060 --> 00:01:30.410
Desta forma, quando alguém 
chamar este método, saberão o que esperar.

00:01:31.600 --> 00:01:35.590
Certo, então terminamos
todas as partes para definir este método.

00:01:35.590 --> 00:01:38.600
Agora, vamos prosseguir para
onde o método está sendo chamado.

00:01:38.600 --> 00:01:42.069
Dentro do método <i>submitOrder</i>,
precisamos chamar o método <i>calculatePrice</i>.

00:01:43.240 --> 00:01:46.120
No momento, <i>calculatePrice</i>
está flutuando no meio do nada.

00:01:46.120 --> 00:01:49.130
Vou copiá-lo, e vou colá-lo aqui em cima.

00:01:49.130 --> 00:01:52.830
Porque antes podíamos calcular
o preço do pedido em linha,

00:01:52.830 --> 00:01:55.560
no método <i>submitOrder</i>,
mas agora temos um método pra isso.

00:01:55.560 --> 00:01:57.670
Então vou colar isto aqui.

00:01:57.670 --> 00:01:59.910
Agora livre-se do ponto-e-vírgula extra.

00:01:59.910 --> 00:02:03.170
Você notará que preço
é uma variável local neste método,

00:02:03.170 --> 00:02:04.860
e também neste.

00:02:04.860 --> 00:02:06.520
Tudo bem se elas têm o mesmo nome,

00:02:06.520 --> 00:02:09.258
porque são 
escopos de variáveis diferentes.

00:02:09.258 --> 00:02:13.100
Então a variável <i>price</i> aqui 
não é relacionada com a variável aqui.

00:02:13.100 --> 00:02:16.300
Elas são atualizadas e criadas
independentemente uma da outra.

00:02:16.300 --> 00:02:19.810
E uma vez que este método termine
de ser executado, a variável <i>price</i> some.

00:02:20.830 --> 00:02:23.230
Voltando a nosso método <i>submitOrder</i>.

00:02:23.230 --> 00:02:24.810
Então, calculamos um preço

00:02:24.810 --> 00:02:29.680
e guardamos em uma variável, aí podemos 
usá-lo para criar a mensagem de preço.

00:02:30.730 --> 00:02:33.390
Então, na verdade,
todo o código pode continuar o mesmo.

00:02:33.390 --> 00:02:35.150
Estamos concatenando a integral <i>price</i>

00:02:35.150 --> 00:02:39.490
para a <i>string</i> total
com o símbolo de moeda.

00:02:39.490 --> 00:02:43.680
Então concatenamos "Obrigado!"
e apenas o mostramos na tela.

00:02:43.680 --> 00:02:47.790
Então vou apagar essas linhas extras,
em branco, e salvar,

00:02:47.790 --> 00:02:49.550
e podemos rodá-lo em nosso aparelho.

00:02:50.660 --> 00:02:52.250
Certo, então mudei a quantidade,

00:02:52.250 --> 00:02:55.700
e pressionei PEDIR, e agora
ele mostra corretamente $25 como o preço.

00:02:56.790 --> 00:02:57.825
Maravilha, funcionou.

00:02:58.375 --> 00:03:01.374
Mas como posso ter certeza de que
<i>calculatePrice</i> está realmente

00:03:01.374 --> 00:03:05.640
funcionando, já que não há
mudança visível comparando com antes?

00:03:06.220 --> 00:03:09.474
Eis algumas técnicas que você
pode fazer para verificar se seu código

00:03:09.474 --> 00:03:10.794
está realmente funcionando.

00:03:10.794 --> 00:03:15.070
Eu poderia fazê-lo retornar
um número absurdo, como 700.

00:03:15.670 --> 00:03:17.292
Salvar meu código e depois rodar.

00:03:18.272 --> 00:03:20.671
Agora, o que espero ver
é se eu mudar a quantidade

00:03:20.671 --> 00:03:25.226
e apertar PEDIR, deveria dizer 
que o preço é $700.

00:03:25.226 --> 00:03:29.190
Desta forma, saberei que este método
<i>calculatePrice</i> está sendo chamado.

00:03:30.250 --> 00:03:31.610
E ele está, legal.

00:03:32.910 --> 00:03:35.040
Agora posso reverter esta mudança.

00:03:35.040 --> 00:03:38.120
Outra forma de checar
se este método está sendo executado

00:03:38.120 --> 00:03:39.510
é colocar um <i>breakpoint</i> aqui.

00:03:40.230 --> 00:03:43.300
Então vou clicar 
neste pequeno ícone de <i>bug</i>

00:03:43.300 --> 00:03:45.340
e então nosso aplicativo
entrará no modo <i>debug</i>.

00:03:46.370 --> 00:03:47.530
Se eu mudar a quantidade

00:03:47.530 --> 00:03:51.250
e apertar PEDIR, então espero que
o <i>app</i> pause neste ponto.

00:03:53.140 --> 00:03:54.580
E ele pausa.

00:03:54.580 --> 00:03:57.460
Então agora estamos
no método <i>calculatePrice</i>.

00:03:57.460 --> 00:04:00.100
Há uma variável global, <i>quantity</i>

00:04:00.100 --> 00:04:05.340
E se eu pular para a próxima linha,
vejo que agora há uma variável local,

00:04:05.340 --> 00:04:12.670
<i>price</i>, e está definida para $15,
porque <i>quantity</i> é 3, 3 vezes 5 é 15, bom.

00:04:12.670 --> 00:04:15.777
Então, está fazendo 
pelo método <i>calculatePrice</i>,

00:04:15.778 --> 00:04:18.763
e se eu apertar Continuar,
então atualiza direito nesta tela.

