WEBVTT
Kind: captions
Language: zh-CN

00:00:00.470 --> 00:00:03.770
我们已经创建了 TextView 类的简化版本

00:00:03.770 --> 00:00:06.810
它存储在 TextView.java 文件里

00:00:06.810 --> 00:00:08.290
我们已经将它简化 所以对你来说理解

00:00:08.290 --> 00:00:11.060
类是什么样子会变得更容易

00:00:11.060 --> 00:00:13.710
首先 它以访问修饰符开始

00:00:13.710 --> 00:00:15.100
它标记为 public 以便像 

00:00:15.100 --> 00:00:19.480
inactivity 的其他地方也能使用这个 TextView 类

00:00:19.480 --> 00:00:21.040
然后是单词 class

00:00:21.040 --> 00:00:24.310
这个是用来向 Java 表明它是一个类的定义

00:00:24.310 --> 00:00:26.400
然后是类名

00:00:26.400 --> 00:00:30.590
在 Java 中 类名以大写字母开头并且符合驼峰命名法

00:00:30.590 --> 00:00:34.360
命名中没有空格而且后续单词的首字母大写

00:00:34.360 --> 00:00:36.800
这还有其他的单词 我们稍后再看

00:00:36.800 --> 00:00:39.304
重要的事情是 我们有一个起始大括号

00:00:39.304 --> 00:00:42.354
在定义的底部 有一个结束大括号

00:00:42.354 --> 00:00:47.130
在 TextView 类的内部有一堆变量

00:00:47.130 --> 00:00:51.140
每一个都代表 TextView 的一个字段 所以我们有 

00:00:51.140 --> 00:00:55.700
表示 TextView 文本的字段 有表示 TextView 文本颜色的字段

00:00:55.700 --> 00:00:57.850
还有其他字段 但是记住

00:00:57.850 --> 00:00:59.928
这只是 TextView 类的简化版本

00:01:01.000 --> 00:01:04.239
还有一个保存应用上下文信息的

00:01:04.239 --> 00:01:05.740
变量

00:01:05.740 --> 00:01:08.750
在下面的讲师注释中 你可以了解更多关于上下文的东西

00:01:08.750 --> 00:01:13.170
它就是一个用来访问应用信息的方式 就像

00:01:13.170 --> 00:01:16.670
你可以通过上下文访问应用的资源

00:01:17.870 --> 00:01:19.990
这是 TextView 的方法

00:01:19.990 --> 00:01:23.690
setText 方法接受文本字符串作为输入

00:01:23.690 --> 00:01:28.840
然后更新全局变量 mText 使用新值

00:01:28.840 --> 00:01:32.480
setTextColor 与它相似 接受一个新的颜色作为输入

00:01:32.480 --> 00:01:36.080
使用新的值更新内部状态

00:01:36.080 --> 00:01:38.045
这也有像 getText 和 getTextColor 的方法

00:01:38.045 --> 00:01:42.920
它们返回内部的文本字符串 或文本颜色

00:01:44.080 --> 00:01:48.091
另外 你也许注意到 所有的全局变量都是以

00:01:48.091 --> 00:01:49.651
小写字母 m 开头的

00:01:49.651 --> 00:01:51.510
m 表示成员变量

00:01:51.510 --> 00:01:55.330
这些都是 TextView 类的成员变量

00:01:55.330 --> 00:01:58.580
成员变量是这些字段的另一种说法或者

00:01:58.580 --> 00:02:00.990
TextView 类的声明

00:02:00.990 --> 00:02:03.380
这是一个简化的 ImageView 类

00:02:03.380 --> 00:02:05.320
你可以在 ImageView.java 文件中找到

00:02:06.400 --> 00:02:10.580
它以 public class 开始 然后是类名 ImageView

00:02:10.580 --> 00:02:13.550
然后是起始大括号和结束大括号

00:02:13.550 --> 00:02:15.980
这些是 ImageView 的声明

00:02:15.980 --> 00:02:17.730
正常情况下 字段更多

00:02:17.730 --> 00:02:20.000
但是我只想给你展示一个例子

00:02:20.000 --> 00:02:25.680
这是一个整型变量叫做 mImageId m表示成员变量

00:02:25.680 --> 00:02:28.340
它存储 ImageView 中显示的图片 

00:02:28.340 --> 00:02:31.160
的资源 ID

00:02:31.160 --> 00:02:34.470
在这 有一个构造方法 它用来创建

00:02:34.470 --> 00:02:36.390
一个新的 ImageView 对象

00:02:36.390 --> 00:02:38.730
它接收上下文参数

00:02:38.730 --> 00:02:40.809
然后初始化这些变量

00:02:42.120 --> 00:02:43.088
我们有一个方法

00:02:43.088 --> 00:02:47.190
叫做 setImage 它接收在 ImageView 中展示的 

00:02:47.190 --> 00:02:50.500
新图片的资源 ID

00:02:50.500 --> 00:02:53.850
在方法内部 我们更新了保存图片 ID 的内部变量

00:02:55.100 --> 00:02:57.691
同样 我们创建了简化版的 TextView 类和 

00:02:57.691 --> 00:03:01.880
ImageView 类来帮助你理解类的概念

00:03:01.880 --> 00:03:05.200
现在 我们看一下在 Android 框架中

00:03:05.200 --> 00:03:06.110
这些类的真实版本

00:03:07.950 --> 00:03:09.240
要看Android 中 Java 类的代码 

00:03:09.240 --> 00:03:13.240
你可以安装 Chrome 扩展程序

00:03:13.240 --> 00:03:14.960
如果你不使用 Chrome 浏览器

00:03:14.960 --> 00:03:17.989
你可以在下面的讲师注释中看到怎样访问这些文件

00:03:19.020 --> 00:03:19.520
好的

00:03:21.840 --> 00:03:26.081
如果 Chrome 扩展程序已经安装好了 当我搜索 比如

00:03:26.081 --> 00:03:30.260
TextView Android 然后我可以看到这个类的参考文档

00:03:30.260 --> 00:03:34.830
这里会有一个额外的链接 view source

00:03:34.830 --> 00:03:36.730
这是提供给高级开发人员的

00:03:36.730 --> 00:03:41.420
如果你对创建这个 TextView 的代码好奇的话

00:03:41.420 --> 00:03:45.850
这是由 Android 团队的人定义的  TextView.java 文件

00:03:45.850 --> 00:03:47.970
正如你所看到的 它是非常长而且复杂

00:03:47.970 --> 00:03:49.739
但是它仍然有一个类的主要部分

00:03:51.010 --> 00:03:55.330
以 public class 开始 然后是 TextView 也就是类名

00:03:55.330 --> 00:03:57.280
然后是起始大括号

00:03:57.280 --> 00:03:59.500
结束大括号在最底部

00:04:00.930 --> 00:04:04.340
在类的顶部 我们能够看到一堆字段

00:04:04.340 --> 00:04:07.200
它们组成了类的属性

00:04:07.200 --> 00:04:13.470
例如 我们可以看到 TextColor 是一个属性  text 也是一个属性

00:04:13.470 --> 00:04:17.560
这是 TextView 的构造方法 它接收上下文参数

00:04:17.560 --> 00:04:22.560
如果我使用 Cmd+F 或者 Windows 中的 Ctl+F 我可以尝试搜索

00:04:24.050 --> 00:04:26.250
这是 setText 方法

00:04:26.250 --> 00:04:29.835
这个方法是用来设置 TextView 的字符串值的

00:04:29.835 --> 00:04:31.205
如果我搜索 getText

00:04:31.205 --> 00:04:35.605
我也可以看到这个方法返回 TextView 显示着的文本

00:04:35.605 --> 00:04:38.275
有了这个方法 你就可以随心所欲地浏览

00:04:39.545 --> 00:04:42.245
如果我搜索 ImageView 文档页面

00:04:42.245 --> 00:04:46.750
当我点击 view source 来查看 ImageView 类的全部代码

00:04:46.750 --> 00:04:49.370
这个文件写着 public class ImageView

00:04:49.370 --> 00:04:52.460
还有组成 ImageView 属性的所有字段

00:04:52.460 --> 00:04:55.810
在文件的底部有一系列方法

00:04:55.810 --> 00:04:57.810
文件中的代码也是非常复杂的

00:04:57.810 --> 00:05:00.360
它有几千行代码

00:05:00.360 --> 00:05:03.060
面向对象编程最好的部分就是

00:05:03.060 --> 00:05:06.500
你不需要知道所有的这些细节

00:05:06.500 --> 00:05:10.200
作为一个开发人员 你可以在你的应用中使用 TextView 和 ImageView

00:05:10.200 --> 00:05:13.630
而不需要知道所有里面发生的细节

