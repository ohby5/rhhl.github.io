WEBVTT
Kind: captions
Language: zh-CN

00:00:00.610 --> 00:00:02.650
我把我们刚刚看的代码加入到了应用中

00:00:02.650 --> 00:00:07.660
代码是 View orderSummaryTextView = findViewById

00:00:07.660 --> 00:00:13.000
然后把资源 ID 传给 order_summary_text_view

00:00:13.000 --> 00:00:15.910
但这样的话在 Android Studio 中下一行就会报错

00:00:17.750 --> 00:00:21.830
它说无法解析 setText 方法

00:00:21.830 --> 00:00:24.430
如果我在这添加另一行代码

00:00:24.430 --> 00:00:27.880
它会显示这个变量中有效的方法类型

00:00:28.890 --> 00:00:32.400
我们建立一个 orderSummaryTextView 变量

00:00:32.400 --> 00:00:34.330
它是一个视图类型

00:00:34.330 --> 00:00:37.520
我们能在下一行调用它

00:00:37.520 --> 00:00:40.540
如果你看一下自动补全建议

00:00:40.540 --> 00:00:44.120
会发现这些方法实际上是视图方法

00:00:44.120 --> 00:00:46.140
没有专门针对 TextView 的方法

00:00:47.200 --> 00:00:49.350
比如没有 setText 这个方法

00:00:51.320 --> 00:00:54.455
这就是我们调用 setText 时会报错的原因

00:00:56.020 --> 00:01:00.890
你也不能设置尺寸 颜色 和其他属性

00:01:00.890 --> 00:01:02.350
那么那些方法都在哪？

00:01:03.840 --> 00:01:08.700
其实 TextView 是一种更加具体的 View

00:01:10.430 --> 00:01:13.240
所以如果你想在对象中调用 TextView 方法

00:01:13.240 --> 00:01:16.777
我们需要确保这是一个 TextView 对象

00:01:17.820 --> 00:01:21.160
现在这个变量是一个 TextView 对象

00:01:21.160 --> 00:01:25.750
但是它报错了 它说这个类型不兼容 因为

00:01:25.750 --> 00:01:31.090
右边也必须是 TextView 但只找到一个常规 View

00:01:31.090 --> 00:01:34.240
因为 findViewById 方法返回的是常规 View

00:01:34.240 --> 00:01:35.558
怎么使它们一致呢？

00:01:35.558 --> 00:01:41.720
因为 TextView  是一个更具体的 View  换句话说

00:01:41.720 --> 00:01:47.260
TextView 是 View 类的一个子类 我们可以使用类型转换

00:01:47.260 --> 00:01:51.970
在 Java 中类型转换意味着 我们可以把这个方法返回的 View

00:01:51.970 --> 00:01:54.280
转换成一个 TextView 

00:01:54.280 --> 00:01:58.760
现在 右边已经是个 TextView  对象了

00:01:58.760 --> 00:02:02.168
然后把它存到 orderSummaryTextView 变量中

00:02:03.460 --> 00:02:06.110
我知道你肯定觉得很迷惑 因为我刚刚

00:02:06.110 --> 00:02:07.970
提到了太多新的概念

00:02:07.970 --> 00:02:09.210
我们尝试解决一下

00:02:10.229 --> 00:02:14.280
findViewById 方法会把对象转化成视图类型

00:02:14.280 --> 00:02:15.820
通过写这个标记

00:02:15.820 --> 00:02:19.690
也就是括号和里边的对象数据类型

00:02:19.690 --> 00:02:23.250
我们就把 View 转换成了 TextView 

00:02:23.250 --> 00:02:27.217
所以整个表达式计算结果是一个 TextView 对象

00:02:28.600 --> 00:02:32.140
然后 我们可以存储到左边的变量里

00:02:32.140 --> 00:02:35.790
也就是 orderSummary 里 是 TextView 类型

00:02:35.790 --> 00:02:40.740
在下一行 在这个对象中我们可以调用 TextView  方法

00:02:40.740 --> 00:02:43.720
你看到展示在这的所有方法了吗？

00:02:44.840 --> 00:02:48.070
setAllCaps setTextSize 等等

00:02:48.070 --> 00:02:51.660
删除这行 因为 setText 可以工作了

00:02:51.660 --> 00:02:54.170
没有报错

00:02:54.170 --> 00:02:57.100
如果你想调用 TextView 方法

00:02:57.100 --> 00:02:59.410
我们需要有一个 TextView 对象

00:02:59.410 --> 00:03:02.500
为了有一个 TextView 对象 我们需要调用 findViewById 

00:03:02.500 --> 00:03:06.890
然后把 View 转换成 TextView 格式

00:03:06.890 --> 00:03:09.700
之所以转换后就可以工作了 是因为

00:03:09.700 --> 00:03:13.440
在视图层级结构上这里的这个 View 确实是 TextView 

00:03:13.440 --> 00:03:17.520
如果我们想转换成其他的 比如单选按钮 就不可以

00:03:17.520 --> 00:03:20.840
因为 orderSummaryTextView 是 TextView 

00:03:20.840 --> 00:03:23.000
我们必须转换成合适的类型

00:03:24.275 --> 00:03:28.370
同样 在 displayQuantity 方法中 我们调用 findViewById 

00:03:28.370 --> 00:03:32.350
把资源 ID 传到 quantityTextView 中

00:03:32.350 --> 00:03:36.090
这会返回一个 View 并转化为 TextView 

00:03:36.090 --> 00:03:39.330
然后存放到 quantityTextView 变量中

00:03:40.400 --> 00:03:43.450
这个变量是 TextView 类型 所以

00:03:43.450 --> 00:03:48.170
在下一行 我们可以调用 TextView 方法 比如 setText 

00:03:48.170 --> 00:03:51.160
这是通过类型转换更新的 MainActivity 代码

00:03:51.160 --> 00:03:56.400
我们可以把这些 View 转换成 TextView 然后就可以把它们存到

00:03:56.400 --> 00:04:00.622
TextView 变量中了 在 MainActivity 变量列表中

00:04:00.622 --> 00:04:05.090
现在 quantityTextView  和 orderSummaryTextView  是 TextView 类型

00:04:05.090 --> 00:04:06.820
可以用它们调用 TextView 方法

00:04:06.820 --> 00:04:10.810
我们不能局限于仅把它们当做 View

00:04:10.810 --> 00:04:15.050
现在我们可以用这些变量调用 TextView 专属方法

00:04:15.050 --> 00:04:19.041
比如我们可以在 orderSummaryTextView 上调用 setText  方法

00:04:19.041 --> 00:04:21.880
在 quantityTextView 上也能调用 setText 方法

00:04:21.880 --> 00:04:22.650
正如你看到的

00:04:22.650 --> 00:04:27.180
你必须注意在不同地方使用的数据类型

00:04:27.180 --> 00:04:31.290
目前为止 在你调用方法时 我们还没考虑过返回值

00:04:31.290 --> 00:04:34.400
因为 setText 方法没有返回值

00:04:34.400 --> 00:04:37.180
imageView.setImageResource 方法和它一样

00:04:37.180 --> 00:04:39.060
没有返回值

00:04:39.060 --> 00:04:41.540
但是其他方法可以有返回值

00:04:41.540 --> 00:04:45.590
比如在 TextView 类 我们有一个 getTextSize 方法

00:04:45.590 --> 00:04:47.680
它会返回一个整型

00:04:47.680 --> 00:04:53.410
所以我们可以把结果存到一个叫 size 的整型变量中

00:04:53.410 --> 00:04:55.140
这是另一个带返回值的方法

00:04:55.140 --> 00:04:58.270
在 Button 类中你可以调用 getHeight 方法

00:04:58.270 --> 00:05:03.420
这会返回一个整型 你可以把它存到一个变量里

00:05:03.420 --> 00:05:06.450
如果你想把它们存到字符串里

00:05:06.450 --> 00:05:10.810
它会报错 因为方法会返回一个整型

00:05:10.810 --> 00:05:14.988
为了知道方法中传入的数据类型

00:05:14.988 --> 00:05:19.290
和方法返回的数据类型 你需要查阅文档

00:05:19.290 --> 00:05:21.260
比如 TextView 类

00:05:21.260 --> 00:05:25.760
如果你调用这些方法中的任何一个 就会返回一个整型值

00:05:25.760 --> 00:05:28.620
在左边这一列是返回数据类型

00:05:28.620 --> 00:05:33.040
对于其他的方法 你可能会得到空的或布尔类型的返回值

00:05:33.040 --> 00:05:38.330
这些我们还没学 还有浮点类型和长整型

00:05:38.330 --> 00:05:42.790
这个文档页面还展示了方法所要求的输入

00:05:42.790 --> 00:05:45.010
数据类型

00:05:45.010 --> 00:05:49.590
比如 setTextColor 方法要求输入整型

00:05:49.590 --> 00:05:53.110
返回值是空 所以没有返回值

00:05:53.110 --> 00:05:56.010
可以通过查阅文档来了解要求的输入数据类型

00:05:56.010 --> 00:05:58.750
否则 Android Studio 就会报错

00:05:58.750 --> 00:06:01.070
显示数据类型不匹配

00:06:01.070 --> 00:06:02.630
现在该你练习了

00:06:02.630 --> 00:06:05.580
这是四个不同的代码示例

00:06:05.580 --> 00:06:10.100
有些代码可能出现数据类型不匹配的错误

00:06:10.100 --> 00:06:11.165
如果你找到了

00:06:11.165 --> 00:06:15.540
在下边的框里写一下如何解决

00:06:15.540 --> 00:06:19.948
如果代码是完美的就写上没有错误

00:06:19.948 --> 00:06:22.545
这是一个具有挑战性的问题 因为

00:06:22.545 --> 00:06:26.555
里边涉及很多概念 这些代码对你来说也很陌生

00:06:26.555 --> 00:06:30.105
可以通过查阅文档来学习这些方法

00:06:30.105 --> 00:06:33.695
确保输入和返回值是正确的

00:06:33.695 --> 00:06:37.665
如果声明变量 数据类型要正确

00:06:37.665 --> 00:06:39.265
也可以查阅这些方法的相关文档

00:06:39.265 --> 00:06:42.375
来确保正确使用它们

