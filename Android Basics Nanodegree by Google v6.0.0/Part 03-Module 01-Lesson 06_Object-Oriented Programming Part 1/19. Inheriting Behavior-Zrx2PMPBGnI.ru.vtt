WEBVTT
Kind: captions
Language: ru

00:00:00.920 --> 00:00:03.410
Давайте вернемся к приложению JustJava.

00:00:03.410 --> 00:00:07.260
Обратите внимание на класс MainActivity,
метод displayMessage.

00:00:07.260 --> 00:00:09.950
Теперь все становится немного понятнее.

00:00:09.950 --> 00:00:14.350
Мы уже установили, что создаем переменную
под названием orderSummaryTextView,

00:00:14.350 --> 00:00:16.760
а тип данных для этой переменной
называется TextView.

00:00:17.790 --> 00:00:19.610
Однако мы пока не разобрались
с этой частью.

00:00:20.740 --> 00:00:23.390
На следующей строке мы вызываем метод для
этого объекта text view.

00:00:24.650 --> 00:00:28.070
Мы используем то же название
переменной, что и здесь:

00:00:28.070 --> 00:00:31.830
так, мы вызываем
orderSummaryTextView точка setText.

00:00:31.830 --> 00:00:34.290
Затем следует строка
со входными данными для метода.

00:00:35.300 --> 00:00:38.790
Сообщение в этой строке изначально служило
входным параметром

00:00:38.790 --> 00:00:40.200
метода displayMessage.

00:00:41.720 --> 00:00:45.250
А теперь давайте разберем эту часть кода,
которая для нас пока непонятна.

00:00:45.250 --> 00:00:48.210
Судя по всему, findViewById —
это все-таки вызов метода:

00:00:48.210 --> 00:00:53.230
он располагается перед частью в скобках,
которая похожа на входной аргумент.

00:00:53.530 --> 00:00:57.458
Однако очень странно, что этот метод
нигде не определен в данном классе.

00:00:58.258 --> 00:01:02.355
Если дважды кликнуть это название,
а затем нажать command F или

00:01:02.355 --> 00:01:07.560
control F, если у вас Windows,
то можно выполнить поиск по этому файлу.

00:01:07.560 --> 00:01:10.780
Нашлось только два совпадения
с findViewById.

00:01:10.780 --> 00:01:12.790
В обоих случаях
они используются одинаково.

00:01:12.790 --> 00:01:15.260
Однако я не вижу ни одного метода
под названием findViewById.

00:01:16.190 --> 00:01:19.640
К слову, ранее в классе MainActivity

00:01:19.640 --> 00:01:23.450
можно увидеть вызов setContentView,
и если выполнить аналогичный поиск

00:01:23.450 --> 00:01:26.280
в файле, метод также не будет
определен в MainActivity.

00:01:27.820 --> 00:01:29.620
Так где же определены эти методы?

00:01:30.620 --> 00:01:33.610
Вообще, MainActivity —
довольно маленький файл:

00:01:33.610 --> 00:01:35.650
в нем всего 90 строк, но на самом деле

00:01:35.650 --> 00:01:38.790
он длиннее, чем видно с первого взгляда.

00:01:38.790 --> 00:01:42.200
В коде написано расширение
AppCompatActivity,

00:01:42.200 --> 00:01:45.710
это значит, что MainActivity —
это расширение

00:01:45.710 --> 00:01:49.290
функциональности класса AppCompatActivity.

00:01:49.290 --> 00:01:52.790
Если на вашем компьютере вы
видите ActionBarActivity,

00:01:52.790 --> 00:01:55.450
ничего страшного —
это всего лишь более старая версия.

00:01:55.450 --> 00:01:58.770
В последней версии, что вы используете,
метод называется AppCompatActivity.

00:01:58.770 --> 00:02:02.420
AppCompatActivity обеспечивает
обратную совместимость

00:02:02.420 --> 00:02:04.460
с более старыми устройствами Android.

00:02:04.460 --> 00:02:07.980
AppCompatActivity — это часть
библиотек Android Support.

00:02:07.980 --> 00:02:11.740
Она позволяет использовать
последние функции UI на Android

00:02:11.740 --> 00:02:15.420
и одновременно поддерживает
более старые устройства Android.

00:02:15.420 --> 00:02:17.940
За счет расширения
класса AppCompatActivity

00:02:17.940 --> 00:02:21.820
мы бесплатно получаем всю функциональность
состояний и методов отсюда.

00:02:21.820 --> 00:02:24.290
Внутри класса MainActivity

00:02:24.490 --> 00:02:26.980
не нужно копировать
и вставлять код отсюда.

00:02:26.980 --> 00:02:28.800
Можно просто расширить этот класс.

00:02:29.990 --> 00:02:31.020
Если вам интересно,

00:02:31.020 --> 00:02:35.880
можно найти больше информации об
AppCompatActivity в Google.

00:02:35.880 --> 00:02:39.700
Вот поисковый массив для этого класса
класса AppCompatActivity

00:02:39.700 --> 00:02:42.020
Поскольку у меня установлено
расширение Chrome,

00:02:42.020 --> 00:02:43.420
я также могу видеть исходный код.

00:02:43.820 --> 00:02:47.890
А вот часть кода, где определен класс
AppCompatActivity.

00:02:47.890 --> 00:02:51.260
Вы видите, что здесь множество
функциональности, но самое главное:

00:02:51.260 --> 00:02:54.510
вам не нужно понимать,
как она реализована.

00:02:54.510 --> 00:02:58.350
Все, что вам нужно знать: когда вы
расширяете класс AppCompatActivity,

00:02:58.350 --> 00:03:01.010
вы получаете всю эту функциональность
бесплатно.

00:03:01.010 --> 00:03:03.580
На высоком уровне
это можно визуализировать так.

00:03:03.580 --> 00:03:05.900
Это определение класса для Main Activity.

00:03:05.900 --> 00:03:08.000
А методы определены вот здесь.

00:03:08.000 --> 00:03:12.350
При расширении AppCompatActivity мы
получаем доступ к состояниям

00:03:12.350 --> 00:03:14.200
и методам AppCompatActivity.

00:03:14.200 --> 00:03:17.870
Сейчас они физически не добавлены
к классу MainActivity,

00:03:17.870 --> 00:03:19.280
но понятно, что они там находятся,

00:03:19.280 --> 00:03:22.930
поскольку вы можете сослаться
на состояние и методы тоже.

00:03:22.930 --> 00:03:26.540
А вот так код может ссылаться
на такие методы, как setContentView

00:03:26.540 --> 00:03:27.840
или findViewById,

00:03:27.840 --> 00:03:32.240
потому что мы унаследовали эти методы.
Мы не определяли их в MainActivity.

00:03:32.240 --> 00:03:35.110
Класс MainActivity показан
как экран на устройстве,

00:03:35.110 --> 00:03:39.520
но мы и этот код не прописывали
в MainActivity. Мы его тоже унаследовали.

00:03:40.220 --> 00:03:43.450
У нас в классе нет состояний и методов
напрямую из AppCompatActivity,

00:03:43.450 --> 00:03:46.840
однако теперь мы знаем, что они тут,
и можем на них ссылаться.

00:03:46.840 --> 00:03:50.260
При использовании наследования
есть плюсы и минусы.

00:03:50.260 --> 00:03:52.540
Иногда хочется унаследовать поведение,

00:03:52.540 --> 00:03:54.980
но в ряде случаев может потребоваться
слегка его изменить.

00:03:55.980 --> 00:03:59.900
Если вы хотите изменить
поведение из унаследованного класса,

00:03:59.900 --> 00:04:02.230
вы можете переопределить нужные методы.

00:04:02.230 --> 00:04:07.360
Добавьте текст @override над методом,
чтобы компьютер понимал,

00:04:07.360 --> 00:04:12.100
что вам не нужна версия метода
из AppCompatActivity,

00:04:12.100 --> 00:04:15.330
а нужна данная версия, которую
вы определили вот здесь.

00:04:15.830 --> 00:04:18.620
Это сложная тема, которая требует
практики,

00:04:18.620 --> 00:04:21.660
тем не менее мы уже видели пример
переопределения метода

00:04:21.660 --> 00:04:23.640
из класса AppCompatActivity,

00:04:23.640 --> 00:04:26.380
и это метод onСreate.

00:04:26.380 --> 00:04:29.770
Используя переопределение
метода onСreate в MainActivity,

00:04:29.770 --> 00:04:34.280
мы указываем собственную реализацию того,
что должно произойти по вызову метода.

00:04:35.180 --> 00:04:37.180
Не беспокойтесь, если вы
сразу всего не понимаете.

00:04:37.180 --> 00:04:40.534
Я просто даю вам краткий обзор
некоторых понятий

00:04:40.534 --> 00:04:42.350
объектно-ориентированного
программирования.

00:04:42.350 --> 00:04:46.160
Совершенно понятно,
что у вас останутся вопросы и

00:04:46.160 --> 00:04:49.370
вам потребуется больше информации
по этим темам

00:04:49.370 --> 00:04:50.860
для полного понимания.

00:04:50.860 --> 00:04:53.771
Другой способ показать
взаимосвязь между классами

00:04:53.771 --> 00:04:58.220
MainActivity и AppCompatActivity —
построить диаграмму иерархии классов.

00:04:58.220 --> 00:05:01.230
Она отличается от диаграммы иерархии
видов view, так как диаграмма иерархии

00:05:01.230 --> 00:05:05.340
видов view показывает дерево видов
view, которые отображаются на экране.

00:05:05.340 --> 00:05:07.810
Диаграмма иерархии классов
показывает взаимоотношение

00:05:07.810 --> 00:05:09.990
между разными Java-классами.

00:05:09.990 --> 00:05:12.860
AppCompatActivity — это суперкласс,

00:05:12.860 --> 00:05:15.868
Начинается с AppCompatActivity
из AppCompactActivity.

00:05:15.868 --> 00:05:18.560
и называется подклассом.

00:05:18.560 --> 00:05:22.200
Итак, когда вы видите определение
этого класса, то, что вы расширяете,

00:05:22.200 --> 00:05:23.970
называется суперклассом,

00:05:23.970 --> 00:05:25.770
а вот это будет подклассом.

00:05:25.770 --> 00:05:29.070
Так, если вы создадите другой класс
под названием DetailActivity

00:05:29.070 --> 00:05:32.340
и расширите AppCompatActivity,
это будет подклассом,

00:05:32.340 --> 00:05:33.409
а это суперклассом.

00:05:34.720 --> 00:05:37.840
А вот еще один пример
унаследования Java-класса.

00:05:37.840 --> 00:05:40.520
Если подумать, и TextView, и ImageView,

00:05:40.520 --> 00:05:44.460
и ButtonView обладают общими свойствами.

00:05:44.460 --> 00:05:48.070
У них всех есть ширина и высота на экране.

00:05:48.070 --> 00:05:51.330
Мы еще об этом не говорили, но
у них также есть состояние видимости,

00:05:51.330 --> 00:05:54.400
Их можно сделать невидимыми или видимыми.

00:05:54.400 --> 00:05:58.650
Есть еще ряд других свойств,
общих для них всех.

00:05:58.650 --> 00:06:02.370
Вместо того чтобы писать код
для этих свойств в TextView,

00:06:02.370 --> 00:06:05.590
а затем копировать его в ImageView
и класс Button,

00:06:05.590 --> 00:06:07.410
можно сделать кое-что поумнее.

00:06:07.610 --> 00:06:11.180
Можно создать класс View,
экспортировать общие свойства

00:06:11.180 --> 00:06:16.710
для всех видов views, а затем
поместить их внутрь этого класса View.

00:06:16.710 --> 00:06:19.530
Таким образом,
код нужно будет написать всего один раз.

00:06:19.730 --> 00:06:22.610
Но теперь как нам соединить TextView

00:06:22.610 --> 00:06:24.000
и класс View?

00:06:24.000 --> 00:06:26.548
Если вы подумали о наследовании, вы правы.

00:06:26.548 --> 00:06:30.080
В java-файле TextView мы определим класс,

00:06:30.080 --> 00:06:33.240
так мы унаследуем все состояния
и методы из класса View,

00:06:34.270 --> 00:06:37.520
и нам не потребуется писать
много кода для класса TextView,

00:06:37.520 --> 00:06:41.360
так как часть их функциональности
уже обозначена в классе View.

00:06:41.360 --> 00:06:44.030
То же самое применимо к классам ImageView
и button.

00:06:44.330 --> 00:06:46.800
Нам не нужно писать много кода,

00:06:46.800 --> 00:06:49.690
в этих файлах потребуется
лишь указать разницу

00:06:49.690 --> 00:06:52.690
в ImageView по сравнению с классом View.

00:06:53.090 --> 00:06:57.720
Я определяю это как обозначение различий.
Итак, в классе ImageView нужно

00:06:57.720 --> 00:07:01.890
указать только то, что отличается
от ImageView по сравнению с классом View.

00:07:03.840 --> 00:07:06.960
Если вы не хотите наследовать
определенное поведение из класса View,

00:07:06.960 --> 00:07:11.760
можно просто указать новое
поведение внутри класса ImageView

00:07:11.760 --> 00:07:12.920
или в любом из этих классов.

00:07:14.070 --> 00:07:16.680
Возвращаясь к терминологии,
в данном примере

00:07:16.680 --> 00:07:20.039
TextView будет подклассом,
а View — суперклассом.

00:07:21.430 --> 00:07:23.280
Если снова обратиться к документации по

00:07:23.280 --> 00:07:27.310
классу TextView,
теперь нам понятна эта часть.

00:07:27.310 --> 00:07:30.000
В ней говорится,
что TextView расширяет View.

00:07:30.000 --> 00:07:33.330
Теперь мы знаем, что это означает:
мы наследуем состояние

00:07:33.330 --> 00:07:35.280
и методы из класса View,

00:07:35.280 --> 00:07:38.330
а ниже диаграмма иерархии классов,

00:07:38.330 --> 00:07:41.884
которая показывает, что класс TextView
наследует класс View.

00:07:43.730 --> 00:07:46.530
А класс View в свою очередь
наследует класс Object.

00:07:47.650 --> 00:07:50.060
Если изучить код,
можно найти другие классы,

00:07:50.060 --> 00:07:54.780
например класс EditText, который
фактически расширяет класс TextView.

00:07:54.780 --> 00:07:57.570
Он берет поведение из класса TextView

00:07:57.570 --> 00:08:00.120
и добавляет к нему
специфичную функциональность.

00:08:01.290 --> 00:08:03.590
Так, EditText расширяет TextView,

00:08:03.590 --> 00:08:06.720
TextView расширяет View,
а View расширяет Object.

00:08:07.220 --> 00:08:10.330
А вот здесь
показана диаграмма иерархии классов.

00:08:11.370 --> 00:08:13.950
Деталей очень много,
и можно разбираться в них часами,

00:08:13.950 --> 00:08:17.010
но я хочу показать вам одну вещь
на странице документации TextView.

00:08:17.510 --> 00:08:20.820
Я хочу познакомить вас с методом
SetVisibility.

00:08:20.820 --> 00:08:24.350
Вот Java-метод для установки
видимости внутри класса TextView,

00:08:24.350 --> 00:08:26.860
эта часть меняется в зависимости
от того, видим view или нет.

00:08:28.000 --> 00:08:33.240
Если кликнуть на этот метод,
я перейду к классу view,

00:08:33.240 --> 00:08:36.010
а затем идет описание того,
что этот метод делает.

00:08:36.010 --> 00:08:39.860
Вы видите, что у TextView object есть
метод SetVisibility,

00:08:39.860 --> 00:08:43.659
но по сути он был унаследован
из класса View.

00:08:43.659 --> 00:08:46.870
Так мы получили функциональность
бесплатно из класса View.

00:08:47.470 --> 00:08:50.930
Хорошо, мы только что ознакомились
с множеством новых понятий.

00:08:50.930 --> 00:08:56.040
Обычно изучение данного материала занимает
целый семестр курса компьютерных наук.

00:08:56.040 --> 00:08:58.260
Давайте теперь немного попрактикуемся, и,

00:08:58.260 --> 00:09:01.170
я надеюсь, вы сможете
составить для себя полную картину.

00:09:01.170 --> 00:09:03.310
Но учтите, что потребуется
гораздо больше времени и

00:09:03.310 --> 00:09:06.610
практики, прежде чем вы полностью
разберетесь в этих понятиях.

00:09:06.610 --> 00:09:09.700
Так, в этом упражнении вы должны
будете создать новое приложение Android,

00:09:09.700 --> 00:09:11.830
потому что мы не хотим
испортить приложение JustJava.

00:09:13.070 --> 00:09:15.140
Сначала создайте проект,
потом запустите приложение.

00:09:15.790 --> 00:09:18.630
Когда вы создадите приложение, вы увидите
файл MainActivity.

00:09:18.630 --> 00:09:22.530
Этот файл MainActivity будет унаследован
из AppCompactActivity.

00:09:22.530 --> 00:09:26.060
Если в вашей версии Android Studio
вместо этого MainActivity

00:09:26.060 --> 00:09:28.760
наследуется из ActionBarActivity,
все нормально:

00:09:28.760 --> 00:09:32.200
это просто более старая версия
AppCompactActivity.

00:09:32.200 --> 00:09:35.650
Удалив этот метод переопределения,
мы вернемся к тому,

00:09:35.650 --> 00:09:40.280
как метод onСreate появился
в классе AppCompactActivity.

00:09:40.280 --> 00:09:43.340
Наличие этого метода говорит о том,
что нам нужно

00:09:43.340 --> 00:09:45.830
другое поведение в MainActivity
для метода onCreate.

00:09:46.430 --> 00:09:49.240
То есть его удаление приводит
к восстановлению исходного поведения

00:09:49.540 --> 00:09:51.640
класса AppCompatActivity.

00:09:52.040 --> 00:09:54.680
После запуска приложения
обратите внимание на то, что изменилось

00:09:54.680 --> 00:09:57.250
по сравнению с первым запуском приложения.

00:09:57.250 --> 00:09:58.510
Запишите свой ответ в тетради.

