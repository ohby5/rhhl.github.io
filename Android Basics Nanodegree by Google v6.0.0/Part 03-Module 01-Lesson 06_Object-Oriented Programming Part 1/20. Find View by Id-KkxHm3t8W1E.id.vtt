WEBVTT
Kind: captions
Language: id

00:00:00.430 --> 00:00:02.969
Mari kembali ke aktifitas utama dari
aplikasi Just Java kita.

00:00:02.969 --> 00:00:06.190
Secara spesifik kita melihat pada metode
menampilkan pesan dan

00:00:06.190 --> 00:00:08.570
mencoba untuk memahami
segala sesuatu yang sedang terjadi disini

00:00:08.570 --> 00:00:13.870
Walaupun metode findViewByld tidak
disebutkan di dalam kelas yang kita tahu

00:00:13.870 --> 00:00:18.740
sekarang bahwa sebenarnya telah di definisikan
dalam kelas super di AppCompatActivity

00:00:18.740 --> 00:00:20.440
Hal yang sama untuk setContentView.

00:00:20.440 --> 00:00:23.820
Hal ini di definisikan di dalam
kelas AppCompatActivity.

00:00:23.820 --> 00:00:26.710
Tetapi apa yang sebenarnya terjadi
dalam metode ini, dan

00:00:26.710 --> 00:00:29.300
mengapa kita perlu melewati resource ID?

00:00:29.300 --> 00:00:31.392
Mengapa kita harus memiliki
parentesis ekstra disini?

00:00:31.392 --> 00:00:34.410
Untuk menjawab pertanyaan tersebut, Saya akan
meringkas semua yang telah kita pelajari

00:00:34.410 --> 00:00:37.720
selama ini dan membimbing anda
untuk mengetahui mengapa kode ini ada disini.

00:00:38.870 --> 00:00:40.350
Apakah anda ingat diagram ini?

00:00:40.350 --> 00:00:44.910
Ketika anda mengklik pada ikon aplikasi pada
perangkat dia akan membuka aktifitas utama.

00:00:44.910 --> 00:00:48.650
Diantara kode kita, metode onCreate
dari aktifitas utama terpanggil

00:00:48.650 --> 00:00:49.770
melalui sistem.

00:00:49.770 --> 00:00:53.220
Diantara metode ini kita memiliki
sebuah metode yang disebut untuk setContentView

00:00:53.220 --> 00:00:55.340
dengan sumber tata letak ID.

00:00:55.340 --> 00:00:59.472
Pada latihan awal kita telah melewati tampilan
teks tunggal untuk menyetel tampilan isi.

00:00:59.488 --> 00:01:01.950
Tetapi kita menginginkan lebih dari
satu tampilan untuk aplikasi kita.

00:01:01.950 --> 00:01:04.650
Jadi kita melewati penataan sumber ID.

00:01:04.650 --> 00:01:06.980
Ini adalah peta untuk sebuah file XML.

00:01:06.980 --> 00:01:09.560
Sekali kita menyetel tampilan isi,
aktifitas akan berjalan dan

00:01:09.560 --> 00:01:13.200
menemukan file penataan XML dan
kemudian membaca setiap barisnya.

00:01:13.200 --> 00:01:18.140
Untuk setiap tampilan, mengembangkan,
atau menciptakan, sebuah objek Java untuknya.

00:01:18.140 --> 00:01:19.860
Hal itu akan berlangsung melalui file XML, dan

00:01:19.860 --> 00:01:23.040
kemudian membangun keseluruhan
hirarki dari objek-objek Java.

00:01:23.040 --> 00:01:27.090
Ketika mengembangkan setiap tampilan-tampilan
ini sebenarnya memanggil pembangunnya,

00:01:27.090 --> 00:01:31.600
NewTextView atau NewLinearLayout, dan kemudian
akan melewati semua atribut-atribut ini.

00:01:31.600 --> 00:01:34.760
melalui objek Java, maka kemudian
dapat diatur dengan benar.

00:01:34.760 --> 00:01:38.700
Ketahui bahwa kita tidak perlu menulis kode
untuk NewTextView atau NewLinearLayout, dan

00:01:38.700 --> 00:01:40.650
untuk menyetel ukuran fonnya.

00:01:40.650 --> 00:01:43.984
Semua itu telah di tangani oleh proses
pengembangan dari aktifitas.

00:01:44.000 --> 00:01:45.790
Untuk berinteraksi dengan
tampilan-tampilan ini

00:01:45.800 --> 00:01:48.208
ketika aplikasi berjalan
dan untuk merubah mereka,

00:01:48.224 --> 00:01:49.830
sebagai contoh, untuk merubah teksnya atau

00:01:49.830 --> 00:01:54.480
untuk merubah tombol-tombolnya,
maka kita butuh mencari objek-objek Java ini.

00:01:54.480 --> 00:01:58.560
Sekali kita temukan mereka, kita dapat menyimpan
mereka sebagai variabel dalam aktifitas utama.

00:01:58.560 --> 00:02:01.360
Ingat, kita tidak menciptakan
TextViews baru dari awal,

00:02:01.360 --> 00:02:04.310
kita hanya menemukan yang sudah ada
dalam hirarki tampilan ini.

00:02:06.060 --> 00:02:08.848
Ini adalah variabel-variabel yang kita gunakan
selama ini dalam aktifitas utama.

00:02:08.864 --> 00:02:13.160
Kita memiliki sebuah variabel untuk jumlah,
harga, dan pesan harga.

00:02:13.160 --> 00:02:15.328
Ini adalah campuran
dari variabel lokal dan global.

00:02:15.360 --> 00:02:17.870
Untuk berinteraksi dengan
tampilan-tampilan dalam tampilan hirarki,

00:02:17.904 --> 00:02:19.520
kita harus menciptakan variabel-variabel

00:02:19.520 --> 00:02:21.328
yang merujuk kepada
tampilan-tampilan spesifik ini.

00:02:22.500 --> 00:02:25.765
Sebagai contoh, kita dapat menciptakan sebuah
variabel yang disebut TextView jumlah,

00:02:25.765 --> 00:02:28.580
yang kita rujuk kepada TextView disini.

00:02:28.580 --> 00:02:31.340
Jika anda klik tombol tambah
atau kurang di UI,

00:02:31.340 --> 00:02:34.340
kemudian anda dapat merubah teks TextView
untuk menunjukkan nomor yang berbeda.

00:02:36.220 --> 00:02:39.340
Kita dapat juga memiliki sebuah variabel
yang dinamakan orderSummaryTextView

00:02:39.340 --> 00:02:41.730
menunjukkan pada TextView ini.

00:02:41.730 --> 00:02:44.590
Ketika anda mengklik tombol pesan
kemudian orderSummaryTextView

00:02:44.590 --> 00:02:47.660
akan merubah teksnya untuk
menunjukkan ringkasan pesanan baru.

00:02:47.660 --> 00:02:49.776
Jadi anda dapat melihat
bagaimana memiliki variabel-variabel

00:02:49.770 --> 00:02:51.680
yang menunjukkan kepada
sebagian tampilan-tampilan ini

00:02:51.680 --> 00:02:55.440
dapat berguna untuk merubah UI
ketika aplikasi sedang berjalan.

00:02:55.440 --> 00:02:59.430
Tetapi bagaimana kita membuat koneksi
antara variabel ini

00:02:59.430 --> 00:03:00.790
dengan TextView ini?

00:03:00.790 --> 00:03:03.780
Dan bagaimana kita membuat koneksi
antara orderSummaryTextView, ini dan

00:03:03.780 --> 00:03:05.168
TextView ini?

00:03:06.250 --> 00:03:08.139
Kembali ke penataan file XML,

00:03:08.139 --> 00:03:11.699
ingatkah bahwa kita telah menugaskan
tampilan ID-ID menjadi tampilan tertentu?

00:03:12.953 --> 00:03:17.400
Untuk TextView ini, kita telah memberi
tampilan ID dari quantity.text.view.

00:03:17.400 --> 00:03:21.340
Untuk tampilan ini kita telah memberi
sebuah ID order.summary.text.view.

00:03:21.340 --> 00:03:24.240
Ini opsional untuk menetapkan ID
untuk ditampilkan dan

00:03:24.240 --> 00:03:28.760
anda hanya perlu menetapkan satu tampilan ID jika
anda butuh merujuk pada tampilan itu nantinya.

00:03:28.760 --> 00:03:33.180
Sebagai contoh anda dapat menetapkan
tampilan ID pada segalanya, tetapi itu tidak perlu.

00:03:33.180 --> 00:03:37.470
Kita hanya perlu merujuk ke dua tampilan ini
nantinya di kode Java kita.

00:03:37.470 --> 00:03:39.860
Jadi mari kita tetapkan
ID-nya bagi dua tampilan ini.

00:03:40.880 --> 00:03:43.900
Oke, kita telah tetapkan bahwa
tampilan-tampilan telah memiliki ID tampilan

00:03:43.900 --> 00:03:46.700
jadi kita bisa merujuk ke mereka
nanti dalam kode Java.

00:03:46.700 --> 00:03:49.520
Kita juga telah menetapkan bahwa
kita menginginkan variabel-variabel

00:03:49.560 --> 00:03:51.344
yang menunjukkan pada tampilan ini

00:03:51.344 --> 00:03:53.740
bahwa kita dapat memanipulasi
tampilan-tampilan ini.

00:03:53.740 --> 00:03:57.680
Tetapi kita masih belum tahu persis
bagaimana membuat sambungan antara

00:03:57.680 --> 00:04:01.160
variabel ini dan objek Java spesifik.

00:04:01.160 --> 00:04:04.700
dan sama juga untuk variabel ini
dan objek Java ini.

00:04:04.700 --> 00:04:08.820
Dalam kelas AppCompatActivity, Saya ingin
menunjukkan kepada anda metode spesifik.

00:04:08.820 --> 00:04:12.560
Ini dinamakan findViewByld dan
ini diambil sebagai masukan sumber ID.

00:04:13.810 --> 00:04:16.290
Metode findViewBlyd.

00:04:16.290 --> 00:04:21.220
temukan sebuah tampilan yang koresponden
dengan ID-nya yang telah melewati sebagai masukan.

00:04:21.220 --> 00:04:23.790
Dan aktifitas akan mencari tampilan ini.

00:04:23.790 --> 00:04:28.890
dalam hirarki tampilan dari XML
yang telah di proses di dalam metode onCreate.

00:04:28.890 --> 00:04:30.560
Jadi seperti yang sudah saya sampaikan di awal,

00:04:30.560 --> 00:04:34.350
aktifitas dalam metode onCreate
menyetel hirarki tampilan dan

00:04:34.350 --> 00:04:39.405
kemudian metode findViewByID akan berjalan dan
menemukan tampilan diantara hirarki tampilan.

00:04:39.405 --> 00:04:43.615
Nilai kembali dari metode ini adalah
sebuah objek dari tampilan bertipe.

00:04:43.615 --> 00:04:47.415
Kolom sebelah kiri ini menunjukkan nilai kembali
dari semua metode-metode ini.

00:04:47.415 --> 00:04:51.815
Ini berarti bahwa dalam kode aktifitas
kita dapat memanggil findViewByld,

00:04:51.815 --> 00:04:56.670
melewati sumber ID dari tampilan yang
kita inginkan, dan kemudian akan mengembalikan

00:04:56.670 --> 00:04:59.980
sebuah objek tampilan dan kemudian bisa
kita simpan sebagai variabel dalam aktifitas.

00:05:02.170 --> 00:05:04.300
Kode MainActivity Java akan terlihat seperti ini.

00:05:05.360 --> 00:05:07.230
Kita dapat memanggil findViewByld dan

00:05:07.230 --> 00:05:12.140
kemudian melewatinya sebagai masukan
dari sumber ID dari tampilan yang kita inginkan.

00:05:12.140 --> 00:05:15.050
Kita telah memberikan sebuah ID pada TextView ini
dari order.summary.text.view.

00:05:15.050 --> 00:05:19.370
Jadi disini kita merujuknya sebagai
R.id.order_summary_text_view.

00:05:19.370 --> 00:05:23.490
Metode ini akan berjalan dan melintasi seluruh
hirarki tampilan dan kemudian mencari

00:05:23.490 --> 00:05:24.930
tampilan dengan ID ini.

00:05:26.110 --> 00:05:31.030
Kemudian itu akan mengembalikan objek Java ini
sebagai nilai kembali dari metode ini.

00:05:31.030 --> 00:05:34.790
Kita dapat menyimpan nilai kembali ke dalam
variabel ini pada sisi tangan kanan,

00:05:34.790 --> 00:05:39.290
disebut orderSummaryTextView, dan
ini adalah variabel dari tampilan bertipe.

00:05:39.290 --> 00:05:42.610
Jadi, ini akan mengembalikan tampilan dan kita
menyimpannya di dalam sebuah variabel tampilan.

00:05:42.610 --> 00:05:47.280
Kemudian dalam MainActivity, kita juga dapat
memanggil findViewByld dan kemudian melewati

00:05:47.280 --> 00:05:53.120
sumber ID ini, R.id.quantity_text_view,
dimana merujuk kepada TextView ini.

00:05:53.120 --> 00:05:55.610
Ini adalah TextView di dalam pemilih kuantitas.

00:05:55.610 --> 00:05:58.847
Ketika ini dipanggil, aktifitas akan mencari
diantara hirarki tampilan dan

00:05:58.847 --> 00:06:01.460
kemudian mencoba mencari tampilan dengan ID ini.

00:06:01.460 --> 00:06:03.265
Kemudian akan kembali ke tampilan ini dan

00:06:03.265 --> 00:06:07.190
kemudian kita dapat menyimpannya dalam sebuah
variabel yang bernama quantity_text_view.

00:06:07.190 --> 00:06:09.490
Variabel ini juga memiliki
data tipe dari tampilan.

00:06:10.490 --> 00:06:13.440
Ini menjelaskan bagaimana anda dapat
memiliki variabel-variabel

00:06:13.440 --> 00:06:17.190
quantityTextView dan orderSummaryTextView
di antara MainActivity dan

00:06:17.190 --> 00:06:20.800
bahwa variabel-variabel ini dapat menyambung
dengan objek-objek Java di dalam hirarki tampilan.

00:06:20.800 --> 00:06:21.856
Omong-omong,

00:06:21.904 --> 00:06:25.460
Saya telah membuat tipe-tipe data disini
dari setiap variabel di kolom sebelah kanan.

00:06:26.690 --> 00:06:29.750
Jadi dua variabel ini memiliki tampilan bertipe
sebagaimana dinyatakan disini.

