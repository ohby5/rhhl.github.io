WEBVTT
Kind: captions
Language: tr

00:00:00.490 --> 00:00:01.635
Kutuları hatırlıyor musun?

00:00:01.635 --> 00:00:02.809
&gt;&gt; Hangi kutular?

00:00:02.809 --> 00:00:04.090
&gt;&gt; Bu kutular.

00:00:04.090 --> 00:00:06.910
&gt;&gt; Ah!
&gt;&gt; Bunları hatırlıyor musun?

00:00:06.910 --> 00:00:07.680
&gt;&gt; Oh evet, evet.

00:00:07.680 --> 00:00:08.460
Hatırlıyorum.

00:00:08.460 --> 00:00:10.580
Bunlar içine değer
koyduğun değişkenler.

00:00:10.580 --> 00:00:11.030
Evet

00:00:11.030 --> 00:00:15.120
ve daha büyük bir Java nesnesi oluşturmak
için çok sayıda değişken birleştirilebilir

00:00:15.120 --> 00:00:16.990
&gt;&gt; Ah, yani iki ya da daha fazla
değişkeni alıp

00:00:16.990 --> 00:00:18.320
daha büyük bir şey yapabilirsin.

00:00:18.320 --> 00:00:19.609
&gt;&gt; Kesinlikle.
&gt;&gt; Tamam

00:00:19.709 --> 00:00:21.751
&gt;&gt; [SES] TextView gibi

00:00:21.751 --> 00:00:23.960
&gt;&gt; Evet.
Böylece bir tam sayı değişkenimiz olabilir.

00:00:23.960 --> 00:00:25.640
&gt;&gt; Bu font boyutu için.

00:00:25.640 --> 00:00:26.210
&gt;&gt; Kesinlikle.

00:00:26.210 --> 00:00:27.752
&gt;&gt; Tamam.
[SES]

00:00:27.752 --> 00:00:28.637
&gt;&gt; Ve ayrıca bir

00:00:28.637 --> 00:00:29.460
string değişkenin olabilir.

00:00:29.460 --> 00:00:31.830
&gt;&gt; Ve metnin kendisi için
bir string değişkeni.

00:00:31.830 --> 00:00:36.240
&gt;&gt; Evet ve bunlar TextView’un durumu
olarak TextView’un içine giderler.

00:00:36.240 --> 00:00:38.970
&gt;&gt; Ve sonra birazdan ele alacağımız
farklı yöntemleri kullanarak

00:00:38.970 --> 00:00:39.900
bunlarla etkileşimde olacağız.

00:00:39.900 --> 00:00:40.500
&gt;&gt; Kesinlikle.

00:00:40.500 --> 00:00:41.290
&gt;&gt; Peki.
Hadi yapalım.

00:00:42.480 --> 00:00:46.220
&gt;&gt; Daha önce bahsettiğimiz gibi ekranda
bunun gibi bir TextView gösterilmesi

00:00:46.220 --> 00:00:49.690
aslında uygulama içindeki bir
Java nesnesi tarafından kontrol edilir.

00:00:49.690 --> 00:00:52.300
Bu bir TextView Java
nesne örneğidir.

00:00:52.300 --> 00:00:55.890
Bir kutu gibidir ve
içinde bir durum içerir.

00:00:55.890 --> 00:00:58.350
Bu durum bir dizi
alandan oluşur.

00:00:58.350 --> 00:01:00.540
Bir alan, genel değişkenleri öğrendiğimiz
ikinci derste

00:01:00.540 --> 00:01:03.060
öğrendiğimiz gibi bir değişkendir.

00:01:03.060 --> 00:01:05.730
“Today” dizesini içeren
bir metin alanımız olabilir

00:01:05.730 --> 00:01:09.220
ve bu nihai olarak ekranda
görünecek olan metindir.

00:01:09.220 --> 00:01:13.520
Aynı zamanda bu metnin font büyüklüğünü
gösteren bir tam sayımız olabilir.

00:01:13.520 --> 00:01:14.910
Metin rengi, font ailesi gibi

00:01:14.910 --> 00:01:19.460
TextView durumunu oluşturan
bir dizi başka alanımız daha bulunur.

00:01:19.460 --> 00:01:21.900
Sadece onları bu resimde çizmedim.

00:01:21.900 --> 00:01:23.940
Bu Java nesnesiyle etkileşimde olmak ve

00:01:23.940 --> 00:01:28.420
uygulama çalışırken değiştirmek için
TextView’da yöntemler çağırabiliriz.

00:01:28.420 --> 00:01:31.020
Yöntemleri daha önce
üçüncü derste öğrendik.

00:01:31.020 --> 00:01:35.120
Bir TextView üzerinde bazı örnek
yöntemler setText ve getText’dir.

00:01:35.120 --> 00:01:39.910
Ayrıca setTextSize veya getTextSize vb.
yöntemleriniz olabilir.

00:01:39.910 --> 00:01:43.190
Tüm bu yöntemler sadece
bir yönerge listesini çalıştırır.

00:01:43.190 --> 00:01:45.590
onDraw gibi ekran üzerinde
bir TextView çizmeyi yöneten

00:01:45.590 --> 00:01:48.440
daha karmaşık
yöntemleriniz olabilir.

00:01:48.440 --> 00:01:53.350
Yani bütün olarak bu TextView nesnesi
bu TextView’ün durum bilgisini içerir.

00:01:53.350 --> 00:01:57.850
ve bu TextView ile etkileşimde olmak
için durumu değiştirmek veya,

00:01:57.850 --> 00:02:01.500
daha karmaşık eylemler yapmak gibi
yöntemler çağırabilirsiniz.

00:02:02.850 --> 00:02:06.565
Ekranda bir ImageView göstermek için
uygulama içinde ImageView için

00:02:06.565 --> 00:02:08.838
bir Java nesnemiz var.

00:02:08.838 --> 00:02:13.710
Bu belirli ImageView hangi resmin
gösterilmesi gerektiği bilgisi yanı sıra

00:02:13.710 --> 00:02:17.680
‘ortalayarak kırp’ ölçekleme tipi gibi
durum bilgisini içerir.

00:02:17.680 --> 00:02:20.490
Yine bir ImageView durumunu oluşturan
bir dizi başka alan bulunur,

00:02:20.490 --> 00:02:22.250
sadece onları burada çizmedim.

00:02:22.250 --> 00:02:25.759
setIMage, setScaleType gibi
yöntemler vardır ve hatta

00:02:25.759 --> 00:02:30.330
bu ImageView’ü ekranda çizmeyi yöneten
onDraw gibi daha karmaşık yöntemler.

00:02:30.330 --> 00:02:31.760
Dikkat edin, geliştiriciler olarak,

00:02:31.760 --> 00:02:35.680
ekranda çizim yapmasını söylemek için açık
olarak onDraw’u çağırmak zorunda değiliz.

00:02:35.680 --> 00:02:39.880
Android bu çağrıyı bizim için
otomatik olarak yapar ancak örneğin

00:02:39.880 --> 00:02:43.910
ImageView’ü değiştirmek için
bu yöntemleri çağırabilmek yararlıdır.

00:02:43.910 --> 00:02:47.580
Öyleyse bir ImageView durumu içindeki
tüm bu alanların ne olduğunu ve

00:02:47.580 --> 00:02:50.530
bu ImageView’un tüm yöntemlerinin
ne olduğunu nasıl biliriz?

00:02:50.530 --> 00:02:53.980
Bu soruya cevap vermek için bu nesnenin
sınıf tanımlamasına bakmamız gerekir.

00:02:55.010 --> 00:02:57.574
Bu TextView.java adı verilen bir dosyadır,

00:02:57.574 --> 00:03:00.890
aynı MainActivity.java’yı
tanımladığımız gibi.

00:03:00.890 --> 00:03:05.130
Bu TextView sınıf dosyası içinde
bir dizi kodumuz bulunur ve

00:03:05.130 --> 00:03:08.530
bunlar TextView durumu yanı sıra
yöntemler ile ilgilidir.

00:03:08.530 --> 00:03:12.240
Tam olarak durum ve
yöntemler demez ancak

00:03:12.240 --> 00:03:14.990
durum hakkında bilgi içerir ve
yöntemler hakkında bilgi içerir.

00:03:16.020 --> 00:03:19.970
Bunu TextView’ın nasıl davrandığına dair
belirleyici kurallar olarak düşünün.

00:03:19.970 --> 00:03:25.750
Bu nesne örneği metin dizesi “today” gibi
belirli bir bilgiyi saklayabilir.

00:03:25.750 --> 00:03:26.860
ya da metin boyutu 18 gibi.

00:03:26.860 --> 00:03:32.420
Bu sınıfı ayrıca daha fazla TextView nesne
örneği oluşturmak için kullanabilirsiniz

00:03:32.420 --> 00:03:34.590
ve bunların farklı bir
metin string değeri olacaktır.

00:03:34.590 --> 00:03:37.010
Sanırım bu “hello” diyen bir
metin içerebilir

00:03:37.010 --> 00:03:39.800
ve bu “goodbye” diyen
bir metin içerebilir.

00:03:39.800 --> 00:03:43.050
Farklı font boyutları, farklı metin
renkleri vs. olabilir.

00:03:44.080 --> 00:03:47.520
Bununla birlikte hepsi
sınıf şablonuna dayılıdırlar.

00:03:47.520 --> 00:03:50.670
Bir sınıf ile bir nesne örneğini
ayırmanın zor olduğunu düşünebilirsiniz,

00:03:50.670 --> 00:03:51.890
sorun değil.

00:03:51.890 --> 00:03:53.760
Alışmak biraz zaman alacaktır.

00:03:53.760 --> 00:03:55.630
İşte size yardım edecek bir benzetme.

00:03:55.630 --> 00:03:59.270
Bunu bir evin kat planı
yapmak gibi düşünebilirsiniz.

00:03:59.270 --> 00:04:02.680
Bu kat planını gerçek evler
yapmak için kullanabilirsiniz.

00:04:02.680 --> 00:04:04.320
Bu evlerin her biri
biraz farklı olabilir.

00:04:04.320 --> 00:04:06.990
Ancak hepsi bu ana kat planına
dayalıdır.

00:04:06.990 --> 00:04:10.270
Bu kat planının evin kendisi
olmadığını dikkate almak önemlidir.

00:04:10.270 --> 00:04:12.110
Bu sadece bir plandır.

00:04:12.110 --> 00:04:17.079
Aynı şekilde, TextView sınıfı bu nesne
örneklerini oluşturmak için kullanılır.

00:04:17.079 --> 00:04:20.480
Yani gerçek metin değerlerini,
metin renk değerlerini ve metin boyutlarını

00:04:20.480 --> 00:04:23.350
içeren bu örneklerdir.

00:04:23.350 --> 00:04:25.010
O halde bu sınıflardan biri
neye benzer?

