WEBVTT
Kind: captions
Language: fr

00:00:00.680 --> 00:00:02.750
Nous avons déjà fait ensemble
un paramètre entrée.

00:00:02.750 --> 00:00:05.689
C'était le code pour la méthode
calculerPrix qui figurait déjà dans

00:00:05.689 --> 00:00:07.110
les notes de l'instructeur.

00:00:07.110 --> 00:00:09.760
Maintenant nous allons faire un cas de 
deux paramètres d'entrée.

00:00:09.760 --> 00:00:14.450
Dans la méthode soumettreCommande, faisons
appel calculerPrix (quantité, 10).

00:00:14.450 --> 00:00:18.580
Où 10 représente 10$ par tasse de café.

00:00:18.580 --> 00:00:20.900
Nous allons faire ce changement d'abord.

00:00:20.900 --> 00:00:26.214
Dans la méthode soumettreCommande, je vais
appeler calculerPrix (quantité, 10).

00:00:26.214 --> 00:00:29.610
Je passe deux arguments à cette méthode.

00:00:29.610 --> 00:00:32.950
Il y a une erreur car ça ne correspond
pas à la signature de méthode ici.

00:00:32.950 --> 00:00:35.470
Et je vais le mettre à jour.

00:00:35.470 --> 00:00:38.580
À l'intérieur des parenthèses
je vais ajouter une virgule.

00:00:38.580 --> 00:00:41.520
Puis tapez prix en entier

00:00:41.520 --> 00:00:47.040
car nous le transmettons prix comme
la deuxième entrée et c'est un entier.

00:00:47.040 --> 00:00:50.190
Immédiatement il est dit que il y a
une erreur parce qu'

00:00:50.190 --> 00:00:54.140
il ne correspond pas à la signature de la
méthode ici, qui a seulement un seul
paramètre d'entrée.

00:00:54.140 --> 00:00:57.200
Je vais le changer comme ça il aura un 
deuxième paramètre d'entrée.

00:00:57.200 --> 00:00:58.420
A l'intérieur de la parenthèse ouverte et

00:00:58.420 --> 00:01:01.070
parenthèse fermée, je vais ajouter un 
deuxième paramètre.

00:01:02.280 --> 00:01:05.630
Puisque c'est le prix par tasse de café,
je vais l'appeler

00:01:05.630 --> 00:01:10.030
prix par tasse et c'est un nombre, donc
je dis que le type de données est entier.

00:01:11.050 --> 00:01:13.420
Le nom du type de paramètre peut être
ce que vous voulez.

00:01:13.420 --> 00:01:16.850
Il doit décrire les informations
qu'il détient.

00:01:16.850 --> 00:01:20.530
Alors que le type de données doit être
un type de données spécifique de java.

00:01:20.530 --> 00:01:24.090
Entier, chaîne de caractère et ceux que
nous n'avons pas encore étudié.

00:01:24.090 --> 00:01:29.670
J'ai également mis à jour le document java
pour décrire ce second paramètre d'entrée.

00:01:29.670 --> 00:01:33.070
En regardant à l'intérieur de
cette méthode, nous prenons la quantité et

00:01:33.070 --> 00:01:36.630
le multipliant par 5 à 5$
par tasse de café.

00:01:36.630 --> 00:01:40.130
Mais maintenant le prix par tasse
a changé à une variable.

00:01:40.130 --> 00:01:43.960
Utilisons le prix par tasse
au lieu du codage à la valeur 5.

00:01:43.960 --> 00:01:47.340
Maintenant le prix total de la commande
va être une quantité

00:01:47.340 --> 00:01:48.270
de fois par prix de tasse.

00:01:48.270 --> 00:01:51.500
Si vous repensez à l'exemple analogique
que je parlais

00:01:51.500 --> 00:01:55.350
plus tôt, maintenant quantité et prix par
tasse sont permutables pour

00:01:55.350 --> 00:01:57.699
différentes valeurs à cause de leur
paramètres d'entrée.

00:01:58.940 --> 00:02:01.700
On pourrait appeler calculerPrix avec
une quantité différente et

00:02:01.700 --> 00:02:04.860
un prix par tasse différent et ce calcul
fonctionnerait encore.

00:02:06.030 --> 00:02:08.840
Maintenant faisons le cas où l'on a aucun
paramètre d'entrée.

00:02:08.840 --> 00:02:10.190
Dans la méthode soumettreCommamde,

00:02:10.190 --> 00:02:13.110
Nous devrions appeler calculerPrix
avec des parenthèses vides.

00:02:14.310 --> 00:02:17.200
Dans la méthode soumettreCommande, quand
j'appelle calculer prix,

00:02:17.200 --> 00:02:18.619
Je vais supprimer les arguments.

00:02:19.620 --> 00:02:21.700
Maintenant nous ne passons aucune entrée
dans cette méthode.

00:02:22.790 --> 00:02:25.590
Il y a un trait de soulignement rouge
immédiatement parce qu'il existe une
incompatibilité avec

00:02:25.590 --> 00:02:28.290
la signature de la méthode,
alors je vais continuer et

00:02:28.290 --> 00:02:29.900
effacer tous ces paramètres d'entrée.

00:02:31.110 --> 00:02:34.380
Il se plaint également une erreur parce
que ces paramètres n'existent pas, alors

00:02:34.380 --> 00:02:35.820
je peux continuer et supprimer l'élément.

00:02:37.330 --> 00:02:41.460
Alors, nous avons une erreur disant qu'il
ne peut résoudre le symbole
prix par tasse.

00:02:41.460 --> 00:02:44.720
Il n'est plus une variable d'entrée,
il faut donc revenir à

00:02:44.720 --> 00:02:49.060
la valeur codée de prix qui est $5 ou vous
pouvez choisir n'importe quel autre prix.

00:02:50.070 --> 00:02:53.230
L'ordinateur ne se plaignent pas de
la quantité car c'est en fait

00:02:53.230 --> 00:02:54.570
une variable globale, et

00:02:54.570 --> 00:02:58.790
vous pouvez référencer la variable quantité
de n'importe quelle méthode dans
l'activité principale.

00:02:58.790 --> 00:03:00.470
Désolé. J'aurais pris un nom autre que

00:03:00.470 --> 00:03:02.360
quantité pour le paramètre d'entrée.

00:03:02.360 --> 00:03:05.830
Mais vous voyez l'idée, sans aucun
paramètre d'entrée,

00:03:05.830 --> 00:03:08.120
vous pouvez uniquement faire référence 
aux variables globales.

00:03:08.120 --> 00:03:11.680
Vous pouvez utiliser des valeurs codées ou
Si vous créez des variables locales ici,

00:03:11.680 --> 00:03:12.630
vous pouvez vous référer à eux.

