WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:03.770
We've created a simplified
version of the TextView class

00:00:03.770 --> 00:00:06.810
which would be saved in
the TextView.java file.

00:00:06.810 --> 00:00:08.290
We simplified it so
it would be easier for

00:00:08.290 --> 00:00:11.060
you to understand what
a class would look like.

00:00:11.060 --> 00:00:13.710
First, it starts with
an access modifier.

00:00:13.710 --> 00:00:15.100
It's marked as public so

00:00:15.100 --> 00:00:19.480
that other things like inactivity
can use this TextView class.

00:00:19.480 --> 00:00:21.040
Then we have the word class.

00:00:21.040 --> 00:00:24.310
This indicates to java that
this is a class definition.

00:00:24.310 --> 00:00:26.400
Then we have the name in a class.

00:00:26.400 --> 00:00:30.590
The name of a class in Java starts with
a capital letter and it's in camel case.

00:00:30.590 --> 00:00:34.360
So there's no spaces and
it capitalizes subsequent words.

00:00:34.360 --> 00:00:36.800
There's some other text here but
we'll look into that later.

00:00:36.800 --> 00:00:39.304
The important thing is we
have an opening brace and

00:00:39.304 --> 00:00:42.354
then at the bottom of the definition
we have a closing brace.

00:00:42.354 --> 00:00:47.130
Now inside this TextView class we
have a bunch of variables here.

00:00:47.130 --> 00:00:51.140
Each of these represent a field in
a TextView, so we have a field for

00:00:51.140 --> 00:00:55.700
the text of the TextView and a field for
the text color of the TextView.

00:00:55.700 --> 00:00:57.850
There are other fields as well,
but remember,

00:00:57.850 --> 00:00:59.928
this is a simplified version
of the TextView class.

00:01:01.000 --> 00:01:04.239
You also have a variable to store
a reference to the context of

00:01:04.239 --> 00:01:05.740
the application.

00:01:05.740 --> 00:01:08.750
You can read more about context in
the instructor notes below, but

00:01:08.750 --> 00:01:13.170
it's basically a way to access
information about the app, like for

00:01:13.170 --> 00:01:16.670
example you can access resources
in the app using the context.

00:01:17.870 --> 00:01:19.990
And these are the methods
of the TextView.

00:01:19.990 --> 00:01:23.690
The setText method takes
as input a text string.

00:01:23.690 --> 00:01:28.840
Then it updates the global variable
mText to use this new value.

00:01:28.840 --> 00:01:32.480
Similarly the setTextColor
takes as input a new color and

00:01:32.480 --> 00:01:36.080
it updates the internal state
to have this new color value.

00:01:36.080 --> 00:01:38.045
There's also methods like getText and

00:01:38.045 --> 00:01:42.920
getTextColor, which return the internal
text string, or the internal text color.

00:01:44.080 --> 00:01:48.091
One more thing, you may have noticed
that these global variables here all

00:01:48.091 --> 00:01:49.651
start with the lower case m.

00:01:49.651 --> 00:01:51.510
M stands for member variable, and

00:01:51.510 --> 00:01:55.330
these are all member variables
of this TextView class.

00:01:55.330 --> 00:01:58.580
Member variable is just
another way to say field or

00:01:58.580 --> 00:02:00.990
the state of the TextView class.

00:02:00.990 --> 00:02:03.380
Here's a simplified ImageView class.

00:02:03.380 --> 00:02:05.320
You would find it in
the ImageView.java file.

00:02:06.400 --> 00:02:10.580
It starts with public class and
then ImageView is the name of the class.

00:02:10.580 --> 00:02:13.550
And then we have opening and
closing braces.

00:02:13.550 --> 00:02:15.980
This makes up the state
of the ImageView.

00:02:15.980 --> 00:02:17.730
Normally it would have
more fields than this, but

00:02:17.730 --> 00:02:20.000
I just want to show you an example.

00:02:20.000 --> 00:02:25.680
This is an integer variable and it's
called mImageId, m for member variable.

00:02:25.680 --> 00:02:28.340
This stores the resource id for

00:02:28.340 --> 00:02:31.160
the image that should be
shown in this ImageView.

00:02:31.160 --> 00:02:34.470
Down here, we have the constructor
which is used to construct

00:02:34.470 --> 00:02:36.390
a new ImageView object.

00:02:36.390 --> 00:02:38.730
And it takes this input of Context.

00:02:38.730 --> 00:02:40.809
And then it initializes these variables.

00:02:42.120 --> 00:02:43.088
Then we have a method.

00:02:43.088 --> 00:02:47.190
It's called setImage and
it takes this input, a resource ID, for

00:02:47.190 --> 00:02:50.500
the new image that should
be shown in this ImageView.

00:02:50.500 --> 00:02:53.850
Inside this method, we update
the internal variable for image ID.

00:02:55.100 --> 00:02:57.691
Again, we created
the simplified TextView and

00:02:57.691 --> 00:03:01.880
ImageView classes to help you
understand the concept of classes.

00:03:01.880 --> 00:03:05.200
Now let's look at the real
version of these classes inside

00:03:05.200 --> 00:03:06.110
the Android framework.

00:03:07.950 --> 00:03:09.240
To see the code for

00:03:09.240 --> 00:03:13.240
the Java classes in Android,
you can install this Chrome extension.

00:03:13.240 --> 00:03:14.960
If you're not using the Chrome browser,

00:03:14.960 --> 00:03:17.989
you can see the instructor notes
below for how to access these files.

00:03:19.020 --> 00:03:19.520
Okay.

00:03:21.840 --> 00:03:26.081
Once that Chrome extension is installed,
then when I search for, something like

00:03:26.081 --> 00:03:30.260
TextView Android, and I go look at the
reference documentation for this class,

00:03:30.260 --> 00:03:34.830
then there's going to be this extra
link here that says view source.

00:03:34.830 --> 00:03:36.730
This is really for advanced developers.

00:03:36.730 --> 00:03:41.420
If you're curious about the code that
is used to create this TextView.

00:03:41.420 --> 00:03:45.850
This is the TextView.java file that was
defined by someone on the Android team.

00:03:45.850 --> 00:03:47.970
As you can see,
it's really long and complex.

00:03:47.970 --> 00:03:49.739
But it still has the main
parts of a class.

00:03:51.010 --> 00:03:55.330
It starts with public class and then
TextView, the name of the class, and

00:03:55.330 --> 00:03:57.280
then this is the opening brace and

00:03:57.280 --> 00:03:59.500
the closing brace is all
the way at the bottom here.

00:04:00.930 --> 00:04:04.340
At the top of the class,
we see a bunch of fields here, and

00:04:04.340 --> 00:04:07.200
this makes up the state of the class.

00:04:07.200 --> 00:04:13.470
For example, we see that TextColor is a
field, we also see that text is a field.

00:04:13.470 --> 00:04:17.560
And here's the constructor for TextView
that takes this input a context.

00:04:17.560 --> 00:04:22.560
If I hit Cmd+F, or Ctl+F if you're on
Windows, then I can try to search for

00:04:22.560 --> 00:04:24.050
setText.

00:04:24.050 --> 00:04:26.250
And here's the setText method.

00:04:26.250 --> 00:04:29.835
This method is going to set
the string value of the TextView.

00:04:29.835 --> 00:04:31.205
And if I search for GetText and

00:04:31.205 --> 00:04:35.605
I also see this method returns the text
that the TextView is displaying.

00:04:35.605 --> 00:04:38.275
You get that idea, and you can browse
through this on your own if you want.

00:04:39.545 --> 00:04:42.245
If I search for
the ImageView documentation page,

00:04:42.245 --> 00:04:46.750
then I can click on view source to view
all the code for the ImageView class.

00:04:46.750 --> 00:04:49.370
The file says public calls ImageView,
and

00:04:49.370 --> 00:04:52.460
then these are the fields that make
up the state of the ImageView,

00:04:52.460 --> 00:04:55.810
and then there's a bunch of
methods at the bottom of the file.

00:04:55.810 --> 00:04:57.810
The code in this file is
pretty complex as well,

00:04:57.810 --> 00:05:00.360
and it's also thousands
of lines of code.

00:05:00.360 --> 00:05:03.060
The best part about object
oriented programming,

00:05:03.060 --> 00:05:06.500
though, is that you don't need
to know about all these details.

00:05:06.500 --> 00:05:10.200
As a developer, you can use TextView and
ImageView in your app

00:05:10.200 --> 00:05:13.630
without knowing about all the gory
details of what's going on inside of it.

