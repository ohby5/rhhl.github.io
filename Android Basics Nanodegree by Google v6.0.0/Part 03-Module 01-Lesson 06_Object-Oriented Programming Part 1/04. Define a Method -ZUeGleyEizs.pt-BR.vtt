WEBVTT
Kind: captions
Language: pt-BR

00:00:00.531 --> 00:00:03.125
Vamos ver cada um desses&nbsp;métodos
e preencher a tabela.

00:00:04.010 --> 00:00:06.978
Esta é a essência do código
que&nbsp;fornecemos nas Notas do Instrutor.

00:00:07.550 --> 00:00:08.683
Começamos com o Método 1.

00:00:09.540 --> 00:00:12.153
Este método deve criar
uma mensagem de lembrete

00:00:12.400 --> 00:00:14.018
em um determinado evento do calendário.

00:00:14.492 --> 00:00:19.058
A mensagem será&nbsp;composta
do nome e local do evento,

00:00:19.240 --> 00:00:22.141
bem como, em quantos minutos será o evento.

00:00:22.590 --> 00:00:25.650
Então o nome do método
é <i>createCalendarEventReminder</i>,

00:00:25.864 --> 00:00:26.732
em CamelCase,

00:00:27.058 --> 00:00:32.055
e a lista de inputs está entre a abertura
e fechamento de parênteses aqui.

00:00:32.701 --> 00:00:36.295
Há três parâmetros de input,
o primeiro é<i> String eventName</i>,

00:00:36.660 --> 00:00:39.550
depois <i>String location</i> e,
em seguida, <i>int minutesAway</i>.

00:00:40.370 --> 00:00:43.200
O output deste método,
ou valor <i>return</i>,

00:00:43.507 --> 00:00:46.470
é a&nbsp;mensagem de&nbsp;lembrete,
que é texto.

00:00:46.738 --> 00:00:49.064
Por isso que o tipo de&nbsp;dado
retornado é uma <i>string</i>.

00:00:50.338 --> 00:00:52.270
E é assim que ficará na tabela.

00:00:53.110 --> 00:00:56.620
Tecnicamente, deve ser
uma palavra sem espaços,

00:00:56.670 --> 00:00:58.221
mas não cabe nesta caixa.

00:00:59.212 --> 00:01:00.283
E este é o Método 2.

00:01:01.224 --> 00:01:05.212
O objetivo deste método é subtrair
um número de pontos usados

00:01:05.618 --> 00:01:08.664
do número total de&nbsp;pontos,
que é 100.

00:01:09.304 --> 00:01:11.778
Ele retorna o&nbsp;número restante de pontos.

00:01:12.523 --> 00:01:14.615
O nome do método é <i>deductPoints</i>,

00:01:15.470 --> 00:01:17.230
e tem um parâmetro no input,

00:01:17.440 --> 00:01:19.960
entre esta abertura
e fechamento de parênteses.

00:01:20.966 --> 00:01:24.024
É chamado <i>pointsUsed</i>
e o tipo de dado é <i>int</i>.

00:01:25.000 --> 00:01:27.285
O valor <i>return</i>
é&nbsp;<i>numberOfPointsRemaining</i>,

00:01:27.470 --> 00:01:28.375
e isso é um número,

00:01:28.504 --> 00:01:30.630
por isso que o tipo de dado
returnado é um <i>int</i>.

00:01:31.840 --> 00:01:33.593
Na tabela,
ficaria assim.

00:01:34.461 --> 00:01:35.833
E este é o terceiro método.

00:01:36.436 --> 00:01:39.113
O objetivo desse método
é criar uma <i>string</i> de texto

00:01:39.446 --> 00:01:42.793
que mostre a soma de todas
as durações de&nbsp;viagens.

00:01:43.649 --> 00:01:45.840
O nome do método
é <i>findTotalTripLength</i>.

00:01:46.490 --> 00:01:49.531
Temos que rolar para a&nbsp;direita,
para ver todos os parâmetros.

00:01:49.944 --> 00:01:53.649
Temos três parâmetros de input entre
a abertura e fechamento de parênteses,

00:01:53.900 --> 00:01:55.661
e eles são separados por vírgulas.

00:01:56.233 --> 00:01:58.596
O primeiro é <i>int distanceOfFirstTrip</i>,

00:01:59.064 --> 00:02:03.661
o segundo é <i>int</i> <i>distanceOfSecondTrip</i>,
e <i>int</i> <i>distanceOfThirdTrip</i>.

00:02:04.580 --> 00:02:06.141
Assim, neste método,

00:02:06.424 --> 00:02:08.578
podemos nos referir
a cada uma destas variáveis.

00:02:09.501 --> 00:02:14.098
Como são inteiros, podemos adicionar
todos eles à distância total da viagem,

00:02:14.400 --> 00:02:15.606
que começa em duas milhas.

00:02:16.049 --> 00:02:20.406
E então podemos concatenar
isto à essa mensagem <i>string</i>.

00:02:21.460 --> 00:02:25.510
Como esta mensagem é texto,
o&nbsp;valor retornado do método é <i>string</i>.

00:02:26.923 --> 00:02:28.381
E é assim que fica na tabela.

