WEBVTT
Kind: captions
Language: ko

00:00:00.700 --> 00:00:03.260
안드로이드 리소스에 대해,
그리고 이를 다른 폴더에

00:00:03.260 --> 00:00:05.020
저장할 수 있다는 사실을 배웠으니

00:00:05.100 --> 00:00:09.720
이제 이 폴더들에 저장된 리소스에
접근하는 방법을 알아봅시다.

00:00:10.580 --> 00:00:15.050
여러분의 앱이 컴파일되었을 때
AAPT라는 안드로이드 툴이 있는데

00:00:15.050 --> 00:00:17.210
그것이 R 클래스를 생성합니다.

00:00:17.610 --> 00:00:21.430
이건 그냥 R.Java 파일인데요,
예를 한 가지 보여드리죠.

00:00:21.840 --> 00:00:25.620
여기에는 S 디렉토리에 있는
모든 리소스의 ID가 들어 있어요.

00:00:26.200 --> 00:00:30.430
여러분이 추가하는 모든 리소스에
참조할 수 있는 ID가 붙는 겁니다.

00:00:30.790 --> 00:00:35.000
ID 포맷은 리소스 유형에 따라 
이루어 집니다.

00:00:35.000 --> 00:00:40.640
따라서 그래픽 관련 자바 리소스는 전부
R.drawable 포맷을 따르게 되죠.

00:00:40.640 --> 00:00:46.005
모든 문자열 리소스는 R.string. 
다음에 리소스명이 오는 형태인데

00:00:46.005 --> 00:00:47.850
이 경우엔 'hello'가 되겠죠.

00:00:49.190 --> 00:00:52.230
리소스 접근에는 두 가지 방법이
있다는 걸 유념하세요.

00:00:52.230 --> 00:00:57.920
Java에서 'R.리소스 유형.
리소스명'의 형태입니다.

00:00:57.920 --> 00:00:59.280
하지만 XML에서는

00:00:59.280 --> 00:01:05.170
at(@) 표기법을 따르므로, @ 다음에
리소스 유형, 여기서는 문자열이죠.

00:01:05.170 --> 00:01:08.190
그리고 슬래시, 리소스명인 
hello가 들어가게 됩니다.

00:01:09.320 --> 00:01:12.730
다양한 리소스 유형과
그 접근 방법의 예가 더 있어요.

00:01:13.740 --> 00:01:16.370
여기 보시는 것들은 리소스 
유형 중 가장 흔한 것들입니다.

00:01:16.370 --> 00:01:17.530
하지만 이 외에도 종류가 많아요.

00:01:17.530 --> 00:01:19.350
기억하세요, Java 코드에서는

00:01:19.350 --> 00:01:21.590
시작은 언제나 R.로 하고,

00:01:21.590 --> 00:01:25.180
그 다음 리소스 유형, 다시 마침표,
리소스명이 오는 것을요.

00:01:25.180 --> 00:01:27.350
이름은 지정하는 대로 들어갑니다.

00:01:27.740 --> 00:01:31.610
XML에선 먼저 @가 온 후
리소스 유형, 슬래시, 그런 다음

00:01:31.610 --> 00:01:32.790
리소스명이 오죠.

00:01:34.080 --> 00:01:36.640
잠깐 시간을 내어 우리의
main activity 자바 파일에 있는

00:01:36.640 --> 00:01:38.620
모든 리소스 ID들을 확인해 봅시다.

00:01:38.620 --> 00:01:41.160
안드로이드 스튜디오에서
find 명령을 열어보겠습니다.

00:01:41.980 --> 00:01:45.640
Cmd+F 혹은
윈도우에선 Ctrl+F를 사용해요.

00:01:46.970 --> 00:01:48.600
검색 필드가 여기 나타납니다.

00:01:49.360 --> 00:01:52.340
'R.'을 검색어로 하고

00:01:52.910 --> 00:01:58.430
match case를 클릭합니다. 그래야
대문자로 된 부분만 찾아내겠죠.

00:01:58.430 --> 00:02:03.650
처음 나타난 것은 R.layout.
activity_main 레퍼런스네요.

00:02:03.650 --> 00:02:04.750
재미있네요.

00:02:04.750 --> 00:02:07.440
activity main의 레이아웃
파일을 가리키기 때문이죠.

00:02:07.710 --> 00:02:12.170
이는 main activity가
이 XML 파일을 적재하는 방식입니다.

00:02:12.170 --> 00:02:13.390
멋지지 않나요?

00:02:13.390 --> 00:02:14.639
다음 레퍼런스를 봅시다.

00:02:15.640 --> 00:02:17.440
좋아요.
displayQuantity 메소드 안이네요.

00:02:17.440 --> 00:02:22.360
R.id.quantity_text_view라는
레퍼런스가 있습니다.

00:02:22.360 --> 00:02:25.270
뷰 Id에 관련된 거겠죠.

00:02:25.270 --> 00:02:29.120
정확히는 수량을 표시하는 
텍스트뷰를 가리킵니다.

00:02:29.120 --> 00:02:31.660
퍼즐 조각이 하나 둘씩 
맞아 들어가고 있군요.

00:02:31.660 --> 00:02:34.220
Java 코드에서 이 뷰를 
레퍼런스로 설정하면

00:02:34.220 --> 00:02:38.550
앱 작동 시 여기 numberOfCoffees가 
보일 때마다 업데이트 할 수 있어요.

00:02:38.550 --> 00:02:40.720
다음 상황을 보죠.

00:02:40.720 --> 00:02:43.520
여기 displayMessage 메소드에서

00:02:43.520 --> 00:02:47.470
R.id.order_summary_text_view라는
레퍼런스를 볼 수 있네요.

00:02:47.470 --> 00:02:50.870
우리가 이걸 메시지로
업데이트할 수 있게 해주는

00:02:50.870 --> 00:02:54.210
주문 내용 요약을 표시하는
이 텍스트뷰를 참조하는 것 같네요.

