WEBVTT
Kind: captions
Language: ja

00:00:00.610 --> 00:00:02.650
このアプリにコードを
追加しました

00:00:02.650 --> 00:00:07.660
“View orderSummaryTextView
= findViewById” とあり

00:00:07.660 --> 00:00:13.000
“order_summary_text_view” の
リソース ID を渡します

00:00:13.000 --> 00:00:15.910
しかし次の行で
エラーがあります

00:00:17.750 --> 00:00:21.830
“Cannot resolve the
method setText” と

00:00:21.830 --> 00:00:24.430
出ます
行を追加すると

00:00:24.430 --> 00:00:27.880
この変数で有効な
メソッド型が出ます

00:00:28.890 --> 00:00:32.400
“orderSummaryTextView” の
変数をここに作成します

00:00:32.400 --> 00:00:34.330
TypeView なので

00:00:34.330 --> 00:00:37.520
次の行でメソッドを
呼び出せるはずです

00:00:37.520 --> 00:00:40.540
しかし自動入力の
候補を見ると

00:00:40.540 --> 00:00:44.120
これらは全て
View メソッドです

00:00:44.120 --> 00:00:46.140
TextView 用のものは
ありません

00:00:47.200 --> 00:00:49.350
例えば setText メソッドは
ないので

00:00:51.320 --> 00:00:54.455
エラーになり
setText を呼び出しても

00:00:56.020 --> 00:01:00.890
テキストのサイズや
色の設定は不可です

00:01:00.890 --> 00:01:02.350
ではそのメソッドは
どこでしょう

00:01:03.840 --> 00:01:08.700
TextView は特定的な
View の型なので

00:01:10.430 --> 00:01:13.240
このオブジェクトで
TextView メソッドを

00:01:13.240 --> 00:01:16.777
呼び出すには TextView
オブジェクトであること

00:01:17.820 --> 00:01:21.160
今度は変数が
TextView オブジェクトです

00:01:21.160 --> 00:01:25.750
しかし普通のビューを
探しているにも拘らず

00:01:25.750 --> 00:01:31.090
右側に TextView が必要な為
“型が合わない” と出ました

00:01:31.090 --> 00:01:34.240
findViewById メソッドが
View に戻るからです

00:01:34.240 --> 00:01:35.558
ではどうやって
一致させるのでしょう

00:01:35.558 --> 00:01:41.720
TextView が View の
特定の型ということは

00:01:41.720 --> 00:01:47.260
TextView は View のサブクラス
つまりキャストが使えます

00:01:47.260 --> 00:01:51.970
Java でのキャストは
このメソッドで

00:01:51.970 --> 00:01:54.280
戻った View を TextView
として扱えるので

00:01:54.280 --> 00:01:58.760
右側は TextView
オブジェクトで

00:01:58.760 --> 00:02:02.168
orderSummaryTextView に
保存できます

00:02:03.460 --> 00:02:06.110
新しいことを
多く学んだばかりで

00:02:06.110 --> 00:02:07.970
参ってしまいますよね

00:02:07.970 --> 00:02:09.210
再度説明します

00:02:10.229 --> 00:02:14.280
findViewById メソッドは
View 型のオブジェクトになり

00:02:14.280 --> 00:02:15.820
この様に丸括弧して

00:02:15.820 --> 00:02:19.690
真ん中にオブジェクトの
データ型を入力します

00:02:19.690 --> 00:02:23.250
View を TextView の
中にキャストします

00:02:23.250 --> 00:02:27.217
そして TextView オブジェクトを
全ての宣言が評価します

00:02:28.600 --> 00:02:32.140
すると左側に
“TextView” 型を持つ

00:02:32.140 --> 00:02:35.790
変数 “orderSummary
TextView” が保存できます

00:02:35.790 --> 00:02:40.740
下の行では TextView
メソッドが呼び出せます

00:02:40.740 --> 00:02:43.720
全てのテキストメソッドが
表示されましたね

00:02:44.840 --> 00:02:48.070
setAllCaps や
setTextSize 等があります

00:02:48.070 --> 00:02:51.660
setText で大丈夫なはず
なのでこれは消します

00:02:51.660 --> 00:02:54.170
エラーが
なくなりました

00:02:54.170 --> 00:02:57.100
TextView メソッドの
使用を可能にするには

00:02:57.100 --> 00:02:59.410
TextView オブジェクトが
必要になります

00:02:59.410 --> 00:03:02.500
TextView オブジェクトには
findViewById が必要なので

00:03:02.500 --> 00:03:06.890
View オブジェクトを
TextView にキャストします

00:03:06.890 --> 00:03:09.700
キャストが
有効な理由は

00:03:09.700 --> 00:03:13.440
ビュー階層の View が
TextView だからです

00:03:13.440 --> 00:03:17.520
ラジオボタン等には
キャストできません

00:03:17.520 --> 00:03:20.840
“order_summary_text_view”
がTextView だからです

00:03:20.840 --> 00:03:23.000
キャストは適切な型に
対して行いましょう

00:03:24.275 --> 00:03:28.370
displayQuantity メソッドも同様
“findViewById” を呼び出して

00:03:28.370 --> 00:03:32.350
数量 TextView の
リソース ID を渡します

00:03:32.350 --> 00:03:36.090
これが View を戻すので
“TextView” にキャストします

00:03:36.090 --> 00:03:39.330
すると変数 quantityTextView に
保存できます

00:03:40.400 --> 00:03:43.450
この変数には
TextView 型があり

00:03:43.450 --> 00:03:48.170
下の行で “setText” 等
TextView が使えます

00:03:48.170 --> 00:03:51.160
キャストを使った最新の
MainActivity コードです

00:03:51.160 --> 00:03:56.400
TextViews に Views を
キャストして TextViews 型の

00:03:56.400 --> 00:04:00.622
変数に保存ができるので
MainActivity のリストでは

00:04:00.622 --> 00:04:05.090
“quantityTextView” と
“orderSummaryTextView” は

00:04:05.090 --> 00:04:06.820
TextView 型です—これを
TextView メソッドと呼び

00:04:06.820 --> 00:04:10.810
Views として扱う
だけでなく

00:04:10.810 --> 00:04:15.050
この変数では TextView に
特化したメソッドもあります

00:04:15.050 --> 00:04:19.041
orderSummaryTextView で
setText が呼び出せます

00:04:19.041 --> 00:04:21.880
また quantityTextView
でも setText が呼び出せます

00:04:21.880 --> 00:04:22.650
見ての通り

00:04:22.650 --> 00:04:27.180
どのデータ型をどこで
使うか注意が必要です

00:04:27.180 --> 00:04:31.290
メソッドを呼び出す時は
setText メソッドに

00:04:31.290 --> 00:04:34.400
戻り値がなかったため
気にしませんでした

00:04:34.400 --> 00:04:37.180
imageView.setImageResource
メソッドでも同様です

00:04:37.180 --> 00:04:39.060
これも戻り値が
ありません

00:04:39.060 --> 00:04:41.540
しかし他のメソッドは
どうでしょう

00:04:41.540 --> 00:04:45.590
例えば TextView クラスの
getTextSize メソッドは

00:04:45.590 --> 00:04:47.680
戻り値が
整数型です

00:04:47.680 --> 00:04:53.410
戻り値は int 型の
変数 “size” で保存できます

00:04:53.410 --> 00:04:55.140
戻り値のあるメソッドの
もう一つの例です

00:04:55.140 --> 00:04:58.270
Button クラスで
getHeight メソッドを

00:04:58.270 --> 00:05:03.420
呼び出すと整数値を
戻して変数に保存が可能

00:05:03.420 --> 00:05:06.450
もしストリングの中で
結果の保存を試みると

00:05:06.450 --> 00:05:10.810
メソッドが整数を戻すので
エラーになります

00:05:10.810 --> 00:05:14.988
メソッドに渡すべき
データ型やメソッドから

00:05:14.988 --> 00:05:19.290
戻るデータ型を知るには
Documentation を確認します

00:05:19.290 --> 00:05:21.260
例えば
TextView クラスでは

00:05:21.260 --> 00:05:25.760
これらを呼び出す場合
int 型の値を戻します

00:05:25.760 --> 00:05:28.620
戻り値のデータ型は
左の列にあります

00:05:28.620 --> 00:05:33.040
他にも戻り値には “void” や
“booleans” もあります

00:05:33.040 --> 00:05:38.330
まだ習っていませんが
“floats” “longs” 等もあります

00:05:38.330 --> 00:05:42.790
この Documentation は
各メソッドに入力する

00:05:42.790 --> 00:05:45.010
データ型も示します

00:05:45.010 --> 00:05:49.590
setTextColor メソッドなら
整数の入力が必要です

00:05:49.590 --> 00:05:53.110
戻り値は “void” なので
戻り値はありません

00:05:53.110 --> 00:05:56.010
Android Studio でデータ型の
不一致のエラーが

00:05:56.010 --> 00:05:58.750
出ないようデータ型を
Documentation で

00:05:58.750 --> 00:06:01.070
確認しましょう

00:06:01.070 --> 00:06:02.630
それでは練習です

00:06:02.630 --> 00:06:05.580
これらは４つの異なる
コード例です

00:06:05.580 --> 00:06:10.100
いくつかにはデータ型の
不一致のエラーがあります

00:06:10.100 --> 00:06:11.165
見つけたら

00:06:11.165 --> 00:06:15.540
修正方法をボックスに
書いて下さい

00:06:15.540 --> 00:06:19.948
間違いがなければ
“No error” と書いて下さい

00:06:19.948 --> 00:06:22.545
多くの新しいコードを
勉強したばかりなので

00:06:22.545 --> 00:06:26.555
少々難しいかも
知れません

00:06:26.555 --> 00:06:30.105
Documentation を確認しながら
じっくりと解いて下さい

00:06:30.105 --> 00:06:33.695
入力内容と戻り値が正しいか
必ず確認しましょう

00:06:33.695 --> 00:06:37.665
変数の宣言でデータ型が
正しいか確認しましょう

00:06:37.665 --> 00:06:39.265
また正しくメソッドを

00:06:39.265 --> 00:06:42.375
使っているか Documentation で
確認しましょう

