WEBVTT
Kind: captions
Language: ru

00:00:00.560 --> 00:00:04.010
Давайте пройдемся по всем
этим алгоритмам и зполним таблицу.

00:00:04.010 --> 00:00:07.560
Это основа кода котрую
мы предоставили вам в заметках.

00:00:07.560 --> 00:00:09.120
Начнем с алгоритма 1.

00:00:09.120 --> 00:00:12.580
Этот алгоритм создает напоминание про

00:00:12.580 --> 00:00:14.490
определенное событие из каленаря.

00:00:14.490 --> 00:00:17.930
Это сообщение будет состоять
из названия события,

00:00:17.930 --> 00:00:22.610
места события и времени,
оставшегося до события.

00:00:22.610 --> 00:00:25.910
Поэтому название алгоритма -
<i>createCalendarEventReminder</i>

00:00:25.910 --> 00:00:30.750
в "горбатом" регистре, а далее список
исходных между открывающей

00:00:30.750 --> 00:00:32.640
и закрывающей скобками.

00:00:32.640 --> 00:00:36.660
Это исходных параметра, первый -
строка <i>eventName</i>,

00:00:36.660 --> 00:00:40.340
потом строка <i>location</i>,
и <i>int</i> <i>minutesAway</i>.

00:00:40.340 --> 00:00:42.150
В результате, или в выдаче, алгоритм

00:00:42.150 --> 00:00:46.660
выдает напоминание - то есть текст.

00:00:46.660 --> 00:00:49.050
Вот поэтому тип данных
выдачи - это <i>string</i>.

00:00:50.380 --> 00:00:53.110
А вот так это выглядит
в заполненной таблице.

00:00:53.110 --> 00:00:56.740
Технически, это должна быть
одно слово без пробелов, но

00:00:56.740 --> 00:00:59.240
оно не поместилось в клетку.

00:00:59.240 --> 00:01:01.210
А это второй алгоритм.

00:01:01.210 --> 00:01:05.540
Цель алгоритма - вычесть определенное
число использованных очков

00:01:05.540 --> 00:01:09.120
из общего числа очков, то есть из 100

00:01:09.120 --> 00:01:12.500
Поэтому, он выдает оставшееся
число очков.

00:01:12.500 --> 00:01:15.670
Алгоритм называется <i>deductPoints</i> и

00:01:15.670 --> 00:01:18.730
у него один исходный параметр
между этими открывающими и

00:01:18.730 --> 00:01:25.000
закрывающими скобками. Он называется
<i>рointsUsed</i>, а тип данных - <i>int</i>.

00:01:25.000 --> 00:01:28.680
В выдаче мы получаем отсавшееся
<i>numberOfPoints</i>, и это число, поэтому

00:01:28.680 --> 00:01:30.570
тип данных выдачи - это <i>int</i>.

00:01:31.880 --> 00:01:34.510
Вот так это должно
выглядеть в таблице.

00:01:34.510 --> 00:01:36.410
А это третий алгоритм,

00:01:36.410 --> 00:01:40.900
который создает текстовую строку,
в которой указывается сумма

00:01:40.900 --> 00:01:46.490
длительности всех поездок и
он называется <i>findTotalTripLength</i>.

00:01:46.490 --> 00:01:49.920
Нам надо пролистать направо
чтобы увидеть все параметры.

00:01:49.920 --> 00:01:52.550
У нас есть три сиходных параметра -
вот тут, между открывающей

00:01:52.550 --> 00:01:56.210
и закрывающей скобками,
и они разделены запятыми.

00:01:56.210 --> 00:01:58.610
Первый это <i>Int</i> <i>distanceOfFirstTrip</i>,

00:01:58.610 --> 00:02:04.580
второй это <i>Int</i> <i>distanceOfSecondTrip</i>,
и <i>Int</i> <i>distanceOfThirdTrip</i>.

00:02:04.580 --> 00:02:09.520
Итак, в этом алгоритме мы обращаемся
к каждой из этих переменных.

00:02:09.520 --> 00:02:14.380
Поскольку все они численне, мы можем
их просуммировать чтобы

00:02:14.380 --> 00:02:16.190
узнать всю длину поездки,
начиная с двух миль.

00:02:16.190 --> 00:02:20.340
После мы можем объединить
все в строчное сообщение.

00:02:21.460 --> 00:02:25.510
Поскольку это текстовое сообение,
на выходе мы получаем строку.

00:02:26.890 --> 00:02:28.320
И вот как это выглядит в таблице.

