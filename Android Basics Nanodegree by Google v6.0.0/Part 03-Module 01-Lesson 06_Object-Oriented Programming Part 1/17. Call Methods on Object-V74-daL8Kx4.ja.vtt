WEBVTT
Kind: captions
Language: ja

00:00:00.860 --> 00:00:04.030
先ほどみたdisplayMessageメソッドに
戻ってみましょう。

00:00:05.030 --> 00:00:07.570
この中で何が起こっているかを見てみましょう。

00:00:08.630 --> 00:00:12.450
今まで学んだことから言うと、
まずTextViewがあり、

00:00:12.450 --> 00:00:15.670
変数の名前はorderSummary　= TextViewとなっています。

00:00:15.670 --> 00:00:18.870
そして後のコードはまだ学んでいないものです。

00:00:18.870 --> 00:00:22.820
しかし次の行でorderSummaryTextViewを
使って、

00:00:22.820 --> 00:00:25.030
そしてそのテキストを、このメッセージに
なるようにします。

00:00:26.250 --> 00:00:29.470
オブジェクトでこのようなメソッドを呼ぶ
やり方を学びましょう。

00:00:31.250 --> 00:00:34.920
オブジェクトでメソッドを呼ぶときには、
このフォーマットに従わなければいけません。

00:00:34.920 --> 00:00:39.560
まずオブジェクト関数の名前を書きます。
この例ではtitleTextViewです。

00:00:39.560 --> 00:00:41.160
そしてドットを加えます。

00:00:41.160 --> 00:00:45.350
そしてメソッドの名前がきます。
ここではsetTextですね。

00:00:45.350 --> 00:00:49.390
このメソッドはTextView Javaクラスで
この通りに定義されています。

00:00:49.390 --> 00:00:53.250
メソッド宣言には文字列のインプットも指定されます。

00:00:53.250 --> 00:00:58.060
なのでかっこを加えて、そこに文字列を
入力します。

00:00:58.060 --> 00:00:59.700
そしてこの提示をセミコロンで閉じます。

00:01:00.920 --> 00:01:05.459
このようなコードを書くと、
titleTextViewオブジェクト変更して、

00:01:05.459 --> 00:01:08.100
それをスクリーンに表示します。

00:01:08.100 --> 00:01:10.490
ここでオブジェクト変数の名前を使うのは、

00:01:10.490 --> 00:01:13.600
アプリの中では多数のTextViewが
あるかもしれないからです。

00:01:13.600 --> 00:01:16.379
なので正しいオブジェクトのインスタンスを
呼ぶようにしてください。

00:01:17.560 --> 00:01:20.980
インプットを指定するときには、
メソッドの宣言にしたがって、

00:01:20.980 --> 00:01:24.620
正しい場所に、正しい順番で記入してください。

00:01:25.660 --> 00:01:29.460
何も入力することがなければ、
引用符だけとなります。

00:01:29.460 --> 00:01:32.820
インプットの入力の仕方は、
レッスン３で学んだやり方と

00:01:32.820 --> 00:01:34.110
同じです。

00:01:34.110 --> 00:01:36.140
オブジェクト変数の名前と、メソッドの名前を

00:01:36.140 --> 00:01:38.450
ドットで分けることも忘れないでください。

00:01:38.450 --> 00:01:42.450
もう一つ例です。同じtitleTextViewオブジェクトで

00:01:42.450 --> 00:01:45.190
今度はsetTextSizeを呼びます。

00:01:45.190 --> 00:01:49.220
このメソッドは整数を
テキストサイズとして受け取ります。

00:01:49.220 --> 00:01:51.830
この場合は、新しいテキストサイズとして
１８を入力します。

00:01:52.980 --> 00:01:55.510
Android機器がこの行を実行すると、

00:01:55.510 --> 00:02:00.460
このtitleTextViewのフォントサイズを１８にします。

00:02:00.460 --> 00:02:02.260
この例では、

00:02:02.260 --> 00:02:06.540
warningTextViewという
TextViewオブジェクトのメソッドを呼んでいます。

00:02:07.580 --> 00:02:11.140
メソッドはsetTextColorといって、
インプットとして色を受け取ります。

00:02:12.140 --> 00:02:16.010
色がColor.Redと指定されていることに
注目してください。

00:02:16.010 --> 00:02:17.670
ドキュメンテーションを見てみると、

00:02:17.670 --> 00:02:22.030
カラークラスで、赤がここにあります。

00:02:22.030 --> 00:02:25.290
他の色も使えます。

00:02:26.370 --> 00:02:30.850
setTextColorを呼ぶときには、Color.BLUEや
Color.BLACKなども入力できます。

00:02:30.850 --> 00:02:33.835
最後に、ImageViewのメソッドを呼ぶ例です。

00:02:34.882 --> 00:02:39.230
このImageViewはwelcomeImageViewという
名前がついています。

00:02:39.230 --> 00:02:41.260
そしてそのsetImageResourceというメソッドを呼びます。

00:02:42.380 --> 00:02:46.135
このメソッドは、このImageViewに表示する
画像を変えるものです。

00:02:47.400 --> 00:02:51.580
R.drawable.cloudというフォーマットで、
新しい画像をリソースとして指定します。

00:02:51.580 --> 00:02:53.000
これがファイル名です。

00:02:54.100 --> 00:02:58.610
これはJavaコードでリソースIDを使う
一つの例です。

00:02:58.610 --> 00:03:02.059
TextViewのすべてのメソッドを見るには、

00:03:02.059 --> 00:03:04.867
TextView Androidのドキュメンテーションの
ページを見てください。

00:03:04.867 --> 00:03:08.810
TextView Androidと検索して、
ここをクリックしてください。

00:03:09.840 --> 00:03:12.110
このページは見覚えがありますよね。

00:03:12.110 --> 00:03:15.740
ここに載っているXMLアトリビュートは
すでに学びました。

00:03:16.830 --> 00:03:19.900
スクロールダウンすると、TextViewクラスに

00:03:19.900 --> 00:03:20.790
他のパブリックメソッドが
あります。

00:03:21.910 --> 00:03:22.870
何かを探すのなら、

00:03:22.870 --> 00:03:27.210
Cmf+F、ウィンドウズではCtrl+Fを押して、

00:03:27.210 --> 00:03:29.900
先ほど使ったsettextColorを探してみます。

00:03:31.200 --> 00:03:32.740
ここにsetTextColorがあります。

00:03:32.740 --> 00:03:35.310
インプットは整数ですね。

00:03:36.420 --> 00:03:40.540
ここにあるすべてのメソッドは、TextViewクラスの
パブリックメソッドとして宣言されます。

00:03:40.540 --> 00:03:43.170
なので、これらのメソッドを使えるわけです。

00:03:43.170 --> 00:03:44.910
プライベートメソッドは、

00:03:44.910 --> 00:03:46.210
ここには現れません。

00:03:47.400 --> 00:03:49.070
これらのメソッドを呼ぶときに、

00:03:49.070 --> 00:03:52.370
どのインプットパラメータが必要かを
チェックしてください。

00:03:52.370 --> 00:03:55.680
順番とデータタイプにも注意を払ってください。

00:03:56.910 --> 00:03:58.040
コードを読むときに、

00:03:58.040 --> 00:04:02.130
メソッドを呼ぶときに、ドットがない時があります。

00:04:02.130 --> 00:04:06.150
クラスの中か外かで違いが出てきます。

00:04:06.150 --> 00:04:08.730
TextViewクラスの例を見てみましょう。

00:04:08.730 --> 00:04:12.540
setTextメソッドや他のメソッドが
定義されています。

00:04:12.540 --> 00:04:16.589
setTextをこの他のメソッドから呼びたいとします。

00:04:16.589 --> 00:04:21.040
その場合はsetTextを記入してインプットを
入力します。

00:04:21.040 --> 00:04:24.070
ドットとオブジェクト名はどこへ行ったのでしょうか。

00:04:24.070 --> 00:04:28.800
この行は、this.setText("Hello")`を
省略したものです。

00:04:28.800 --> 00:04:31.360
thisは現在のオブジェクトインスタンスを示し、

00:04:31.360 --> 00:04:34.800
そしてsetTextがこのオブジェクトに
呼ばれているんです。

00:04:34.800 --> 00:04:38.880
この形式はオブジェクトでメソッドを呼ぶやり方として
学びました。

00:04:38.880 --> 00:04:42.301
しかし、このドットは暗示されていて、
その入力は任意です。

00:04:42.301 --> 00:04:47.380
コードを簡潔にするために、
setText("Hello")だけを記入して構いません。

00:04:47.380 --> 00:04:50.670
クラスの中でsettextを呼ぶのと、

00:04:50.670 --> 00:04:53.800
setTextをクラスの外で呼ぶときの
違いに注目してください。

00:04:53.800 --> 00:04:55.990
考えてみると、こっちの方が
理にかなっていますね。

00:04:55.990 --> 00:04:59.380
どのTextViewにテキストを指定するかが
明確だからです。

00:04:59.380 --> 00:05:03.380
クラス内に、多数のTextViewがある場合はなおさらです。

00:05:03.380 --> 00:05:06.280
TextViewクラス内外での違いは

00:05:06.280 --> 00:05:08.970
もう一つあります。

00:05:08.970 --> 00:05:12.330
TextViewクラス内では、
プライベート変数にアクセスができ、

00:05:12.330 --> 00:05:14.210
プライベートメソッドにもアクセスできます。

00:05:14.210 --> 00:05:16.060
TextViewクラス外では、

00:05:16.060 --> 00:05:21.150
プライベートメソッドやプライベート変数には
アクセスできません。

00:05:21.150 --> 00:05:25.100
MainActivityクラスの中では、TextViewクラスの

00:05:25.100 --> 00:05:27.300
パブリックメソッドや変数にしかアクセスできません。

