WEBVTT
Kind: captions
Language: ru

00:00:00.390 --> 00:00:03.210
В этом задании вы потренируететсь
в создании тесктовых объектов

00:00:03.210 --> 00:00:05.210
и вызове для них алгоритмов.

00:00:05.210 --> 00:00:06.930
Поскольку это для тренировки

00:00:06.930 --> 00:00:11.250
сделаем это в новом приложении,
вне приложения JustJava.

00:00:11.250 --> 00:00:13.020
Так мы не запутаем
приложение JustJava.

00:00:14.370 --> 00:00:19.070
Пройдите File&gt;New Project и откройте
новый проект в AndroidStudio.

00:00:19.070 --> 00:00:21.650
После примите все
по умолчанию вот здесь.

00:00:21.650 --> 00:00:25.620
УБедитесь что выбрали пустой
шаблон и нажмите Finish.

00:00:28.210 --> 00:00:31.190
После того как проект создан -
запустите приложение на устройстве.

00:00:32.380 --> 00:00:36.220
Пмолчанию вы должны увидеть
слова Hello World вот здесь.

00:00:36.220 --> 00:00:38.220
Но сейчас вы сделаете кое-что другое.

00:00:38.220 --> 00:00:42.340
В классе <i>main activity</i> мы изменим
то как создается алгоритм.

00:00:42.340 --> 00:00:46.600
Вместо вызова <i>set content view</i>
для этого в главной раскладке XML,

00:00:46.600 --> 00:00:49.080
мы создадим собственный <i>text view</i>
и поставить его здесь.

00:00:50.390 --> 00:00:51.960
На сайте разработчиков Android

00:00:51.960 --> 00:00:56.010
есть раздел для тренировок где гово-
рится о создании первого приложения.

00:00:56.010 --> 00:00:59.600
Я смотрю на часть
учебника Display the Message.

00:00:59.600 --> 00:01:02.220
Здесь говорится что
в алгоритме <i>оnCreate</i>,

00:01:02.220 --> 00:01:03.930
мы можем создать <i>TextView</i>.

00:01:03.930 --> 00:01:07.290
А вот и код, знакомый
из начала урока.

00:01:07.290 --> 00:01:08.850
Мы созадем новый <i>TextView</i> и

00:01:08.850 --> 00:01:11.720
сохраняем его в переменной
под назанием <i>textView</i>.

00:01:11.720 --> 00:01:14.708
Конструктору требуется контекст
в качестве исходного параметра.

00:01:14.708 --> 00:01:18.140
И передает <i>(this)</i> в качестве
исходного параметра,

00:01:18.140 --> 00:01:21.780
потому что <i>(this)</i> относится
к текущим действиям.

00:01:21.780 --> 00:01:24.450
А действия это тоже контекст
и поэтому

00:01:24.450 --> 00:01:27.530
это правильно создаст
нам объект <i>TextView</i>.

00:01:27.530 --> 00:01:30.610
А потом мы вызовем аглогритмы
для этого объекта <i>TextView</i>.

00:01:30.610 --> 00:01:35.330
Помните что это назваие переменной
<i>textView</i>, а не класса <i>ТextView</i>.

00:01:35.330 --> 00:01:38.360
Вот почему t здесь прописная.

00:01:38.360 --> 00:01:42.430
Можем вызвать <i>textView.setTextSize</i> и
<i>textView.setText</i> в качестве примера.

00:01:43.830 --> 00:01:47.160
Ниже сказано что надо
вызвать <i>setContentView</i> и

00:01:47.160 --> 00:01:49.890
передать это <i>textView</i>
в качестве исходного параметра.

00:01:49.890 --> 00:01:51.690
Еще ниже вам будет показан

00:01:51.690 --> 00:01:53.230
пример кода для алгоритма <i>onCreate</i>.

00:01:54.230 --> 00:01:55.520
Нам не нужна эта часть.

00:01:55.520 --> 00:01:58.360
Мы сосредоточимся на части
в которой создается <i>textView</i>

00:01:58.360 --> 00:02:01.160
а потом назначим это как
<i>contentView</i> для раскладки.

00:02:02.440 --> 00:02:04.610
В Android Studio
в классе <i>MainActivity</i>,

00:02:04.610 --> 00:02:07.030
я собираюсь изменить
алгоритм <i>onCreate</i>.

00:02:07.030 --> 00:02:08.394
Я вставлю пустые строки здесь.

00:02:09.535 --> 00:02:12.065
Сначала конструктором я создам
новый объект <i>TextView</i>.

00:02:13.245 --> 00:02:15.535
Я назову его именем
переменной <i>TextView</i>, но

00:02:15.535 --> 00:02:20.075
но вы можете назвать его по другому,
лишь бы название

00:02:20.075 --> 00:02:21.075
было описательным.

00:02:22.080 --> 00:02:24.870
Сконструированному тексту
требуется контент, и

00:02:24.870 --> 00:02:28.100
собираюсь передать <i>this</i>
чтобы обратиться к этим действиям.

00:02:28.100 --> 00:02:30.500
А в следующей строке кода

00:02:30.500 --> 00:02:32.630
я вызову алгоритм
для объекта <i>textView</i>.

00:02:33.770 --> 00:02:38.100
И как только я нажму точку, мне 
покажут все возможные алгоритмы,

00:02:38.100 --> 00:02:39.730
что я могу вызвать
для объекта textView.

00:02:40.990 --> 00:02:44.340
Когда я начну печатать - они
отфильтруются до полных варинтов.

00:02:44.340 --> 00:02:47.720
Видите - выбор сузился.

00:02:47.720 --> 00:02:51.230
Я выберу setText и нажму ввод
чтобы закончить автоматически.

00:02:53.140 --> 00:02:56.370
А теперь я указу строку
в качестве исходного параметра.

00:02:56.370 --> 00:02:59.230
И последнее изменение -
в строке <i>set content view</i>.

00:02:59.230 --> 00:03:04.240
Вместо использования раскладки XML
я просто вставлю <i>textView</i>.

00:03:04.240 --> 00:03:06.810
Я все сохраню и запущу на устройстве.

00:03:07.860 --> 00:03:11.840
На экране должен
появиться новый текст -

00:03:11.840 --> 00:03:15.030
<i>Wow</i> вместо <i>hello world</i>.

00:03:15.030 --> 00:03:15.660
Так и есть.

00:03:16.680 --> 00:03:17.860
Хоть и ничео выдающегося.

00:03:17.860 --> 00:03:20.390
Я хочу чтобы вы сделали
это интереснее.

00:03:20.390 --> 00:03:24.198
Вызовите другие алгоритмы
для объекта <i>textView</i>,

00:03:24.198 --> 00:03:27.254
например попробйте изменить
цвет или размер шрифта.

00:03:27.254 --> 00:03:29.294
Если хотите большего,

00:03:29.294 --> 00:03:32.780
можете вызвать другие
алгоритмы для объекта <i>textView</i>.

00:03:32.780 --> 00:03:35.280
Посмотрите справочник
в онлайне для <i>textView</i>.

00:03:35.280 --> 00:03:38.370
Чтобы узнать какие есть
еще алгоритмы.

00:03:38.370 --> 00:03:40.490
Отметьте здесь, когда закончите.

