WEBVTT
Kind: captions
Language: tr

00:00:00.300 --> 00:00:03.370
Artık metot aramayı bitirdik ve
girişlere geçiyoruz.

00:00:03.370 --> 00:00:04.260
&gt;&gt; Bekle.

00:00:04.260 --> 00:00:06.790
Fiyat hesaplama metodu olan
kaliteye geçmekten mi

00:00:06.790 --> 00:00:08.270
söz ediyorsun?

00:00:08.270 --> 00:00:09.300
&gt;&gt; Kesinlikle.

00:00:09.300 --> 00:00:11.850
Şimdi de bundan bir değer
döndürmek istiyoruz.

00:00:11.850 --> 00:00:12.765
&gt;&gt; Bayılırım döndürülen değerlere.

00:00:12.765 --> 00:00:13.930
&gt;&gt; [GÜLÜŞME]
&gt;&gt; Şimdi ne olacak?

00:00:13.930 --> 00:00:15.300
Aklıma bir fiyat mı geldi?

00:00:15.300 --> 00:00:16.550
Çünkü bu bir fiyat hesaplama metodu.

00:00:16.550 --> 00:00:19.750
&gt;&gt; Evet, toplam sipariş fiyatı
dönen değer olacak.

00:00:19.750 --> 00:00:21.310
&gt;&gt; Tamam, haydi bunu yapalım!

00:00:21.310 --> 00:00:23.510
&gt;&gt; Tamam.
Çatal lazım mı?

00:00:25.820 --> 00:00:26.980
&gt;&gt; Lazım mı?

00:00:26.980 --> 00:00:31.340
&gt;&gt; Java'da, metot çıkışı
dönen değer olarak bilinir.

00:00:31.340 --> 00:00:35.640
Kod örneklerinde, metodun içinde
return [dönen] sözcüğünü görebilir veya

00:00:35.640 --> 00:00:39.090
return sözcüğü bunun
üstündeki açıklamada görebilirsiniz.

00:00:39.090 --> 00:00:42.170
Metotlarla ilgili dönen değerler hakkında
daha fazla bilgi görelim.

00:00:42.170 --> 00:00:46.900
Google'da arama yapacağım;
Java metodu dönen değeri hakkında.

00:00:46.900 --> 00:00:48.780
İlk bağlantı iyi görünüyor.

00:00:48.780 --> 00:00:51.420
Bu makale metoda ait dönen
değer hakkında bilgi veriyor.

00:00:52.710 --> 00:00:55.240
Yürütülen metodun ne zaman
biteceğinden söz ediyor;

00:00:55.240 --> 00:00:59.510
metotta veya metodun tüm satırlarında
tüm deyimleri tamamladığımda ya da

00:00:59.510 --> 00:01:04.319
dönen ilk deyime ulaştığımızda,
hangisi önce gelirse.

00:01:04.319 --> 00:01:07.370
Bir istisna veya hata
verdiğimiz durumda da metot

00:01:07.370 --> 00:01:10.410
sonlanacaktır; ancak bu kursta bundan
söz etmeyeceğiz.

00:01:10.410 --> 00:01:12.710
Daha çok ilk iki duruma
odaklanacağız.

00:01:14.240 --> 00:01:18.230
Bu nedenle kodda return noktalı
virgüle benzer bir şeyler görürsünüz.

00:01:18.230 --> 00:01:21.100
Böylece, metodun bitirilmesi gerektiği ve

00:01:21.100 --> 00:01:24.150
bundan sonra gelen kod satırlarının
yürütülmeyeceği anlaşılır.

00:01:25.440 --> 00:01:28.170
Alternatif olarak şunun gibi
bir şey de görebilirsiniz.

00:01:28.170 --> 00:01:32.230
Return, izleyen bir değer
ve noktalı virgül.

00:01:32.230 --> 00:01:35.280
Bu, metoda ait bir çıkış
değerinin döndürülmesidir.

00:01:36.470 --> 00:01:37.900
İşte bir örnek.

00:01:37.900 --> 00:01:40.140
Bu kod getArea [alanAl] metodu için.

00:01:40.140 --> 00:01:43.420
Bir dikdörtgenin
alanını hesaplaması gerekiyor;

00:01:43.420 --> 00:01:46.010
ki bu, genişlik çarpı
yükseklik olarak tanımlanır.

00:01:46.010 --> 00:01:51.100
Bu nedenle, metotta dönen değerin izlediği
return sözcüğümüz vardır.

00:01:51.100 --> 00:01:54.660
Dönen değer genişlik değişkeni
çarpı yükseklik değişkenidir.

00:01:54.660 --> 00:01:56.610
Bu da tek bir sayıya eşittir.

00:01:56.610 --> 00:02:01.270
Bu sayıysa, bu metodun çıkış
değeri olarak döndürülür.

00:02:01.270 --> 00:02:02.760
Giriş parametrelerinden farklı olarak,

00:02:02.760 --> 00:02:05.890
burada açma ve kapatma parantezleri
içinde sıralanan çok sayıda

00:02:05.890 --> 00:02:10.389
parametreniz olabilirken, sadece bir
dönen değeriniz olabilir.

00:02:10.389 --> 00:02:13.530
Bu dönen değerin veri türü de
burada belirtilir.

00:02:13.530 --> 00:02:18.300
Bu nedenle, başka sayılar da
döndürebiliriz; yeter ki tam sayı olsun.

00:02:18.300 --> 00:02:21.050
Örneğin, dizi döndüremezsiniz;

00:02:21.050 --> 00:02:24.170
Çünkü bu, girilen veri türüyle
eşleşmez.

00:02:24.170 --> 00:02:27.930
Bu andan itibaren Java'nın return
sözcüğü için özel bir anlamı

00:02:27.930 --> 00:02:29.550
olduğunu fark edebilirsiniz.

00:02:29.550 --> 00:02:33.480
Bunu değişken veya
metot adı olarak kullanamazsınız.

00:02:33.480 --> 00:02:35.549
Bunlara Java anahtar
sözcükleri adı verilir.

00:02:37.140 --> 00:02:38.960
Java anahtar sözcük listesini arayabilirim.

00:02:41.370 --> 00:02:43.740
Bu, tüm Java anahtar
sözcüklerinin listesidir.

00:02:43.740 --> 00:02:46.880
Daha önce de karşılaştığımız bazı
sözcükleri göreceksiniz;

00:02:46.880 --> 00:02:49.460
örneğin int, public ve private.

00:02:49.460 --> 00:02:50.710
Oldukça kısa bir liste.

00:02:50.710 --> 00:02:53.440
Tüm bu sözcüklerde de, bunları kodunuza
kattığınızda Java'da özel

00:02:53.440 --> 00:02:53.940
bir anlamı vardır.

00:02:53.940 --> 00:02:58.640
Sonuçta bunları uygulamanızda tanımlayıcı
olarak kullanamazsınız; örneğin,

00:02:58.640 --> 00:03:00.560
değişken adı veya metot adı.

00:03:00.560 --> 00:03:04.140
Ve return sözcüğünün de özel Java
anahtar sözcüğü olduğunu görürsünüz.

00:03:04.140 --> 00:03:07.780
Metoda ait çıkış değerini döndürmek
istediğiniz zaman için ayrılmıştır.

00:03:09.140 --> 00:03:12.240
Önceki hava durumu oluşturma
mesajımıza geri dönelim.

00:03:12.240 --> 00:03:17.150
Bir dizi oluşturabilir ve dönüş
mesajı adıyla bunu döndürebiliriz.

00:03:17.150 --> 00:03:19.230
Bu değişkenin veri
türü dizi'dir.

00:03:19.230 --> 00:03:25.150
Bir kod satırını bu return deyiminin
arkasına eklersem ne olur?

00:03:25.150 --> 00:03:28.390
Tamam, artık deyimin ulaşılamaz
olduğunu belirten bir mesaj alırım.

00:03:28.390 --> 00:03:31.230
Çünkü bilgisayar bu kod satırlarını
return deyiminden

00:03:31.230 --> 00:03:32.690
sonra almaz.

00:03:32.690 --> 00:03:35.690
çünkü bu aşamada metodu
bitirmelidir.

00:03:35.690 --> 00:03:38.570
Yani return deyiminden sonra gelen
kod satırlarını silin.

00:03:39.640 --> 00:03:43.100
Çıkış değerlerini döndürecek metot
gerekmezse ne olur?

00:03:43.100 --> 00:03:45.390
JustJava app Uygulamasına ait
MainActivity sınıfının bir çift

00:03:45.390 --> 00:03:47.295
örneğine göz atalım.

00:03:47.295 --> 00:03:52.415
Artış ve düşüş metotları, dönen değerin
olmadığı durumlara örnektir.

00:03:52.415 --> 00:03:53.905
Düşüş metodunu çağırdığınızda,

00:03:53.905 --> 00:03:58.405
zorlu görevlerinin tümünü, displayQuantity
metodundaki UI güncellemesini yapmaktır.

00:03:58.405 --> 00:04:01.045
Döndürülecek çıkış değeri yoktur.

00:04:01.045 --> 00:04:04.185
Artış metoduyla aynı şekilde, zorlu görevin
tümü displayQuantity

00:04:04.185 --> 00:04:07.455
çağırdığınızda gerçekleştirilir ve
ekranı günceller.

00:04:07.455 --> 00:04:10.430
Return deyiminin
nerede olduğunu merak edebilirsiniz.

00:04:10.430 --> 00:04:14.180
Evet, metot yürütmeyi tüm kod satırları

00:04:14.180 --> 00:04:17.089
tamamlandığında veya
return deyimini bulduğunda bitirir.

00:04:17.089 --> 00:04:20.320
Yani, return ekleyebilirim;
tıpkı bunun gibi.

00:04:21.570 --> 00:04:24.870
Bu şekilde, metot bu satıra
gelince biter.

00:04:24.870 --> 00:04:27.200
Android Studio'da bana
bir uyarı verir.

00:04:27.200 --> 00:04:31.570
Uyarıda return'ün son deyimde,
Avoid metodunda gereksiz olduğu belirtilir.

00:04:31.570 --> 00:04:35.900
Hiçbir şey döndürmediğimden
bu satırı hemen burada silebilirim.

00:04:35.900 --> 00:04:38.080
Böylece daha az kod satırı olur;
okunması daha kolaydır;

00:04:38.080 --> 00:04:39.750
Benim tercihim budur.

00:04:39.750 --> 00:04:43.100
Dönen değerin olmadığını belirtmek için
metot işaretinde return veri

00:04:43.100 --> 00:04:46.570
türünden kaçınıldığını
belirtmek önemlidir.

00:04:46.570 --> 00:04:49.390
Void hiçbir
değerin döndürülmediğini belirtir.

00:04:49.390 --> 00:04:51.310
Java'da bunu göstermenin
özel bir yolu vardır;

00:04:51.310 --> 00:04:53.940
işte bu nedenle bir Java
anahtar sözcüğüdür.

00:04:53.940 --> 00:04:56.720
Şimdi de Java anahtar sözcük
listemize dönelim ve

00:04:56.720 --> 00:04:58.280
Gerçekten de void listede.

00:04:59.310 --> 00:05:01.310
Bu durumda, dönen değeriniz yoksa

00:05:01.310 --> 00:05:04.130
bunu, buradaki gibi boş
bırakmadığınızdan emin olun.

00:05:04.130 --> 00:05:07.470
Aksi taktirde bir java
sözdizimi hatası oluşur.

00:05:07.470 --> 00:05:09.430
Küçük harf V ile void yazmanız yeterlidir.

00:05:10.500 --> 00:05:12.310
İleriye gidin ve
bu makaleyi kendi başınıza okuyun.

00:05:12.310 --> 00:05:17.190
Anlamak için bunu gözden geçirin veya
daha fazla çevrimiçi bilgi için Google

00:05:17.190 --> 00:05:18.090
araması yapın.

00:05:18.090 --> 00:05:21.310
Makaleden birkaç bilgi
aldıktan sonra

00:05:21.310 --> 00:05:22.249
göreve dönebilirsiniz.

00:05:23.500 --> 00:05:24.560
Sonra da notlarınızı kontrol edin.

00:05:24.560 --> 00:05:28.290
Dört farklı metodun bazı kodlarına ait
bağlantıyı bulursunuz.

00:05:28.290 --> 00:05:30.440
Her metotta bir hata bulunur.

00:05:30.440 --> 00:05:33.560
Sizin görevinizse, bu metotların
her birinde bulunan hatayı bulmaktır.

00:05:34.850 --> 00:05:37.110
Hatayı düzeltmenin
birden fazla yolu olduğundan;

00:05:37.110 --> 00:05:40.710
her metodun üstündeki javadoc açıklamasının
doğru olduğunu varsayın.

00:05:40.710 --> 00:05:42.210
Biz de kodun bununla eşlenmesini istiyoruz.

00:05:43.410 --> 00:05:44.680
Metot tam da şuna benzer.

00:05:45.810 --> 00:05:48.120
Hatanın bulunduğu satır
numarasını tanımlayın.

00:05:48.120 --> 00:05:51.060
Satır numarası buradaki
sol sütunda yer alır.

00:05:51.060 --> 00:05:55.100
Şimdi de, bu satırda neden bir
hata olduğu açıklamasını yazın.

00:05:55.100 --> 00:05:56.872
Böylece, satır numarası buraya
açıklama da buraya gider.

00:05:56.872 --> 00:05:57.993
Bitirdiğinizde,
çözüm videosuyla devam edebilirsiniz.

