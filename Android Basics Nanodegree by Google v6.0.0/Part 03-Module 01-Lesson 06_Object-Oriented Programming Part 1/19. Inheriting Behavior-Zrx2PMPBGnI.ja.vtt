WEBVTT
Kind: captions
Language: ja

00:00:00.660 --> 00:00:03.410
ちょっとだけ JustJava アプリに戻りましょう

00:00:03.410 --> 00:00:07.260
MainActivity クラスの
displayMessage メソッドを見ましょう

00:00:07.260 --> 00:00:09.950
そのものはここから始まって
少し分かりやすく書いてあります

00:00:09.950 --> 00:00:14.350
作りかけの変数 orderSummaryTextView が
あるのが分かりますね

00:00:14.350 --> 00:00:17.290
この変数のデータ型は
TextView でした

00:00:17.790 --> 00:00:19.930
ここの部分はまだ
理解していないんですけどね

00:00:20.510 --> 00:00:23.730
次の行は TextView オブジェクトの
メソッドを呼んでいます

00:00:24.400 --> 00:00:27.930
今回は上に書いてある変数名と
同じものを使います

00:00:27.930 --> 00:00:31.620
なので orderSummaryTextView.setText を
呼びます

00:00:31.620 --> 00:00:34.460
それから メソッドの入力として
文字列を渡します

00:00:35.170 --> 00:00:40.630
この message という文字列は
元々は displayMessage メソッドの入力でした

00:00:41.510 --> 00:00:45.250
ここで まだ理解していない
この部分を詳しく見ていきましょう

00:00:45.250 --> 00:00:48.210
findViewById とあるのは
メソッド呼び出しのようです

00:00:48.210 --> 00:00:53.530
これはカッコ囲みの
入力引数っぽい箇所の前にあるからです

00:00:53.530 --> 00:00:57.458
しかし奇妙なことに このメソッドは
このクラス内のどこにも見当たりません

00:00:58.328 --> 00:01:02.355
この名前をダブルクリックして
Command + F もしくは

00:01:02.355 --> 00:01:07.410
Windows で Ctrl + F を押すと
ファイル内を検索できます

00:01:07.410 --> 00:01:10.680
２つだけ findViewById を見つけました

00:01:10.680 --> 00:01:12.790
２つとも同じように使われています

00:01:12.790 --> 00:01:15.700
他に findViewById という
メソッドはないですね

00:01:16.190 --> 00:01:19.640
そういえば 前に MainActivity クラスで

00:01:19.640 --> 00:01:22.470
setContentView を呼び出す場面に
出会いましたが

00:01:22.470 --> 00:01:26.940
ファイル内検索をしても今回同様
MainActivity 内には見つかりませんでした

00:01:27.600 --> 00:01:30.430
では そのメソッド定義は
どこでしょうか？

00:01:30.430 --> 00:01:33.330
まず MainActivity は
実はとても短いファイルです

00:01:33.330 --> 00:01:35.630
たった約 90 行です

00:01:35.630 --> 00:01:38.790
しかし 実はそこには目に見えない
より多くのクラスがあるのです

00:01:38.790 --> 00:01:41.970
ここに extends AppCompatActivity を
呼んでいるコードがあります

00:01:41.970 --> 00:01:45.710
これは MainActivity が
AppCompatActivity クラス内の

00:01:45.710 --> 00:01:49.000
機能を拡張したものだという意味です

00:01:49.000 --> 00:01:52.790
あなたの環境でここに ActionBarActibity と
あったとしても大丈夫です

00:01:52.790 --> 00:01:55.450
バージョンが古いだけです

00:01:55.450 --> 00:01:58.770
使うべき最新バージョンは
AppCompatActivity ですが

00:01:58.770 --> 00:02:00.690
AppCompatActivity には―

00:02:00.690 --> 00:02:04.460
古い Android デバイスをサポートする
後方互換性があります

00:02:04.460 --> 00:02:07.980
AppCompatActivity は
Android サポートライブラリの一部です

00:02:07.980 --> 00:02:11.740
それにより 古い Android デバイスを
使っていたとしても

00:02:11.740 --> 00:02:15.420
最新のユーザーインターフェイスを使えます

00:02:15.420 --> 00:02:17.940
AppCompatActivity クラスを
拡張することによって

00:02:17.940 --> 00:02:21.190
MainActivity 内の
全ての機能 ステート メソッドを

00:02:21.190 --> 00:02:24.490
ここからタダで手に入れることができます

00:02:24.490 --> 00:02:26.980
AppCompatActivityから
コピー＆ペーストする必要はありません

00:02:26.980 --> 00:02:29.160
シンプルにクラスを拡張できます

00:02:29.970 --> 00:02:35.670
興味があれば AppCompatActivity について
検索で探しましょう

00:02:35.670 --> 00:02:39.440
AppCompatActivity クラスの
リファレンスがあります

00:02:39.440 --> 00:02:44.100
Chrome 拡張機能を入れていれば
ソースも見られます

00:02:44.100 --> 00:02:47.890
これが AppCompatActivity クラスが
定義されたコードです

00:02:47.890 --> 00:02:50.360
多くの機能がここにあるのが
分かると思いますが

00:02:50.360 --> 00:02:54.510
ここで言いたいのは
実装を理解する必要はありません

00:02:54.510 --> 00:02:58.350
理解してもらいたいのは
AppCompatActivity を拡張したら―

00:02:58.350 --> 00:03:01.010
全ての機能をタダで手に入れられる
ということです

00:03:01.010 --> 00:03:03.580
高いレベルからは
このように視覚化できます

00:03:03.580 --> 00:03:05.900
これは MainActivity の
クラス定義です

00:03:05.900 --> 00:03:08.000
いくつかのメソッドの定義はここです

00:03:08.000 --> 00:03:12.350
AppCompatActivity を拡張したら
このステートにアクセスしたり

00:03:12.350 --> 00:03:14.660
AppCompatActivity の
メソッドにアクセスもできます

00:03:14.660 --> 00:03:17.870
物理的に MainActivity クラスに
追加しているわけではありませんが

00:03:17.870 --> 00:03:19.280
ここにあると考えてください

00:03:19.280 --> 00:03:22.930
この中にあるステートもメソッドも
参照できますからね

00:03:22.930 --> 00:03:25.500
以上が setContentView や
findViewById などを

00:03:25.500 --> 00:03:27.690
どうやって参照しているかです

00:03:27.690 --> 00:03:32.240
これらのメソッドは継承されているので
MainActivity の中で定義しません

00:03:32.240 --> 00:03:35.110
MainActivity は実機上の
画面で表示されますが

00:03:35.110 --> 00:03:39.520
MainActivity 内でそのコードは書いていません
同様に継承しているからです

00:03:39.520 --> 00:03:43.770
ステートやメソッドを AppCompatActivity から
クラスに直接は持ってきませんが

00:03:43.770 --> 00:03:46.840
それらがそこにあると分かりましたし
参照することも可能です

00:03:46.840 --> 00:03:50.260
継承といえば 長所と短所があります

00:03:50.260 --> 00:03:52.540
ある時は 動作をそのまま
継承したいでしょうし

00:03:52.540 --> 00:03:55.190
別の時には
少し変えたいかもしれません

00:03:55.840 --> 00:03:59.900
もし 継承したクラスから
いくつか動作を変えたいなら

00:03:59.900 --> 00:04:02.230
メソッド上書きができます

00:04:02.230 --> 00:04:06.250
@override をメソッドの最初に加えれば

00:04:06.250 --> 00:04:12.100
AppCompatActivity 内のメソッドではなく

00:04:12.100 --> 00:04:15.830
代わりにここに定義した方を使いたいのだと
コンピューターは理解します

00:04:15.830 --> 00:04:18.620
これは難解ですし
たくさん経験しないと分かりません

00:04:18.620 --> 00:04:21.660
実は 私たちは 既に
AppCompatActivity クラスから

00:04:21.660 --> 00:04:23.640
上書きされたメソッドの例を見ています

00:04:23.640 --> 00:04:26.380
onCreate メソッド がそれです

00:04:26.380 --> 00:04:30.290
MainActivity 内で onCreate メソッドを
上書きすることで

00:04:30.290 --> 00:04:35.380
メソッドが呼ばれたときに動いてほしい
自分たちの実装を具体的に指定してます

00:04:35.380 --> 00:04:37.180
今すぐ理解できなくても心配しないでください

00:04:37.180 --> 00:04:42.354
オブジェクト指向プログラミングの概念を
かいつまんで紹介しているだけです

00:04:42.354 --> 00:04:46.160
このことについて 
問題が喉に引っかかっていたり

00:04:46.160 --> 00:04:50.880
全てを把握するには関連文献を
もっと読む必要があることは想定内です

00:04:50.880 --> 00:04:52.861
クラス階層図を描いて―

00:04:52.861 --> 00:04:58.120
MainActivity クラスと AppCompatActivity クラスの
関係を視覚化するやり方もあります

00:04:58.120 --> 00:05:00.690
これはビュー階層図とは違います

00:05:00.690 --> 00:05:05.340
ビュー階層図は 画面上のビューを
ツリー状で表しますが

00:05:05.340 --> 00:05:10.010
クラス階層図は異なる Java クラス間の
関係性を示します

00:05:10.010 --> 00:05:12.860
AppCompatActivity は
スーパークラスとなります

00:05:12.860 --> 00:05:16.158
MainActivity は
AppCompatActivity から拡張したので

00:05:16.158 --> 00:05:18.560
サブクラスだとみなされます

00:05:18.560 --> 00:05:20.600
クラス定義を見る時はいつでも

00:05:20.600 --> 00:05:23.970
拡張元は全てスーパークラスと呼ばれます

00:05:23.970 --> 00:05:25.770
こちらがサブクラスになります

00:05:25.770 --> 00:05:27.610
もし あなたが もう1つ―

00:05:27.610 --> 00:05:30.820
DetailActivity なるものを作って
AppCompatActivity を拡張したなら

00:05:30.820 --> 00:05:33.779
これがサブクラスになり
これはスーパークラスです

00:05:34.470 --> 00:05:37.840
ここにもう1つ Java クラス継承の
例があります

00:05:37.840 --> 00:05:41.530
ここでは TextView も
ImageView も Button も

00:05:41.530 --> 00:05:44.460
全て共通要素を
持っていると思ってください

00:05:44.460 --> 00:05:48.070
全てのビューは スクリーン上に
幅と高さを持ちます

00:05:48.070 --> 00:05:51.330
まだ学んでいませんが
これらには可視性ステートもあるのです

00:05:51.330 --> 00:05:54.400
これらは全て可視状態にも
不可視状態にもできるのです

00:05:54.400 --> 00:05:58.650
他にもこれらに共通するものが
数プロパティあります

00:05:58.650 --> 00:06:02.370
この TextView クラスにある
プロパティのコードを書き出して

00:06:02.370 --> 00:06:05.590
ImageView や Button の
クラスにコピーする代わりに

00:06:05.590 --> 00:06:07.610
もう少しスマートなやり方があります

00:06:07.610 --> 00:06:09.980
まず View クラスを作って―

00:06:09.980 --> 00:06:16.540
全てのビューに共通するプロパティを抜き出し
この View クラスの中に置きます

00:06:16.540 --> 00:06:19.730
そうすればコードを書くのは一度で済みます

00:06:19.730 --> 00:06:21.990
では どうやってこの
TextView クラスと View クラスの間に

00:06:21.990 --> 00:06:24.000
つながりを作るのでしょうか？

00:06:24.000 --> 00:06:26.548
継承を考えているのなら
その考えで合っています

00:06:26.548 --> 00:06:30.080
TextView.java ファイルの中に
TextView クラスを定義します

00:06:30.080 --> 00:06:33.570
こうして View クラスから
データとメソッドを全て継承します

00:06:34.200 --> 00:06:37.520
すると この TextView クラスと
同じコードは入れなくてもよくなります

00:06:37.520 --> 00:06:41.860
その機能の一部は 既に
View クラスの中にあるからです

00:06:41.860 --> 00:06:44.640
同じことが ImageView など
下位のクラスにも言えます

00:06:44.640 --> 00:06:46.800
コードをたくさん書く必要はありません

00:06:46.800 --> 00:06:50.190
これらのファイルでは
ImageView.java と View.java を比べて

00:06:50.190 --> 00:06:53.090
違う箇所のみを書けばよいのです

00:06:53.090 --> 00:06:56.060
差分を明確にする意味では―

00:06:56.060 --> 00:07:02.460
ImageView クラスには View と
違う部分だけが入ってなくてはなりません

00:07:03.550 --> 00:07:06.960
もし View 内の特定の動作を
継承したくないなら

00:07:06.960 --> 00:07:13.330
書き換えた動作を ImageView に書いたり
他のクラス内に書いたりできます

00:07:13.970 --> 00:07:15.940
用語を復習しましょう

00:07:15.940 --> 00:07:20.289
この場合 TextView はサブクラスで
View がスーパークラスです

00:07:21.240 --> 00:07:24.210
TextView クラスの
ドキュメントに戻って

00:07:24.210 --> 00:07:27.310
私たちは今 ここの部分を理解しました

00:07:27.310 --> 00:07:30.000
<i>TextView が View を拡張する</i> とあります

00:07:30.000 --> 00:07:31.270
今なら 意味が分かります

00:07:31.270 --> 00:07:34.070
ステートとメソッドを
View クラスから継承している―

00:07:34.070 --> 00:07:35.280
ということですね

00:07:35.280 --> 00:07:38.330
ここにはクラス階層図があります

00:07:38.330 --> 00:07:42.574
これは <i>TextView クラスが View クラスから
継承されている</i> ことを示しています

00:07:43.380 --> 00:07:46.870
さらに <i>View クラスは
Object クラスから継承しています</i>

00:07:47.470 --> 00:07:50.060
もっと探索すれば
他のクラスも発見できます

00:07:50.060 --> 00:07:54.780
<i>EditText クラスは TextView クラスから
拡張している</i> といった具合に

00:07:54.780 --> 00:07:57.570
これは動作を 
TextView クラスから持ってきて

00:07:57.570 --> 00:08:00.670
機能を少し加えたものです

00:08:01.290 --> 00:08:03.590
つまり EditText は TextView から
拡張しています

00:08:03.590 --> 00:08:07.390
TextView は View から拡張していて
View は Object から拡張してます

00:08:07.390 --> 00:08:10.480
そして これがそのクラス階層図です

00:08:11.370 --> 00:08:13.950
たくさんありますので
何時間でも見ていられますが

00:08:13.950 --> 00:08:17.570
今回は TextView ドキュメントの
ページの紹介だけで ご勘弁を

00:08:17.570 --> 00:08:20.820
ここからは setVisibility のメソッドを
ご紹介したいと思います

00:08:20.820 --> 00:08:24.350
TextView クラス内に
setVisibility 用のメソッドがあります

00:08:24.350 --> 00:08:27.170
これはビューの可視と不可視を
切り替えるものです

00:08:27.800 --> 00:08:33.240
このメソッドをクリックすると
View クラスに飛びます

00:08:33.240 --> 00:08:36.010
そして これはメソッドの説明です

00:08:36.010 --> 00:08:39.860
TextView オブジェクトは setVisibility メソッドを
伴っているのが分かります

00:08:39.860 --> 00:08:43.659
そして それは View クラスから
継承されたものです

00:08:43.659 --> 00:08:47.470
この機能は View クラスから
タダで得たものです

00:08:47.470 --> 00:08:50.930
さて 新しい概念をたくさん見てきましたね

00:08:50.930 --> 00:08:56.040
これは通常ならコンピューター科学の
コースで １学期間かけて行うものです

00:08:56.040 --> 00:08:58.260
これから 少し練習をします

00:08:58.260 --> 00:09:01.170
あなたにとって 点と点を
つなぐことになると良いのですが

00:09:01.170 --> 00:09:03.840
しかし これらの概念を
完全に把握するには

00:09:03.840 --> 00:09:06.610
より多くの時間と練習が必要なことは
知っておいてください

00:09:06.610 --> 00:09:09.700
OK　最初の練習です
新たな Android アプリを作ってください

00:09:09.700 --> 00:09:12.250
ここで JustJava アプリの
まとめをしておきましょう

00:09:12.920 --> 00:09:15.030
作り終わったら
そのアプリを実行してください

00:09:15.730 --> 00:09:18.380
アプリができたら
MainActivity ファイルを見てください

00:09:18.380 --> 00:09:22.270
MainActivity ファイルは
AppCompatActivity から拡張しています

00:09:22.270 --> 00:09:26.060
Android Studio のバージョンによっては
MainActivity が ActionBarActivity から

00:09:26.060 --> 00:09:28.760
拡張しているかもしれませんが
それでも構いません

00:09:28.760 --> 00:09:31.950
それは AppCompatActivity の
古いバージョンなだけです

00:09:31.950 --> 00:09:35.650
MainActivity の onCreate メソッド上書きを
取り除きながら

00:09:35.650 --> 00:09:40.280
AppCompatActivity クラスの onCreate の
挙動に戻りましょう

00:09:40.280 --> 00:09:42.310
今 このメソッドがあるため

00:09:42.310 --> 00:09:45.150
<i>MainActivity 内では
onCreate メソッドは異なる挙動にしたい</i>

00:09:45.150 --> 00:09:46.230
となっています

00:09:46.230 --> 00:09:47.850
なので これを取り除き

00:09:47.850 --> 00:09:52.040
AppCompatActivity クラスにある
元の動作に戻してください

00:09:52.040 --> 00:09:53.380
アプリを実行したら―

00:09:53.380 --> 00:09:57.250
最初にアプリを実行した時と
何が違うか気づきましたか？

00:09:57.250 --> 00:09:59.101
ここに答えを書きましょう

