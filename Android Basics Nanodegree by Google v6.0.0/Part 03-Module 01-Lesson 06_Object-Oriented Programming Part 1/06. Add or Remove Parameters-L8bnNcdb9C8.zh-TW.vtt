WEBVTT
Kind: captions
Language: zh-TW

00:00:00.420 --> 00:00:02.590
我将带你们一起了解一个例子，

00:00:02.590 --> 00:00:04.860
是关于使用不同数量的输入参数的一个方法。

00:00:04.860 --> 00:00:09.660
我先通过Android Studio中的项目工程创建一个新的应用，所以

00:00:09.660 --> 00:00:12.800
这和Just Java完全没有联系。

00:00:12.800 --> 00:00:15.460
我将这一方法加入到主页面中

00:00:15.460 --> 00:00:17.420
我称它为‘createWeatherMessage’（创建天气通知）。

00:00:17.420 --> 00:00:21.650
这里没有输入参数，而返回值是一个字符串。

00:00:21.650 --> 00:00:24.890
这一方法可以创建一条新通知，是关于城市名称以及

00:00:24.890 --> 00:00:26.080
气温的。

00:00:26.080 --> 00:00:29.590
你可以把一个方法当成是指令的一个模板。

00:00:29.590 --> 00:00:32.320
因此，我可以将气温当成输入参数。

00:00:33.550 --> 00:00:36.650
而且它是一个数字，现在我要输入一个温度值。

00:00:36.650 --> 00:00:40.990
然后在这里，我可以这样。

00:00:40.990 --> 00:00:43.540
好了，这就是一个字符串，而

00:00:43.540 --> 00:00:46.000
它与表示温度的数字是串联的。

00:00:46.000 --> 00:00:51.310
然后它还和另一个表示华氏温度的数字串联。

00:00:51.310 --> 00:00:54.890
现在就可以根据气温来定制通知了，因为它是

00:00:54.890 --> 00:00:56.380
一个输入参数。

00:00:56.380 --> 00:00:59.874
哦，对了，我刚刚忘记提这个了，在主方法中，当方法创建时，

00:00:59.874 --> 00:01:03.198
这个方法被称为onCreat，

00:01:03.198 --> 00:01:05.670
我称之为‘createWeatherMessage’（创建天气通知）。

00:01:05.670 --> 00:01:10.040
之前我没有输入参数，但是现在要输入一个。

00:01:10.040 --> 00:01:14.630
所以我输入77作为温度的值。

00:01:14.630 --> 00:01:18.990
这样不会有错误，这种方法调用是正确的。

00:01:18.990 --> 00:01:21.900
另外需要改进的是这个方法的注释部分。

00:01:22.940 --> 00:01:24.400
我要增加一个空白行，

00:01:24.400 --> 00:01:28.351
然后，对输入的值，也就是温度，进行描述。

00:01:28.351 --> 00:01:31.385
我输入@ param temperature，

00:01:31.385 --> 00:01:34.265
然后就可以添加一个说明来表示这是这个城市的气温。

00:01:35.345 --> 00:01:38.555
有时候参数的名字是比较难以理解的，

00:01:38.555 --> 00:01:39.801
所以这就是为什么注释同样很重要。

00:01:41.232 --> 00:01:44.832
而有些时候如果你的方法是公开的，那么其他人就能

00:01:44.832 --> 00:01:46.212
调用这个方法，

00:01:46.212 --> 00:01:49.352
但是他们可能并不知道这个方法里包含的指令。

00:01:49.352 --> 00:01:50.642
因此，阅读方法文档和

00:01:50.642 --> 00:01:52.952
参数注释对他们来说是非常有帮助的。

00:01:54.292 --> 00:01:57.242
我之前提到，一个方法就像一个模板。

00:01:57.242 --> 00:02:01.102
所以，如果我们想要更换一个城市，比如不总是旧金山，会怎么样呢？

00:02:02.130 --> 00:02:04.280
我可以将城市作为一个输入参数。

00:02:04.280 --> 00:02:06.260
可以在这加一个逗号。

00:02:06.260 --> 00:02:10.889
而城市名字是文本，我要将它变成一个字符串的形式。

00:02:10.889 --> 00:02:15.740
然后就能删除旧金山，用其他不同的城市名字来代替。

00:02:16.870 --> 00:02:20.009
要记得在这之前和之后都加一个空格。

00:02:21.390 --> 00:02:24.410
好了，现在这个方法就能创建通知了，

00:02:24.410 --> 00:02:26.970
而这条通知对某一城市和温度是特定的。

00:02:26.970 --> 00:02:30.430
我也没有忘记更新方法文档，

00:02:30.430 --> 00:02:34.050
这样就多了这条表示城市名字的参数和注释。

00:02:35.140 --> 00:02:39.100
由于我更改了方法签名，所以现在这里出现了一个错误。

00:02:39.100 --> 00:02:41.850
仅有一个参数，该方法不能运行了。

00:02:41.850 --> 00:02:44.130
我需要输入两个参数。

00:02:44.130 --> 00:02:48.230
所以，我要加一个逗号，然后输入San Francisco这个字符串。

00:02:49.430 --> 00:02:51.130
现在错误消除了。

00:02:51.130 --> 00:02:56.140
当我调用创建天气通知（createWeatherMessage）这个方法时，
它就会将77作为温度的值，

00:02:56.140 --> 00:02:58.300
旧金山（San Francisco）作为城市的名字。

00:02:59.390 --> 00:03:01.783
它也会在这里显示一条合适的字符串。

00:03:03.813 --> 00:03:06.874
现在，我们再来回顾计价calculatePrice方法，

00:03:06.874 --> 00:03:09.480
同时优化方法签名，

00:03:09.480 --> 00:03:13.230
使用不同个数的输入参数。

00:03:13.230 --> 00:03:18.710
我们将分别采取不用、用1个

00:03:18.710 --> 00:03:22.079
以及同时用两个输入参数的方式来定义。

00:03:23.350 --> 00:03:26.660
你会看到输入参数的改变

00:03:26.660 --> 00:03:30.720
对方法调用方式的影响以及方法签名的变化。

00:03:30.720 --> 00:03:32.270
通常，当你在构建你的应用方法时，

00:03:32.270 --> 00:03:36.280
使用含一种输入参数数量的定义方式就行了。

00:03:36.280 --> 00:03:39.360
而且一般输入参数的个数由

00:03:39.360 --> 00:03:42.380
方法内部的情况决定。

00:03:42.380 --> 00:03:45.330
最好的方法是仅仅输入

00:03:45.330 --> 00:03:47.590
实际在方法中需要用到的参数。

00:03:47.590 --> 00:03:50.450
如果在方法中用不到的话，

00:03:50.450 --> 00:03:51.240
多输参数是徒劳无益的。

00:03:51.240 --> 00:03:54.640
以下是相关的指导法则。

00:03:54.640 --> 00:03:58.568
首先，在你应用的主方法中定义calculatePrice方法。

00:03:58.568 --> 00:04:01.470
对于开始的代码片段，注意看它们的指导说明。

00:04:01.470 --> 00:04:04.123
我们接下来修改calculatePrice方法，

00:04:04.123 --> 00:04:06.690
它仅有一个输入参数。

00:04:06.690 --> 00:04:09.970
然后，在submitOrder方法中调用calculatePrice方法，

00:04:09.970 --> 00:04:12.230
同时输入质量值作为输入参数。

00:04:12.230 --> 00:04:16.450
接着尝试用两个输入参数来修改calculatePrice方法。

00:04:16.450 --> 00:04:21.714
根据这一方法，在submitOrder方法中需要
调用calculatePrice的质量值，

00:04:21.714 --> 00:04:26.093
而后输入价格，比如$10。

00:04:26.093 --> 00:04:31.150
最后，修改calculatePrice方法使其没有输入参数。

00:04:31.150 --> 00:04:34.324
这一方法的submitOrder方法中只要调用calculatePrice方法，

00:04:34.324 --> 00:04:34.870
像这样。

00:04:35.950 --> 00:04:38.530
让我们一起来完成第一种，这样你们就能理解我的意思了。

00:04:38.530 --> 00:04:41.729
打开指导说明中的链接。

00:04:41.729 --> 00:04:46.080
这里我们提供了calculatePrice方法的代码。

00:04:46.080 --> 00:04:50.480
所以翻到最前面，全选，然后复制。

00:04:50.480 --> 00:04:53.160
在Android Studio里面，复制这段代码。

00:04:53.160 --> 00:04:56.580
我把它复制在submitOrder方法的正下方，

00:04:56.580 --> 00:05:01.370
然后要确认每段方法之间留有一行空白。

00:05:01.370 --> 00:05:02.519
这样阅读起来更容易。

00:05:03.650 --> 00:05:07.140
接着从submitOrder方法调用这段方法。

00:05:07.140 --> 00:05:09.530
我将调用代码写在这段方法的最底部。

00:05:09.530 --> 00:05:12.430
稍后，我们会把它与上面的代码相整合。

00:05:12.430 --> 00:05:13.640
但是现在，这样就行了。

00:05:14.940 --> 00:05:19.000
哎呀，我忘记我们现在需要使用一个输入参数，那就需要输入一个质量值了。

00:05:20.790 --> 00:05:21.960
现在做同样的事情，

00:05:21.960 --> 00:05:25.400
通过修改输入的参数来完成剩余的两项工作。

00:05:27.000 --> 00:05:29.740
为完成这个任务，如果你们需要例子作为参考的话，

00:05:29.740 --> 00:05:33.761
可以上Google去搜索相关的Java方法。

