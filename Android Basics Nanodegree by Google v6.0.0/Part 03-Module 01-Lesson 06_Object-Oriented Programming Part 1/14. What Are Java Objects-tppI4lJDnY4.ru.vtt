WEBVTT
Kind: captions
Language: ru

00:00:00.490 --> 00:00:01.635
Ты помнишь коробки?

00:00:01.635 --> 00:00:02.809
&gt;&gt; Какие коробки?

00:00:02.809 --> 00:00:04.090
&gt;&gt; Вот эти.

00:00:04.090 --> 00:00:06.910
&gt;&gt; Ха!
&gt;&gt; Ты их помнишь?

00:00:06.910 --> 00:00:07.480
&gt;&gt;А! Да-да.

00:00:07.480 --> 00:00:08.260
Помню.

00:00:08.260 --> 00:00:10.380
Это переменные, в которые можно 
вложить величину.

00:00:10.380 --> 00:00:10.930
Да, и можно

00:00:10.930 --> 00:00:15.020
соединить множество этих переменных, 
чтобы создать большой Java объект.

00:00:15.020 --> 00:00:16.790
&gt;&gt; Чтобы можно было взять две или больше

00:00:16.790 --> 00:00:18.420
переменных, создать нечто большее.

00:00:18.420 --> 00:00:19.709
&gt;&gt; Точно.
&gt;&gt; Ладно.

00:00:19.709 --> 00:00:21.751
&gt;&gt; Как <i>TextView</i>.

00:00:21.751 --> 00:00:23.960
&gt;&gt; Ага.
Чтобы у нас была целая переменная.

00:00:23.960 --> 00:00:25.640
&gt;&gt; Это для размера шрифта.

00:00:25.640 --> 00:00:26.210
&gt;&gt; Точно.

00:00:26.210 --> 00:00:27.752
&gt;&gt; Хорошо.

00:00:27.752 --> 00:00:28.637
&gt;&gt; А еще можно создать

00:00:28.637 --> 00:00:29.460
строковую переменную

00:00:29.460 --> 00:00:31.830
&gt;&gt; И строковую переменную 
для самого текста.

00:00:31.830 --> 00:00:36.240
&gt;&gt; Да, и их можно сложить в <i>TextView</i> 
как состояние <i>TextView</i>.

00:00:36.240 --> 00:00:38.970
&gt;&gt; И тогда можно взаимодействовать 
с ними, используя различные

00:00:38.970 --> 00:00:39.900
методы, с которыми мы потом поиграем.

00:00:39.900 --> 00:00:40.500
&gt;&gt; Именно.

00:00:40.500 --> 00:00:41.290
&gt;&gt;Ладно.
Начнем.

00:00:42.480 --> 00:00:46.220
&gt;&gt; Как мы упоминали ранее, отображение
<i>TextView</i> на экране вот таким образом

00:00:46.220 --> 00:00:49.690
управляется объектом Java 
внутри приложения.

00:00:49.690 --> 00:00:52.300
Это пример объекта Java 
<i>TextView</i>.

00:00:52.300 --> 00:00:55.890
Это как коробка, а внутри нее 
находится состояние.

00:00:55.890 --> 00:00:58.350
Состояние состоит из кучи полей.

00:00:58.350 --> 00:01:00.240
Поле это переменная, как в уроке два,

00:01:00.240 --> 00:01:02.760
когда мы узнали о глобальных переменных.

00:01:02.760 --> 00:01:05.730
У нас может быть текстовое поле 
для хранения строки <i>today</i>,

00:01:05.730 --> 00:01:09.220
это будет текст, который полностью 
отражаетя на экране.

00:01:09.220 --> 00:01:13.520
У на может быть поле целых чисел для 
хранения размера шрифта этого текста.

00:01:13.520 --> 00:01:14.910
Есть и другие поля, как

00:01:14.910 --> 00:01:19.460
цвет текста, семья шрифта, что и 
составляет состояние <i>TextView</i>.

00:01:19.460 --> 00:01:21.900
Я просто не рисовала их на этой картинке.

00:01:21.900 --> 00:01:23.940
Для взаимодействия с этим 
объектом Java и его

00:01:23.940 --> 00:01:28.420
изменения во время работы приложения, 
мы можем вызвать метод на <i>TextView</i>.

00:01:28.420 --> 00:01:31.020
Мы уже учили что такое методы 
на третьем уроке.

00:01:31.020 --> 00:01:35.120
Некоторые методы-примеры на <i>TextView</i>
это <i>setText</i> и <i>getText</i>.

00:01:35.120 --> 00:01:39.910
У вас также могут быть такие методы как
<i>setTextSize</i> или <i>getTextSize</i>, и т.д.

00:01:39.910 --> 00:01:43.190
Каждый из этих методов просто 
выполняет список инструкций.

00:01:43.190 --> 00:01:45.590
Методы могут быть и более сложные, 
как <i>onDraw</i>, который

00:01:45.590 --> 00:01:48.440
отвечает за выведение <i>TextView</i> на экран.

00:01:48.440 --> 00:01:53.350
Так что, в целом, этот объект <i>TextView</i> 
содержит информацию о том, что этот

00:01:53.350 --> 00:01:57.850
<i>TextView</i> содержит, и вы можете вызывать 
методы, чтобы взаимодействовать с этим

00:01:57.850 --> 00:02:01.500
i&gt;TextView, как например, изменять 
состояние или производиьт более сложные

00:02:02.850 --> 00:02:06.565
действия. Чтобы покахать <i>ImageView</i> 
на экране, нам нужен Java объект

00:02:06.565 --> 00:02:08.838
для <i>ImageView</i> внутри приложения.

00:02:08.838 --> 00:02:13.710
Этот конкретный <i>ImageView</i> содержит 
информацию о состоянии - какое изображение

00:02:13.710 --> 00:02:17.680
следует показывать, а также тип 
масшта, например, обрезать по центру.

00:02:17.680 --> 00:02:20.490
Опять же, есть другие поля, составляющие 
состояние <i>ImageView</i>,

00:02:20.490 --> 00:02:22.250
я просто их тут не нарисовала.

00:02:22.250 --> 00:02:25.759
Есть такие методы как <i>setImage</i>,
<i>setScaleType</i>, и даже более сложные методы

00:02:25.759 --> 00:02:30.330
вроде <i>onDraw</i>, чтобы вывести этот
<i>ImageView</i> на экран.

00:02:30.330 --> 00:02:31.560
Помните, как разработчикам,

00:02:31.560 --> 00:02:35.480
нам не нужно открыто вызывать <i>onDraw</i>,
чтобы заставить его выводить на экран.

00:02:35.480 --> 00:02:39.880
Android автоматически делает вызов 
вместо нас, но нам полезно

00:02:39.880 --> 00:02:43.910
уметь вызывать эти методы, чтобы 
изменить <i>ImageView</i>, например.

00:02:43.910 --> 00:02:47.580
Так как мы узнаем какие все поля 
внутри состояния <i>ImageView</i>,

00:02:47.580 --> 00:02:50.530
и какие все методы этого <i>ImageView</i>?
Чтобы ответить

00:02:50.530 --> 00:02:53.980
на этот вопрос, нам нужно посмотреть 
на определение класса для этого объекта.

00:02:55.010 --> 00:02:57.574
Это файл под названием <i>TextView.java</i>,

00:02:57.574 --> 00:03:00.890
похоже на то, как мы определяли 
<i>MainActivity.java</i>.

00:03:00.890 --> 00:03:05.130
Внутри этого файла класса <i>TextView</i> у нас 
есть группа кодов, которая

00:03:05.130 --> 00:03:08.530
говорит о как состоянии <i>TextView</i>, 
так и о методах.

00:03:08.530 --> 00:03:12.240
Она не говорит в точности "состояние" 
и "методы", а просто содержит

00:03:12.240 --> 00:03:14.990
информацию по состоянию и по методам.
Можете считать

00:03:16.020 --> 00:03:19.970
это определением правил поведения 
<i>TextView</i>. Этот экземпляр класса

00:03:19.970 --> 00:03:25.750
может содержать конкретную информацию, как
например, текстовая строка <i>Тoday</i>

00:03:25.750 --> 00:03:26.760
или размер текста 18. Еще

00:03:26.760 --> 00:03:32.420
можно использовать этот класс, чтобы 
создать еще больше экземпляров класса

00:03:32.420 --> 00:03:34.290
<i>TextView</i> и у них может быть другое

00:03:34.290 --> 00:03:37.010
значение текстовой строки. Думаю, в этом 
может быть текст "привет",

00:03:37.010 --> 00:03:39.800
а в этом может быть текст со 
словами "до свидания".

00:03:39.800 --> 00:03:43.050
У них могут быть разные размеры шрифтов, 
цвета текста и т.д.

00:03:44.080 --> 00:03:47.520
Однако, все они отталкиваются от 
шаблонов класса.

00:03:47.520 --> 00:03:50.670
Может, вам будет трудно различить класс 
и экземпляр класса,

00:03:50.670 --> 00:03:51.890
но это нормально.

00:03:51.890 --> 00:03:53.760
К этому надо привыкнуть.

00:03:53.760 --> 00:03:55.630
Вот вам аналогия в помощь.

00:03:55.630 --> 00:03:59.270
Можете думать об этом как о создании 
плана-схемы этажа дома.

00:03:59.270 --> 00:04:02.680
Можно испоьзовать этот план для создания 
настоящего дома.

00:04:02.680 --> 00:04:04.320
Каждый из домов будеть чуть отличаться.

00:04:04.320 --> 00:04:06.990
Но все они строились по одному 
плану-схеме.

00:04:06.990 --> 00:04:10.270
Важно помнить, что план этажа это 
еще не сам дом.

00:04:10.270 --> 00:04:12.110
Это только план.

00:04:12.110 --> 00:04:17.079
Вот и класс <i>TextView</i> используется для 
создания этих экземпляров класса.

00:04:17.079 --> 00:04:20.480
Поэтому эти экземпляры класса модержат 
действующие текстовые величины,

00:04:20.480 --> 00:04:23.350
величины цвета текста и его размера.

00:04:23.350 --> 00:04:25.010
Так как же выглядит один из этих классов?

