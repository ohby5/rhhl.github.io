WEBVTT
Kind: captions
Language: zh-CN

00:00:00.660 --> 00:00:05.050
我们从第一步开始 也就是改变 PRICE 标题

00:00:05.050 --> 00:00:05.656
使它显示 Order Summary

00:00:05.656 --> 00:00:09.333
首先我打开 activity_main 布局文件 然后

00:00:09.333 --> 00:00:12.000
找到控制 PRICE 标题的视图

00:00:12.000 --> 00:00:14.270
将光标放到这里

00:00:14.270 --> 00:00:17.240
然后可以看到这个视图变成高亮的了

00:00:17.240 --> 00:00:20.710
所以我现在继续修改这个字符串

00:00:20.710 --> 00:00:23.800
我删掉这个然后输入 Order Summary

00:00:23.800 --> 00:00:26.370
然后它在预览窗口中准确的更新显示

00:00:26.370 --> 00:00:28.690
注意我只大写了 O 和 S

00:00:28.690 --> 00:00:31.910
而不是所有字母都是大写

00:00:31.910 --> 00:00:34.390
如果我们曾经决定更改用户界面

00:00:34.390 --> 00:00:39.950
并设置 AllCaps 为 false 我们的文字就暂时不会改变

00:00:39.950 --> 00:00:42.360
所以我更倾向于这样输入 Order Summary

00:00:42.360 --> 00:00:44.850
然后设置属性 textAllCaps = true

00:00:46.170 --> 00:00:47.840
第一部分完成了

00:00:47.840 --> 00:00:51.600
第二个任务是找到 PRICE 的 TextView

00:00:51.600 --> 00:00:54.130
并且给 它加上ID

00:00:54.130 --> 00:00:58.050
光标移动到 Order Summary 标题下面的 TextView

00:00:58.050 --> 00:01:02.830
这就是 PRICE 的 TextView 它现在也是高亮的

00:01:02.830 --> 00:01:07.840
按要求 把 ID 改成 order_summary_text_view

00:01:07.840 --> 00:01:11.170
这就是布局中需要更改的 XML 代码

00:01:11.170 --> 00:01:13.210
运行应用 确保它能工作

00:01:14.220 --> 00:01:15.210
事实上 它不工作

00:01:15.210 --> 00:01:19.490
错误信息显示 它找不到 price_text_view

00:01:19.490 --> 00:01:21.320
在 Java 文件中

00:01:21.320 --> 00:01:24.250
看起来我需要先进行下一步 在

00:01:24.250 --> 00:01:25.080
应用能正常编译之前

00:01:26.850 --> 00:01:29.730
在 MainActivity 的 displayMessage 方法中 我们应该

00:01:29.730 --> 00:01:34.120
将变量名字从 priceTextView 改成 orderSummaryTextView

00:01:34.120 --> 00:01:37.260
在 MainActivity 文件的 displayMessage 方法中

00:01:37.260 --> 00:01:39.430
我在这里找到 priceTextView

00:01:39.430 --> 00:01:42.570
我要删掉它 并且改为 orderSummaryTextView

00:01:42.570 --> 00:01:44.212
我打算用驼峰拼写法

00:01:44.212 --> 00:01:47.940
以小写字母开头 因为它是变量

00:01:47.940 --> 00:01:50.348
马上我就得到提示说变量未被使用

00:01:50.348 --> 00:01:53.410
所以我要复制它 事实上我要把它用到下一行

00:01:53.410 --> 00:01:58.580
因为这里有个报错 显示无法解析 priceTextView

00:01:58.580 --> 00:02:02.740
删掉这个 再换上新的变量名

00:02:02.740 --> 00:02:04.550
错误消失了

00:02:04.550 --> 00:02:07.859
但是这里还有个错误 我认为与最后一个任务有关

00:02:09.080 --> 00:02:13.598
最后一个任务是把 R.id.price_text_view 改成

00:02:13.598 --> 00:02:16.035
R.id.order_summary_text_view

00:02:16.035 --> 00:02:19.652
双击红色的错误代码 然后

00:02:19.652 --> 00:02:24.437
删除它并输入 order_summary_text_view

00:02:24.437 --> 00:02:26.630
错误消失了

00:02:27.780 --> 00:02:29.930
现在应用运转正常

00:02:29.930 --> 00:02:31.660
初始布局正确

00:02:31.660 --> 00:02:34.340
它现在显示 ORDER SUMMARY 而不是 PRICE

00:02:34.340 --> 00:02:37.520
如果我改变数量 并且点击 ORDER按钮 订单汇总额就显示在这

00:02:38.660 --> 00:02:41.890
让我们谈谈你观察到的东西

00:02:41.890 --> 00:02:44.400
记住这里没有正确或错误的答案

00:02:44.400 --> 00:02:49.098
首先你也许注意到对于 priceTextView 当我们给它一个

00:02:49.098 --> 00:02:53.730
order_summary_text_view 的ID 时 稍后会出现一个类似的格式

00:02:53.730 --> 00:02:58.460
在 Java 代码中 当我们修改 displayMessage 方法时

00:02:58.460 --> 00:03:02.010
你也许会注意到 当把 PRICE 修改成 ORDER SUMMARY 后

00:03:02.010 --> 00:03:04.840
看起来对代码的其它部分有影响

00:03:04.840 --> 00:03:09.230
现在需要做些改动才能使应用再次运转

00:03:09.230 --> 00:03:11.840
对于约定其它变化可能更好

00:03:11.840 --> 00:03:15.810
因此我们对价格没有任何之前的引用

00:03:17.190 --> 00:03:19.880
仔细看看 displayMessage 方法

00:03:19.880 --> 00:03:23.910
你可能注意到了 只有一个输入参数 字符串 message

00:03:23.910 --> 00:03:24.980
没有返回值

00:03:26.100 --> 00:03:30.640
这就是为什么我们没有写返回值那一行代码

00:03:30.640 --> 00:03:34.864
你也许认出了在 XML 中看到的 TextView 目的是

00:03:34.864 --> 00:03:36.320
给我们的布局添加一个 TextView

00:03:37.500 --> 00:03:39.330
拼写是完全一致的

00:03:40.480 --> 00:03:44.830
还有 这行代码看起来像给变量赋值

00:03:44.830 --> 00:03:46.740
这里我们有变量类型

00:03:46.740 --> 00:03:50.674
变量名字和初始值

00:03:52.035 --> 00:03:55.825
这和如何声明整型和字符串类型是类似的

00:03:55.825 --> 00:03:59.115
如果你看的仔细 也许会觉得这里看起来像

00:03:59.115 --> 00:04:03.705
一个方法调用 findViewById 跟着左括号

00:04:03.705 --> 00:04:06.885
中间有一些内容 然后是右括号

00:04:06.885 --> 00:04:10.310
类似的在 setText 这里 也有左括号

00:04:10.310 --> 00:04:12.510
中间有些内容 然后右括号

00:04:12.510 --> 00:04:14.200
所以这也许也是一个方法的调用

00:04:15.230 --> 00:04:18.240
在下一个视频中 我们将更仔细的研究

00:04:18.240 --> 00:04:21.230
这几行代码到底做了什么

00:04:21.230 --> 00:04:23.350
并开始理解其含义

