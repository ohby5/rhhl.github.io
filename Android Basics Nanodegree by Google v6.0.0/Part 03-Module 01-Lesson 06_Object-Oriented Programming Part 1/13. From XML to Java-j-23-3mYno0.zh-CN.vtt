WEBVTT
Kind: captions
Language: zh-CN

00:00:00.520 --> 00:00:03.700
现在我们知道 能够在 Java 代码中引用 XML 资源

00:00:04.710 --> 00:00:08.680
但资源和 Java 代码之间的关系是什么呢？

00:00:08.680 --> 00:00:11.380
作为应用的一部分 它们是怎么联系到一起的呢？

00:00:12.460 --> 00:00:15.215
从点击 Just Java 应用开始

00:00:16.335 --> 00:00:18.615
打开 MainActivity

00:00:18.615 --> 00:00:21.925
现在什么都看不到 因为它还在初始化

00:00:21.925 --> 00:00:25.835
幸运的是 初始化时很多复杂的东西

00:00:25.835 --> 00:00:28.565
都是由 Android 自动完成的

00:00:28.565 --> 00:00:31.995
我们关心的部分是 MainActivity 文件

00:00:31.995 --> 00:00:34.875
其中 onCreate 会被自动调用

00:00:34.875 --> 00:00:37.590
activity 会被创建

00:00:37.590 --> 00:00:40.580
这有很多工作需要做 说 setContentView 这一句很重要

00:00:40.580 --> 00:00:45.120
然后是对应布局文件的资源ID

00:00:45.120 --> 00:00:47.640
也就是 R.layout.activity_main

00:00:47.640 --> 00:00:52.280
这意味着 activity 的内容视图应该

00:00:52.280 --> 00:00:55.720
对应 activity_main 这个XML布局文件

00:00:55.720 --> 00:00:59.700
这是方法调用 输入的参数是资源 ID

00:00:59.700 --> 00:01:02.600
如果你指定了跟内容视图相关的将要使用的布局

00:01:02.600 --> 00:01:07.660
Android 设备会开始解析 XML 布局文件

00:01:07.660 --> 00:01:09.410
解析的过程就是阅读这些文件

00:01:09.410 --> 00:01:12.490
并且尝试着去识别一个 LinearLayout

00:01:12.490 --> 00:01:13.570
这是一个 TextView

00:01:13.570 --> 00:01:15.270
里边有很多属性

00:01:15.270 --> 00:01:18.850
尝试理解一下文件里包含什么

00:01:18.850 --> 00:01:21.960
Android 设备从文件的头部开始阅读

00:01:21.960 --> 00:01:24.670
它会识别这有一个 LinearLayout

00:01:24.670 --> 00:01:29.170
然后隐性地找出一个 Java 对象来代表 LinearLayout

00:01:29.170 --> 00:01:30.570
然后是下一行

00:01:30.570 --> 00:01:36.120
看到我们需要添加一个 TextView 子 LinearLayout 像这样

00:01:36.120 --> 00:01:39.865
有点像第二节课里的视图层次结构

00:01:39.865 --> 00:01:43.125
我之前没告诉你的是

00:01:43.125 --> 00:01:45.265
这实质上是 Java 对象的层次结构

00:01:45.265 --> 00:01:47.975
在接下来的视频中 我们会学到 Java 对象

00:01:47.975 --> 00:01:50.515
因此你不太理解也没有关系

00:01:50.515 --> 00:01:53.085
看下一行 我们需要

00:01:53.085 --> 00:01:55.385
找出一个 Java 对象的 LinearLayout

00:01:55.385 --> 00:01:58.855
作为子布局会被添加到 LinearLayout

00:01:58.855 --> 00:02:00.480
我们看到这有一个按钮元素

00:02:00.480 --> 00:02:03.300
我们把它作为子布局添加到 LinearLayout 中

00:02:03.300 --> 00:02:07.470
继续往下 直到我们已经找出了视图层级结构

00:02:07.470 --> 00:02:09.280
所需的所有 View

00:02:09.280 --> 00:02:13.740
一旦我们获得了Java 对象的所有视图层级结构 就能进行操作

00:02:13.740 --> 00:02:15.470
当应用运行的时候 修改它们

00:02:16.570 --> 00:02:19.930
Java 的对象比如 TextView 包含着状态信息

00:02:19.930 --> 00:02:23.070
像文本 文本颜色 文本尺寸

00:02:23.070 --> 00:02:26.880
这些对象也包含方法 我们可以调用这些方法

00:02:26.880 --> 00:02:29.130
修改它们的内部状态

00:02:29.130 --> 00:02:31.670
比如 当程序运行时 我们可以改变文本

00:02:32.690 --> 00:02:36.700
与这些对象进行交互就是面向对象的程序设计

00:02:36.700 --> 00:02:40.220
在接下来的视频中 我们会进行详细全面的介绍

00:02:40.220 --> 00:02:44.230
总结一下 在 MainActivity 中 我们调用 setContentView

00:02:44.230 --> 00:02:49.440
阅读这些布局 然后找出了很多 Java 对象

00:02:49.440 --> 00:02:53.590
这些 Java 对象 组成了应用的视图层级结构

00:02:53.590 --> 00:02:56.920
MainActivity 控制着视图的层级结构

00:02:56.920 --> 00:03:00.400
当你和 MainActivity 交互时 可以更新对象

