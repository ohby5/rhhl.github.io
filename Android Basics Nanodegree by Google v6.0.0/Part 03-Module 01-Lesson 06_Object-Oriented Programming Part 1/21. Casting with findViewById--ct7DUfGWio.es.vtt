WEBVTT
Kind: captions
Language: es

00:00:00.406 --> 00:00:03.610
Añadí el código que vimos
en nuestra aplicación.

00:00:03.612 --> 00:00:07.660
Dice,
<i>View orderSummaryTextView = findViewById</i>,

00:00:07.660 --> 00:00:13.000
luego pasamos el identificador de recurso
para el <i>order_summary_text_view</i>.

00:00:13.000 --> 00:00:15.910
Pero esto provoca un error
en <i>Android Studio</i> en la siguiente línea.

00:00:17.750 --> 00:00:21.830
Dice que no puede resolver
el método <i>setText</i>.

00:00:21.830 --> 00:00:24.430
Si añado otra línea de código aquí,

00:00:24.430 --> 00:00:27.880
puedo mostrarte los tipos de métodos
que son válidos en esta variable.

00:00:28.890 --> 00:00:32.400
Así, recién creamos la variable
<i>orderSummaryTextView</i> aquí

00:00:32.400 --> 00:00:34.330
y es un <i>TypeView</i>,

00:00:34.330 --> 00:00:37.520
entonces en la línea siguiente,
podemos denominarla métodos.

00:00:37.520 --> 00:00:40.540
Pero si nos fijamos en
las sugerencias de autocompletado,

00:00:40.540 --> 00:00:44.120
estos métodos son métodos <i>View</i>.

00:00:44.120 --> 00:00:46.140
No hay métodos específicos <i>TextView</i>.

00:00:47.200 --> 00:00:49.817
Por ejemplo, no hay ningún método <i>setText</i>.

00:00:51.320 --> 00:00:54.455
Es por eso que tenemos un error aquí,
cuando tratamos de llamar <i>setText</i>.

00:00:55.908 --> 00:01:00.890
Tampoco puedes hacer <i>setTextSize</i>,
o <i>setTextColor</i> o ninguno de los dos.

00:01:00.890 --> 00:01:02.639
¿Dónde están todos esos métodos?

00:01:03.840 --> 00:01:09.271
Bueno, la cosa es que un <i>TextView</i>
es un tipo más específico de <i>View</i>.

00:01:10.430 --> 00:01:13.240
Así que si queremos llamar
a métodos <i>TextView</i>

00:01:13.240 --> 00:01:16.777
a este objeto, necesitamos asegurarnos
que este sea un objeto <i>TextView</i>.

00:01:17.820 --> 00:01:21.160
Bien, la variable es un objeto <i>TextView</i>.

00:01:21.160 --> 00:01:24.409
Pero entonces aparece otro error
que dice tipos incompatibles,

00:01:24.410 --> 00:01:28.132
porque se requiere un <i>TextView</i>
en el lado derecho,

00:01:28.133 --> 00:01:31.090
pero solo encontramos
una vista normal.

00:01:31.090 --> 00:01:34.240
Esto es así porque el método <i>findViewById</i>
retorna un <i>View</i>.

00:01:34.240 --> 00:01:36.631
¿Cómo podemos reconciliar esto?

00:01:36.632 --> 00:01:41.720
Bueno, como <i>TextView</i> es un tipo <i>View</i>
más específico o dicho de otra manera,

00:01:41.720 --> 00:01:43.750
un <i>TextView</i> es una subclase
de <i>View</i>, podemos usar

00:01:43.751 --> 00:01:47.260
algo llamado <i>casting</i>
(conversión de tipos de datos).

00:01:47.260 --> 00:01:51.767
<i>Casting</i> en Java significa que podemos
tomar el <i>View</i> devuelto por este método

00:01:51.768 --> 00:01:54.280
y tratarlo como un <i>TextView</i>.

00:01:54.280 --> 00:01:58.620
Así que ahora, esto a la derecha
es en realidad un objeto <i>TextView</i>

00:01:58.621 --> 00:02:02.437
y luego podemos almacenarlo
en esta variable <i>orderSummaryTextView</i>.

00:02:03.349 --> 00:02:06.110
Sé que debe sonar abrumador,
porque acabo de mencionar

00:02:06.110 --> 00:02:07.970
muchos nuevos conceptos.

00:02:07.970 --> 00:02:09.476
Lo explicaré de nuevo.

00:02:10.229 --> 00:02:14.280
El método <i>findViewById</i>
retorna un objeto de tipo <i>View</i>.

00:02:14.280 --> 00:02:15.820
Al escribir esta notación,

00:02:15.820 --> 00:02:19.690
el tipo de dato deseado del objeto
entre paréntesis,

00:02:19.690 --> 00:02:23.250
estamos convirtiendo
este <i>View</i> en un <i>TextView</i>.

00:02:23.250 --> 00:02:27.734
Así que toda esta expresión
evalúa un objeto <i>TextView</i>.

00:02:28.600 --> 00:02:32.140
Luego, podemos almacenarlo en la variable,
en el lado izquierdo,

00:02:32.140 --> 00:02:35.790
que es <i>orderSummaryTextView</i>,
y tiene un tipo <i>TextView</i>.

00:02:35.790 --> 00:02:37.188
Ahora, en las líneas siguientes,

00:02:37.189 --> 00:02:40.740
podemos llamar a métodos <i>TextView</i>
sobre este objeto.

00:02:40.740 --> 00:02:43.720
¿Ves ahora cómo todos los métodos
de texto aparecen aquí?

00:02:44.840 --> 00:02:48.070
<i>setAllCaps</i>, <i>setTextSize</i> y más.

00:02:48.070 --> 00:02:52.301
Puedo borrar esto ahora,
porque <i>setText</i> debería funcionar,

00:02:52.302 --> 00:02:54.170
Y no hay más errores.

00:02:54.170 --> 00:02:57.100
Entonces si queremos llamar
a métodos <i>TextView</i>,

00:02:57.100 --> 00:02:59.410
necesitamos tener un objeto <i>TextView</i>.

00:02:59.410 --> 00:03:03.116
Para tener un objeto <i>TextView</i>,
tenemos que llamar a <i>findViewById</i>,

00:03:03.117 --> 00:03:06.890
y luego convertir este objeto <i>View</i>
en un <i>TextView</i>.

00:03:06.890 --> 00:03:09.700
La conversión funciona porque

00:03:09.700 --> 00:03:13.440
esta vista de la jerarquía de vistas
es en realidad un <i>TextView</i>.

00:03:13.440 --> 00:03:17.520
Si tratáramos de convertir algo
como un botón de radio, no funcionaría,

00:03:17.520 --> 00:03:20.723
porque <i>orderSummaryTextView</i>
es, en realidad, un <i>TextView</i>,

00:03:20.724 --> 00:03:23.000
así que tenemos que convertirlo
en el tipo apropiado.

00:03:24.275 --> 00:03:28.370
Del mismo modo, en el método
<i>displayQuantity</i>, llamamos a <i>findViewById</i>

00:03:28.370 --> 00:03:32.350
y le pasamos este identificador de recurso
para el <i>TextView quantity</i>.

00:03:32.350 --> 00:03:35.940
Esto devuelve un <i>View</i>,
y lo convertimos en un <i>TextView</i>

00:03:35.941 --> 00:03:39.638
y podemos almacenarlo dentro de esta
variable llamada <i>quantityTextView</i>.

00:03:40.400 --> 00:03:43.450
Esta variable tiene tipo <i>TextView</i>
y entonces,

00:03:43.450 --> 00:03:45.695
en líneas siguientes, podemos llamar

00:03:45.696 --> 00:03:48.170
a métodos <i>TextView</i> sobre
ella, como <i>setText</i>.

00:03:48.170 --> 00:03:49.547
Aquí está el código actualizado

00:03:49.548 --> 00:03:51.531
de <i>MainActivity</i>,
usando conversión de tipos.

00:03:51.532 --> 00:03:56.400
Podemos convertir estos <i>Views</i> en <i>TextViews</i>
para poder almacenarlos en variables

00:03:56.400 --> 00:03:57.736
que tienen tipo <i>TextView</i>.

00:03:57.737 --> 00:04:00.622
Entonces, en esta lista
de variables de <i>MainActivity</i>,

00:04:00.622 --> 00:04:05.090
ahora <i>quantityTextView</i> y
<i>orderSummaryTextView</i> son de tipo <i>TextView</i>.

00:04:05.090 --> 00:04:07.314
Podemos llamar a
métodos <i>TextView</i> sobre estas

00:04:07.315 --> 00:04:10.810
y no estamos limitados
a tratarlas solo como <i>Views</i>.

00:04:10.810 --> 00:04:13.288
Y ahora podemos llamar
a métodos específicos <i>TextView</i>

00:04:13.289 --> 00:04:15.050
sobre estas variables.

00:04:15.050 --> 00:04:19.041
Por ejemplo, podemos llamar a <i>setText</i>
sobre <i>orderSummaryTextView</i>

00:04:19.041 --> 00:04:21.880
y podemos llamar a <i>setText</i>
sobre <i>quantityTextView</i>.

00:04:21.880 --> 00:04:27.180
Como puedes ver, tienes que tener cuidado
sobre qué tipos de datos se usan y dónde.

00:04:27.180 --> 00:04:29.284
Hasta ahora, cuando llamamos a métodos,

00:04:29.285 --> 00:04:31.290
no nos preocupamos por
el valor de retorno,

00:04:31.290 --> 00:04:34.400
porque el método <i>setText</i>,
en realidad, no tiene valor de retorno.

00:04:34.400 --> 00:04:37.180
Lo mismo con el método
<i>imageView.setImageResource</i>.

00:04:37.180 --> 00:04:39.060
No tiene ningún valor de retorno.

00:04:39.060 --> 00:04:41.540
Pero otros métodos pueden
tener valores de retorno.

00:04:41.540 --> 00:04:45.590
Por ejemplo, en la clase <i>TextView</i>
tenemos un método <i>getTextSize</i>.

00:04:45.590 --> 00:04:47.533
Este retorna un entero,

00:04:47.534 --> 00:04:49.938
así que podemos almacenar
el resultado de este método

00:04:49.939 --> 00:04:53.334
en una variable llamada <i>size</i> de tipo <i>int</i>.

00:04:53.335 --> 00:04:55.980
Aquí hay otro método
que tiene un valor de retorno.

00:04:55.981 --> 00:04:58.639
En la clase <i>Button</i> puedes
llamar al método <i>getHeight</i>,

00:04:58.640 --> 00:05:01.543
Y este devuelve un valor entero,

00:05:01.544 --> 00:05:03.420
por lo que puedes guardarlo
en una variable.

00:05:03.420 --> 00:05:06.450
Si trataras de almacenar este resultado
dentro de un <i>string</i>, por ejemplo,

00:05:06.450 --> 00:05:10.810
obtendrías un error,
porque este método devuelve un entero.

00:05:10.810 --> 00:05:14.418
Para saber qué tipo de datos
debe ser pasado a un método

00:05:14.419 --> 00:05:19.290
y qué tipo de datos retorna un método,
debes mirar la documentación.

00:05:19.290 --> 00:05:21.260
Por ejemplo, en la clase <i>TextView</i>,

00:05:21.260 --> 00:05:25.519
si llamas a cualquiera de estos métodos,
devuelve un valor de tipo <i>int</i>.

00:05:25.520 --> 00:05:28.620
El tipo de datos del valor de retorno
está en la columna de la izquierda aquí.

00:05:28.620 --> 00:05:33.715
Para otros métodos, podrías obtener
<i>void</i> como valor de retorno, o booleanos,

00:05:33.723 --> 00:05:38.330
los que todavía no hemos aprendido,
o <i>floats</i> o <i>longs</i>, etc.

00:05:38.330 --> 00:05:40.691
Esta página de documentación
también muestra

00:05:40.692 --> 00:05:42.790
cuáles son los tipos de datos esperados

00:05:42.790 --> 00:05:45.010
para las entradas de cada método.

00:05:45.010 --> 00:05:49.590
Por ejemplo, el método <i>setTextColor</i>
requiere un número entero como entrada

00:05:49.590 --> 00:05:53.110
y el valor de retorno es <i>void</i>,
así que no hay valor de retorno.

00:05:53.110 --> 00:05:56.008
Entonces mira la documentación para saber
qué tipos de datos se esperan.

00:05:56.009 --> 00:05:58.619
De lo contrario, obtendrás errores
en <i>Android Studio</i>

00:05:58.620 --> 00:06:00.969
diciendo que los tipos de datos
no coinciden.

00:06:00.970 --> 00:06:02.630
Ahora es tu turno para practicar.

00:06:02.630 --> 00:06:05.580
Abajo hay cuatro
ejemplos de código diferentes.

00:06:05.580 --> 00:06:07.535
Algunos códigos pueden contener errores

00:06:07.536 --> 00:06:10.100
relativos a tipos de datos
que no coinciden.

00:06:10.100 --> 00:06:11.165
Si encuentras un error,

00:06:11.165 --> 00:06:13.232
describe cómo se supone que lo arreglarías

00:06:13.233 --> 00:06:15.540
escribiéndolo en las
casillas correspondientes.

00:06:15.540 --> 00:06:17.641
De lo contrario,
puedes escribir "no hay error"

00:06:17.642 --> 00:06:19.948
si el código está perfectamente bien.

00:06:19.948 --> 00:06:22.545
Esta va a ser una prueba exigente
porque acabamos de cubrir

00:06:22.545 --> 00:06:26.555
muchos conceptos y este código
todavía es bastante nuevo para ti.

00:06:26.555 --> 00:06:30.105
Tómate tu tiempo y mira
la documentación de estos métodos.

00:06:30.105 --> 00:06:33.524
Asegúrate que las entradas
y los valores de retorno sean correctos

00:06:33.525 --> 00:06:35.635
y que si estamos declarando las variables,

00:06:35.636 --> 00:06:37.665
que estén los tipos de datos
correctos aquí.

00:06:37.665 --> 00:06:39.265
También, mira la documentación

00:06:39.265 --> 00:06:40.907
para estas llamadas a métodos
para asegurar

00:06:40.908 --> 00:06:42.375
que usamos
correctamente los métodos.

