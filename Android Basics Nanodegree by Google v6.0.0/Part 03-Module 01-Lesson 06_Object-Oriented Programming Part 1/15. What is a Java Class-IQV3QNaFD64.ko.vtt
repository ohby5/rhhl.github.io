WEBVTT
Kind: captions
Language: ko

00:00:00.470 --> 00:00:03.770
TextView.java file에 저장되는 
[TextView] 클래스의

00:00:03.770 --> 00:00:06.810
단순 버전을 
만들었습니다.

00:00:06.810 --> 00:00:08.290
이를 단순화하였기 때문에 
클래스가 어떻게 되는지에

00:00:08.290 --> 00:00:11.060
대한 이해가 
더 쉬워졌습니다.

00:00:11.060 --> 00:00:13.710
우선, 이것은 접근 지정자로 
시작됩니다.

00:00:13.710 --> 00:00:15.100
이는 [public]으로 표시되기 때문에,

00:00:15.100 --> 00:00:19.480
[inactivity]와 같은 다른 것들은 
이 [TextView] 클래스를 사용할 수 있습니다.

00:00:19.480 --> 00:00:21.040
그리고 나서 [word class]를 갖게 됩니다.

00:00:21.040 --> 00:00:24.310
이는 자바에 이것이 [class 
definition]임을 나타냅니다.

00:00:24.310 --> 00:00:26.400
그 후 클래스에 명칭을 갖게 됩니다.

00:00:26.400 --> 00:00:30.590
자바에서의 클래스 명칭은 대문자로 
시작하게 되고 [camel case]를 따릅니다.

00:00:30.590 --> 00:00:34.360
따라서 이곳에는 여백이 없고 
[subsequent words]를 대문자로 씁니다.

00:00:34.360 --> 00:00:36.800
여기에 다른 문자가 있지만 이것들은 
나중에 살펴보도록 하겠습니다.

00:00:36.800 --> 00:00:39.304
중요한 것은 [opening brace]를 
갖고 [definition]의

00:00:39.304 --> 00:00:42.354
아랫부분에 [closing brace]을 
가졌다는 것입니다.

00:00:42.354 --> 00:00:47.130
자 이제, 이 [TextView] 클래스 
내부에서, 많은 변수들을 갖게 됩니다.

00:00:47.130 --> 00:00:51.140
이들은 각각 [TextView] 내에서의 
필드를 나타냅니다. 따라서

00:00:51.140 --> 00:00:55.700
[TextView]의 문자와 문자 색상에 대한 
필드를 갖게 됩니다.

00:00:55.700 --> 00:00:57.850
다른 필드들도 있습니다.
하지만 기억하십시오.

00:00:57.850 --> 00:00:59.928
이것은 [TextView] 클래식의 
단순 버전입니다.

00:01:01.000 --> 00:01:04.239
또한 참조를 
앱의 [context]에 저장하기 위한

00:01:04.239 --> 00:01:05.740
변수들을 가질 것입니다.

00:01:05.740 --> 00:01:08.750
아래의 강사 노트에서 [context]에 
관한 자세한 사항을 확인할 수 있을

00:01:08.750 --> 00:01:13.170
것입니다. 하지만 예를 들자면 
이는 기본적으로 [context]를 사용하여

00:01:13.170 --> 00:01:16.670
앱의 [resources]에 접근하는 것과 
같이 앱에 관한 정보 접근 방법입니다.

00:01:17.870 --> 00:01:19.990
이들은 모두 [TextView]의 
[method]입니다.

00:01:19.990 --> 00:01:23.690
[setText] [method]는 문자열의 입력을 
위해 사용됩니다.

00:01:23.690 --> 00:01:28.840
그리고 이 새로운 변수를 사용하기 위해 
전역 변수 [mText]를 업데이트 합니다.

00:01:28.840 --> 00:01:32.480
이처럼 [setTextColor]는 새로운 색상을 
입력하는데 사용되고 이 새로운 색상

00:01:32.480 --> 00:01:36.080
값을 얻기 위해 내부 상태를 업데이트 
합니다.

00:01:36.080 --> 00:01:38.045
또한 내부 문자열 혹은 색상을

00:01:38.045 --> 00:01:42.920
되돌리는 [getText]와 [getTextColor] 
같은 [method]가 있습니다.

00:01:44.080 --> 00:01:48.091
한가지 더 숙지해야 할 사항은 여기의 
전역 변수들이 소문자 m으로

00:01:48.091 --> 00:01:49.651
시작된다는 것입니다.

00:01:49.651 --> 00:01:51.510
M은 [member variable]을 나타내고

00:01:51.510 --> 00:01:55.330
이것들은 모두 이 [TextView] 클래스의 
[member variable] 입니다.

00:01:55.330 --> 00:01:58.580
[Member variable]은 [TextView] 
클래스의 필드나 상태를 나타내는

00:01:58.580 --> 00:02:00.990
다른 방법입니다.

00:02:00.990 --> 00:02:03.380
여기 단순 [ImageView] 클래스가 있습니다.

00:02:03.380 --> 00:02:05.320
ImageView.java file을 찾게 될 
것입니다.

00:02:06.400 --> 00:02:10.580
이것은 [public class]로 시작하게 되고 
[ImageView]는 이것의 명칭이 됩니다.

00:02:10.580 --> 00:02:13.550
그리고 [opening, closing braces]를 
갖게 됩니다.

00:02:13.550 --> 00:02:15.980
이것은 [ImageView]의 상태를 
만듭니다.

00:02:15.980 --> 00:02:17.730
일반적으로 이것보다 더 많은 필드를 
가지게 됩니다. 하지만 단지 이에 관한

00:02:17.730 --> 00:02:20.000
예를 보이고자 합니다.

00:02:20.000 --> 00:02:25.680
이것은 [integer variable] 이고 [member 
variable]의 m을 가진 [mImageId]입니다.

00:02:25.680 --> 00:02:28.340
이것은 [ImageView]에 나타나야 하는

00:02:28.340 --> 00:02:31.160
이미지에 대한 [resource ID]를 
저장합니다.

00:02:31.160 --> 00:02:34.470
아래에서, 새로운 [ImageView] 객체의 
생성에 사용되는

00:02:34.470 --> 00:02:36.390
생성자를 갖게 됩니다.

00:02:36.390 --> 00:02:38.730
그리고 이 [context] 입력 하게 됩니다.

00:02:38.730 --> 00:02:40.809
그 후 이들 변수들을 초기화 합니다.

00:02:42.120 --> 00:02:43.088
그리고 나서 [method]을 갖게 됩니다.

00:02:43.088 --> 00:02:47.190
이는 [setImage]라고 합니다. 이것은 
[ImageView]에 나타나야 하는 새로운

00:02:47.190 --> 00:02:50.500
이미지들에 대한 [resource ID]를 
입력합니다.

00:02:50.500 --> 00:02:53.850
이 [method] 내부에서, 이미지 ID에 
대한 내부 변수를 업데이트 합니다.

00:02:55.100 --> 00:02:57.691
다시 한 번, 클래스의 컨셉을 
이해하는데 도움을 주는 단순

00:02:57.691 --> 00:03:01.880
[TextView]와 [ImageView] 클래스를 
만들게 됩니다.

00:03:01.880 --> 00:03:05.200
자 이제 이 클래스들의 
안드로이드 기반 정식 버전을

00:03:05.200 --> 00:03:06.110
살펴보도록 합시다.

00:03:07.950 --> 00:03:09.240
안드로이드의 자바 클래스 코드

00:03:09.240 --> 00:03:13.240
확인을 위해, 크롬 확장판을 
설치하십시오.

00:03:13.240 --> 00:03:14.960
크롬 브라우져를 사용하지 않으신다면,

00:03:14.960 --> 00:03:17.989
아래의 강사 노트에서 파일들의 
접근 방법을 살펴 보십시오.

00:03:19.020 --> 00:03:19.520
좋습니다.

00:03:21.840 --> 00:03:26.081
크롬 확장판이 설치된 후, [TextView] 
안드로이드와 같은 것을 검색할 경우,

00:03:26.081 --> 00:03:30.260
이 클래스에 대한 참조 문서를 확인할 
수 있습니다. 그리고 뷰 소스를

00:03:30.260 --> 00:03:34.830
나타내는 추가 링크도 확인할 수 
있습니다.

00:03:34.830 --> 00:03:36.730
선진 개발자들에게는 많은 도움이 됩니다.

00:03:36.730 --> 00:03:41.420
이 [TextView]를 만드는데 사용되는 
코드가 궁금하다면,

00:03:41.420 --> 00:03:45.850
안드로이드 팀에 의해 규정된 이 
TextView.java file을 확인해 보십시오.

00:03:45.850 --> 00:03:47.970
아시다시피, 이것은 매우 길고 
복잡합니다.

00:03:47.970 --> 00:03:49.739
하지만 여전히 클래스의 주요 
부분들을 포함하고 있습니다.

00:03:51.010 --> 00:03:55.330
이것은 [public class]로 시작되고
그 다음은 [TextView], 클래스의 명칭,

00:03:55.330 --> 00:03:57.280
[opening brace]와

00:03:57.280 --> 00:03:59.500
맨 아랫부분의 [closing brace]로 
구성됩니다.

00:04:00.930 --> 00:04:04.340
클래스의 가장 윗부분에는, 다양한 
필드가 있고 이는 클래스의 상태를

00:04:04.340 --> 00:04:07.200
구성합니다.

00:04:07.200 --> 00:04:13.470
예를 들어, [TextColor]와 문자가 
필드임을 확인할 수 있습니다.

00:04:13.470 --> 00:04:17.560
그리고 이곳은 [context]를 입력하는 
[TextView]의 생성자입니다.

00:04:17.560 --> 00:04:22.560
Cmd+F, 윈도우의 경우 Ctl+F를 
입력하면 [setText]를 검색할 수

00:04:22.560 --> 00:04:24.050
있습니다.

00:04:24.050 --> 00:04:26.250
그리고 이곳에 [setText] [method]가 있습니다.

00:04:26.250 --> 00:04:29.835
이 [method]는 [TextView]의 문자열 
값을 설정합니다.

00:04:29.835 --> 00:04:31.205
[getText]를 검색할 경우, 이 [method]를 통해

00:04:31.205 --> 00:04:35.605
[TextView]가 표시하는 문자를 
되돌리는 것을 확인할 수 있습니다.

00:04:35.605 --> 00:04:38.275
이를 통해, 당신만의 방식으로 
브라우져를 만들 수 있습니다.

00:04:39.545 --> 00:04:42.245
[ImageView] 문서 페이지를 
검색하고자 할 경우,

00:04:42.245 --> 00:04:46.750
[ImageView] 클래스의 모든 코드를 
확인하기 위해 뷰 소스를 클릭하면 됩니다.

00:04:46.750 --> 00:04:49.370
파일은 [public]이 [ImageView]를 
호출했음을 나타내고

00:04:49.370 --> 00:04:52.460
이것들은 [ImageView]의 상태를 
만드는 필드들이며

00:04:52.460 --> 00:04:55.810
파일 아래에는 많은 
[methods]가 나타납니다.

00:04:55.810 --> 00:04:57.810
이 파일내의 코드는 
또한 상당히 복잡하고

00:04:57.810 --> 00:05:00.360
수천 개의 코드 행으로 
이루어져 있습니다.

00:05:00.360 --> 00:05:03.060
프로그래밍을 위한 객체의 가장 
중요한 부분이긴 하지만, 이러한

00:05:03.060 --> 00:05:06.500
세부적인 내용까지는 알 필요가 
없습니다.

00:05:06.500 --> 00:05:10.200
개발자로서, 내부의 모든 세부적인 
사항을 알지 못하더라도 앱의

00:05:10.200 --> 00:05:13.630
[TextView]와 [ImageView]를 사용하는 
데에는 문제가 없습니다.

