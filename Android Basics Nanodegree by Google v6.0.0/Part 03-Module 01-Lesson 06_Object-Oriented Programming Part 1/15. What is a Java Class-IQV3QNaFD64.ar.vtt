WEBVTT
Kind: captions
Language: ar

00:00:00.467 --> 00:00:03.534
لقد أنشأنا نسخة مبسطة
من الفئة TextView

00:00:03.770 --> 00:00:06.317
سيتم حفظه في ملف TextView.java

00:00:06.801 --> 00:00:10.235
لقد قمنا بتبسيطه ليكون أسهل لكم
لتفهموا كيف تبدو الفئة

00:00:11.067 --> 00:00:13.167
أولاً، هي تبدأ بمعدل وصول

00:00:13.634 --> 00:00:14.934
ضبطت إلى عامة public..

00:00:15.000 --> 00:00:18.868
حتى تستطيع الأشياء الأخرى كالأنشطة
استخدام فئة TextView هذه

00:00:19.467 --> 00:00:20.934
ثم لدينا الكلمة
(فئة class)

00:00:21.033 --> 00:00:24.033
هذا يبين لجافا أنه تعريف فئة

00:00:24.300 --> 00:00:25.967
ثم لدينا اسم الفئة

00:00:26.400 --> 00:00:30.500
اسم الفئة في جافا يبدأ بحرف كبير
ثم أول حرف في كل كلمة يكون كبير

00:00:30.601 --> 00:00:33.569
إذن ليس هناك مسافات، فقط الحرف الأول
من كل كلمة لاحقة يكون كبير

00:00:34.367 --> 00:00:36.634
هناك كلمات أخرى هنا
ولكننا سننظر إليها لاحقاً

00:00:36.801 --> 00:00:38.801
الشيء المهم هو أن لدينا حاصرة بداية

00:00:38.868 --> 00:00:41.702
ثم في أسفل التعريف
لدينا حاصرة إغلاق

00:00:42.367 --> 00:00:46.434
الآن بداخل فئة TextView هذه
لدينا بعض المتغيرات

00:00:47.046 --> 00:00:49.712
كل منهم يمثل حقل في TextView

00:00:50.067 --> 00:00:52.634
لدينا حقل (لنص) واجهة النص

00:00:52.868 --> 00:00:55.135
وحقل (للون نص) واجهة النص

00:00:55.701 --> 00:01:00.001
هناك حقول أخرى أيضاً لكن تذكروا
أن هذه نسخة مبسطة من فئة TextView

00:01:01.000 --> 00:01:05.100
هناك أيضاً متغير لحفظ الإشارة
إلى سياق التطبيق

00:01:05.734 --> 00:01:08.435
يمكنكم القراءة أكثر عن السياق
في تعليمات المدرب بالأسفل

00:01:08.634 --> 00:01:12.168
بشكل أساسي إنه طريقة للوصول
إلى المعلومات حول التطبيق

00:01:12.868 --> 00:01:16.769
مثلاً تستطيع الوصول إلى الموارد
في التطبيق باستخدام السياق

00:01:17.834 --> 00:01:19.702
وهذه هي وظائف TextView

00:01:20.000 --> 00:01:23.267
وظيفة setText تأخذ سلسلة حروف
كأحد المدخلات

00:01:23.701 --> 00:01:28.302
ثم تقوم بتحديث المتغير العام mText
ليستخدم هذه القيمة الجديدة

00:01:28.834 --> 00:01:32.068
وبالمثل الوظيفة setTextColor
تأخذ اللون الجديد كأحد المدخلات

00:01:32.305 --> 00:01:35.552
ثم تقوم بتحديث الحالة الداخلية
لتحصل على القيمة الجديدة للون

00:01:36.067 --> 00:01:38.868
هناك وظائف أخرى أيضاً مثل
getText وgetTextColor

00:01:39.067 --> 00:01:43.234
واللتان تجيبان سلسلة الحروف
الداخلية أو لون النص الداخلي

00:01:44.000 --> 00:01:45.033
شيء آخر,

00:01:45.100 --> 00:01:49.233
ربما لاحظتم أن هذه المتغيرات
العامة هنا تبدأ بحرف m صغير

00:01:49.734 --> 00:01:51.535
الحرف m اختصار لـ member variable
أي متغير عضو

00:01:51.650 --> 00:01:54.661
كل هؤلاء هم متغيرات أعضاء
في فئة TextView هذه

00:01:55.300 --> 00:01:57.934
المتغير العضو هو مجرد طريقة أخرى
لقول حقل

00:01:58.200 --> 00:02:00.300
أو حالة فئة واجهة النص

00:02:00.968 --> 00:02:03.068
ها هي فئة (واجهة صورة ImageView) مبسطة

00:02:03.467 --> 00:02:05.734
ستجدونها في ملف ImageView.java

00:02:06.334 --> 00:02:10.268
وبداية إعلانها public class
ثم اسم الفئة ImageView

00:02:10.496 --> 00:02:13.046
ثم لدينا حاصرتي البداية والإغلاق

00:02:13.534 --> 00:02:15.502
هذا هو ما يصنع حالة ImageView

00:02:15.934 --> 00:02:19.134
عادة ما يكون بها حقولا أكثر،
لكني أردت أن أريكم مثالاً

00:02:20.000 --> 00:02:23.119
هذا متغير عدد طبيعي اسمه mImageId

00:02:23.534 --> 00:02:25.201
الحرف m اختصار لمتغير عضو

00:02:25.667 --> 00:02:27.800
هذا يقوم بحفظ معرف المورد

00:02:27.868 --> 00:02:30.435
للصورة التي ينبغي عرضها في واجهة الصورة

00:02:31.033 --> 00:02:35.865
هنا لدينا الدالة الإنشائية التي تستخدم
في إنشاء كائن واجهة صورة جديد

00:02:36.300 --> 00:02:38.367
ويأخذ السياق مُدخلاً لها

00:02:38.667 --> 00:02:41.034
ثم تبدأ هذه المتغيرات

00:02:42.133 --> 00:02:44.333
ثم لدينا وظيفة تسمى
(setImage ضبط الصورة)

00:02:44.467 --> 00:02:46.867
وهي تأخذ هذا المدخل
والذي هو معرف مورد

00:02:47.100 --> 00:02:49.834
الخاص بالصورة الجديدة التي ينبغي
عرضها في واجهة الصورة هذه

00:02:50.467 --> 00:02:54.134
بداخل هذه الوظيفة نقوم بتحديث
المتغير المحلي لمعرف الصورة

00:02:55.067 --> 00:02:58.834
مرة أخرى لقد أنشأنا هاتين الفئتين
المبسطتين TextView و ImageView

00:02:58.968 --> 00:03:01.502
لمساعدتكم على فهم معنى الفئات

00:03:01.834 --> 00:03:06.234
الآن فلنلق نظرة على النسخة الحقيقية
من هذه الفئات في منصة الأندرويد

00:03:07.934 --> 00:03:10.967
لاستعراض كود فئات جافا في آندرويد

00:03:11.033 --> 00:03:12.734
يمكنك تثبيت إضافة متصفح كروم هذه

00:03:13.200 --> 00:03:14.834
لو لم تكن تستخدم المتصفح كروم..

00:03:14.968 --> 00:03:18.101
راجع ملاحظات المدرب أدناه لمعرفة
كيفية الوصول إلى هذه الملفات

00:03:19.067 --> 00:03:20.067
حسناً

00:03:21.835 --> 00:03:23.869
بعد تثبيتك لإضافة كروم تلك..

00:03:24.000 --> 00:03:27.367
حين أبحث عن شيء مثل TextView Android

00:03:27.501 --> 00:03:30.801
وأتصفح مستندات التوثيق المرجعية
الخاصة بهذه الفئة..

00:03:31.100 --> 00:03:34.068
ستجد هذا الرابط الجديد الذي يقول
(عرض المصدر أو view source)

00:03:34.834 --> 00:03:37.668
هذه من أجل المطورين المتقدمين
وإذا تملكك الفضول..

00:03:37.801 --> 00:03:40.635
حول الكود المستخدم في
إنشاء واجهة النص هذه

00:03:41.434 --> 00:03:45.268
هذا هو ملف TextView.java الذي تم تعريفه
بواسطة أحد الأشخاص في فريق الأندرويد

00:03:45.767 --> 00:03:47.845
كما نرى فهو طويل للغاية ومعقد

00:03:47.968 --> 00:03:50.035
ولكنه لا يزال يحتوي على
الأجزاء الرئيسية في الفئة

00:03:50.934 --> 00:03:54.868
وهي تبدأ بذكر public class
ثم اسم الفئة وهو TextView

00:03:55.100 --> 00:03:59.567
ثم هذه هي حاصرة البداية
ثم حاصرة الإغلاق بالأسفل هنا

00:04:00.934 --> 00:04:03.735
بأعلى الفئة نرى بعض الحقول هنا

00:04:04.033 --> 00:04:06.467
وهو ما يبني حالة الفئة

00:04:07.214 --> 00:04:10.214
مثلاً نرى أو TextColor هو حقل

00:04:11.133 --> 00:04:12.834
كما نرى أن النص حقل أيضاً

00:04:13.467 --> 00:04:16.767
وهذه هي الدالة الإنشائية لـ TextView
والتي تأخذ هذا المدخل كسياق

00:04:17.467 --> 00:04:20.701
لو ضغطت على Cmd+F
أو Ctl+F في (ويندوز)

00:04:20.934 --> 00:04:23.535
أستطيع محاولة البحث
عن الوظيفة setText

00:04:23.968 --> 00:04:25.602
ها هي وظيفة setText

00:04:26.234 --> 00:04:29.334
ستقوم هذه الفئة بضبط
القيمة النصية لواجهة النص

00:04:29.767 --> 00:04:35.001
ولو بحثت عن GetText فسأرى أنها تجيب
بالنص الذي ستعرضه واجهة النص

00:04:35.567 --> 00:04:38.468
لقد فهمتهم الفكرة، ويمكنكم تصفح هذه
مع أنفسكم لو كنتم ترغبون

00:04:39.467 --> 00:04:42.168
لو بحثت عن صفحة مستندات التوثيق
الخاصة بـ ImageView

00:04:42.234 --> 00:04:46.202
أستطيع النقر على مشاهدة المصدر
لمشاهدة الكود الخاص بفئة ImageView

00:04:46.734 --> 00:04:49.034
مذكور في الملف الوظيفة العامة ImageView

00:04:49.187 --> 00:04:52.613
ثم هذه هي الحقول التي تصنع
حالة الـ ImageView

00:04:52.787 --> 00:04:55.194
ثم هناك بعض الوظائف أسفل الملف

00:04:55.801 --> 00:04:59.735
الكود في هذا الملف معقد للغاية أيضاً
ويتألف من آلاف السطور البرمجية

00:05:00.367 --> 00:05:03.434
الجزء الأفضل بشأن البرمجة كائنية التوجه

00:05:03.534 --> 00:05:06.135
هو أنك لست بحاجة لمعرفة
كل هذه التفاصيل

00:05:06.467 --> 00:05:09.968
كمطور بإمكانك استخدام TextView
و ImageView في تطبيقك

00:05:10.200 --> 00:05:13.746
بدون معرفة كل تلك التفاصيل الكثيرة
لما يحدث بداخلها

