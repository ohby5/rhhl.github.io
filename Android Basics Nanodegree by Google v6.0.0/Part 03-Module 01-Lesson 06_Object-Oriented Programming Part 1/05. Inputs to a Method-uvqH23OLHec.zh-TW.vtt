WEBVTT
Kind: captions
Language: zh-TW

00:00:00.480 --> 00:00:01.310
稍等。

00:00:01.310 --> 00:00:02.240
&gt;&gt; 怎么了？

00:00:02.240 --> 00:00:04.950
&gt;&gt; 这怎么突然变成烹饪节目了？

00:00:04.950 --> 00:00:07.270
&gt;&gt; 因为我们得解说方法不？

00:00:07.270 --> 00:00:08.625
&gt;&gt; 能解释吗，Rachael Ray？

00:00:08.625 --> 00:00:11.650
&gt;&gt; [笑声] 你有烘烤蛋糕的经验吗？

00:00:11.650 --> 00:00:13.570
&gt;&gt; 我吃过蛋糕。

00:00:13.570 --> 00:00:14.120
&gt;&gt; 好吧。

00:00:14.120 --> 00:00:15.790
那你完全能胜任这一点。

00:00:15.790 --> 00:00:16.360
&gt;&gt; 好。

00:00:16.360 --> 00:00:20.140
&gt;&gt; 你只需放入面粉和糖。

00:00:20.140 --> 00:00:20.840
&gt;&gt; 烘烤成分。

00:00:20.840 --> 00:00:21.351
对。
&gt;&gt; 那些成分。

00:00:21.351 --> 00:00:22.210
是的。

00:00:22.210 --> 00:00:24.730
然后你照着食谱上的指示。

00:00:24.730 --> 00:00:28.240
&gt;&gt; 是。 
&gt;&gt; 然后蛋糕就完成了。

00:00:28.240 --> 00:00:29.950
&gt;&gt; 就这样？

00:00:29.950 --> 00:00:31.070
&gt;&gt; 是呀。

00:00:31.070 --> 00:00:31.870
&gt;&gt; 好吧。

00:00:31.870 --> 00:00:33.820
再把比喻和方法连接起来。

00:00:33.820 --> 00:00:35.265
&gt;&gt; 好的，没问题。

00:00:35.265 --> 00:00:37.185
在一个方法中，你可输入数据。

00:00:37.185 --> 00:00:39.955
&gt;&gt; 就像我们在显示方法中做的数量？

00:00:39.955 --> 00:00:43.545
&gt;&gt; 是的，接着你执行该指示。

00:00:43.545 --> 00:00:46.340
&gt;&gt; 好，就好像烘培蛋糕的食谱？

00:00:46.340 --> 00:00:46.955
&gt;&gt; 嗯。

00:00:46.955 --> 00:00:48.840
然后你会有输出值回流。

00:00:48.840 --> 00:00:51.873
&gt;&gt; 输出值，真美味。

00:00:51.873 --> 00:00:55.660
&gt;&gt; [笑声]
&gt;&gt; 让我们来看看更多

00:00:55.660 --> 00:00:58.220
关于输入方法参数的资料。

00:00:58.220 --> 00:01:01.460
我打算到谷歌搜索Java方法的参数。

00:01:01.460 --> 00:01:04.250
第一个链接看起来不错，我要点击一下。

00:01:04.250 --> 00:01:08.240
这篇文章谈到传递信息的方法。

00:01:08.240 --> 00:01:12.270
这里有个用于计算每月支付住房贷款的代码片断。

00:01:12.270 --> 00:01:16.850
它有4个得输入的参数，贷款金额，利息率，未来贷款的收益

00:01:16.850 --> 00:01:20.440
以及贷款期限。

00:01:20.440 --> 00:01:24.680
通过这方法我们能够用这些

00:01:24.680 --> 00:01:28.100
简单的参数作为我们算法的变量。

00:01:28.100 --> 00:01:29.710
当我们调用贷款支付方法时,

00:01:29.710 --> 00:01:33.890
我们得确保依据特定的顺序输入参数。

00:01:33.890 --> 00:01:37.130
因此得先输入贷款金额，然后利息率等。

00:01:37.130 --> 00:01:38.480
此部分的测验中，

00:01:38.480 --> 00:01:41.520
你可以更详细的阅读这篇文章。

00:01:41.520 --> 00:01:43.970
在Java应用程序的主要活动，

00:01:43.970 --> 00:01:46.990
我们将以修改显示数量的方法和

00:01:46.990 --> 00:01:49.800
输入的参数作为你的练习。

00:01:49.800 --> 00:01:52.680
注意在应用程序中的减量法,

00:01:52.680 --> 00:01:54.880
我们所称为显示参数的方法，

00:01:54.880 --> 00:01:58.670
我们把数量变成方法的输入参数。

00:01:58.670 --> 00:02:01.110
但这些参数被称为“号码”，

00:02:01.110 --> 00:02:04.420
所以当我们要引用这参数，我们只需说出它的号码。

00:02:04.420 --> 00:02:07.880
现今，我们可在这方法上使用

00:02:07.880 --> 00:02:11.150
全球数量而不是将它变成方法的输入参数。

00:02:11.150 --> 00:02:14.430
但为了教学目的,

00:02:14.430 --> 00:02:16.370
就让它留着吧。

00:02:16.370 --> 00:02:19.480
我可把这对话变成显示数量的方法

00:02:19.480 --> 00:02:21.300
所以输入后，它变成30。

00:02:21.300 --> 00:02:27.090
这是有效的，因为它仍是输入数据的类型。

00:02:27.090 --> 00:02:29.430
于是在减量法时,我们把它称为显示的数量,

00:02:29.430 --> 00:02:32.750
它会跳到这儿，然后执行这些指示,

00:02:32.750 --> 00:02:35.320
然后这些变量将会变成30。

00:02:35.320 --> 00:02:40.140
我向你展示在我的手机里的设置，当我在程序上

00:02:40.140 --> 00:02:43.090
执行减量,它将在这显示数量为30。

00:02:43.090 --> 00:02:44.390
让我尝试。

00:02:45.410 --> 00:02:47.970
这。它真的是这样的。

00:02:47.970 --> 00:02:52.380
我也可以创建一个不同的变量并将其作为一种输入的方法。

00:02:52.380 --> 00:02:55.560
在这里，我创建了一个定量，接着

00:02:55.560 --> 00:02:56.610
我把它的初期值设为100。

00:02:56.610 --> 00:02:59.770
我把这这变量输入引用于该方法中，

00:02:59.770 --> 00:03:04.290
现在该变量值100。

00:03:04.290 --> 00:03:06.350
让我执行这例子。

00:03:06.350 --> 00:03:10.224
现在我估计当我点击减号按钮时，该数量将更新为100。

00:03:11.280 --> 00:03:12.120
确实是这样。

00:03:12.120 --> 00:03:14.630
这都是一些你可以用来做实验的事情

00:03:14.630 --> 00:03:17.560
通过方法不同的输入。

00:03:17.560 --> 00:03:19.510
当你使用输入的参数,

00:03:19.510 --> 00:03:22.680
你可能会遇到另个术语称为论据。

00:03:22.680 --> 00:03:24.000
当你调用一个方法时，

00:03:24.000 --> 00:03:27.570
输入的参数被传递的被称为论据。

00:03:27.570 --> 00:03:28.730
这是有点有趣的词语。

00:03:28.730 --> 00:03:31.630
因为arguments（争吵），你会想到大呼小叫

00:03:31.630 --> 00:03:32.510
甚至互相咒骂着。

00:03:32.510 --> 00:03:34.310
但并非如此。

00:03:34.310 --> 00:03:37.220
Arguments （论据）是输入的参数被传为方法。

00:03:37.220 --> 00:03:42.150
输入参数是方法声明中的实际的参数

00:03:42.150 --> 00:03:44.550
这些是你使用的方法中的变数。

00:03:44.550 --> 00:03:48.060
所以输入的参数和论据是略有区别的。

00:03:48.060 --> 00:03:49.790
无论如何，你可以阅读该文章

00:03:49.790 --> 00:03:53.040
这教员有记载关于方法的参数。

00:03:53.040 --> 00:03:55.850
然后继续在你的应用程序中尝试这代码。

00:03:55.850 --> 00:03:58.650
首先先尝试重命名输入数字的参数

00:03:58.650 --> 00:04:01.380
于显示数量方法声明。

00:04:01.380 --> 00:04:03.850
只需简单地给它一个不同的变量名称。

00:04:03.850 --> 00:04:07.740
然后修复任何错误，再重新运行该应用程序。

00:04:07.740 --> 00:04:10.660
在接下来的测试，试图改变输入数据的类型

00:04:10.660 --> 00:04:15.280
像是从整数变成其他类型如 String。

00:04:15.280 --> 00:04:18.660
观察结果然后撤消更改。

00:04:18.660 --> 00:04:21.269
如果你想试验其他的，请便。

00:04:21.269 --> 00:04:22.690
例如若你有一个问题，

00:04:22.690 --> 00:04:25.560
如果我做X，会发生什么事？尽管去尝试。

