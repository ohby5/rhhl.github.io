WEBVTT
Kind: captions
Language: tr

00:00:00.470 --> 00:00:03.770
TextView sınıfının basitleştirilmiş
bir versiyonunu oluşturduk

00:00:03.770 --> 00:00:06.810
ve bu TextView.java
dosyasına kaydedilebilir.

00:00:06.810 --> 00:00:08.290
Bir sınıfın nasıl göründüğünü

00:00:08.290 --> 00:00:11.060
anlamanızı kolaylaştırmak
için basitleştirdik.

00:00:11.060 --> 00:00:13.710
İlk olarak bir erişim değiştirici
ile başlar.

00:00:13.710 --> 00:00:15.100
Public (ortak) olarak işaretlenir böylece

00:00:15.100 --> 00:00:19.480
etkin olmama gibi diğer şeyler
bu TextView sınıfını kullanabilir.

00:00:19.480 --> 00:00:21.040
Sonra class(sınıf) kelimesi var.

00:00:21.040 --> 00:00:24.310
Bu javaya bunun bir
sınıf tanımı olduğunu belirtir.

00:00:24.310 --> 00:00:26.400
Sonra sınıf içinde bir ismimiz var.

00:00:26.400 --> 00:00:30.590
Java’da bir sınıf ismi büyük harfle başlar
ve ortası büyük harfli küçük harftir.

00:00:30.590 --> 00:00:34.360
Yani boşluk yoktur ve
sonraki kelimeleri büyük harf yapar.

00:00:34.360 --> 00:00:36.800
Burada başka bazı metinler de var
ama onlara daha sonra bakacağız.

00:00:36.800 --> 00:00:39.304
Önemli olan burada bir
açma ayracının olması

00:00:39.304 --> 00:00:42.354
ve tanımın sonunda bir kapatma
ayracının olmasıdır.

00:00:42.354 --> 00:00:47.130
Şimdi bu TextView sınıfının
içinde bir dizi değişkenimiz var.

00:00:47.130 --> 00:00:51.140
Bunların her biri bir TextView içinde
bir alanı temsil eder, böylece

00:00:51.140 --> 00:00:55.700
TextView metni için bir alanımız ve
TextView metin rengi için bir alanımız var.

00:00:55.700 --> 00:00:57.850
Başka alanlar daha vardır
ama unutmayın,

00:00:57.850 --> 00:00:59.928
bu TextView sınıfının
basitleştirilmiş bir versiyonu.

00:01:01.000 --> 00:01:04.239
Ayrıca uygulamanın içeriğine ilişkin
bir referans saklamak için

00:01:04.239 --> 00:01:05.740
bir değişkeniniz var.

00:01:05.740 --> 00:01:08.750
İçerik hakkında daha fazlasını aşağıda
eğitmen notlarında okuyabilirsiniz ancak

00:01:08.750 --> 00:01:13.170
bu temel olarak uygulamayla ilgili
bilgiye erişimin bir yolu

00:01:13.170 --> 00:01:16.670
örneğin uygulamadaki kaynaklara bu
içeriği kullanarak erişebilirsiniz.

00:01:17.870 --> 00:01:19.990
Ve bunlar TextView yöntemleridir.

00:01:19.990 --> 00:01:23.690
setText yöntemi girdi olarak
bir metin dizisi kullanır.

00:01:23.690 --> 00:01:28.840
Sonra bu yeni değeri kullanmak için
ortak değişken mText’i günceller.

00:01:28.840 --> 00:01:32.480
Aynı şekilde setTextColor girdi olarak
yeni bir renk kullanır ve

00:01:32.480 --> 00:01:36.080
bu yeni renk değeri için
iç durumu günceller.

00:01:36.080 --> 00:01:38.045
Ayrıca getText ve getTextColor gibi

00:01:38.045 --> 00:01:42.920
yöntemler vardır ki iç metin dizisini veya
iç metin rengini getirir.

00:01:44.080 --> 00:01:48.091
Dikkatinizi çeken bir diğer şey
buradaki tüm ortak değişkenlerin

00:01:48.091 --> 00:01:49.651
küçük harf m ile başlaması olabilir.

00:01:49.651 --> 00:01:51.510
M üye değişkenini temsil eder ve

00:01:51.510 --> 00:01:55.330
bunların tümü TextView sınıfının
üye değişkenleridir.

00:01:55.330 --> 00:01:58.580
Üye değişken alan veya
TextView sınıfının durumunu

00:01:58.580 --> 00:02:00.990
söylemenin bir diğer yoludur.

00:02:00.990 --> 00:02:03.380
İşte basitleştirilmiş bir ImageView sınıfı.

00:02:03.380 --> 00:02:05.320
Bunu ImageView.java
dosyasında bulabilirsiniz.

00:02:06.400 --> 00:02:10.580
public class ile başlar ve
ImageView sınıfın ismidir.

00:02:10.580 --> 00:02:13.550
ve açma ve kapatma ayraçlarımız var.

00:02:13.550 --> 00:02:15.980
Bu ImageView’un durumunu oluşturur.

00:02:15.980 --> 00:02:17.730
Normal olarak bundan daha fazla
alanları olur ancak

00:02:17.730 --> 00:02:20.000
size sadece bir örnek göstermek istiyorum.

00:02:20.000 --> 00:02:25.680
Bu bir tam sayı değişken ve
mImageId adı verilir, m üye değişkendir.

00:02:25.680 --> 00:02:28.340
Bu, ImageView içinde görülmesi gereken

00:02:28.340 --> 00:02:31.160
imaj için kaynak id’yi içerir.

00:02:31.160 --> 00:02:34.470
Burada aşağıda, yeni bir ImageView
nesnesini oluşturmak için kullanılan

00:02:34.470 --> 00:02:36.390
bir oluşturucumuz var.

00:02:36.390 --> 00:02:38.730
Ve bu İçerik girdisini kullanır.

00:02:38.730 --> 00:02:40.809
Ve sonra bu değişkenleri başlatır.

00:02:42.120 --> 00:02:43.088
Sonra bir yöntemimiz var.

00:02:43.088 --> 00:02:47.190
setImage adı verilir ve
bu ImageView içinde görünmesi gereken

00:02:47.190 --> 00:02:50.500
yeni imaj için bu girdiyi,
bir kaynak ID’si kullanır.

00:02:50.500 --> 00:02:53.850
Bu yöntem içinde imaj ID’si için
iç değişkeni güncelleriz.

00:02:55.100 --> 00:02:57.691
Yine, sınıf kavramını anlamanıza
yardımcı olmak için

00:02:57.691 --> 00:03:01.880
basitleştirilmiş bir TextView
ve ImageView sınıfları oluşturduk.

00:03:01.880 --> 00:03:05.200
Şimdi Android sistemi içinde
bu sınıfların gerçek

00:03:05.200 --> 00:03:06.110
versiyonuna bakalım.

00:03:07.950 --> 00:03:09.240
Android içinde Java sınıflarının

00:03:09.240 --> 00:03:13.240
kodlarını görmek için bu Chrome
eklentisini yükleyebilirsiniz.

00:03:13.240 --> 00:03:14.960
Eğer Chrome tarayıcısı kullanmıyorsunuz,

00:03:14.960 --> 00:03:17.989
bu dosyalara erişim için aşağıda
eğitmen notlarına bakabilirsiniz.

00:03:19.020 --> 00:03:19.520
Pekala.

00:03:21.840 --> 00:03:26.081
Chrome eklentisi yüklendiğinde
TextView Android araması yapıyorum

00:03:26.081 --> 00:03:30.260
ve bu sınıf için referans
dokümantasyonuna bakıyorum,

00:03:30.260 --> 00:03:34.830
sonra view source (kaynağı görüntüle)
denilen ekstra link bulunuyor.

00:03:33.730 --> 00:03:35.630
Bu gerçekten ileri düzey
geliştiriciler için.

00:03:36.730 --> 00:03:41.420
Eğer bu TextView’ü oluşturmak için
kullanılan kodu merak ediyorsanız.

00:03:41.420 --> 00:03:45.850
Bu Android ekipinde biri tarafından
tanımlanan TextView.java dosyası.

00:03:45.850 --> 00:03:47.970
Gördüğünüz gibi
gerçekten uzun ve karmaşık.

00:03:47.970 --> 00:03:49.739
Ama hala bir sınıfın
ana parçalarına sahip.

00:03:51.010 --> 00:03:55.330
public class ile başlıyor ve sonra
TextView, ki bu sınıfın ismi ve

00:03:55.330 --> 00:03:57.280
sonra bu açma ayracı ve

00:03:57.280 --> 00:03:59.500
burada tam aşağıda
kapama ayracı.

00:04:00.930 --> 00:04:04.340
Sınıfın en üstünde burada
bir dizi alanlar görüyoruz ve

00:04:04.340 --> 00:04:07.200
bu sınıfın durumun oluşturuyor.

00:04:07.200 --> 00:04:13.470
Örneğin bir alan TextColor görüyoruz ayrıca
bu text’i bir alan olduğunu görüyoruz.

00:04:13.470 --> 00:04:17.560
ve burada TextView için bir oluşturucu
içerik olarak bu girdiyi kullanıyor.

00:04:17.560 --> 00:04:22.560
Eğer Cmd+F veya Windows’da Ctl+F
yaparsam, setText için

00:04:22.560 --> 00:04:24.050
arama yapabilirim.

00:04:24.050 --> 00:04:26.250
Ve işte setText yöntemi.

00:04:26.250 --> 00:04:29.835
Bu yöntem TextView için
dizi değeri verecektir.

00:04:29.835 --> 00:04:31.205
Ve eğer GetText araması yaparsam

00:04:31.205 --> 00:04:35.605
bu yöntemin TextView’nun gösterdiği
text’i verdiğini görürüm.

00:04:35.605 --> 00:04:38.275
Konuyu anladınız ve isterseniz
kendi kendinize arama yapabilirsiniz.

00:04:39.545 --> 00:04:42.245
Eğer ImageView dokümantasyon sayfası
için arama yaparsam,

00:04:42.245 --> 00:04:46.750
sonra view source’a ben tıklayın ve ImageView
sınıfı için tüm kodlar görebilirim.

00:04:46.750 --> 00:04:49.370
Dosyada public class (ortak sınıf)
ImageView yazıyor ve

00:04:49.370 --> 00:04:52.460
bunlar da ImageView durumunu
oluşturan alanlar,

00:04:52.460 --> 00:04:55.810
ve dosyanın altında
bir dizi yöntem bulunuyor.

00:04:55.810 --> 00:04:57.810
Bu dosya içindeki kodlar da
oldukça karmaşık

00:04:57.810 --> 00:05:00.360
ve yine binlerce kod satırı bulunuyor.

00:05:00.360 --> 00:05:03.060
Nesne odaklı programlamanın
en iyi tarafı,

00:05:03.060 --> 00:05:06.500
tüm bu detayları
bilmenize gerek olmamasıdır.

00:05:06.500 --> 00:05:10.200
Bir geliştirici olarak, uygulamanızda
tüm bu kan donduran detayları

00:05:10.200 --> 00:05:13.630
bilmek zorunda kalmadan
TextView ve ImageView kullanabilirsiniz

