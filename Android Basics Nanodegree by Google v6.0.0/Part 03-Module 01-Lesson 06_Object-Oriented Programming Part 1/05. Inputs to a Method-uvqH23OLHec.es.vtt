WEBVTT
Kind: captions
Language: es

00:00:00.131 --> 00:00:01.971
- Espera.
- ¿Qué pasa?

00:00:01.971 --> 00:00:04.965
¿Cuándo se transformó esto de repente
en un programa de cocina?

00:00:04.965 --> 00:00:07.270
¿Desde que tuvimos que hablar de métodos?

00:00:07.270 --> 00:00:08.895
¿Podrías explicarte, Rachael Ray?

00:00:08.896 --> 00:00:11.650
Bueno, ¿has hecho alguna vez un pastel?

00:00:11.650 --> 00:00:13.570
He comido pasteles.

00:00:13.570 --> 00:00:16.360
- Entonces estás plenamente capacitado.
- Bueno.

00:00:16.360 --> 00:00:18.663
Lo que tienes que hacer
para hornear un pastel

00:00:18.663 --> 00:00:20.310
es agregar la harina, el azúcar...

00:00:20.310 --> 00:00:22.320
- Los ingredientes.
- Los ingredientes. Sí.

00:00:22.320 --> 00:00:24.474
Y luego sigues
las instrucciones de la receta.

00:00:24.475 --> 00:00:25.489
Está bien.

00:00:25.497 --> 00:00:27.811
Y luego sale un pastel.

00:00:28.240 --> 00:00:29.950
¿Como este?

00:00:29.950 --> 00:00:31.070
Sí.

00:00:31.070 --> 00:00:33.820
Bueno, conecta la analogía
con los métodos una vez más.

00:00:33.820 --> 00:00:37.185
Seguro. A un método
puedes aportarle las entradas.

00:00:37.185 --> 00:00:39.955
¿Como hicimos con la cantidad
para el método <i>display</i>?

00:00:39.955 --> 00:00:43.545
Sí, y luego ejecutas
las instrucciones del método.

00:00:43.545 --> 00:00:46.340
Bien, ¿casi como la receta
para hacer un pastel?

00:00:46.340 --> 00:00:49.123
Sï. Luego te devolverá
el valor de salida.

00:00:49.765 --> 00:00:52.085
Las salidas son deliciosas.

00:00:54.037 --> 00:00:55.660
Veamos más información

00:00:55.660 --> 00:00:58.220
sobre los parámetros de entrada
para los métodos.

00:00:58.220 --> 00:01:02.488
Voy a buscar en Google
<i>java method parameter</i>.

00:01:02.488 --> 00:01:05.115
El primer enlace parece bueno
entonces haré clic en él.

00:01:05.115 --> 00:01:08.240
Este artículo habla sobre
pasar información a un método.

00:01:08.240 --> 00:01:09.726
Aquí hay un fragmento de código

00:01:09.726 --> 00:01:12.360
que calcula pagos mensuales
de un préstamo hipotecario.

00:01:12.360 --> 00:01:14.377
Tiene cuatro parámetros de entrada,

00:01:14.378 --> 00:01:17.772
monto del préstamo, tasa de interés,
valor futuro del préstamo,

00:01:17.773 --> 00:01:20.843
y la cantidad de períodos
de la duración del préstamo.

00:01:20.844 --> 00:01:22.257
Luego dentro de este método

00:01:22.258 --> 00:01:24.590
vemos que podemos usar
estos parámetros de entrada

00:01:24.590 --> 00:01:28.040
simplemente como variables para hacer
nuestros cálculos matemáticos.

00:01:28.040 --> 00:01:30.007
Cuando llamamos al método <i>computePayment</i>,

00:01:30.008 --> 00:01:32.451
tenemos que asegurarnos
de pasarle las entradas

00:01:32.452 --> 00:01:33.794
en este orden específico.

00:01:33.795 --> 00:01:35.391
El monto del préstamo
va primero,

00:01:35.391 --> 00:01:37.020
luego la tasa y así sucesivamente.

00:01:37.020 --> 00:01:38.480
En el examen de esta sección,

00:01:38.480 --> 00:01:41.090
podrás revisar este artículo
con más detalle.

00:01:41.090 --> 00:01:44.040
Dentro de la MainActivity
del escritorio de aplicaciones Java,

00:01:44.040 --> 00:01:46.913
modificaremos el método <i>displayQuantity</i>

00:01:46.914 --> 00:01:49.800
y el parámetro de entrada
para que practiques un poco.

00:01:49.800 --> 00:01:52.680
Observa que en el método <i>decrement</i>
de nuestra aplicación,

00:01:52.680 --> 00:01:54.880
en el que llamamos
al método <i>displayQuantity</i>,

00:01:54.880 --> 00:01:58.670
estamos pasando la variable <i>quantity</i>
como entrada de este método.

00:01:58.670 --> 00:02:01.011
Pero el parámetro de entrada
se llama <i>"number"</i>.

00:02:01.019 --> 00:02:03.161
Así, cuando hagamos referencia
a esta entrada,

00:02:03.162 --> 00:02:04.420
tenemos que decir <i>number</i>.

00:02:04.420 --> 00:02:07.455
Técnicamente podríamos haber usado
la variable global <i>quantity</i>

00:02:07.456 --> 00:02:11.150
dentro de este método en vez de pasarlo
como un parámetro de entrada .

00:02:11.150 --> 00:02:14.430
Pero a fin de enseñarte
sobre los parámetros de entrada,

00:02:14.430 --> 00:02:16.189
vamos a dejarlo así.

00:02:16.190 --> 00:02:19.324
Puedo cambiar esta llamada
al método <i>displayQuantity</i>

00:02:19.325 --> 00:02:21.894
para que pase como entrada, el número 30.

00:02:22.403 --> 00:02:26.760
Esto es válido, ya que coincide
con el tipo de datos de entrada.

00:02:26.760 --> 00:02:29.686
Así en el método <i>decrement</i>
cuando llamemos a <i>displayQuantity</i>,

00:02:29.687 --> 00:02:32.599
saltará aquí y ejecutará
estas instrucciones,

00:02:32.600 --> 00:02:36.059
y la variable <i>number</i>
tendrá el valor de 30.

00:02:36.059 --> 00:02:38.439
Voy a ejecutarlo en mi dispositivo
para mostrarte.

00:02:38.440 --> 00:02:40.918
Ahora cuando pulse el botón <i>menos</i>
en mi aplicación,

00:02:40.918 --> 00:02:43.756
mostrará una cantidad de 30 aquí.

00:02:43.757 --> 00:02:44.828
Voy a probarlo.

00:02:45.410 --> 00:02:47.296
Y realmente sucedió así.

00:02:47.791 --> 00:02:49.780
También puedo crear
una variable diferente

00:02:49.781 --> 00:02:52.380
y pasarla como una entrada para el método.

00:02:52.380 --> 00:02:55.479
Aquí he creado una variable local
llamada <i>someQuantity</i>

00:02:55.480 --> 00:02:57.026
y la inicialicé en 100.

00:02:57.027 --> 00:03:00.335
Pasé esta variable
como entrada de este método,

00:03:00.336 --> 00:03:04.763
y ahora la variable <i>number</i>
aquí adentro tiene un valor de 100.

00:03:04.764 --> 00:03:06.350
Ejecutaré esto en el dispositivo.

00:03:06.350 --> 00:03:08.819
Ahora espero que cuando pulse
el botón <i>menos</i>

00:03:08.820 --> 00:03:10.828
la cantidad
se actualice a 100.

00:03:10.828 --> 00:03:11.820
Y lo hace.

00:03:11.820 --> 00:03:14.790
Estas son solo algunas cosas
que puedes hacer para experimentar

00:03:14.790 --> 00:03:17.560
pasando diferentes entradas a un método.

00:03:17.560 --> 00:03:19.510
Al trabajar con parámetros de entrada,

00:03:19.510 --> 00:03:22.630
otro término que podría surgir
es <i>argumentos</i>.

00:03:22.630 --> 00:03:24.000
Cuando se llama a un método,

00:03:24.000 --> 00:03:27.370
las entradas que se le pasan
se llaman argumentos.

00:03:27.370 --> 00:03:28.927
Es una palabra un poco graciosa,

00:03:28.927 --> 00:03:30.692
porque cuando hablamos de argumentos,

00:03:30.692 --> 00:03:32.716
pensamos en gente
discutiendo y gritándose.

00:03:32.717 --> 00:03:34.052
Pero aquí no es así.

00:03:34.053 --> 00:03:35.805
Los argumentos son
solo las entradas

00:03:35.806 --> 00:03:37.155
que se le pasan a un método.

00:03:37.156 --> 00:03:39.903
Los parámetros de entrada
son las entradas reales

00:03:39.904 --> 00:03:41.917
en la declaración del método

00:03:41.918 --> 00:03:44.506
y esas son las variables
que se usan dentro del método.

00:03:44.506 --> 00:03:47.960
Así que hay una leve diferencia
entre parámetros de entrada y argumentos.

00:03:47.960 --> 00:03:49.961
Como sea, sigue adelante y lee el artículo

00:03:49.961 --> 00:03:53.040
y las notas del instructor
sobre los parámetros del método.

00:03:53.040 --> 00:03:55.560
Luego experimenta
con el código de tu aplicación.

00:03:55.560 --> 00:03:58.650
Primero trata de cambiar el nombre
del parámetro de entrada <i>number</i>

00:03:58.650 --> 00:04:01.380
dentro de la declaración
del método <i>displayQuantity</i>.

00:04:01.380 --> 00:04:03.850
Simplemente ponle
un nombre de variable diferente.

00:04:03.850 --> 00:04:07.740
Luego corrige cualquier error,
y ejecuta la aplicación de nuevo.

00:04:07.740 --> 00:04:10.660
Para la prueba siguiente,
cambia el tipo de datos

00:04:10.660 --> 00:04:15.280
del parámetro de entrada <i>number</i>
de <i>int</i> a otra cosa, tal como <i>string</i>.

00:04:15.280 --> 00:04:18.660
Observa qué sucede
y luego deshaz el cambio.

00:04:18.660 --> 00:04:21.269
Si quieres experimentar
con otras cosas, adelante.

00:04:21.269 --> 00:04:24.411
Por ejemplo, si te preguntas
qué pasaría si hago x,

00:04:24.412 --> 00:04:25.777
sigue adelante y pruébalo.

