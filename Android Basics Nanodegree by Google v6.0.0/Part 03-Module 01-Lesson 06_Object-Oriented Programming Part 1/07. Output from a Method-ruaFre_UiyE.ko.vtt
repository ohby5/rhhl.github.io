WEBVTT
Kind: captions
Language: ko

00:00:00.300 --> 00:00:03.370
[method]를 호출하고 입력 하는 
것에 대해 배워봤습니다.

00:00:03.370 --> 00:00:04.260
&gt;&gt; 잠시만 기다려 주십시오.

00:00:04.260 --> 00:00:06.790
가격 법 계산 시 필요한 
입력 내용에 관해

00:00:06.790 --> 00:00:08.270
언급하였습니까?

00:00:08.270 --> 00:00:09.300
&gt;&gt; 물론이죠.

00:00:09.300 --> 00:00:11.850
그리고 이제 그것으로부터 반환 
값을 구해보도록 하겠습니다.

00:00:11.850 --> 00:00:12.765
&gt;&gt; 반환 값 좋죠.

00:00:12.765 --> 00:00:13.930
&gt;&gt; [웃음]
&gt;&gt; 어떻게 나올까요?

00:00:13.930 --> 00:00:15.300
제 생각에는 가격?

00:00:15.300 --> 00:00:16.550
왜냐하면 이는 가격 법을 
계산하기 때문이죠.

00:00:16.550 --> 00:00:19.750
&gt;&gt; 예, 총 주문 가격이 반환 
값이 될 수 있습니다.

00:00:19.750 --> 00:00:21.310
&gt;&gt; 좋습니다. 한 번 해 봅시다!

00:00:21.310 --> 00:00:23.510
&gt;&gt; 좋습니다.
포크가 필요한가요?

00:00:25.820 --> 00:00:26.980
&gt;&gt; 제가요?

00:00:26.980 --> 00:00:31.340
&gt;&gt; 자바에서 [method]의 출력은 
반환 값으로 알려져 있습니다.

00:00:31.340 --> 00:00:35.640
코드 샘플에서, [method] 내의 
[word return]가 확인됩니다.

00:00:35.640 --> 00:00:39.090
혹은 위의 설명에서 [word 
return]가 확인됩니다.

00:00:39.090 --> 00:00:42.170
[methods]의 반환 값에 대해 좀 더 
알아보도록 합시다.

00:00:42.170 --> 00:00:46.900
자바 [method]의 반환 값에 대해 
구글 검색을 해 보도록 하겠습니다.

00:00:46.900 --> 00:00:48.780
첫 번째 링크는 좋아 보이는 군요.

00:00:48.780 --> 00:00:51.420
이는 [method]로부터의 반환 값에 
대해 설명하고 있습니다.

00:00:52.710 --> 00:00:55.240
여기서 [method]가 
실행된 후 [method]의

00:00:55.240 --> 00:00:59.510
모든 내용이나 행을 
수행하거나 어느 것이든

00:00:59.510 --> 00:01:04.319
첫 번째 반환 내용에 도달하게 
되면 끝난다고 합니다.

00:01:04.319 --> 00:01:07.370
[method]는 또한 예외 사항이나 
오류가 발생하게 되면 끝납니다.

00:01:07.370 --> 00:01:10.410
하지만 이에 관해서는 다루지 
않을 것입니다.

00:01:10.410 --> 00:01:12.710
위의 두 경우를 좀 더 
알아보도록 하겠습니다.

00:01:14.240 --> 00:01:18.230
코드에서, 반환 세미콜론과 
같은 것을 확인할 수 있습니다.

00:01:18.230 --> 00:01:21.100
이는 [method]가 끝나야 하고 
이후에

00:01:21.100 --> 00:01:24.150
나오는 모든 코드 행은 실행되지 
않음을 의미합니다.

00:01:25.440 --> 00:01:28.170
대신, 이와 같은 것도 발견할 
수 있을 것입니다.

00:01:28.170 --> 00:01:32.230
반환 후 값, 세미콜론.

00:01:32.230 --> 00:01:35.280
이는 [method]로부터의 출력 
값을 반환하는 것입니다.

00:01:36.470 --> 00:01:37.900
여기 예가 있습니다.

00:01:37.900 --> 00:01:40.140
이것은 [getArea] [method]에 
대한 코드입니다.

00:01:40.140 --> 00:01:43.420
너비와 높이의 곱으로 규정된 
직사각형의 면적을

00:01:43.420 --> 00:01:46.010
계산하는 것입니다. 따라서

00:01:46.010 --> 00:01:51.100
[method] 내부에는, 반환 값 
다음 [word return]이 있습니다.

00:01:51.100 --> 00:01:54.660
반환 값은 너비의 변수와 높이의 
변수의 곱입니다.

00:01:54.660 --> 00:01:56.610
그리고 이는 하나의 숫자입니다.

00:01:56.610 --> 00:02:01.270
그리고 이 숫자는 이 [method]에 
대한 출력 값으로 반환됩니다.

00:02:01.270 --> 00:02:02.760
괄호 안에 다양한

00:02:02.760 --> 00:02:05.890
입력 파라미터들이 나열되는
입력 파라미터와는 달리,

00:02:05.890 --> 00:02:10.389
하나의 반환 값만을 
가질 수 있습니다.

00:02:10.389 --> 00:02:13.530
그리고 이 반환 값의 데이터 
유형은 이곳에 명시됩니다.

00:02:13.530 --> 00:02:18.300
따라서 우리는 정수인 모든 
숫자를 반환 받을 수 있습니다.

00:02:18.300 --> 00:02:21.050
예를 들어, 입력된 데이터 유형과

00:02:21.050 --> 00:02:24.170
일치하지 않는 문자열은 반환 
받을 수 없습니다.

00:02:24.170 --> 00:02:27.930
자바가 [word return]에 대한 
특별한 의미를 가지는 것을 이제

00:02:27.930 --> 00:02:29.550
알게 될 것입니다.

00:02:29.550 --> 00:02:33.480
변수나 [methods]로 이를 
사용할 수는 없습니다.

00:02:33.480 --> 00:02:35.549
이것들은 자바 키워드로 불립니다.

00:02:37.140 --> 00:02:38.960
자바 키워드 목록을 
찾을 수 있습니다.

00:02:41.370 --> 00:02:43.740
이것은 모든 자바 키워드의 
목록입니다.

00:02:43.740 --> 00:02:46.880
[int], [public], [private]와 
같은 몇몇 단어들은 전에

00:02:46.880 --> 00:02:49.460
본 적이 있음을 알게 될 것입니다.

00:02:49.460 --> 00:02:50.710
상당히 짧은 목록입니다.

00:02:50.710 --> 00:02:53.440
그리고 이러한 모든 단어들은 
코드에 입력하였을 때 자바에서

00:02:53.440 --> 00:02:53.940
특별한 의미를 갖습니다.

00:02:53.940 --> 00:02:58.640
따라서 이는 이것들을 앱의 변수
명이나 [method names]과 같은

00:02:58.640 --> 00:03:00.560
식별자로 사용할 수 
없음을 의미합니다.

00:03:00.560 --> 00:03:04.140
또한 반환은 특별한 자바 
키워드 임을 알게 될 것입니다.

00:03:04.140 --> 00:03:07.780
[method]로부터 출력 값의 
반환을 위한 것입니다.

00:03:09.140 --> 00:03:12.240
기상 메시지를 작성하는 
앞선 예시로 돌아가 봅시다.

00:03:12.240 --> 00:03:17.150
문자열을 만들고 나서 반환 
메시지로 반환시킬 수 있습니다.

00:03:17.150 --> 00:03:19.230
이 변수의 데이터 유형은 문자열 
입니다.

00:03:19.230 --> 00:03:25.150
이 반환 명령 뒤에 코드 행을 
추가하면 어떻게 될까요?

00:03:25.150 --> 00:03:28.390
아마도 수행될 수 없는 명령이라는 
오류 메시지가 나타날 것입니다.

00:03:28.390 --> 00:03:31.230
왜냐하면 컴퓨터가 반환 명령 뒤에서 
이러한 코드 행을 수행할 수 없기

00:03:31.230 --> 00:03:32.690
때문입니다.

00:03:32.690 --> 00:03:35.690
왜냐하면 이것은 여기서 [method]를 
끝내기 때문입니다.

00:03:35.690 --> 00:03:38.570
따라서 반환 명령 뒤에 오는 
코드 행을 삭제하시기 바랍니다.

00:03:39.640 --> 00:03:43.100
[method]가 출력 값을 반환할 
필요가 없다면?

00:03:43.100 --> 00:03:45.390
[JustJava app] 앱의 [MainActivity]
에서의 몇몇 예시들을

00:03:45.390 --> 00:03:47.295
살펴보도록 합시다.

00:03:47.295 --> 00:03:52.415
증가 및 감소 [method]는 반환 값이 
없는 것에 대한 예시입니다.

00:03:52.415 --> 00:03:53.905
감소 [method]를 호출하면,

00:03:53.905 --> 00:03:58.405
[displayQuantity] [method] 내의 
UI를 업데이트 할 것입니다.

00:03:58.405 --> 00:04:01.045
출력 값의 반환은 없습니다.

00:04:01.045 --> 00:04:04.185
증가 [method]도 마찬가지 입니다.
[displayQuantity]를 호출하고

00:04:04.185 --> 00:04:07.455
이를 화면에 업데이트 하면 
모든 작업이 완료됩니다.

00:04:07.455 --> 00:04:10.430
여기서 반환 명령은 어디에 있는지 
궁금해 할 것입니다.

00:04:10.430 --> 00:04:14.180
[method]는 
모든 코드 행이 완료되거나

00:04:14.180 --> 00:04:17.089
반환 명령을 입력하게 되면 작업을 
끝내게 됩니다.

00:04:17.089 --> 00:04:20.320
따라서 이와 같이 반환을 
추가할 수 있습니다.

00:04:21.570 --> 00:04:24.870
이 같은 방식으로, [method]는 이 
행을 입력하자마자 끝나게 됩니다.

00:04:24.870 --> 00:04:27.200
안드로이드 스튜디오에서는 
이에 대한 경고를 보냅니다.

00:04:27.200 --> 00:04:31.570
반환은 [Avoid method]에서의 
마지막 명령에는 필요치 않습니다.

00:04:31.570 --> 00:04:35.900
어떤 것도 반환하지 않았기 때문에, 
이곳에서 이 행을 삭제하면 됩니다.

00:04:35.900 --> 00:04:38.080
이는 코드 행을 줄이고 보기에도 
더 편합니다. 따라서 저는

00:04:38.080 --> 00:04:39.750
이와 같은 방식을 더 선호합니다.

00:04:39.750 --> 00:04:43.100
반환 값이 없음을 표시하기 위해, 
[method] 신호에서 반환 데이터

00:04:43.100 --> 00:04:46.570
유형이 [void]임을 표시해 주는 
것은 중요합니다.

00:04:46.570 --> 00:04:49.390
[void]는 반환 값이 
없음을 의미합니다.

00:04:49.390 --> 00:04:51.310
자바는 이를 나타내는 특별한 
방식을 가지고 있습니다. 그리고

00:04:51.310 --> 00:04:53.940
이것이 왜 자바 키워드인지에 
대한 이유입니다.

00:04:53.940 --> 00:04:56.720
자바 키워드 목록을 다시 한 번 
살펴 봅시다. 사실 [void]도

00:04:56.720 --> 00:04:58.280
이 목록에 포함되어 있습니다.

00:04:59.310 --> 00:05:01.310
따라서 반환 값을 갖지 않는다면,

00:05:01.310 --> 00:05:04.130
이와 같이 공란으로 놓아야 함을 
잊지 마십시오.

00:05:04.130 --> 00:05:07.470
그렇지 않으면 자바 신택스 
오류가 발생되기 때문입니다.

00:05:07.470 --> 00:05:09.430
소문자 V로 [void]를 
입력해 주십시오.

00:05:10.500 --> 00:05:12.310
자 이제 다음 내용을 읽어보시기 
바랍니다.

00:05:12.310 --> 00:05:17.190
이해하거나 구글 검색을 통해 
온라인으로 자세한 정보를

00:05:17.190 --> 00:05:18.090
찾을 수 있는 내용은 그냥 
지나쳐도 좋습니다.

00:05:18.090 --> 00:05:21.310
이 내용을 통해 
몇 가지를 배우고 난 후,

00:05:21.310 --> 00:05:22.249
작업을 수행할 수 있습니다.

00:05:23.500 --> 00:05:24.560
그리고 노트를 확인해 
보시기 바랍니다.

00:05:24.560 --> 00:05:28.290
4가지 다른 [methods]의 일부 코드에 
대한 링크를 찾게 될 것입니다.

00:05:28.290 --> 00:05:30.440
각 [method]는 오류가 
포함되어 있습니다.

00:05:30.440 --> 00:05:33.560
각 [methods]에서의 오류를 찾는 
것은 당신이 해야 할 일입니다.

00:05:34.850 --> 00:05:37.110
코드를 수정하는 방법은 여러 가지가 
있습니다. 각 [method] 위에

00:05:37.110 --> 00:05:40.710
있는 [javadoc comment]가 
정확한지를 확인해보도록 하십시오.

00:05:40.710 --> 00:05:42.210
그리고 이에 맞는 코드를 
만들고자 합니다.

00:05:43.410 --> 00:05:44.680
이것은 [method]의 내용입니다.

00:05:45.810 --> 00:05:48.120
오류가 발생한 
행 번호를 확인하십시오.

00:05:48.120 --> 00:05:51.060
행 번호는 이곳에 있는 왼쪽 열에 
있습니다.

00:05:51.060 --> 00:05:55.100
그리고 오류의 발생 원인에 대해 
간단히 적으십시오.

00:05:55.100 --> 00:05:56.872
행 번호는 이곳에 있고, 
설명은 이곳에 해 주십시오.

00:05:56.872 --> 00:05:57.993
다 완료하면, 해결 방안에 관한 
영상으로 넘어가시면 됩니다.

