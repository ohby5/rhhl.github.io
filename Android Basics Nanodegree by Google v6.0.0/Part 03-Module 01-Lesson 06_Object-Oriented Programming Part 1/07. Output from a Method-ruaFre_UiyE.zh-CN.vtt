WEBVTT
Kind: captions
Language: zh-CN

00:00:00.300 --> 00:00:03.370
刚刚我们完成了调用方法和传递参数

00:00:03.370 --> 00:00:04.260
哦 等等

00:00:04.260 --> 00:00:06.790
你刚刚提起的那个传递参数是什么

00:00:06.790 --> 00:00:08.270
calculatePrice 方法？

00:00:08.270 --> 00:00:09.300
确实是

00:00:09.300 --> 00:00:11.850
现在我们想从这个方法中得到一个返回值

00:00:11.850 --> 00:00:12.765
我喜欢返回值

00:00:12.765 --> 00:00:13.930
将会发生什么?

00:00:13.930 --> 00:00:15.300
我认为是一个价格

00:00:15.300 --> 00:00:16.550
因为它是一个计算价格的方法

00:00:16.550 --> 00:00:19.750
是的 返回值是总价

00:00:19.750 --> 00:00:21.310
好的 我们行动吧

00:00:21.310 --> 00:00:23.510
好的 你需要一个叉子吗？

00:00:25.820 --> 00:00:26.980
我需要吗？

00:00:26.980 --> 00:00:31.340
在 Java 中方法的输出被认为是一个返回值

00:00:31.340 --> 00:00:35.640
在代码的例子 你可能注意到方法里

00:00:35.640 --> 00:00:39.090
或看到注释中的 return

00:00:39.090 --> 00:00:42.170
让我们看一下更多关于方法返回值的信息

00:00:42.170 --> 00:00:46.900
我将 Google 查一下 java method return value

00:00:46.900 --> 00:00:48.780
第一个链接看起来不错

00:00:48.780 --> 00:00:51.420
这篇文章介绍了方法的返回值

00:00:52.710 --> 00:00:55.240
它说一个方法结束执行

00:00:55.240 --> 00:00:59.510
当我们完成方法中的所有语句或者全部方法

00:00:59.510 --> 00:01:04.319
或者方法执行的过程中遇到第一个 return 语句 无论哪个先发生

00:01:04.319 --> 00:01:07.370
一个方法都结束了如果我们抛出异常或

00:01:07.370 --> 00:01:10.410
错误 不过我们这节课不讲

00:01:10.410 --> 00:01:12.710
这里我们主要讲解前两种情况

00:01:14.240 --> 00:01:18.230
所以在代码 你可能会看到 return 分号

00:01:18.230 --> 00:01:21.100
这意味着方法结束

00:01:21.100 --> 00:01:24.150
这之后的任何一行代码都不会执行

00:01:25.440 --> 00:01:28.170
作为选择你可以看看这个

00:01:28.170 --> 00:01:32.230
return 加上一个值 然后分号

00:01:32.230 --> 00:01:35.280
这是方法的返回值

00:01:36.470 --> 00:01:37.900
这有一个例子

00:01:37.900 --> 00:01:40.140
这是 getArea 方法的代码

00:01:40.140 --> 00:01:43.420
这个方法用于计算矩形面积

00:01:43.420 --> 00:01:46.010
就是长乘以宽的值

00:01:46.010 --> 00:01:51.100
所以在方法内部我们在 return 后加上了返回值

00:01:51.100 --> 00:01:54.660
返回值是变量 width 乘以变量 height

00:01:54.660 --> 00:01:56.610
它只是一个数字

00:01:56.610 --> 00:02:01.270
这个数字会作为返回值输出

00:02:01.270 --> 00:02:02.760
不同于输入参数

00:02:02.760 --> 00:02:05.890
你可以列出很多输入参数在

00:02:05.890 --> 00:02:10.389
左右括号之中 你只能有一个返回值

00:02:10.389 --> 00:02:13.530
而且方法的返回值的类型是指定的

00:02:13.530 --> 00:02:18.300
所以我们可以返回任何数 只要是整型

00:02:18.300 --> 00:02:21.050
例如 你不可以返回字符串

00:02:21.050 --> 00:02:24.170
因为这与输入数据的类型不匹配

00:02:24.170 --> 00:02:27.930
你也许发现 Java 对于return

00:02:27.930 --> 00:02:29.550
有特殊意义

00:02:29.550 --> 00:02:33.480
你不能用它命名变量或方法

00:02:33.480 --> 00:02:35.549
这叫 Java 关键词

00:02:37.140 --> 00:02:38.960
我可以查找 Java 关键词列表

00:02:41.370 --> 00:02:43.740
这是所有 Java 关键词的列表

00:02:43.740 --> 00:02:46.880
你会发现这里的词我们之前看到过

00:02:46.880 --> 00:02:49.460
比如 int public 和 private

00:02:49.460 --> 00:02:50.710
那是一个相当简短的表

00:02:50.710 --> 00:02:53.440
在 Java 中所有这些词都有特殊的含义当你把它们放到

00:02:53.440 --> 00:02:53.940
你的代码中

00:02:53.940 --> 00:02:58.640
你就不能把它们用作标识符 比如变量名

00:02:58.640 --> 00:03:00.560
你应用的方法名

00:03:00.560 --> 00:03:04.140
你会发现 return 同样是个特殊的 Java 关键字

00:03:04.140 --> 00:03:07.780
这个词仅用于你需要为方法返回值的时候64

00:03:09.140 --> 00:03:12.240
回到我们早前创建的天气消息的例子

00:03:12.240 --> 00:03:17.150
我们可以创建一个字符串并通过 return message返回它

00:03:17.150 --> 00:03:19.230
这个变量的数据类型是字符串型

00:03:19.230 --> 00:03:25.150
如果在返回值语句后面加一行会发生什么

00:03:25.150 --> 00:03:28.390
好吧我将得到一个错误显示无法执行的代码

00:03:28.390 --> 00:03:31.230
因为在 return 语句后 计算机不能运行到

00:03:31.230 --> 00:03:32.690
这行代码

00:03:32.690 --> 00:03:35.690
因为它在这一点上已经将方法结束了

00:03:35.690 --> 00:03:38.570
所以将 return 语句后面的任何代码都删除

00:03:39.640 --> 00:03:43.100
如果你的方法不需要返回任何值会怎样？

00:03:43.100 --> 00:03:45.390
让我们来看两个例子

00:03:45.390 --> 00:03:47.295
在 JustJava app 应用的 MainActivity 中

00:03:47.295 --> 00:03:52.415
Increment 和 decrement 的方法是没有返回值的例子

00:03:52.415 --> 00:03:53.905
当我们调用 decrement 方法

00:03:53.905 --> 00:03:58.405
它的所有工作集中在更新 displayQuantity 方法的UI

00:03:58.405 --> 00:04:01.045
这里没有输出的返回值

00:04:01.045 --> 00:04:04.185
increment 方法也一样 工作重点在

00:04:04.185 --> 00:04:07.455
当你调用 displayQuantity 并更新屏幕

00:04:07.455 --> 00:04:10.430
你可能对 return 语句感到疑惑 之后

00:04:10.430 --> 00:04:14.180
所有的代码都完成这个方法就结束执行了

00:04:14.180 --> 00:04:17.089
或者当它运行 return 语句的时候

00:04:17.089 --> 00:04:20.320
所以 我不能像这样添加 return;

00:04:21.570 --> 00:04:24.870
这种方法 当运行到这一行方法就结束了

00:04:24.870 --> 00:04:27.200
Android Studio 会报错

00:04:27.200 --> 00:04:31.570
它说 在 void 方法最后一行语句的 return 是不必要的

00:04:31.570 --> 00:04:35.900
因为我不需要返回任何东西 我可以删掉这一行

00:04:35.900 --> 00:04:38.080
这使代码更简短和容易阅读

00:04:38.080 --> 00:04:39.750
我更倾向于它这样

00:04:39.750 --> 00:04:43.100
指出 这里是没有返回值的 在方法中声明

00:04:43.100 --> 00:04:46.570
返回数据类型是 void 很重要

00:04:46.570 --> 00:04:49.390
void 意味着这里没有返回值

00:04:49.390 --> 00:04:51.310
Java 表达这些有特殊的方式

00:04:51.310 --> 00:04:53.940
这就是为什么这是一个 Java 关键字

00:04:53.940 --> 00:04:56.720
让我们回过头看看我们的 Java 关键字列表

00:04:56.720 --> 00:04:58.280
void 真的在表里面

00:04:59.310 --> 00:05:01.310
如果你不需要返回值

00:05:01.310 --> 00:05:04.130
确定你这里没有空白

00:05:04.130 --> 00:05:07.470
否则这会产生 Java 语法错误

00:05:07.470 --> 00:05:09.430
只需要将 void 的 v 小写

00:05:10.500 --> 00:05:12.310
继续看你自己的文章

00:05:12.310 --> 00:05:17.190
你可以看你懂得的知识 或用 Google 查找

00:05:17.190 --> 00:05:18.090
更多网上的知识

00:05:18.090 --> 00:05:21.310
一旦你学会了文章中的知识

00:05:21.310 --> 00:05:22.249
你可以练习一下

00:05:23.500 --> 00:05:24.560
并勾选你的笔记

00:05:24.560 --> 00:05:28.290
你会发现四个不同方法的代码的链接

00:05:28.290 --> 00:05:30.440
每个方法都有一个错误

00:05:30.440 --> 00:05:33.560
这个练习是让你找出每个方法的错误

00:05:34.850 --> 00:05:37.110
这有多种修改代码的方法

00:05:37.110 --> 00:05:40.710
假设每个方法上面的注释都是正确的

00:05:40.710 --> 00:05:42.210
我们想要使代码匹配它

00:05:43.410 --> 00:05:44.680
这就是方法的样子

00:05:45.810 --> 00:05:48.120
确定错误出现在第几行

00:05:48.120 --> 00:05:51.060
行数在左手边的栏上

00:05:51.060 --> 00:05:55.100
之后写一个简短的注释为什么这一行错了

00:05:55.100 --> 00:05:56.872
所以行数在这 描述在这

00:05:56.872 --> 00:05:57.993
当你这么做了 你可以继续解决方法的视频

