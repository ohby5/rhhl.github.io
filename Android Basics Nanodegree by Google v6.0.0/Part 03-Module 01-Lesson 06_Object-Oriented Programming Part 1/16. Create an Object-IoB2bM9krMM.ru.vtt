WEBVTT
Kind: captions
Language: ru

00:00:00.520 --> 00:00:03.270
Я прошлом видео я кратко
упомянула что конструктор

00:00:03.270 --> 00:00:07.910
определяется в классе и используется
чтобы создавать экземпляры объектов.

00:00:07.910 --> 00:00:10.610
Поэтому мы вызвали конструктор
TextView чтобы создать этот экземпляр

00:00:10.610 --> 00:00:14.220
и вызовем опять чтобы создать
другой экземпляр, и так далее.

00:00:14.220 --> 00:00:17.190
Посмотрим на код который
вызывает конструктор.

00:00:18.250 --> 00:00:22.280
Помните как создавали новую цифровую
переменную под названием <i>quantity</i> и

00:00:22.280 --> 00:00:24.960
и устанавливали ее на исходное
значение два?

00:00:24.960 --> 00:00:26.340
Создание нового объекта и

00:00:26.340 --> 00:00:29.120
сохранние его в переменной
выполняется по подобному формату.

00:00:30.200 --> 00:00:32.200
Это будет выглядеть примерно так.

00:00:32.200 --> 00:00:36.150
Но вместо цифрового типа данных
у нас объектный тип данных.

00:00:36.150 --> 00:00:38.770
Оbject data type это то
как мы назвали класс.

00:00:38.770 --> 00:00:41.650
В этом случае это <i>TextView</i>.

00:00:41.650 --> 00:00:45.700
Это может быть что угодно
если оно соответствует правилам

00:00:45.700 --> 00:00:47.720
для названий переменных.
Мы назвали <i>priceTextView</i>.

00:00:47.720 --> 00:00:49.600
И приравняли к новому объекту.

00:00:49.600 --> 00:00:51.740
Мы можем рассмотреть
правую сторону подробнее.

00:00:52.800 --> 00:00:58.060
Формат правой стороны - это <i>new</i>,
за ним - тип объектных данных,

00:00:58.060 --> 00:01:00.190
в нашем случае это <i>TextView</i>.

00:01:00.190 --> 00:01:03.510
Это вызывает конструктор
определенный в классе <i>TextView</i>

00:01:03.510 --> 00:01:07.940
поэтому тут есть скобки с исходным
аргументом конструктора.

00:01:07.940 --> 00:01:10.790
Итак, если конструктору требуется
контекстный объект,

00:01:10.790 --> 00:01:13.490
мы должны указать <i>context</i> здесь.

00:01:13.490 --> 00:01:18.120
Помните что контекстный объект
помогает получить доступ к ресурсам

00:01:18.120 --> 00:01:19.870
и другим частям приложения.

00:01:20.940 --> 00:01:24.140
Все вместе создает новый
объект TextView

00:01:24.140 --> 00:01:26.060
вызывая конструктор и

00:01:26.060 --> 00:01:31.200
сохраняя новый объект
в переменной <i>priceTextView</i>.

00:01:31.200 --> 00:01:34.830
И в этой переменной может хранить
только один объект <i>TextView</i>

00:01:34.830 --> 00:01:36.080
как определено типом данных.

00:01:37.210 --> 00:01:39.850
Вот еще пример создания
объекта <i>ImageView</i> и

00:01:39.850 --> 00:01:41.840
сохранения его в переменной.

00:01:41.840 --> 00:01:45.770
Это тип данных - <i>ImageView</i>,
переменная - <i>coffeeImageView</i>.

00:01:45.770 --> 00:01:50.450
А после оператор назначения после
которого стоит новый ImageView.

00:01:50.450 --> 00:01:53.830
Это пишется точно также как
и <i>object data type</i> здесь.

00:01:53.830 --> 00:01:57.320
Поскольку мы вызываем конструктор
и должны дать исходные,

00:01:57.320 --> 00:02:00.620
тут стоят скобки в которые
мы ставим исходные.

00:02:00.620 --> 00:02:03.420
Вот третий пример в котором
создается кнопка и

00:02:03.420 --> 00:02:05.700
сохраняется в той переменной.

00:02:05.700 --> 00:02:08.479
Тип данных - Button, 
переменная - <i>submitOrderButton</i>,

00:02:08.479 --> 00:02:11.950
а потом мы указываем <i>new Button</i> 
чтобы вызвать конструктор.

00:02:13.140 --> 00:02:15.850
Вы можете даже прописать свой
собственный объект данных.

00:02:15.850 --> 00:02:19.820
Например я создала определение
для класса <i>CatView</i>.

00:02:19.820 --> 00:02:22.820
И теперь могу использовать эту строку
чтобы создать новый <i>СatView</i>.

00:02:22.820 --> 00:02:25.380
В этом случае конструктору
нужна исходная строка для

00:02:25.380 --> 00:02:29.180
имени кота и поэтому я написала
Tiger в скобках и

00:02:29.180 --> 00:02:32.280
переала это в конструктор <i>CatView</i>.

00:02:32.280 --> 00:02:35.690
Чтобы понять что надо конструктору
в качестве исходного надо

00:02:35.690 --> 00:02:41.450
вам надо посмотреть на класс в файле
Javadoc или исходном файле.

00:02:41.450 --> 00:02:45.680
Во всех этих случаях использвание
слова <i>new</i> создает новый объект.

00:02:45.680 --> 00:02:47.730
Если мы вернемся к списку
ключевых слов Java,

00:02:47.730 --> 00:02:51.040
то действительно найдем
в нем слово <i>new</i>.

00:02:52.190 --> 00:02:54.710
Иногда при просмотре документации

00:02:54.710 --> 00:02:58.820
можно принять совет использовать
встроенный алгоритм создания обекта.

00:02:58.820 --> 00:03:01.510
Вместо конструктора.

00:03:01.510 --> 00:03:02.710
Вот пример.

00:03:02.710 --> 00:03:04.290
Чтобы создать новый <i>MediaPlayer</i>,

00:03:04.290 --> 00:03:09.040
справочник советует использовать
алгоритм <i>MediaPlayer.create</i>.

00:03:09.040 --> 00:03:13.250
И это создает объект MediaPlayer,
он хранится в этой переменной.

00:03:13.250 --> 00:03:17.176
Он следует формату объектных даных,
<i>MediaPlayerс</i> заглавной М,

00:03:17.176 --> 00:03:22.720
точка и название встроенного алгоритма,
в этом случае - <i>create</i>.

00:03:22.720 --> 00:03:26.110
После используете исходные аргументы
чтобы инициализировать media player.

00:03:27.390 --> 00:03:29.710
Во еще пример как создать Toast.

00:03:30.900 --> 00:03:33.700
Это сообщение которое появляется
на время в вашем приложении

00:03:33.700 --> 00:03:34.389
и пропадает.

00:03:35.420 --> 00:03:38.540
Код начинается с Toast с
заглавным Т потому что это

00:03:38.540 --> 00:03:39.800
данные объектного типа.

00:03:39.800 --> 00:03:44.050
Потом идет точка а затем <i>makeText</i> -
название встроенного алгоритма.

00:03:44.050 --> 00:03:48.730
А потом м передаем исходные
аргументы чтобы создать этот Toast.

00:03:48.730 --> 00:03:51.800
Чтобы узнать название встроенного
алгоритма и его исходные аргументы

00:03:51.800 --> 00:03:55.280
надо посмотреть справочник
для класса Toast.

00:03:55.280 --> 00:03:58.440
В общем чтобы поять следует
создавать объект при помощи

00:03:58.440 --> 00:04:01.780
конструктора или встроенного
алгоритма надо поискать в Google

00:04:01.780 --> 00:04:03.640
способы создания этого объекта.

00:04:03.640 --> 00:04:06.940
Чаще всего для этого
используется конструктор.

00:04:06.940 --> 00:04:10.180
Использовать встроенный алгоритм
необычно , но чтобы знать наверняка

00:04:10.180 --> 00:04:12.690
что использовать, просто
найдите в Google

00:04:12.690 --> 00:04:13.820
способы создания объекта.

00:04:15.000 --> 00:04:18.180
Вот шанс потренироваться
в создании объектов.

00:04:18.180 --> 00:04:20.050
В каждой из этих строк кода
есть ошибка.

00:04:21.160 --> 00:04:22.380
Найдите ее и напишите

00:04:22.380 --> 00:04:24.770
правильную строку кода в этих рамках.

