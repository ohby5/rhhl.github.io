WEBVTT
Kind: captions
Language: ko

00:00:00.940 --> 00:00:04.070
우선 calculatePrice 메소드 서명을
수정할 거예요.

00:00:04.070 --> 00:00:06.480
리턴 데이터 유형을 수정하기 위해서죠.

00:00:06.480 --> 00:00:08.640
그리고 입력 파라미터가 0개라고
가정할 거예요.

00:00:09.850 --> 00:00:12.840
calculatePrice 메소드는
여기서 정의됩니다.

00:00:12.840 --> 00:00:15.930
이 메소드의 목적은 주문 가격 
합계를 계산하여

00:00:15.930 --> 00:00:18.160
리턴값으로 내놓는 겁니다.

00:00:18.160 --> 00:00:19.660
가격은 정수형이어야 하니까

00:00:19.660 --> 00:00:22.670
리턴 데이터 유형을 void에서
int로 바꿔야 겠죠.

00:00:23.730 --> 00:00:25.800
그러면 첫번째 과제는 해결됩니다.

00:00:25.800 --> 00:00:29.130
과제에서는 입력 파라미터를 
0개로 하라고 했었죠.

00:00:29.130 --> 00:00:29.930
그 부분도 해결했습니다.

00:00:31.020 --> 00:00:34.150
두 번째 과제는 
메소드 내부를 수정하여

00:00:34.150 --> 00:00:36.798
주문 가격을 올바로 계산하도록
만들라는 것이었는데요.

00:00:36.798 --> 00:00:39.220
커피 한 잔은 5달러로 가정하고 말이죠.

00:00:40.770 --> 00:00:43.880
메소드 내부에서는 
주문한 커피의 잔 수를 받아들여.

00:00:43.880 --> 00:00:46.460
한 잔 당 가격인 5달러를
거기에 곱합니다.

00:00:47.700 --> 00:00:49.860
그렇게 하면 가격 합계가 나오겠죠.

00:00:49.860 --> 00:00:51.100
이렇게 코드를 분석해 보았습니다.

00:00:52.250 --> 00:00:56.920
하지만 두 가지 문제가 보이네요.
'price'라는 변수가 사용되지 않았다,

00:00:56.920 --> 00:00:59.490
그리고 리턴 문이 보이지 않는다는
오류 메세지가 뜹니다.

00:00:59.490 --> 00:01:03.470
여기를 보면 정수값을 리턴해야 하는데
실제로는 아무 것도 리턴하고 있지 않네요.

00:01:03.470 --> 00:01:07.120
지금 우리가 보는 코드는 
이미 말씀드린 그대로입니다.

00:01:07.120 --> 00:01:12.060
한 줄이 더 필요하겠네요. 리턴이라고
우선 정의한 후 리턴값을 입력해야 겠죠.

00:01:12.060 --> 00:01:13.950
리턴값은 물론 가격이 될 테고요.

00:01:13.950 --> 00:01:18.220
그래서 여기 'price'라고 입력합니다.
위에 정의한 대로 말이죠.

00:01:18.220 --> 00:01:20.760
좋아요. 이제 오류는 전부 수정했군요.

00:01:20.760 --> 00:01:22.650
자바 doc도 수정해야죠.

00:01:22.650 --> 00:01:27.060
가격 합계를 출력한다는 사실을
명시하도록 하기 위해서요.

00:01:27.060 --> 00:01:30.090
이렇게 하면 누가 이 메소드를 호출해도 
그 내용을 이해할 수 있게 됩니다.

00:01:31.600 --> 00:01:35.730
좋아요, 이제 이 메소드 정의 부분은
다 끝마쳤습니다.

00:01:35.730 --> 00:01:38.600
그럼 이제 메소드가 호출되는 부분으로
가보도록 하죠.

00:01:38.600 --> 00:01:41.939
submitOrder 메소드에서 
calculatePrice 메소드를 호출해야 합니다.

00:01:43.240 --> 00:01:46.120
현재로선 calculate price가 
목적지 없이 붕 떠있는 상태죠.

00:01:46.120 --> 00:01:49.130
이걸 복사한 후,
여기에 붙여넣겠습니다.

00:01:49.130 --> 00:01:52.830
이전에는 주문 가격 계산을
submit order 메소드 내에서 했지만

00:01:52.830 --> 00:01:55.500
지금은 계산용 메소드가 있으니까요.

00:01:55.500 --> 00:01:57.670
그래서 이걸 여기에 붙여녛겠습니다.

00:01:57.670 --> 00:01:59.910
남는 세미콜론은 지우고요.

00:01:59.910 --> 00:02:03.170
이제 보시다 시피 가격은 이 메소드
안의 로컬 변수이고

00:02:03.170 --> 00:02:04.910
여기서도 마찬가지입니다.

00:02:04.910 --> 00:02:06.520
이름은 같아도 상관 없어요.

00:02:06.520 --> 00:02:09.258
변수 영역이 다르기 때문이죠.

00:02:09.258 --> 00:02:13.100
여기 가격 변수는 
여기와는 전혀 무관합니다.

00:02:13.100 --> 00:02:16.300
업데이트 및 생성도 서로와 전혀
상관 없이 이루어지죠.

00:02:16.300 --> 00:02:19.750
메소드가 수행을 마치면
이 가격 변수는 사라집니다.

00:02:20.830 --> 00:02:23.230
submitOrder 메소드로 돌아왔어요.

00:02:23.230 --> 00:02:24.810
가격을 계산하고 변수 형태로

00:02:24.810 --> 00:02:29.680
저장했으니, 이제 이걸 사용해서
가격 메시지를 만들 수 있습니다.

00:02:30.820 --> 00:02:33.390
여기 코드 전부는 그냥 놔둬도 됩니다.

00:02:33.390 --> 00:02:34.800
정수값인 가격을 달러 기호를 써서

00:02:34.800 --> 00:02:39.490
'합계'라는 문자열에 연결할 거예요.

00:02:39.490 --> 00:02:43.680
그리고 "감사합니다!"까지 연결시켜
스크린에 출력하는 거죠.

00:02:43.680 --> 00:02:47.960
여분의 빈 라인을 제거하고
저장한 다음,

00:02:47.960 --> 00:02:49.410
기기에서 실행시켜 보죠.

00:02:50.660 --> 00:02:52.250
좋아요, 수량을 바꾸고 '주문'을 누르면

00:02:52.250 --> 00:02:55.700
정확히 25달러라고 가격이 표시되네요.

00:02:56.790 --> 00:02:57.825
대단해요. 제대로 만들었네요.

00:02:57.825 --> 00:03:00.864
하지만 실제로 calculatePrice이
제대로 작동하는 지 어떻게 알 수

00:03:00.864 --> 00:03:05.640
있을 까요. 사용자 입장에선 이전에
비해 딱히 달라진 게 안 보이는데 말이죠.

00:03:05.640 --> 00:03:09.524
여러분이 만든 코드가 
제대로 작동하는지 검증할 수 있는

00:03:09.524 --> 00:03:10.644
몇 가지 방법이 있습니다.

00:03:10.644 --> 00:03:14.420
700 같이 말도 안되는 수치를
리턴값으로 설정해 볼 수 있어요.

00:03:14.420 --> 00:03:16.972
코드 저장 후 실행시킵니다.

00:03:16.972 --> 00:03:20.671
이제 확인해 보죠.
수량을 바꿔서 입력한 후

00:03:20.671 --> 00:03:25.226
주문 버튼을 누르면, 가격이
700달러로 나오는 걸 볼 수 있네요.

00:03:25.226 --> 00:03:29.190
메소드가 올바로 호출되고 있는지를 
이렇게 확인할 수 있습니다.

00:03:30.250 --> 00:03:31.610
제대로 호출되고 있네요. 좋아요.

00:03:32.910 --> 00:03:35.040
이제 바꿨던 내용을 되돌릴께요.

00:03:35.040 --> 00:03:38.120
이 메소드가 제대로 수행중인지
확인할 수 있는 또 한 가지 방법은

00:03:38.120 --> 00:03:39.220
이 부분에서 중단점을 설정하는 거죠.

00:03:40.230 --> 00:03:43.390
여기 작은 버그 아이콘을 클릭해서

00:03:43.390 --> 00:03:45.040
디버그 모드로 들어가 보겠습니다.

00:03:46.370 --> 00:03:47.530
이제 수량을 바꿔서 주문을 클릭하면

00:03:47.530 --> 00:03:51.250
앱이 이 지점에서 멈출 거예요.

00:03:53.140 --> 00:03:54.580
그렇게 되었네요.

00:03:54.580 --> 00:03:57.460
이제 calculate price 메소드에
들어왔습니다.

00:03:57.460 --> 00:04:00.100
글로벌 변수인 수량이 있고요.

00:04:00.100 --> 00:04:05.340
다음 라인으로 넘어가면 
가격이라는 로컬 변수가 보이네요.

00:04:05.340 --> 00:04:12.670
수량이 3이므로 3 곱하기 5는 15,
따라서 15 달러로 맞춰졌네요. 좋아요.

00:04:12.670 --> 00:04:15.777
calculated price 메소드는 
이렇게 작동하여

00:04:15.777 --> 00:04:18.834
'계속'버튼을 누르면
스크린 상에 제대로 업데이트합니다.

