WEBVTT
Kind: captions
Language: ru

00:00:00.640 --> 00:00:04.200
Чтобы понять, почему опция С 
была лучшей в прошлом тесте, давайте

00:00:04.200 --> 00:00:08.420
повторим актуальные синтаксические 
правила для определения метода в Java.

00:00:08.420 --> 00:00:10.820
Они также известны как сигнатура метода.

00:00:12.090 --> 00:00:13.460
Эот сигнатура метода для расчета

00:00:13.460 --> 00:00:16.239
цены <i>calculateРrice</i>, который 
мы видели ранее.

00:00:16.239 --> 00:00:20.100
Вы могли задаваться вопросом, почему 
слова расположены в определенном порядке.

00:00:20.100 --> 00:00:24.470
Они следуют особому формату и 
выглядит это примерно вот так.

00:00:24.470 --> 00:00:27.050
Я знаю, что это выглядит 
пугающе, но не переживайте.

00:00:27.050 --> 00:00:29.040
Мы разберемся с каждым сегментом 
по очереди.

00:00:30.550 --> 00:00:34.250
первая часть этой сигнатуры 
метода - слово <i>private</i>.

00:00:34.250 --> 00:00:36.400
Оно известно как Java модификатор доступа.

00:00:37.410 --> 00:00:41.400
Он определяет у кого есть доступ к 
данному методу <i>calculatePrice</i>. Самые

00:00:41.400 --> 00:00:46.290
распространенные модификаторы доступа, 
которые вам встретятся, это <i>public</i>

00:00:46.290 --> 00:00:51.010
или <i>private</i>. Этот метод помечен как 
<i>private</i>, что значит <i>calculatePrice</i>

00:00:51.010 --> 00:00:55.590
можно вызвать только в рамках других 
методов основной активности.

00:00:55.590 --> 00:00:56.830
За рамками основной активности,

00:00:56.830 --> 00:01:00.750
например, других активностях, вы 
сможете вызвать данный метод.

00:01:00.750 --> 00:01:03.340
Он является закрытым для 
основной активности.

00:01:03.340 --> 00:01:04.180
С другой стороны,

00:01:04.180 --> 00:01:09.100
если пометить это как открытый метод, 
тогда любой может вызвать этот метод,

00:01:09.100 --> 00:01:12.560
будете ли вы в основной активности 
или в других активностях.

00:01:13.710 --> 00:01:15.120
Вот примерно такая аналогия:

00:01:15.120 --> 00:01:18.530
если ты звезда и публичная личность, 
все все о тебе знают.

00:01:18.530 --> 00:01:19.730
Если вы закрытый человек и все

00:01:19.730 --> 00:01:24.420
время проводите дома, вас знают 
лишь несколько человек.

00:01:24.420 --> 00:01:27.930
В случае метода <i>calculateРrice</i>,
мы оставим его закрытым,

00:01:27.930 --> 00:01:30.440
он используется только в рамках 
основной активности.

00:01:30.440 --> 00:01:33.770
Далее у нас идет <i>int</i>, что является
типом возвращаемых данных.

00:01:33.770 --> 00:01:35.560
Помните диаграмму, 
которая была до этого?

00:01:35.560 --> 00:01:38.360
Где мы говорили, что когда вызываешь 
метод, вводишь его входные

00:01:38.360 --> 00:01:39.910
значения, ты получаешь назад выходные?

00:01:39.910 --> 00:01:44.140
Тип возвращаемых данных это такой тип 
данных, которые возвращаются с выходными

00:01:44.140 --> 00:01:48.020
значениями. А типы данных, которые мы 
пока что выучили, это <i>Int</i> и

00:01:48.020 --> 00:01:49.730
строка из прошлого урока.

00:01:49.730 --> 00:01:52.410
Это также может возвращать 
тип данных объекта, и мы

00:01:52.410 --> 00:01:54.449
узнаем больше об объектах позже на уроке.

00:01:55.700 --> 00:01:58.150
В нашем случае этот метод <i>calculatePrice</i>

00:01:58.150 --> 00:02:02.030
возвращает общую сумму заказа, которая 
является целым числом.

00:02:02.030 --> 00:02:06.540
В приложениях соцсетей, если бы у меня 
был метод получить количество друзей

00:02:06.540 --> 00:02:11.130
на Facebook, он ог вернуть мне целое 
число, что было бы количеством друзей.

00:02:11.130 --> 00:02:15.390
Далее идет название метода, что в нашем
случаес <i>calculatePrice</i>.

00:02:15.390 --> 00:02:19.730
Так же, как мы ссылаемся на переменные по 
их названию, мы ссылаемся на методы

00:02:19.730 --> 00:02:23.790
по их названию, чтобы мы могли выполнить 
инструкции данного метода.

00:02:23.790 --> 00:02:28.120
В той же документации об определении 
метода мы можем спуститься вниз

00:02:28.120 --> 00:02:30.690
и увидеть раздел о присвоении имен
методам.

00:02:30.690 --> 00:02:34.450
Вы можете почитать об этом подробнее 
позже, но в общем тут говорится, что

00:02:34.450 --> 00:02:39.030
названия методов должны начинаться с 
глагола <i>run</i>, <i>get</i>, или <i>compare</i>, или <i>set</i>.

00:02:39.030 --> 00:02:40.880
Оно начинается со строчной буквы, 
потом можно

00:02:40.880 --> 00:02:43.360
использовать заглавные буквы, 
если в названии много слов.

00:02:43.360 --> 00:02:46.400
После названия метода у нас список 
входных значений,

00:02:46.400 --> 00:02:50.350
которые отмечаются окрывающими и 
закрывающими круглыми скобками.

00:02:50.350 --> 00:02:52.670
Вы можете иметь столько входных 
значений, сколько хотите.

00:02:52.670 --> 00:02:57.010
Если вы не хотите никаких входных 
значений, просто оставьте незаполненную

00:02:57.010 --> 00:02:59.150
пару кавычек. При одном входном значении
вид такой.

00:02:59.150 --> 00:03:00.730
Если входных значений несколько, вы

00:03:00.730 --> 00:03:03.890
просто отделяете их запятыми между каждым 
входным значеним.

00:03:03.890 --> 00:03:07.110
Посмотрим на пример с одним 
входным значением, которое

00:03:07.110 --> 00:03:10.070
так же известно, как входной параметр.

00:03:10.070 --> 00:03:14.060
Мы определяем входной параметр, уточняя 
его тип данных и

00:03:14.060 --> 00:03:16.460
название переменной, которую 
мы для него выбрали.

00:03:16.460 --> 00:03:18.170
Из диаграммы входных и выходных значений

00:03:18.170 --> 00:03:22.370
это будет первое входное значение в метод.

00:03:23.560 --> 00:03:28.030
В этом методе вы можете ссылаться на 
переменную <i>quantity</i>,

00:03:28.030 --> 00:03:30.190
такую же, как и любая другая переменная,

00:03:30.190 --> 00:03:32.930
в которой уже есть значение внутри.

00:03:32.930 --> 00:03:36.990
Значение получается тогда, когда 
вы впервые вызываете метод и

00:03:36.990 --> 00:03:38.570
вводите данное входное значение.

00:03:40.030 --> 00:03:43.850
Если мы хотим изменить сигнатуру 
метода и добавить второй входной параметр,

00:03:43.850 --> 00:03:47.290
нам нужно уточнить тип данных 
и название переменной для

00:03:47.290 --> 00:03:48.980
того второго входного параметра.

00:03:48.980 --> 00:03:52.200
Тогда в рамках данного метода мы можем 
ссылаться на переменную <i>quantity</i>

00:03:52.200 --> 00:03:55.940
или <i>oneCupPrice</i>, 
как на обычную переменную.

00:03:55.940 --> 00:03:59.220
Когда вы вызываете этот метод, вы 
должны не забыть ввести

00:03:59.220 --> 00:04:02.790
верное число ожидаемых входных 
значений в метод, и входные значения

00:04:02.790 --> 00:04:06.980
должны быть верного типа данных 
и в правильном порядке.

00:04:06.980 --> 00:04:08.380
Нельзя менять порядок,

00:04:08.380 --> 00:04:11.650
иначе метод будет неверно их толковать.

00:04:11.650 --> 00:04:15.210
Как перечислите все входные значения, 
добавьте закрывающую круглую скобку,

00:04:15.210 --> 00:04:16.980
потом открывающую фигурную скобку.

00:04:16.980 --> 00:04:20.640
Это начнет список всех инструкций 
в рамках метода.

00:04:20.640 --> 00:04:21.660
После всего этого

00:04:21.660 --> 00:04:25.270
просто добавьте закрывающую скобку, 
обозначить конец метода.

00:04:25.270 --> 00:04:27.060
Возвращаясь назад к документации, видим,

00:04:27.060 --> 00:04:30.470
что теперь описание метода 
становиится более понятным.

00:04:30.470 --> 00:04:32.760
Сначала у нас модификатор дступа,

00:04:32.760 --> 00:04:35.120
потом тип возвращаемых данных,

00:04:35.120 --> 00:04:39.100
название метода, за которым следует 
перечень всех входных значений.

00:04:39.100 --> 00:04:42.760
В этом случае видим четыре разных 
входных параметра.

00:04:42.760 --> 00:04:46.260
У каждого из них есть тип данных
и назвние переменной.

00:04:46.260 --> 00:04:48.720
Потом у нас открывающая фигурная скобка,

00:04:48.720 --> 00:04:50.610
список всех инструкций внутри ее

00:04:50.610 --> 00:04:51.990
и затем закрывающая скобка.

00:04:53.100 --> 00:04:54.480
Вот это и есть описание метода.

00:04:55.640 --> 00:04:59.060
В этом тесте у вас будет возможность 
попрактиковаться в определении

00:04:59.060 --> 00:05:00.850
разных частей описания метода.

00:05:00.850 --> 00:05:04.120
Мы предоставим некий код к 
вашим записям с инструкциями.

00:05:04.120 --> 00:05:08.000
Код содержит ряд методов, которые 
могут появиться в любом приложении.

00:05:08.000 --> 00:05:11.010
Можете ли мне сказать, для каждого из 
них, какое название метода?

00:05:11.010 --> 00:05:12.800
Перечень входных параметров?

00:05:12.800 --> 00:05:14.010
И тип возвращаемых данных.

00:05:15.030 --> 00:05:16.130
Сделаем образец вместе.

00:05:17.910 --> 00:05:19.710
Вот метод-пример.

00:05:19.710 --> 00:05:23.520
Цель - создать специальное 
поздравительное сообщение, основанное

00:05:23.520 --> 00:05:27.270
на имени. Возвращаемым значением будет 
поздравление в виде текста.

00:05:27.270 --> 00:05:29.580
Пока проигнорируем комментарий.

00:05:29.580 --> 00:05:32.570
Сначала у нас название метода, 
оно в горбатом регистре,

00:05:32.570 --> 00:05:35.130
оно гласит <i>createCustonGreeting</i>.

00:05:35.130 --> 00:05:37.650
Затем у нас перечень входных значений.

00:05:37.650 --> 00:05:39.780
Вот первый входной параметр.

00:05:39.780 --> 00:05:42.490
Тип данных - строка, а название 
переменной - <i>firstName</i>.

00:05:43.520 --> 00:05:45.570
Потом второй входной параметр.

00:05:45.570 --> 00:05:48.390
Это тип данных и название переменной.

00:05:48.390 --> 00:05:51.580
И эти два входных значения 
разделены одной запятой и

00:05:51.580 --> 00:05:55.290
взяты в открывающие и закрывающие 
круглые скобки.

00:05:55.290 --> 00:05:57.350
Здесь у нас выхоные значения.

00:05:57.350 --> 00:06:00.605
Тип данных вовращаемого 
значения - строка,

00:06:00.605 --> 00:06:03.685
потому что мы хотим вернуть 
поздравление, а оно есть строка.

00:06:03.685 --> 00:06:07.365
А вот так выглядит заполненная таблица.

00:06:08.725 --> 00:06:11.245
Теперь заполняйте пробелы для 
оставшихся трех методов.

