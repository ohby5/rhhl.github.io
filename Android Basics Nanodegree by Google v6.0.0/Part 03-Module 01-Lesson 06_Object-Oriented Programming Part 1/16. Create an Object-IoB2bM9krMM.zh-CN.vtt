WEBVTT
Kind: captions
Language: zh-CN

00:00:00.520 --> 00:00:03.270
在上一个视频中讲到 构造函数

00:00:03.270 --> 00:00:07.910
是在类中定义的 它被用来创建对象实例

00:00:07.910 --> 00:00:10.610
我们调用 TextView 构造函数来创建这个实例

00:00:10.610 --> 00:00:14.220
然后再一次调用它创建实例 如此反复

00:00:14.220 --> 00:00:17.190
我们来看看代码 实际是怎么调用构造函数的

00:00:18.250 --> 00:00:22.280
你还记得如何创建一个新的叫作 quantity 的整型变量

00:00:22.280 --> 00:00:24.960
并且把它初始化为 2 吗？

00:00:24.960 --> 00:00:26.340
创建一个新的对象 并且

00:00:26.340 --> 00:00:29.120
把它存放在一个变量中 用相似的格式

00:00:30.200 --> 00:00:32.200
看起来是这样的

00:00:32.200 --> 00:00:36.150
我们用的是对象数据类型而不是整型数据类型

00:00:36.150 --> 00:00:38.770
对象数据类型就是我们所谓的类名称

00:00:38.770 --> 00:00:41.650
在这个例子中 类型就是 TextView

00:00:41.650 --> 00:00:45.700
只要它遵循变量名称规范 可以是任何东西

00:00:45.700 --> 00:00:47.720
所以我们叫它 priceTextView

00:00:47.720 --> 00:00:49.600
然后我们把它设置为等于新对象

00:00:49.600 --> 00:00:51.740
我们可以进一步分解右边

00:00:52.800 --> 00:00:58.060
右边遵循 new + 对象数据类型的格式

00:00:58.060 --> 00:01:00.190
在这个例子中是 TextView

00:01:00.190 --> 00:01:03.510
这里调用的是 TextView 类中定义的构造函数 所以

00:01:03.510 --> 00:01:07.940
这里有一对括号 括号中的参数是带入构造函数中的

00:01:07.940 --> 00:01:10.790
如果构造函数需要一个语境对象

00:01:10.790 --> 00:01:13.490
那么我们需要传入一个语境

00:01:13.490 --> 00:01:18.120
记住语境对象帮助你获取应用资源以及

00:01:18.120 --> 00:01:19.870
其他的关于应用环境的东西

00:01:20.940 --> 00:01:24.140
总而言之 创建了一个新的 TextView 对象

00:01:24.140 --> 00:01:26.060
通过调用构造函数

00:01:26.060 --> 00:01:31.200
并且把这个新的对象存放在一个叫作 priceTextView 的变量中

00:01:31.200 --> 00:01:34.830
这个变量只能控制一个 TextView 对象

00:01:34.830 --> 00:01:36.080
就像它的数据类型定义的一样

00:01:37.210 --> 00:01:39.850
另一个例子是创建 ImageView 对象

00:01:39.850 --> 00:01:41.840
并把它存放在一个变量中

00:01:41.840 --> 00:01:45.770
数据类型是 ImageView 变量名称是 coffeeImageView

00:01:45.770 --> 00:01:50.450
然后赋值运算符后面是 new+ ImageView

00:01:50.450 --> 00:01:53.830
它和这里的对象的数据类型的拼写是一样的

00:01:53.830 --> 00:01:57.320
因为我们调用了构造函数 所以我们要输入所需的所有参数

00:01:57.320 --> 00:02:00.620
有括号 并且把输入参数写在这里

00:02:00.620 --> 00:02:03.420
第三个例子是创建一个按钮对象

00:02:03.420 --> 00:02:05.700
并把它存放在变量中

00:02:05.700 --> 00:02:08.479
数据类型是 Button 变量名称是 submitOrderButton

00:02:08.479 --> 00:02:11.950
然后假设新的 Button 调用构造函数

00:02:13.140 --> 00:02:15.850
你甚至可以定义你自己的对象数据类型

00:02:15.850 --> 00:02:19.820
例如 我为 CatView 创建一个类定义

00:02:19.820 --> 00:02:22.820
然后我可以用这行代码创建一个新的 CatView

00:02:22.820 --> 00:02:25.380
这时 构造函数需要一个输入字符串

00:02:25.380 --> 00:02:29.180
作为猫的名称 这就是我为什么在括号中输入 Tiger 的原因

00:02:29.180 --> 00:02:32.280
并且把它传给 CatView 的构造函数

00:02:32.280 --> 00:02:35.690
为了确定这些构造函数的输入参数

00:02:35.690 --> 00:02:41.450
你不得不查看 类 Java文档文件 或者类源文件

00:02:41.450 --> 00:02:45.680
这些例子中都使用 new 来创建新的对象

00:02:45.680 --> 00:02:47.730
如果我们回到 Java 关键词列表

00:02:47.730 --> 00:02:51.040
我们可以发现 new 确实在列表之中

00:02:52.190 --> 00:02:54.710
有时当你看文件的时候

00:02:54.710 --> 00:02:58.820
它可能会建议你用 工厂方法模式来创建对象

00:02:58.820 --> 00:03:01.510
而不是用构造函数

00:03:01.510 --> 00:03:02.710
这是一个例子

00:03:02.710 --> 00:03:04.290
为了创建新的 MediaPlayer

00:03:04.290 --> 00:03:09.040
文档中建议你使用 MediaPlayer.create 方法

00:03:09.040 --> 00:03:13.250
这可以返回一个 MediaPlayer 对象 并且存放在这个变量中

00:03:13.250 --> 00:03:17.176
它遵循对象数据类型的格式 首字母 M 大写的 MediaPlayer

00:03:17.176 --> 00:03:22.720
加一个点 工厂方法名称 在这里就是 create

00:03:22.720 --> 00:03:26.110
然后传入输入参数来初始化播放器

00:03:27.390 --> 00:03:29.710
另一个例子是创建 Toast

00:03:30.900 --> 00:03:33.700
一个 toast 是一条即时从应用弹出

00:03:33.700 --> 00:03:34.389
然后消失的信息

00:03:35.420 --> 00:03:38.540
代码 Toast 开头 大写 T

00:03:38.540 --> 00:03:39.800
这是对象数据类型

00:03:39.800 --> 00:03:44.050
然后是一个点 然后是 makeText 它是一个 工厂方法名称

00:03:44.050 --> 00:03:48.730
然后我们传入输入参数来创建 Toast

00:03:48.730 --> 00:03:51.800
为了了解工厂方法名称 和输入参数是什么

00:03:51.800 --> 00:03:55.280
你需要查看 Toast 类的文档

00:03:55.280 --> 00:03:58.440
通常来说 想知道是用构造函数创建对象

00:03:58.440 --> 00:04:01.780
还是用工厂方法创建对象 你可以在 Google 中搜索

00:04:01.780 --> 00:04:03.640
如何创建那个对象

00:04:03.640 --> 00:04:06.940
使用构造函数创建对象是最常用的方式

00:04:06.940 --> 00:04:10.180
使用工厂方法比较少见

00:04:10.180 --> 00:04:12.690
至于你应该用哪个创建方式 你可以在 Google 中搜索

00:04:12.690 --> 00:04:13.820
如何创建那个对象

00:04:15.000 --> 00:04:18.180
这里有一个创建对象的练习机会

00:04:18.180 --> 00:04:20.050
在每行代码中有一个错误

00:04:21.160 --> 00:04:22.380
指出错误是什么

00:04:22.380 --> 00:04:24.770
并且在下面的方框中写出正确的代码

