WEBVTT
Kind: captions
Language: pt-BR

00:00:00.600 --> 00:00:02.790
Nós já fizemos um parâmetro
de entrada juntos.

00:00:02.790 --> 00:00:04.999
Este era o código para o método
calculatePrice,

00:00:04.999 --> 00:00:07.110
já incluído nas notas do instrutor.

00:00:07.110 --> 00:00:09.770
Agora, vamos fazer o caso
de dois parâmetros de entrada.

00:00:09.770 --> 00:00:14.970
No método submitOrder, queremos
chamar o calculatePrice(quantity,10).

00:00:14.970 --> 00:00:18.550
Onde 10 representa
US $ 10 por xícara de café.

00:00:18.550 --> 00:00:20.850
Então, primeiro faremos essa alteração.

00:00:20.850 --> 00:00:26.214
No método submitOrder chamarei
o calculatePrice(quantity,10).

00:00:26.214 --> 00:00:29.610
Estou passando dois argumentos
para este método.

00:00:29.610 --> 00:00:33.530
Há um erro porque não coincide
com a assinatura do método aqui.

00:00:33.530 --> 00:00:35.420
E vou atualizar isso.

00:00:35.420 --> 00:00:38.580
Dentro dos parênteses
vou adicionar uma vírgula.

00:00:38.580 --> 00:00:41.520
E, em seguida, digitar int price,

00:00:41.520 --> 00:00:47.040
porque passamos preço como
a segunda entrada, e ele é um inteiro.

00:00:47.040 --> 00:00:50.970
Imediatamente ele diz que há um erro,
porque não coincide

00:00:50.970 --> 00:00:54.140
com a assinatura desse método,
que só tem um parâmetro de entrada.

00:00:54.140 --> 00:00:57.200
Eu vou alterá-lo para que receba
um segundo parâmetro de entrada.

00:00:57.200 --> 00:00:59.280
Então, dentro do abre e fecha parênteses,

00:00:59.280 --> 00:01:02.150
eu vou adicionar um segundo parâmetro.

00:01:02.150 --> 00:01:04.550
Uma vez que esse é o preço
por xícara de café,

00:01:04.550 --> 00:01:06.680
eu vou chamá-lo de price per cup

00:01:06.680 --> 00:01:10.610
E é um número, então digo que
o tipo de dado é int.

00:01:11.010 --> 00:01:13.700
Você pode nomear o tipo
de parâmetro como quiser.

00:01:13.700 --> 00:01:16.850
Ele deve ser descritivo
às informações que mantém.

00:01:16.850 --> 00:01:20.530
Enquanto que o tipo de dado precisa
ser um tipo específico do Java.

00:01:20.530 --> 00:01:24.410
Tipo, int, string e outros
que nós ainda não aprendemos.

00:01:25.140 --> 00:01:29.640
Eu também atualizei o javadoc para descrever
este segundo parâmetro de entrada.

00:01:29.640 --> 00:01:33.020
Este método está pegando a quantidade

00:01:33.020 --> 00:01:36.630
e multiplicando-a por 5
para US $ 5, por uma xícara de café.

00:01:36.630 --> 00:01:40.130
Mas agora o preço por copo mudou
para uma variável.

00:01:40.130 --> 00:01:43.660
Então, vamos usar o preço por xícara
em vez do valor fixo de 5.

00:01:44.310 --> 00:01:48.940
Agora, o preço total do pedido será,
quantidade x preço por xícara.

00:01:49.160 --> 00:01:52.140
Se você lembrar da analogia
de modelo que eu falei antes,

00:01:52.140 --> 00:01:56.280
agora, quantidade e preço por xícara
são permutáveis para valores diferentes

00:01:56.280 --> 00:01:58.879
por que eles são parâmetros de entrada.

00:01:58.879 --> 00:02:01.860
Você pode chamar o calculatePrice
com uma quantidade diferente

00:02:01.860 --> 00:02:05.990
e um preço por xícara diferente
e esse cálculo ainda funcionaria.

00:02:05.990 --> 00:02:08.840
Agora, vamos testar quando não houver
parâmetros de entrada.

00:02:08.840 --> 00:02:10.190
No método submitOrder,

00:02:10.190 --> 00:02:13.630
devemos chamar o calculatePrice,
com parênteses vazio.

00:02:14.250 --> 00:02:17.200
No método submitOrder,
quando eu chamo o calculatePrice,

00:02:17.200 --> 00:02:19.269
vou remover os argumentos.

00:02:19.520 --> 00:02:22.730
Agora, não passaremos nenhuma
entrada para este método.

00:02:22.730 --> 00:02:25.450
Aparece um sublinhado vermelho,
pois há uma incompatibilidade

00:02:25.450 --> 00:02:30.250
com a assinatura dos métodos,
então, apagarei os parâmetros de entrada.

00:02:30.900 --> 00:02:34.380
Ele também reclama de um erro,
pois esses parâmetros não existem,

00:02:34.380 --> 00:02:36.480
então, eu posso apagá-los.

00:02:37.270 --> 00:02:41.160
Agora, um erro dizendo que não pode
resolver o símbolo preço por xícara.

00:02:41.340 --> 00:02:44.630
Ele não é mais uma variável de entrada,
então precisamos voltar

00:02:44.630 --> 00:02:49.400
ao valor de preço não codificado de $5,
ou escolher qualquer outro preço.

00:02:49.950 --> 00:02:54.420
O computador não se queixa da quantidade,
porque ela é uma variável global,

00:02:54.420 --> 00:02:58.640
e você pode referenciá-la a partir
de qualquer método na atividade principal.

00:02:58.640 --> 00:03:01.380
Desculpe, eu devia ter escolhido
um nome diferente de quantity

00:03:01.380 --> 00:03:04.030
para o parâmetro de entrada,
mas você sacou a ideia.

00:03:04.030 --> 00:03:05.950
Sem quaisquer parâmetros de entrada,

00:03:05.950 --> 00:03:08.120
você só pode se referenciar
variáveis globais.

00:03:08.120 --> 00:03:11.980
Você pode usar valores não codificados,
ou, se você criar variáveis locais aqui,

00:03:11.980 --> 00:03:13.515
pode referenciá-las.

