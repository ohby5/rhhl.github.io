WEBVTT
Kind: captions
Language: ru

00:00:00.430 --> 00:00:02.969
Вернемся к основным фунциям
вашего приложения Just Java.

00:00:02.969 --> 00:00:06.190
В частности, мы рассматривали дисплейное
сообщение метода и

00:00:06.190 --> 00:00:08.570
пытались разобраться с тем,
что тут происходит.

00:00:08.570 --> 00:00:13.870
Хотя метод <i>findViewById</i> и не описан
для этого класса, мы теперь знаем,

00:00:13.870 --> 00:00:18.740
что он фактически определен в суперклассе
в <i>AppCompatActivity</i>.

00:00:18.740 --> 00:00:20.440
Это верно и для <i>setContentView</i>.

00:00:20.440 --> 00:00:23.820
Он определяется в рамках
класса <i>AppCompatActivity</i>.

00:00:23.820 --> 00:00:26.710
Но что конкретно происходит в
данном методе, и зачем

00:00:26.710 --> 00:00:29.300
нам нужно вводить идентификатор ресурса?

00:00:29.300 --> 00:00:31.930
Почему у нас тут дополнительные скобки?

00:00:31.930 --> 00:00:34.410
Чтобы дать ответ, я подытожу
все изученное на данный момент,

00:00:34.410 --> 00:00:37.720
и подведу вас к объяснению того,
почему здесь находится этот код.

00:00:38.870 --> 00:00:40.350
Помните эту диаграмму?

00:00:40.350 --> 00:00:44.910
Если нажать на иконку приложения на
устройстве, открывается основная функция.

00:00:44.910 --> 00:00:48.650
В нашем коде методу <i>onCreate</i> основной
функции название присваивается

00:00:48.650 --> 00:00:49.770
системой.

00:00:49.770 --> 00:00:53.220
В рамках этого метода у нас есть
метод, которым вызывается <i>setContentView</i>

00:00:53.220 --> 00:00:55.340
с макетом идентификатора ресурса.
В предыдущем

00:00:55.340 --> 00:00:59.710
упражнении мы вводили один <i>TextView</i>
для <i>setContentView</i>.

00:00:59.710 --> 00:01:01.950
Но мы хотим больше
одного элемента для нашего приложения.

00:01:01.950 --> 00:01:04.650
Поэтому мы вводим макет
идентификатора ресурса.

00:01:04.650 --> 00:01:06.980
Он привязывается к XML-файлу.

00:01:06.980 --> 00:01:09.560
Как только мы настроили просмотр
содержимого, функция находитфайл

00:01:09.560 --> 00:01:13.200
макета XML, и считывает каждую строку.

00:01:13.200 --> 00:01:18.140
Для каждого просмотра он раздувает (или же
создает) своей объект Java.

00:01:18.140 --> 00:01:19.860
Он проходит через весь XML файл, а затем

00:01:19.860 --> 00:01:23.040
строит полную иерархию объектов Java.

00:01:23.040 --> 00:01:27.090
Во время создания каждого из элементов,
он вызывает конструктор

00:01:27.090 --> 00:01:31.600
<i>NewTextView</i> или <i>NewLinearLayout</i>,а затем
передает все данные атрибуты

00:01:31.600 --> 00:01:34.760
в объект Java для соответствующей
настройки.

00:01:34.760 --> 00:01:38.700
Заметьте, что нам не нужно писать код
для <i>NewTextView</i> или <i>NewLinearLayout</i>, и

00:01:38.700 --> 00:01:40.650
устанавливать размер шрифта.

00:01:40.650 --> 00:01:44.540
Все это проделал метод раздувания данной
функции. Для взаимодействия

00:01:44.540 --> 00:01:48.290
с этими элементами во время работы
приложения, и для их изменения,

00:01:48.290 --> 00:01:49.830
например, чтобы изменить текст или

00:01:49.830 --> 00:01:54.480
кнопки, нам нужно найти эти объекты Java.

00:01:54.480 --> 00:01:58.560
Найдя их, мы можем хранить их как
переменные в основной функции.

00:01:58.560 --> 00:02:01.360
Помните, мы не создаем новые <i>TextViews</i>
с нуля, мы просто находим

00:02:01.360 --> 00:02:04.310
уже существующие в данной иерархии
просмотра. Это те переменные,

00:02:06.060 --> 00:02:08.639
которыми мы пока что пользовались
в основной функции.

00:02:08.639 --> 00:02:13.160
У нас есть переменная для <i>quantity</i>
(количества), <i>price</i> (цены) и <i>priceMessage</i>.

00:02:13.160 --> 00:02:15.830
Это комбинация локальных и
гобальных переменных.

00:02:15.830 --> 00:02:19.520
Для взаимодействия просмотров в
иерархии, нужно создать переменные,

00:02:19.520 --> 00:02:21.149
которые ссылаются на
эти конкетные

00:02:22.500 --> 00:02:25.765
элементы. Например, можно создать
переменную под названием <i>quantity</i>

00:02:25.765 --> 00:02:28.580
<i>TextView</i>, которая бы ссылалась на вот
этот <i>TextView</i> здесь.

00:02:28.580 --> 00:02:31.340
Если нажать на кнопку плюс или минус в UI,

00:02:31.340 --> 00:02:34.340
можно изменить текст <i>TextView</i>, чтобы
показать другой номер.

00:02:36.220 --> 00:02:39.340
Можно также сделать переменную
<i>orderSummaryTextView</i>,

00:02:39.340 --> 00:02:41.730
которая бы указывала на этот <i>TextView</i>.

00:02:41.730 --> 00:02:44.590
И если нажать на кнопку "Заказ", то
<i>orderSummaryTextView</i>

00:02:44.590 --> 00:02:47.660
изменится и текст отобразит новое
содержание заказа.

00:02:47.660 --> 00:02:51.680
Таким образом, наличие переменных,
указывющих на некоторые из этих элементов

00:02:51.680 --> 00:02:55.440
будут полезны для изменения UI
во время работы приложения.

00:02:55.440 --> 00:02:59.430
Но как прописать связи между этой
переменной тут

00:02:59.430 --> 00:03:00.790
с этим <i>TextView</i>?

00:03:00.790 --> 00:03:03.780
И как прописать связь между
<i>orderSummaryTextView</i> тут

00:03:03.780 --> 00:03:04.495
и этим <i>TextView</i>?

00:03:06.250 --> 00:03:08.139
Вернемся к XML файлу,

00:03:08.139 --> 00:03:11.699
помните, как мы назначали <i>view ID</i>
определенным элементам? Для данного

00:03:12.953 --> 00:03:17.400
<i>TextView</i>, мы назначили идентификатор
<i>quantity_text_view</i>.

00:03:17.400 --> 00:03:21.340
Для этого просмотра мы присвоили ID
<i>order_summary_text_view</i>.

00:03:21.340 --> 00:03:24.240
Назначать идентификаторы элементам
необязательно и

00:03:24.240 --> 00:03:28.760
назначать их стоит только тогда, когда вам
нужно ссылаться на этотэлемент позже.

00:03:28.760 --> 00:03:33.180
Например, можно назначить идентификаторы
для всего, но это не нужно.

00:03:33.180 --> 00:03:37.470
Обращаться к этим двум элементам нам
нужно будет только в Java коде чуть позже.

00:03:37.470 --> 00:03:39.860
Так что давайте присвоим ID этим
двум элементам.

00:03:40.880 --> 00:03:43.900
Ладно, мы выяснили, что эти элементы
имеют свой <i>view ID</i>, чтобы

00:03:43.900 --> 00:03:46.700
мы могли ссылаться на них позже в
Java коде.

00:03:46.700 --> 00:03:51.350
Мы также выяснили, что нам нужны
переменные, указывающие на эти элементы,

00:03:51.350 --> 00:03:53.740
чтобы мы могли оперировать этими
элементами.

00:03:53.740 --> 00:03:57.680
Но мы все еще пока не знаем, как создать
связь между

00:03:57.680 --> 00:04:01.160
этой переменной и специфическим
объектом Java.

00:04:01.160 --> 00:04:04.700
То же касается этой переменной и этого
Java объекта.

00:04:04.700 --> 00:04:08.820
Я хочу показать вам конкретный
метод в классе <i>AppCompatActivity</i>.

00:04:08.820 --> 00:04:12.560
Он называется <i>findViewById</i>, и принимает
идентификатор ресурса как входное

00:04:13.810 --> 00:04:16.290
значение. Метод <i>findViewById</i> находит
элемент,

00:04:16.290 --> 00:04:21.220
соответствующий ID того, который
введен в качестве входного значения.

00:04:21.220 --> 00:04:23.790
А функция ищет новый элемент в иерархии

00:04:23.790 --> 00:04:28.890
элементов из XML файла, обработанного
в методе <i>onCreate</i>.

00:04:28.890 --> 00:04:30.560
Таким образом, как я уже упоминала ранее,

00:04:30.560 --> 00:04:34.350
функция метода <i>onCreate</i> устанавливает
иерархию, и затем включается

00:04:34.350 --> 00:04:39.405
метод <i>findViewByID</i> и находит элемент
в рамках этой иерархии элементов.

00:04:39.405 --> 00:04:43.615
Возвращаемое значение данного метода
является объектом типа <i>View</i>.

00:04:43.615 --> 00:04:47.415
Колонка слева показывает возвращаемое
значение для всех этих методов.

00:04:47.415 --> 00:04:51.815
Это значит, что в рамках нашего кода
функции мы можем вызвать <i>findViewById</i>,

00:04:51.815 --> 00:04:56.670
ввести нужный нам идентификатор
ресурса просмотра, и тогда он вернет

00:04:56.670 --> 00:04:59.980
объектное представление, затем мы можем
хранить его как переменную в функции.

00:05:02.170 --> 00:05:04.300
Java код <i>MainActivity</i> будет выглядеть
вот так.

00:05:05.360 --> 00:05:07.230
Мы можем вызвать <i>findViewById</i>, затем
ввести

00:05:07.230 --> 00:05:12.140
как входное значение идентификатор
ресурса того элемента, что нам нужен.

00:05:12.140 --> 00:05:15.050
Мы присвоили этому <i>TextView</i> такой ID:
<i>order_summary_text_view</i>.

00:05:15.050 --> 00:05:19.370
Так что здесь мы ссылаемся на него как
<i>R.id.order_summary_text_view</i>.

00:05:19.370 --> 00:05:23.490
Этот метод начент работу и обойдет всю
иерархию элемента, а затем будет

00:05:23.490 --> 00:05:24.930
искать элемент с таким ID.

00:05:26.110 --> 00:05:31.030
Затем он вернет данный Java объект как
возвращаемое значение этого метода.

00:05:31.030 --> 00:05:34.790
Мы можем сохранить возвращаемое значение
в данную переменную слева,

00:05:34.790 --> 00:05:39.290
под названием <i>orderSummaryTextView</i>, это
переменная типа <i>View</i>.

00:05:39.290 --> 00:05:42.610
Таким образом, это возвращаетэлемент и
мы храним его внутри переменной элемента.

00:05:42.610 --> 00:05:47.280
Позже в <i>MainActivity</i>, мы также можем
вызывать <i>findViewById</i>, затем ввести этот

00:05:47.280 --> 00:05:53.120
идентификатор источника
<i>R.id.quantity_text_view</i>, ссылающийся на

00:05:53.120 --> 00:05:55.610
этот<i>TextView</i>. Это <i>TextView</i> в
указателе <i>quantity</i>.

00:05:55.610 --> 00:05:58.847
В этом случае функция начнет поиск по
иерархии элемента и

00:05:58.847 --> 00:06:01.460
затем попытается найти элемент
с таким ID.

00:06:01.460 --> 00:06:03.265
Затем она вернет данный элемент и
тогда мы

00:06:03.265 --> 00:06:07.190
сможем хранить его в переменной
под названием <i>quantity_text_view</i>.

00:06:07.190 --> 00:06:09.490
Данная переменная также имеет
тип данных <i>View</i>.

00:06:10.490 --> 00:06:13.440
Это объясняет возможность наличия
переменных <i>quantityTextView</i> и

00:06:13.440 --> 00:06:17.190
<i>orderSummaryTextView</i> в рамках
<i>MainActivity</i> и то, что эти переменные

00:06:17.190 --> 00:06:20.800
могут соединяться с этими Java
объектами в иерархии элемента.

00:06:20.800 --> 00:06:21.396
И я привела

00:06:21.396 --> 00:06:25.460
тут типы данных каждой из этих
переменных в колонке слева.

00:06:26.690 --> 00:06:29.750
И у этих двух переменных тот же тип
<i>View</i>, что указан и тут.

