WEBVTT
Kind: captions
Language: es

00:00:00.400 --> 00:00:03.248
Vayamos paso a paso con estos métodos
y rellenemos la tabla.

00:00:04.010 --> 00:00:07.104
Este es el código esencial que te dimos
en las notas del profesor.

00:00:07.560 --> 00:00:08.912
Empecemos con el método 1.

00:00:09.206 --> 00:00:12.208
Este método tiene el propósito
de crear un mensaje recordatorio

00:00:12.384 --> 00:00:14.080
para un evento en particular.

00:00:14.490 --> 00:00:17.120
El mensaje se compone
del nombre del evento,

00:00:17.568 --> 00:00:22.128
el lugar del evento
y a cuántos minutos se encuentra.

00:00:22.610 --> 00:00:26.736
Así que el nombre del método es
<i>createCalendarEventReminder</i>, en Camelcase,

00:00:27.000 --> 00:00:32.556
y la lista de entradas está
entre los paréntesis de apertura y cierre.

00:00:32.640 --> 00:00:36.320
Hay tres parámetros de entrada:
el primero es <i>String eventName</i>,

00:00:36.660 --> 00:00:39.568
luego <i>String location</i>
y luego <i>int minutesAway</i>.

00:00:40.340 --> 00:00:41.888
El resultado de este método,

00:00:42.048 --> 00:00:46.464
o su valor de devolución,
es el mensaje recordatorio, un texto.

00:00:46.660 --> 00:00:50.010
Por eso el tipo de devolución
de datos es una cadena de caracteres.

00:00:50.010 --> 00:00:52.500
Y este es su aspecto
cuando lo ponemos en la tabla.

00:00:53.110 --> 00:00:56.592
Técnicamente, todo esto debería ser
una palabra sin espacios,

00:00:56.672 --> 00:00:58.734
pero entonces no entraría en esta casilla.

00:00:59.240 --> 00:01:00.576
Y este es el segundo método.

00:01:01.210 --> 00:01:05.280
El objetivo de este método es deducir
un cierto número de puntos que se usaron

00:01:05.540 --> 00:01:08.656
de un número global de puntos, que es 100.

00:01:09.248 --> 00:01:11.856
Así, devuelve el número de puntos
que quedan.

00:01:12.500 --> 00:01:14.688
El nombre del método es
<i>deductPoints</i>

00:01:15.450 --> 00:01:17.312
y hay un parámetro de entrada

00:01:17.408 --> 00:01:19.930
entre los paréntesis
de apertura y de cierre.

00:01:20.944 --> 00:01:23.984
Se llama <i>pointsUsed</i>
y el tipo de dato es <i>int</i>.

00:01:24.644 --> 00:01:27.332
El valor de devolución es
el número de puntos que quedan,

00:01:27.332 --> 00:01:30.640
y eso es un número, por eso 
el tipo de devolución de datos es <i>int</i>.

00:01:31.880 --> 00:01:33.632
En la tabla, quedaría así.

00:01:34.510 --> 00:01:36.000
Y este es el tercer método.

00:01:36.410 --> 00:01:40.656
El objetivo de este método es crear
una cadena de texto que diga la suma

00:01:40.730 --> 00:01:42.880
de las distancias de viajes individuales.

00:01:43.600 --> 00:01:45.740
El nombre del método es
<i>findTotalTripLength</i>.

00:01:46.490 --> 00:01:49.472
Tenemos que ir a la derecha
para ver todos los parámetros.

00:01:49.920 --> 00:01:51.648
Hay tres parámetros de entrada aquí,

00:01:51.744 --> 00:01:55.648
entre los paréntesis de apertura y cierre,
y están separados por comas.

00:01:55.764 --> 00:01:58.920
El primero es <i>int distanceOfFirstTrip</i>
[distancia primer viaje],

00:01:59.024 --> 00:02:03.744
luego están <i>int distanceOfSecondTrip</i>,
e <i>int distanceOfThirdTrip</i>.

00:02:04.580 --> 00:02:08.592
Así que, dentro de este método, podemos
referirnos a cada una de estas variables.

00:02:09.520 --> 00:02:14.064
Como son enteros, podemos sumarlos
para saber la distancia total del viaje,

00:02:14.300 --> 00:02:16.032
que empieza con 2 millas [3.22 km].

00:02:16.032 --> 00:02:20.340
Y después podemos concatenar
eso con esta cadena de mensaje.

00:02:21.460 --> 00:02:25.510
Como el mensaje es un texto, el valor
de devolución del método es una cadena

00:02:26.790 --> 00:02:28.530
y este es su aspecto en la tabla.

