WEBVTT
Kind: captions
Language: ja

00:00:00.520 --> 00:00:03.700
Javaコード内でXMLのリソースを
参照できることがわかりましたね

00:00:04.710 --> 00:00:08.680
ですがこのリソースとJavaコードの関係は
正確にはどのようなものでしょうか？

00:00:08.680 --> 00:00:11.380
これらは完全なアプリ体験の一部として
どのように一体となるのでしょうか？

00:00:12.460 --> 00:00:15.215
JustJavaアプリのアイコンをクリックする
時点から始めてみましょう

00:00:16.335 --> 00:00:18.615
MainActivityを開きます

00:00:18.615 --> 00:00:21.925
まだ初期化の最中なので
まだ何も見えません

00:00:21.925 --> 00:00:25.835
ありがたいことに アクティビティの初期化に含まれる
複雑な部分の多くは

00:00:25.835 --> 00:00:28.565
Androidによって自動的に
処理されます

00:00:28.565 --> 00:00:31.995
私たちが注目する重要なことは
Main Activityのファイルで

00:00:31.995 --> 00:00:34.875
onCreateメソッドが自動的に
呼び出されることです

00:00:34.875 --> 00:00:37.590
これはアクティビティが
作成されるときのことです

00:00:37.590 --> 00:00:40.580
たくさんの作業があり そして
setContentViewが含まれる重要なラインがあります

00:00:40.580 --> 00:00:45.120
そしてレイアウトファイルの
リソースIDがあります

00:00:45.120 --> 00:00:47.640
R.layout.activity_mainです

00:00:47.640 --> 00:00:52.280
これはアクティビティのコンテンツビューは
アクティビティの主なXMLファイルに特定される

00:00:52.280 --> 00:00:55.720
レイアウトへと設定されるべき
ということを意味します

00:00:55.720 --> 00:00:59.700
これはメソッドコールで
インプットパラメータはこのリソースIDです

00:00:59.700 --> 00:01:02.600
コンテンツビューに使用するレイアウトの
設定が完了したら

00:01:02.600 --> 00:01:07.660
Android機器は このXMLレイアウトファイルを
パーシングし始めることができます

00:01:07.660 --> 00:01:09.410
パーシングとは このファイルを読み取り

00:01:09.410 --> 00:01:12.490
通訳しようとするようなものです
直線状のレイアウトだというように

00:01:12.490 --> 00:01:13.570
ああ これはテキストビューだ

00:01:13.570 --> 00:01:15.270
これは属性だ などという感じですね

00:01:15.270 --> 00:01:18.850
つまりこのファイルに何があるのか
理解しようとしているわけです

00:01:18.850 --> 00:01:21.960
Android機器はファイルの上部を
読み始めます

00:01:21.960 --> 00:01:24.670
直線状のレイアウトがあることを
認識します

00:01:24.670 --> 00:01:29.170
次にその直線状のレイアウトを表現するため
Javaオブジェクトを膨らませます

00:01:29.170 --> 00:01:30.570
そして次のラインへと進み

00:01:30.570 --> 00:01:36.120
その直線状レイアウトへ子としてTextViewを追加する
必要があると認識する という具合です

00:01:36.120 --> 00:01:39.865
レッスン2のビュー階層に
似てきました

00:01:39.865 --> 00:01:43.125
前には言いませんでしたが これは
実際にはJavaオブジェクトの

00:01:43.125 --> 00:01:45.265
階層なのです

00:01:45.265 --> 00:01:47.975
Javaオブジェクトに関しては今後のビデオで
詳しく学んでいきます

00:01:47.975 --> 00:01:50.515
まだ完全に理解していなくても
大丈夫です

00:01:50.515 --> 00:01:53.085
次のラインに進むと 直線状のレイアウトの
Javaオブジェクトを膨らませる必要が

00:01:53.085 --> 00:01:55.385
あることがわかります

00:01:55.385 --> 00:01:58.855
これは子として このルートの
LinearLayoutへ追加されます

00:01:58.855 --> 00:02:00.480
次にボタンの要素がありますね

00:02:00.480 --> 00:02:03.300
これを子として
LinearLayoutへ追加します

00:02:03.300 --> 00:02:07.470
ビュー階層に必要なすべてのビューを
膨らませるまで

00:02:07.470 --> 00:02:09.280
ファイルの下へと進み続けて行きます

00:02:09.280 --> 00:02:13.740
Javaオブジェクトのビュー階層が用意できたら
アプリの実行中に

00:02:13.740 --> 00:02:15.470
これを操作・変更することができます

00:02:16.570 --> 00:02:19.930
ここのTextViewのようなオブジェクトには
状態情報が含まれています

00:02:19.930 --> 00:02:23.070
テキスト テキストの色
テキストのサイズなどです

00:02:23.070 --> 00:02:26.880
オブジェクトにはメソッドもあり
私たちはこれらのメソッドを呼び出し

00:02:26.880 --> 00:02:29.130
内部の状態を変更することができます

00:02:29.130 --> 00:02:31.670
たとえば アプリの実行中に
テキストを変更することができます

00:02:32.690 --> 00:02:36.700
これらのオブジェクトすべてとの相互作用は
オブジェクト指向プログラミングと呼ばれています

00:02:36.700 --> 00:02:40.220
これについては今後のビデオで詳細を
学んでいきます

00:02:40.220 --> 00:02:44.230
まとめると MainActivityでは
setContentViewをこのレイアウトへ

00:02:44.230 --> 00:02:49.440
呼び出すとき このレイアウトを読み取り
多くのJavaオブジェクトを膨らませます

00:02:49.440 --> 00:02:53.590
これらのJavaオブジェクトは
アプリのビュー階層を構成します

00:02:53.590 --> 00:02:56.920
MainActivityはこのビュー階層へと
固定され

00:02:56.920 --> 00:03:00.400
MainActivityと相互作用するにつれて
これらのオブジェクトを更新することができます

