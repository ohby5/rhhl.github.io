WEBVTT
Kind: captions
Language: fr

00:00:00.940 --> 00:00:04.070
Tout d’abord, on va modifier la 
méthode de signature de calculatePrice

00:00:04.070 --> 00:00:06.480
pour avoir le type de données de retour exact.

00:00:06.480 --> 00:00:08.640
On va aussi assumer 
qu’il y a 0 paramètre d’entrée.

00:00:09.850 --> 00:00:12.840
C’est ici que la méthode du 
calculatePrice est définie.

00:00:12.840 --> 00:00:15.930
Le but de cette méthode est de 
calculer le prix total de la commande

00:00:15.930 --> 00:00:18.160
et ensuite de le renvoyer.

00:00:18.160 --> 00:00:19.660
Le prix doit être un entier donc,

00:00:19.660 --> 00:00:22.670
on doit changer le type de données 
de retour void par int.

00:00:23.730 --> 00:00:25.800
Voilà pour la première tâche.

00:00:25.800 --> 00:00:29.130
Le quiz stipule aussi de faire attention 
à ce qu’il n’ait pas de paramètre d’entrée,

00:00:29.130 --> 00:00:29.930
c’est ce qu’on a ici.

00:00:31.020 --> 00:00:34.150
Maintenant la deuxième tâche consiste à 
modifier le contenu de la méthode

00:00:34.150 --> 00:00:36.798
pour être sûr qu’on calcule 
le prix exact de la commande.

00:00:36.798 --> 00:00:39.220
Si la tasse de café est à 5,00$.

00:00:40.770 --> 00:00:43.880
À l’intérieur de cette méthode, on met
la quantité de tasses commandées.

00:00:43.880 --> 00:00:46.460
Et nous la multiplions par 
5$ par tasse de café.

00:00:47.700 --> 00:00:49.860
Ça équivaut au prix total de la commande.

00:00:49.860 --> 00:00:51.100
Donc cette ligne de code est déchiffrée.

00:00:52.250 --> 00:00:56.920
Mais je peux voir deux problèmes, la 
variable de prix n’est jamais utilisée et

00:00:56.920 --> 00:00:59.490
il y a une erreur qui dit qu’il y a
une instruction de retour manquante.

00:00:59.490 --> 00:01:03.470
Il s’attend à ce qu’on lui renvoye un 
entier, mais on ne renvoye rien.

00:01:03.470 --> 00:01:07.120
Pour l’instant, notre code est tel 
qu’on vient de le dire.

00:01:07.120 --> 00:01:12.060
On a besoin d’une ligne qui dit retour et, 
en faite, puis, mettre une valeur ici et

00:01:12.060 --> 00:01:13.950
la valeur de retour est un prix.

00:01:13.950 --> 00:01:18.220
Donc, je vais simplement mettre prix, qui 
est une variable qu’on a définie plus haut.

00:01:18.220 --> 00:01:20.760
Cool, donc, maintenant, toutes les erreurs 
ont disparu.

00:01:20.760 --> 00:01:22.650
On devrait aussi modifier le Java DOC.

00:01:22.650 --> 00:01:27.060
Ainsi on précise qu’on 
retourne le prix total.

00:01:27.060 --> 00:01:30.090
Ainsi lorsque quelqu’un appelle cette 
méthode, ils savent à quoi s’attendre.

00:01:31.600 --> 00:01:35.730
Ok, donc, on a terminé toutes 
les étapes pour définir cette méthode.

00:01:35.730 --> 00:01:38.600
Maintenant, passons là 
où la méthode se fait appeler.

00:01:38.600 --> 00:01:41.939
Depuis la méthode submitOrder, on
devrait appeler la méthode calculatePrice.

00:01:43.240 --> 00:01:46.120
À présent, calculatePrice,
se promène au milieu de nulle part.

00:01:46.120 --> 00:01:49.130
Je vais le copier, et 
je vais le coller ici en haut.

00:01:49.130 --> 00:01:52.830
Parce qu’avant on aurait dû calculer 
le prix de la commande dans la ligne,

00:01:52.830 --> 00:01:55.500
dans la méthode du submitOrder, mais
maintenant, on a une méthode pour ça.

00:01:55.500 --> 00:01:57.670
Donc je vais copier ceci ici.

00:01:57.670 --> 00:01:59.910
Maintenant, débarrassez-vous du 
point-virgule supplémentaire.

00:01:59.910 --> 00:02:03.170
On peut remarquer que le prix est une 
variable locale dans cette méthode, et

00:02:03.170 --> 00:02:04.910
aussi dans cette méthode.

00:02:04.910 --> 00:02:06.520
Ça n’est pas un problème si 
elles ont le même nom,

00:02:06.520 --> 00:02:09.258
car elles ont des portées de 
variables différentes.

00:02:09.258 --> 00:02:13.100
Donc, la variable de prix ici est tout à
fait indépendante de la variable ici.

00:02:13.100 --> 00:02:16.300
Elles sont actualisées et créées 
indépendamment l’une de l’autre.

00:02:16.300 --> 00:02:19.750
Une fois que cette méthode a terminé son 
exécution, cette variable de prix disparait.

00:02:20.830 --> 00:02:23.230
Ok retournons à notre méthode de submitOrder.

00:02:23.230 --> 00:02:24.810
Donc, on calculoe un prix et

00:02:24.810 --> 00:02:29.680
on le stocke dans une variable, puis on 
peut l’utiliser pour créer un message prix.

00:02:30.820 --> 00:02:33.390
Donc, vraiment,
tout ce code peut rester le même.

00:02:33.390 --> 00:02:34.800
On assemble l’entier,

00:02:34.800 --> 00:02:39.490
le prix, à la chaîne de caractères totale 
avec le symbole de la monnaie.

00:02:39.490 --> 00:02:43.680
Ensuite on assemble « Thank you ! » et 
ensuite affichez-le sur l’écran.

00:02:43.680 --> 00:02:47.960
Donc, je vais supprimer ces lignes vides,
superflues, et les sauvegarder, et

00:02:47.960 --> 00:02:49.410
ensuite on peut l’exécuter sur notre appareil.

00:02:50.660 --> 00:02:52.250
Ok, donc je change la quantité, et

00:02:52.250 --> 00:02:55.700
j’appuie sur ORDER, ensuite il montre
correctement 25$ comme prix.

00:02:56.790 --> 00:02:57.825
Génial, ça marche.

00:02:57.825 --> 00:03:00.864
Mais comment puis-je être sur que 
calculatePrice fonctionne

00:03:00.864 --> 00:03:05.640
vraiment, car il n’y a pas de changement 
avec l’application d’avant pour l’utilisateur.

00:03:05.640 --> 00:03:09.524
Voici quelques techniques que vous pouvez 
utiliser pour vérifier que votre code

00:03:09.524 --> 00:03:10.644
fonctionne vraiment.

00:03:10.644 --> 00:03:14.420
Je pourrais lui demander de renvoyer 
un nombre incroyable, comme 700.

00:03:14.420 --> 00:03:16.972
Sauvegarder mon code et ensuite l’exécuter.

00:03:16.972 --> 00:03:20.671
Maintenant, ce que je m’attends à voir 
si je change la quantité et

00:03:20.671 --> 00:03:25.226
que j’appuie que le bouton ORDER,
on devrait voir que le prix est 700$.

00:03:25.226 --> 00:03:29.190
De cette façon je saurais que cette méthode 
calculatePrice est réellement appelée.

00:03:30.250 --> 00:03:31.610
Et ça l’est, cool.

00:03:32.910 --> 00:03:35.040
Maintenant, je peux inverser ce changement.

00:03:35.040 --> 00:03:38.120
Une autre façon de vérifier que cette 
méthode est exécutée

00:03:38.120 --> 00:03:39.220
est d’ajouter un point de rupture ici.

00:03:40.230 --> 00:03:43.390
Donc, je vais cliquer sur 
cette petite icône de bug et

00:03:43.390 --> 00:03:45.040
ensuite notre apple entre dans le 
mode débug.

00:03:46.370 --> 00:03:47.530
Si je change la quantité et

00:03:47.530 --> 00:03:51.250
que j’appuie sur order, je m’attends à 
ce que l’application fasse une pause là.

00:03:53.140 --> 00:03:54.580
Et elle la faite.

00:03:54.580 --> 00:03:57.460
Donc, maintenant on est dans 
la méthode de calculatePrice.

00:03:57.460 --> 00:04:00.100
Il y a une variable globale, la quantité.

00:04:00.100 --> 00:04:05.340
Et si je passe à la ligne suivante puis, 
je vois qu’il y a une variable locale,

00:04:05.340 --> 00:04:12.670
le prix. Et il est établi à 15$ car 
la quantité est de 3, 3 fois 5 font 15, cool.

00:04:12.670 --> 00:04:15.777
Donc, ça passe par la 
méthode de calculatePrice, et

00:04:15.777 --> 00:04:18.834
si j’appuie sur Resume, ensuite 
il s’actualise correctement sur l’écran.

