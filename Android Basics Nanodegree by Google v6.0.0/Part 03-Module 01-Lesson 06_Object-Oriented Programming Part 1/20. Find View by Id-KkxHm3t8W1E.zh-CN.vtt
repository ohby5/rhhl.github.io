WEBVTT
Kind: captions
Language: zh-CN

00:00:00.430 --> 00:00:02.969
回到 Just Java 应用的 MainActivity 中

00:00:02.969 --> 00:00:06.190
具体来说我们来看 displayMessage 方法

00:00:06.190 --> 00:00:08.570
并且弄清楚这是怎么回事

00:00:08.570 --> 00:00:13.870
尽管 findViewById 方法在这个类中没有声明

00:00:13.870 --> 00:00:18.740
但其实在父类 AppCompatActivity 声明过了

00:00:18.740 --> 00:00:20.440
setContentView 也是这样

00:00:20.440 --> 00:00:23.820
它也是在 AppCompatActivity 类中声明的

00:00:23.820 --> 00:00:26.710
但是在这个方法中到底发生了什么

00:00:26.710 --> 00:00:29.300
为什么要传入一个资源 id？

00:00:29.300 --> 00:00:31.930
为什么会有另外一个括号呢？

00:00:31.930 --> 00:00:34.410
为了解决那个问题 我将总结一下我们学过的知识

00:00:34.410 --> 00:00:37.720
这样你就会明白为什么会有这些代码

00:00:38.870 --> 00:00:40.350
你还记得这个示意图吗？

00:00:40.350 --> 00:00:44.910
当你点击设备上的应用图标 就打开了 MainActivity

00:00:44.910 --> 00:00:48.650
在我们的代码中 MainActivity 的 onCreate 方法

00:00:48.650 --> 00:00:49.770
被系统调用

00:00:49.770 --> 00:00:53.220
在这个方法中有一个 setContentView 方法

00:00:53.220 --> 00:00:55.340
它是资源布局 id

00:00:55.340 --> 00:00:59.710
在早期的练习中 我们给 setContentView 只传了一个 TextView

00:00:59.710 --> 00:01:01.950
但是我们想要更多的 View

00:01:01.950 --> 00:01:04.650
所以我们传入一个布局资源 id

00:01:04.650 --> 00:01:06.980
这个对应的是一个 XML 文件

00:01:06.980 --> 00:01:09.560
一旦调用 setContentView activity就会

00:01:09.560 --> 00:01:13.200
找到 XML 布局文件 并且读取它的每行代码

00:01:13.200 --> 00:01:18.140
它会为每一个 View 填充或者创建一个 Java 对象

00:01:18.140 --> 00:01:19.860
它遍历整个 XML 文件 并且

00:01:19.860 --> 00:01:23.040
建立 Java 对象间的层次关系

00:01:23.040 --> 00:01:27.090
当它填充每一个 View 的时候 它会调用构造函数

00:01:27.090 --> 00:01:31.600
也就是 NewTextView 或者 NewLinearLayout 方法 然后把这些属性

00:01:31.600 --> 00:01:34.760
传给 Java 对象 这样它就被设置好了

00:01:34.760 --> 00:01:38.700
注意 我们不用给 NewTextView 和 NewLinearLayout写任何代码

00:01:38.700 --> 00:01:40.650
也不用设置字体大小

00:01:40.650 --> 00:01:44.540
所有的这些都是由 activity 填充过程完成的

00:01:44.540 --> 00:01:48.290
为了在应用运行时能与这些视图进行交互 并且修改它们

00:01:48.290 --> 00:01:49.830
例如 修改文本

00:01:49.830 --> 00:01:54.480
或者修改按钮 那么我们需要找到 Java 对象

00:01:54.480 --> 00:01:58.560
一旦我们找到它们 我们可以在 MainActivity 中把它们转成变量

00:01:58.560 --> 00:02:01.360
记住 我们没有在草稿中创建新的 TextView

00:02:01.360 --> 00:02:04.310
我们只是在草稿中找到了现有的 TextView

00:02:06.060 --> 00:02:08.639
这是我们之前在 MainActivity 中用过的变量

00:02:08.639 --> 00:02:13.160
我们之前用过 quantity、price 和 price message

00:02:13.160 --> 00:02:15.830
这里既有局部变量也有全局变量

00:02:15.830 --> 00:02:19.520
为了与这个视图树中的 View 进行交互 我们应该创建变量

00:02:19.520 --> 00:02:21.149
用来引用这些具体的 View

00:02:22.500 --> 00:02:25.765
例如 我们可以创建一个 quantity TextView 变量

00:02:25.765 --> 00:02:28.580
它指向这个 TextView

00:02:28.580 --> 00:02:31.340
如果你点击 UI 中的加、减按钮

00:02:31.340 --> 00:02:34.340
你就可以改变 TextView 的文本使它显示不同的数字

00:02:36.220 --> 00:02:39.340
我们也可以用一个 orderSummaryTextView 变量

00:02:39.340 --> 00:02:41.730
它指向这个 TextView

00:02:41.730 --> 00:02:44.590
如果你点击这个 ORDER 按钮的时候 那么 orderSummaryTextView

00:02:44.590 --> 00:02:47.660
就会改变它的文本内容 显示新的订单总数

00:02:47.660 --> 00:02:51.680
你现在明白这些指向 View 的变量是如何

00:02:51.680 --> 00:02:55.440
改变 UI 的了 当应用运行时

00:02:55.440 --> 00:02:59.430
但是我们该如何把这里的变量和

00:02:59.430 --> 00:03:00.790
这个 TextView 联系起来呢？

00:03:00.790 --> 00:03:03.780
又如何把 orderSummaryTextView 与

00:03:03.780 --> 00:03:04.495
这个 TextView 联系起来呢？

00:03:06.250 --> 00:03:08.139
回到布局 XML 文件

00:03:08.139 --> 00:03:11.699
还记得我们给 View 指定了 id 吗？

00:03:12.953 --> 00:03:17.400
对于这个 TextView 我们给它指定一个id 为 quantity.text.view

00:03:17.400 --> 00:03:21.340
对于这个 View 我们给它一个 id 为 order.summary.text.view

00:03:21.340 --> 00:03:24.240
给 View 指定 id 是可选择的

00:03:24.240 --> 00:03:28.760
你只需要给你要引用的 View 指定 id

00:03:28.760 --> 00:03:33.180
例如 你可以给任何 View 指定 id 但是这是不必要的

00:03:33.180 --> 00:03:37.470
在后面的 Java 代码中 你只需要用到两个 View

00:03:37.470 --> 00:03:39.860
所以 我们只为这两个 View 指定 id

00:03:40.880 --> 00:03:43.900
好的 我们已经为需要用到的 View 创建了 id

00:03:43.900 --> 00:03:46.700
之后我们可以在 Java 代码中引用它们了

00:03:46.700 --> 00:03:51.350
我们也要建立指向这两个 View 的变量

00:03:51.350 --> 00:03:53.740
这样我们好控制它

00:03:53.740 --> 00:03:57.680
但是我们还是不知道如何建立

00:03:57.680 --> 00:04:01.160
变量和具体的 Java 对象之间的联系

00:04:01.160 --> 00:04:04.700
对于这个变量和 Java 对象 情况也是如此

00:04:04.700 --> 00:04:08.820
在 AppCompatActivity 类中 我将向你展示一个具体的方法

00:04:08.820 --> 00:04:12.560
就是调用 findViewById 并且传入一个资源 id

00:04:13.810 --> 00:04:16.290
findViewById 方法

00:04:16.290 --> 00:04:21.220
会找到与传入的 id 相对应的 View

00:04:21.220 --> 00:04:23.790
Activity 在 XML 的视图层次结构中

00:04:23.790 --> 00:04:28.890
搜索这个视图 再在 onCreate 方法中处理它

00:04:28.890 --> 00:04:30.560
就像我之前提到的

00:04:30.560 --> 00:04:34.350
这个 activity 的 onCreate 方法建立了一个视图层次结构

00:04:34.350 --> 00:04:39.405
然后 findViewByID 方法遍历它 找到那个视图层次结构中的某个 View

00:04:39.405 --> 00:04:43.615
这个方法的返回值是 View 类型的对象

00:04:43.615 --> 00:04:47.415
左手边的一列显示了所有这些方法的返回值

00:04:47.415 --> 00:04:51.815
这就意味着在 activity 代码中 我们可以调用 findViewById

00:04:51.815 --> 00:04:56.670
传入我们所需 View 的资源 id 然后它就会返回

00:04:56.670 --> 00:04:59.980
一个 View 对象 我们就可以把它当做变量存在 activity 中

00:05:02.170 --> 00:05:04.300
MainActivity 的 Java 代码看起来是这个样子的

00:05:05.360 --> 00:05:07.230
我们可以调用 findViewById

00:05:07.230 --> 00:05:12.140
然后传入一个我们所需 View 的资源 id

00:05:12.140 --> 00:05:15.050
我们给这个 TextView 指定了一个 id 为 order.summary.text.view

00:05:15.050 --> 00:05:19.370
所以这里我们输入 R.id.order_summary_text_view

00:05:19.370 --> 00:05:23.490
这个方法会去遍历整个视图层 寻找

00:05:23.490 --> 00:05:24.930
拥有这个 id 的 View

00:05:26.110 --> 00:05:31.030
然后返回这个 Java 对象作为这个方法的返回值

00:05:31.030 --> 00:05:34.790
我们可以把返回值存在左边的

00:05:34.790 --> 00:05:39.290
orderSummaryTextView 变量中 这个变量是 View 类型的

00:05:39.290 --> 00:05:42.610
所以它返回一个 View 我们把它存放在一个 View 变量中

00:05:42.610 --> 00:05:47.280
然后在 MainActivity 中 我们也可以调用 findViewById 并且传入

00:05:47.280 --> 00:05:53.120
这个资源 id R.id.quantity_text_view 它是指向这个 TextView 的

00:05:53.120 --> 00:05:55.610
这是在 quantity picker 中的 TextView

00:05:55.610 --> 00:05:58.847
当这句代码被调用 activity 会遍历视图层

00:05:58.847 --> 00:06:01.460
然后寻找拥有这个 id 的 View

00:06:01.460 --> 00:06:03.265
然后返回这个 View

00:06:03.265 --> 00:06:07.190
然后我们可以把它存放在 quantity_text_view 变量中

00:06:07.190 --> 00:06:09.490
这个变量的数据类型也是 View 类型

00:06:10.490 --> 00:06:13.440
这两行代码解释了如何在 MainActivity 里创建 quantityTextView 和

00:06:13.440 --> 00:06:17.190
orderSummaryTextView 变量

00:06:17.190 --> 00:06:20.800
而且这些变量可以与这些视图层中的 Java 对象连接起来

00:06:20.800 --> 00:06:21.396
顺便说一句

00:06:21.396 --> 00:06:25.460
我在左边这一列 列出每个变量的数据类型

00:06:26.690 --> 00:06:29.750
这两个变量的类型是 View 类型 跟这里声明的一样

