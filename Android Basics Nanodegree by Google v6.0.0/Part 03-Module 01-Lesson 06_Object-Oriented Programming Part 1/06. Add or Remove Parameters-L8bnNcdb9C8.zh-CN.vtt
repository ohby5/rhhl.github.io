WEBVTT
Kind: captions
Language: zh-CN

00:00:00.420 --> 00:00:02.590
接下来我将带你看一个关于方法的例子

00:00:02.590 --> 00:00:04.860
当接受不同数量的输入参数时

00:00:04.860 --> 00:00:09.660
我开始在 Android Studio 通过项目向导创建一个新的应用

00:00:09.660 --> 00:00:12.800
这和 Just Java 应用完全不相关

00:00:12.800 --> 00:00:15.460
我将这个方法添加到 MainActivity 6

00:00:15.460 --> 00:00:17.420
叫做 createWeatherMessage

00:00:17.420 --> 00:00:21.650
这里没有输入参数 返回值是一个字符串

00:00:21.650 --> 00:00:24.890
这个方法希望创建一个显示城市名字

00:00:24.890 --> 00:00:26.080
和气温的新信息

00:00:26.080 --> 00:00:29.590
你可以将这个方法看作指令的模版

00:00:29.590 --> 00:00:32.320
所以我可以将温度作为一个输入参数

00:00:33.550 --> 00:00:36.650
并且那是一个数字 所以我接下来输入 int temperature

00:00:36.650 --> 00:00:40.990
然后我就在这用到它了

00:00:40.990 --> 00:00:43.540
这是一个字符串

00:00:43.540 --> 00:00:46.000
它连接了整型变量 temperature

00:00:46.000 --> 00:00:51.310
之后又连接了其余的字符串类型表示华氏度

00:00:51.310 --> 00:00:54.890
现在这条消息可以根据温度被制定因为它

00:00:54.890 --> 00:00:56.380
是一个输入参数

00:00:56.380 --> 00:00:59.874
哦不 我忘了之前提到过了 不过在 MainActivity 的 onCreate 方法里

00:00:59.874 --> 00:01:03.198
当这个 Activity 被创建的时候它被调用

00:01:03.198 --> 00:01:05.670
我叫它 createWeatherMessage

00:01:05.670 --> 00:01:10.040
之前我们不需要传参数 但现在我们必须要有一个参数

00:01:10.040 --> 00:01:14.630
我将把77作为温度传进去

00:01:14.630 --> 00:01:18.990
现在将错误解决了 这个方法的调用也对了

00:01:18.990 --> 00:01:21.900
另一个我需要改的就是这个方法的注释

00:01:22.940 --> 00:01:24.400
加一个空行

00:01:24.400 --> 00:01:28.351
接着我将描述输入参数 它是这里的 temperature 

00:01:28.351 --> 00:01:31.385
输入 @param temperature

00:01:31.385 --> 00:01:34.265
之后我可以添加一个描述这个城市气温的内容

00:01:35.345 --> 00:01:38.555
有时参数名有一点难懂

00:01:38.555 --> 00:01:39.801
这就是为什么注释很有用的原因

00:01:41.232 --> 00:01:44.832
如果你的方法是 public 类型的其他人就可以

00:01:44.832 --> 00:01:46.212
调用这个方法

00:01:46.212 --> 00:01:49.352
他们可能不知道这个方法的具体指令

00:01:49.352 --> 00:01:50.642
所以阅读这个 Java 文档以及

00:01:50.642 --> 00:01:52.952
参数的描述对他们非常有用

00:01:54.292 --> 00:01:57.242
我之前提到过 方法就像是一个模版

00:01:57.242 --> 00:02:01.102
所以 如果我们想要改变城市使它不显示 San Francisco

00:02:02.130 --> 00:02:04.280
我可以将城市做成输入参数

00:02:04.280 --> 00:02:06.260
只要在这加一个逗号

00:02:06.260 --> 00:02:10.889
城市的名字是一段文本我将设置为String数据类型

00:02:10.889 --> 00:02:15.740
之后我可以删除 San Francisco 并用变量 cityName 代替它

00:02:16.870 --> 00:02:20.009
做完这些之前记得在这加一个空格

00:02:21.390 --> 00:02:24.410
酷 现在这个方法创建一个消息

00:02:24.410 --> 00:02:26.970
可以自定义一个城市和天气

00:02:26.970 --> 00:02:30.430
我建议去修改 Java 文档

00:02:30.430 --> 00:02:34.050
它有这个附加参数并描述城市的名字

00:02:35.140 --> 00:02:39.100
当我修改了方法的特征 这里出错了

00:02:39.100 --> 00:02:41.850
这个方法传一个参数已经不管用了

00:02:41.850 --> 00:02:44.130
我需要传两个参数

00:02:44.130 --> 00:02:48.230
所以我添加一个逗号传入 San Francisco 字符串

00:02:49.430 --> 00:02:51.130
现在错误没有了

00:02:51.130 --> 00:02:56.140
所以当我调用 createWeatherMessage (77, 它将会给温度赋值

00:02:56.140 --> 00:02:58.300
San Francisco 将会是城市名字

00:02:59.390 --> 00:03:01.783
它将在这里创建合适的字符串值

00:03:03.813 --> 00:03:06.874
现在回到 calculatePrice 方法

00:03:06.874 --> 00:03:09.480
我打算修改方法的特征

00:03:09.480 --> 00:03:13.230
它会有不同数量的输入参数

00:03:13.230 --> 00:03:18.710
我们先定义一个无参数的方法 然后是一个参数

00:03:18.710 --> 00:03:22.079
最后 试着改成两个参数

00:03:23.350 --> 00:03:26.660
你会看到方法的特征如何变化当有不同

00:03:26.660 --> 00:03:30.720
数量的参数对另一个方法的调用产生影响

00:03:30.720 --> 00:03:32.270
正常情况下当你创建你的应用

00:03:32.270 --> 00:03:36.280
你都要确定方法的参数数量

00:03:36.280 --> 00:03:39.360
这个数量通常取决于

00:03:39.360 --> 00:03:42.380
方法要做什么

00:03:42.380 --> 00:03:45.330
最佳实践是只传

00:03:45.330 --> 00:03:47.590
你在方法中真正用得到的参数

00:03:47.590 --> 00:03:50.450
多传参数毫无意义如果你将不会

00:03:50.450 --> 00:03:51.240
在里面使用

00:03:51.240 --> 00:03:54.640
这是本次任务的说明

00:03:54.640 --> 00:03:58.568
首先在应用的 MainActivity 中定义 calculatePrice 方法

00:03:58.568 --> 00:04:01.470
看看讲师注释的代码片段你可以从这开始

00:04:01.470 --> 00:04:04.123
我们将要修改 calculatePrice 方法

00:04:04.123 --> 00:04:06.690
只有一个参数

00:04:06.690 --> 00:04:09.970
这时 submitOrder 方法调用 calculatePrice

00:04:09.970 --> 00:04:12.230
将 quantity 作为参数传入

00:04:12.230 --> 00:04:16.450
然后试着将 calculatePrice 方法改写成两个参数传入

00:04:16.450 --> 00:04:21.714
在 submitOrder 方法中调用 calculatePrice 的 quantity

00:04:21.714 --> 00:04:26.093
向它传入价格例如$10

00:04:26.093 --> 00:04:31.150
最后 试着改变 calculatePrice 使它没有参数传入

00:04:31.150 --> 00:04:34.324
在 submitOrder 方法中调用 calculatePrice

00:04:34.324 --> 00:04:34.870
像这样

00:04:35.950 --> 00:04:38.530
让我们来做第一个 这样你就懂我的意思了

00:04:38.530 --> 00:04:41.729
我先要打开讲师注释中的链接

00:04:41.729 --> 00:04:46.080
这里的要点是我们提供 calculatePrice 方法的代码

00:04:46.080 --> 00:04:50.480
继续选中每一个并复制

00:04:50.480 --> 00:04:53.160
在 Android Studio 粘贴到这个方法

00:04:53.160 --> 00:04:56.580
我把它粘贴到 submitOrde 的下面

00:04:56.580 --> 00:05:01.370
我将确定在两个方法之间有一个空行

00:05:01.370 --> 00:05:02.519
这使阅读更方便

00:05:03.650 --> 00:05:07.140
这时我可以从 submitOrder 方法调用这个方法

00:05:07.140 --> 00:05:09.530
先把方法名写到这个方法的下面

00:05:09.530 --> 00:05:12.430
然后要把代码组合起来

00:05:12.430 --> 00:05:13.640
此时此刻 这很好

00:05:14.940 --> 00:05:19.000
哦 我忘了我们有一个输入参数 我需要传递 quantity 97

00:05:20.790 --> 00:05:21.960
同样的

00:05:21.960 --> 00:05:25.400
对其余的个测试也要修改这里的输入参数

00:05:27.000 --> 00:05:29.740
为了完成这个练习 如果你需要参考的例子

00:05:29.740 --> 00:05:33.761
你同样可以在 Google 查找 Java 方法

