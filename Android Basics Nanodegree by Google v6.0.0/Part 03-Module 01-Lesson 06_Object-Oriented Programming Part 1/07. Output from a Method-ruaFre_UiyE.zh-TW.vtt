WEBVTT
Kind: captions
Language: zh-TW

00:00:00.300 --> 00:00:03.370
我們剛才調用了一個方法 并且傳遞進入輸入參數

00:00:03.370 --> 00:00:04.260
&gt;&gt; 等等

00:00:04.260 --> 00:00:06.790
你是說把數量傳遞進入

00:00:06.790 --> 00:00:08.270
價格計算方法嗎

00:00:08.270 --> 00:00:09.300
是的

00:00:09.300 --> 00:00:11.850
現在我們想要獲得一個返回值

00:00:11.850 --> 00:00:12.765
&gt;&gt; 我喜歡返回值

00:00:12.765 --> 00:00:13.930
&gt;&gt; [笑] &gt;&gt; 返回值將會是什么

00:00:13.930 --> 00:00:15.300
是價格嗎

00:00:15.300 --> 00:00:16.550
因為它是價格計算方法

00:00:16.550 --> 00:00:19.750
&gt;&gt; 是的 返回值是訂單總價

00:00:19.750 --> 00:00:21.310
&gt;&gt; 讓我們開始吧

00:00:21.310 --> 00:00:23.510
&gt;&gt; 你需要一把叉子

00:00:25.820 --> 00:00:26.980
&gt;&gt; 是嗎

00:00:26.980 --> 00:00:31.340
&gt;&gt; 在Java中 方法的輸出稱為返回值

00:00:31.340 --> 00:00:35.640
在代碼示例中 你可以看到方法中的return字樣

00:00:35.640 --> 00:00:39.090
也可以在備注中看到returb

00:00:39.090 --> 00:00:42.170
讓我們來更進一步了解方法的返回值

00:00:42.170 --> 00:00:46.900
現在我要Google搜尋Java方法返回值

00:00:46.900 --> 00:00:48.780
每一個連結看上去還不錯

00:00:48.780 --> 00:00:51.420
這篇文章我們如何從方法返回一個值

00:00:52.710 --> 00:00:55.240
它告訴我們說 當方法中的所有陳述式

00:00:55.240 --> 00:00:59.510
或方法中的所有代碼行執行完

00:00:59.510 --> 00:01:04.319
或者到達第一個return陳述式 方法就行執行完畢 以先到者為準

00:01:04.319 --> 00:01:07.370
如果拋出一個例外或錯誤 方法也會終止

00:01:07.370 --> 00:01:10.410
但是在本課程我們不打算討論這個問題

00:01:10.410 --> 00:01:12.710
我們將會重點討論前兩種情況

00:01:14.240 --> 00:01:18.230
在這個代碼中 你可以看到 return;

00:01:18.230 --> 00:01:21.100
這意味著方法結束

00:01:21.100 --> 00:01:24.150
后面的任何代碼行將不會執行

00:01:25.440 --> 00:01:28.170
另外你還可能看這樣的內容

00:01:28.170 --> 00:01:32.230
return后面接一個值 然后是分號

00:01:32.230 --> 00:01:35.280
這將返回方法的輸出值

00:01:36.470 --> 00:01:37.900
這里有一個例子

00:01:37.900 --> 00:01:40.140
這是getArea方法的代碼

00:01:40.140 --> 00:01:43.420
它計算矩形的面積

00:01:43.420 --> 00:01:46.010
也就是長乘以寬

00:01:46.010 --> 00:01:51.100
因此在方法內 return后面接一個返回值

00:01:51.100 --> 00:01:54.660
返回值是一個變數 它是寬與長之乘積

00:01:54.660 --> 00:01:56.610
結果是一個數值

00:01:56.610 --> 00:02:01.270
這個數值作為方法的輸出值被返回

00:02:01.270 --> 00:02:02.760
與輸入參數不同

00:02:02.760 --> 00:02:05.890
你可以在括弧內設定任意多個輸入參數

00:02:05.890 --> 00:02:10.389
但是返回值卻只能有一個

00:02:10.389 --> 00:02:13.530
這里指定返回值的資料型別

00:02:13.530 --> 00:02:18.300
我們可以返回任何其他數值 只要它是整數就可以

00:02:18.300 --> 00:02:21.050
但是 舉例來說 不能返回字串

00:02:21.050 --> 00:02:24.170
因為它不符合這里鍵入的資料型別

00:02:24.170 --> 00:02:27.930
現在你可能已經認識到

00:02:27.930 --> 00:02:29.550
Java的return陳述式具有特殊的含義

00:02:29.550 --> 00:02:33.480
你不能把它用作變數或方法的名稱

00:02:33.480 --> 00:02:35.549
這些稱為Java關鍵字

00:02:37.140 --> 00:02:38.960
我可以檢索Java關鍵字清單

00:02:41.370 --> 00:02:43.740
這是所有Java關鍵字清單

00:02:43.740 --> 00:02:46.880
你會發現有一些關鍵字我們在前面已經見過

00:02:46.880 --> 00:02:49.460
比如public和private

00:02:49.460 --> 00:02:50.710
這是一個很短的清單

00:02:50.710 --> 00:02:53.440
在你的代碼中使用時

00:02:53.440 --> 00:02:53.940
所有這些Java關鍵字具有特殊的含義

00:02:53.940 --> 00:02:58.640
因此你不能把它們用作標識符 比如應用程式中的變數名稱

00:02:58.640 --> 00:03:00.560
或方法名稱

00:03:00.560 --> 00:03:04.140
你還會發現 return是一個特殊的Java關鍵字

00:03:04.140 --> 00:03:07.780
它專門用于返回方法的輸出值

00:03:09.140 --> 00:03:12.240
回我們前面的例子 我們建立一條天氣訊息

00:03:12.240 --> 00:03:17.150
我們可以建立一個字串 然后透過返回訊息返回它

00:03:17.150 --> 00:03:19.230
這個變數的資料型別是字串

00:03:19.230 --> 00:03:25.150
如果我在這個返回陳述式的后面新增一行代碼 會發生什么呢

00:03:25.150 --> 00:03:28.390
我會看到錯誤 說不可到達的陳述式

00:03:28.390 --> 00:03:31.230
因為電腦不會執行return陳述式后面的

00:03:31.230 --> 00:03:32.690
這些代碼行

00:03:32.690 --> 00:03:35.690
因為方法到這時就會結束

00:03:35.690 --> 00:03:38.570
因此應刪除return陳述后面的任何代碼行

00:03:39.640 --> 00:03:43.100
如果你不需方法返回任何輸出值 應該怎么做呢

00:03:43.100 --> 00:03:45.390
讓我們來看JustJava應用程式的MainActivity中的

00:03:45.390 --> 00:03:47.295
幾個例子

00:03:47.295 --> 00:03:52.415
舉例來說 增量和減量方法沒有返回值

00:03:52.415 --> 00:03:53.905
當你調用減量方法時

00:03:53.905 --> 00:03:58.405
它會完成displayQuantity方法中的UI更新工作

00:03:58.405 --> 00:04:01.045
這里沒有輸出值需要返回

00:04:01.045 --> 00:04:04.185
減量方法也是這樣的 當你調用displayQuantity方法時

00:04:04.185 --> 00:04:07.455
所有繁瑣工作就已經完成 并會更新熒幕

00:04:07.455 --> 00:04:10.430
你可能會想return陳述式在哪里

00:04:10.430 --> 00:04:14.180
當所有這些代碼行完成執行時

00:04:14.180 --> 00:04:17.089
或者到達return陳述式時 方法將終止執行

00:04:17.089 --> 00:04:20.320
因此我可以增加return陳述式 像這樣

00:04:21.570 --> 00:04:24.870
這樣 方法將在到達這行時終止

00:04:24.870 --> 00:04:27.200
Android Studio發出報警

00:04:27.200 --> 00:04:31.570
它說 在Avoid方法的最后陳述式中不能使用return

00:04:31.570 --> 00:04:35.900
我不需要返回任何值 因此可以刪除這行

00:04:35.900 --> 00:04:38.080
這樣行數少了 而且更容易理解

00:04:38.080 --> 00:04:39.750
因此這樣處理更好一些

00:04:39.750 --> 00:04:43.100
為了表示沒有返回值 很重要的一點是在方法中

00:04:43.100 --> 00:04:46.570
說明返回資料型別是void

00:04:46.570 --> 00:04:49.390
Void的意思就是沒有返回值

00:04:49.390 --> 00:04:51.310
這是一個特殊的聲明方法

00:04:51.310 --> 00:04:53.940
因此void也是一個Java關鍵字

00:04:53.940 --> 00:04:56.720
我們回頭來看我們的Java關鍵字清單

00:04:56.720 --> 00:04:58.280
我們可以看到void在這個清單中

00:04:59.310 --> 00:05:01.310
如果不需要返回任何值

00:05:01.310 --> 00:05:04.130
請確保不要這樣留為空白

00:05:04.130 --> 00:05:07.470
因為這是一個java語法錯誤

00:05:07.470 --> 00:05:09.430
我們在這里鍵入型別標記void 是小寫的v

00:05:10.500 --> 00:05:12.310
然后繼續 現在請你自己看這篇文章

00:05:12.310 --> 00:05:17.190
可以跳過不能理解的部分

00:05:17.190 --> 00:05:18.090
或者Google在線找尋更多的訊息

00:05:18.090 --> 00:05:21.310
在你從這篇文章學到更多知識之后

00:05:21.310 --> 00:05:22.249
你可以繼續處理任務

00:05:23.500 --> 00:05:24.560
然后檢查筆記

00:05:24.560 --> 00:05:28.290
你會看到一個指向四個不同方法的代碼

00:05:28.290 --> 00:05:30.440
每個方法都有一個錯誤

00:05:30.440 --> 00:05:33.560
你的任務是要找到這些方法中的錯誤

00:05:34.850 --> 00:05:37.110
有多個方法可以修復這個代碼

00:05:37.110 --> 00:05:40.710
假設每個方法頂部的javadoc備注是正確的

00:05:40.710 --> 00:05:42.210
我們期望讓代碼與它們符合

00:05:43.410 --> 00:05:44.680
方法看上去是這樣的

00:05:45.810 --> 00:05:48.120
請標出有錯誤的代碼行號

00:05:48.120 --> 00:05:51.060
行號位于這里左側欄

00:05:51.060 --> 00:05:55.100
然后簡單描述代碼行為什么有錯誤

00:05:55.100 --> 00:05:56.872
行號在這里 描述在這里

00:05:56.872 --> 00:05:57.993
完成之后 可以繼續看講解視訊

