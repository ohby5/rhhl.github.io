WEBVTT
Kind: captions
Language: zh-CN

00:00:00.490 --> 00:00:01.635
你还记得这些盒子吗？

00:00:01.635 --> 00:00:02.809
什么盒子？

00:00:02.809 --> 00:00:04.090
这些盒子

00:00:04.090 --> 00:00:06.910
— 嗯 — 你记得它们吗？

00:00:06.910 --> 00:00:07.480
嗯 嗯

00:00:07.480 --> 00:00:08.260
我记得它们

00:00:08.260 --> 00:00:10.380
它们是变量 你可以把值放进去

00:00:10.380 --> 00:00:10.930
嗯 并且

00:00:10.930 --> 00:00:15.020
你可以把多个变量整合起来创建一个更大的 Java 对象

00:00:15.020 --> 00:00:16.790
你可以把两个或更多的变量

00:00:16.790 --> 00:00:18.420
变成更大的变量

00:00:18.420 --> 00:00:19.709
— 确实 — 好的

00:00:19.709 --> 00:00:21.751
像一个 TextView

00:00:21.751 --> 00:00:23.960
我们可以有一个整型变量

00:00:23.960 --> 00:00:25.640
这是关于字体大小的

00:00:25.640 --> 00:00:26.210
确实

00:00:26.210 --> 00:00:27.752
好的

00:00:27.752 --> 00:00:28.637
然后你也可以有一个

00:00:28.637 --> 00:00:29.460
字符串变量

00:00:29.460 --> 00:00:31.830
字符串变量是关于真实文本本身的

00:00:31.830 --> 00:00:36.240
这些变量都可以放到 TextView 中 成为 TextView 的声明

00:00:36.240 --> 00:00:38.970
我们使用不同的方法与这些变量互动

00:00:38.970 --> 00:00:39.900
我们接下来会进行操作

00:00:39.900 --> 00:00:40.500
好的

00:00:40.500 --> 00:00:41.290
我们开始吧

00:00:42.480 --> 00:00:46.220
正如我们之前提到的 像这样在屏幕上显示 TextView

00:00:46.220 --> 00:00:49.690
实际上是通过应用里的 Java 对象控制的

00:00:49.690 --> 00:00:52.300
这是一个 TextView Java 对象的示例

00:00:52.300 --> 00:00:55.890
他像一个盒子 在它的里面有声明的变量

00:00:55.890 --> 00:00:58.350
声明是由一堆字段组成的

00:00:58.350 --> 00:01:00.240
字段是一个变量 就像第二课

00:01:00.240 --> 00:01:02.760
我们学全局变量时说的

00:01:02.760 --> 00:01:05.730
我们可以使用文本字段来存储 today 字符串

00:01:05.730 --> 00:01:09.220
它是最后在屏幕上显示的文本

00:01:09.220 --> 00:01:13.520
我们可以使用一个整型字段来存储文本的字体大小

00:01:13.520 --> 00:01:14.910
还有其他的一些字段

00:01:14.910 --> 00:01:19.460
像文本颜色 字体族 这些组成 TextView 的声明

00:01:19.460 --> 00:01:21.900
我只是没有把它们画在图片上

00:01:21.900 --> 00:01:23.940
当应用运行的时候 为了和 Java 对象互动

00:01:23.940 --> 00:01:28.420
并且改变它的值 我们可以调用 TextView 的方法

00:01:28.420 --> 00:01:31.020
我们之前在第三课学到的方法

00:01:31.020 --> 00:01:35.120
在 TextView 中的一些实例方法是 setText 和 getText

00:01:35.120 --> 00:01:39.910
还有 setTextSize 或者 getTextSize 等等

00:01:39.910 --> 00:01:43.190
每一个方法都只执行一串指令

00:01:43.190 --> 00:01:45.590
还有像 onDraw 这样的复杂方法

00:01:45.590 --> 00:01:48.440
它用来处理在屏幕上绘画 TextView

00:01:48.440 --> 00:01:53.350
所以总体来说 TextView 对象包含了 TextView 中声明的信息

00:01:53.350 --> 00:01:57.850
你可以调用这些方法与 TextView 互动

00:01:57.850 --> 00:02:01.500
例如修改声明或者做更复杂的动作

00:02:02.850 --> 00:02:06.565
为了在屏幕上显示 TextView  实际上有一个

00:02:06.565 --> 00:02:08.838
TextView 的 Java 对象放在应用里

00:02:08.838 --> 00:02:13.710
这个特定的 ImageView 包含声明信息 比如图像应该怎样显示

00:02:13.710 --> 00:02:17.680
以及尺寸类型 像居中

00:02:17.680 --> 00:02:20.490
再者 还有其他字段组成 ImageView 的声明

00:02:20.490 --> 00:02:22.250
我只是没有在这画出来

00:02:22.250 --> 00:02:25.759
有像 setImage setScaleType 的方法 甚至更复杂的方法

00:02:25.759 --> 00:02:30.330
像 onDraw 它将 ImageView 绘画到屏幕上

00:02:30.330 --> 00:02:31.560
需要注意的是 作为开发人员

00:02:31.560 --> 00:02:35.480
我们不需要明确地调用 onDraw 来告诉它画到屏幕上

00:02:35.480 --> 00:02:39.880
Android 自动为我们处理这些调用 但是调用这些方法

00:02:39.880 --> 00:02:43.910
用来改变 ImageView 是非常有用的 例如

00:02:43.910 --> 00:02:47.580
我们怎样知道 ImageView 声明里的所有属性是什么

00:02:47.580 --> 00:02:50.530
以及它里面有哪些方法？

00:02:50.530 --> 00:02:53.980
为了回答这个问题 我们必须看一下这个对象的类的定义

00:02:55.010 --> 00:02:57.574
它是一个叫做 TextView.java 的文件

00:02:57.574 --> 00:03:00.890
与我们定义的 MainActivity.java 类似

00:03:00.890 --> 00:03:05.130
在这个 TextView 类文件里 我们有很多

00:03:05.130 --> 00:03:08.530
谈论 TextView 声明和方法的代码

00:03:08.530 --> 00:03:12.240
现在它并没有明确地表示任何声明和方法 但是它包含

00:03:12.240 --> 00:03:14.990
声明信息和方法信息

00:03:16.020 --> 00:03:19.970
你可以想到 作为定义 TextView 行为的规则

00:03:19.970 --> 00:03:25.750
对象实例能够包含特定的信息 像文本字符串 today

00:03:25.750 --> 00:03:26.760
或文本字号18

00:03:26.760 --> 00:03:32.420
你可以使用这个类来创建更多的 TextView 对象实例

00:03:32.420 --> 00:03:34.290
而且它们有不同的文本字符串

00:03:34.290 --> 00:03:37.010
我认为这个可以包含字符串 hello

00:03:37.010 --> 00:03:39.800
这个可以包含字符串 goodbay

00:03:39.800 --> 00:03:43.050
它们也可以有不同的字号 不同的字体颜色 等等

00:03:44.080 --> 00:03:47.520
然而 它们都是以类模板为基础的

00:03:47.520 --> 00:03:50.670
你也许很难区分一个类和一个对象实例

00:03:50.670 --> 00:03:51.890
但是没关系

00:03:51.890 --> 00:03:53.760
你需要花费一些时间来习惯

00:03:53.760 --> 00:03:55.630
有一个比喻来帮助你

00:03:55.630 --> 00:03:59.270
你可以想象成给一个房子建造平面图

00:03:59.270 --> 00:04:02.680
你可以使用这个平面图来建造真实的房子

00:04:02.680 --> 00:04:04.320
每一个房子都有一点不同

00:04:04.320 --> 00:04:06.990
但是它们都是基于这个平面图来建造的

00:04:06.990 --> 00:04:10.270
记住平面图并不是房子本身 这点很重要

00:04:10.270 --> 00:04:12.110
它只是一个计划

00:04:12.110 --> 00:04:17.079
同样的道理 TextView 类是用来创建这些对象实例的

00:04:17.079 --> 00:04:20.480
所以这些实例是有真实的文本值

00:04:20.480 --> 00:04:23.350
文本颜色值和字体大小

00:04:23.350 --> 00:04:25.010
那么其中的一个类看起来像什么呢？

