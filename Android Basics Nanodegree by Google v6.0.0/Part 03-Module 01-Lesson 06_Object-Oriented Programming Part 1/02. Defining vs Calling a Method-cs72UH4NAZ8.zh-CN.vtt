WEBVTT
Kind: captions
Language: zh-CN

00:00:00.670 --> 00:00:02.760
所以 今天你要怎样去上班？

00:00:02.760 --> 00:00:04.190
我有一辆自行车

00:00:04.190 --> 00:00:05.280
你呢？

00:00:05.280 --> 00:00:06.440
好的 我开车去

00:00:06.440 --> 00:00:08.020
酷 你的车怎么样？

00:00:08.020 --> 00:00:08.600
很好

00:00:08.600 --> 00:00:09.870
是吗？你知道在汽车的内部

00:00:09.870 --> 00:00:11.840
是如何工作的吗？

00:00:11.840 --> 00:00:13.090
不 我不需要知道

00:00:13.090 --> 00:00:15.630
我只要把钥匙插进去 然后开走它

00:00:15.630 --> 00:00:18.040
要知道 这就像是写代码

00:00:18.040 --> 00:00:18.860
哪里像？

00:00:18.860 --> 00:00:21.220
每一件事都有点像编写代码

00:00:21.220 --> 00:00:22.330
- 好吧 - 继续听我说

00:00:22.330 --> 00:00:24.740
在之前的课里 我们给学生们很多的代码

00:00:24.740 --> 00:00:26.670
是 我们给他们一些方法

00:00:26.670 --> 00:00:28.160
像 display 方法和 display price 方法

00:00:28.160 --> 00:00:28.940
对 我们不停地说

00:00:28.940 --> 00:00:30.200
好了 不要担心这个

00:00:30.200 --> 00:00:31.720
我们将讨论它之后会做什么

00:00:31.720 --> 00:00:33.290
就是现在

00:00:33.290 --> 00:00:34.120
- 好 - 好

00:00:34.120 --> 00:00:36.520
所以 就像你知道汽车是如何工作的

00:00:36.520 --> 00:00:37.560
你可以利用这些

00:00:37.560 --> 00:00:39.510
学生能够使用那个方法

00:00:39.510 --> 00:00:40.035
- 好 - 对吗？

00:00:40.035 --> 00:00:41.845
但是我们写这个方法 所以在这种情况下我们是汽车的设计者

00:00:41.845 --> 00:00:43.800
我明白了

00:00:43.800 --> 00:00:46.380
所以主要的思想是你可以在某处定义你的方法

00:00:46.380 --> 00:00:48.090
这看起来就像制造汽车

00:00:48.090 --> 00:00:49.590
之后我们调用这个方法

00:00:49.590 --> 00:00:51.100
这就像开车一样

00:00:51.100 --> 00:00:51.860
是啊

00:00:51.860 --> 00:00:53.200
接下来让我们使用这些思想

00:00:53.200 --> 00:00:54.500
听起来不错

00:00:54.500 --> 00:00:56.506
在 MainActivity.java 文件里

00:00:56.506 --> 00:00:59.540
display 方法在此定义

00:00:59.540 --> 00:01:02.956
这正是获取调用的地方 在 increment 方法

00:01:02.956 --> 00:01:04.769
和 decrement 方法里

00:01:04.769 --> 00:01:08.640
display 方法是获得一个整数

00:01:08.640 --> 00:01:10.550
在屏幕上显示它

00:01:10.550 --> 00:01:11.730
像右边这样

00:01:11.730 --> 00:01:16.360
定义一个方法 我们也可以只复制讲师注释里的代码

00:01:16.360 --> 00:01:21.300
然后粘贴到调用它的方法里

00:01:21.300 --> 00:01:25.580
因为 number 不是一个变量 我们要把它改为 quantity

00:01:25.580 --> 00:01:26.550
如果你也想在 increment 方法里做同样的工作

00:01:26.550 --> 00:01:30.940
复制这段代码 然后粘贴到这

00:01:30.940 --> 00:01:33.740
所以这段代码能够和之前一样有效运行

00:01:33.740 --> 00:01:35.950
但是现在我们不需要 display 方法

00:01:35.950 --> 00:01:40.060
这样做的缺点就是在这两个方法里

00:01:40.060 --> 00:01:41.150
会有重复的代码

00:01:41.150 --> 00:01:46.170
相反 如果我们定义 display 方法 然后我们只是通过它的名字调用它

00:01:46.170 --> 00:01:49.500
对于应用来说较少的代码是更好的

00:01:49.500 --> 00:01:51.670
我还会给你看一些其他看起来很酷的东西

00:01:51.670 --> 00:01:55.540
当你看到一个方法 你可以点击它 然后点击右键

00:01:55.540 --> 00:01:59.340
找到 Declaration 或者如果你在一个 Mac 上可以 Command + V

00:02:00.610 --> 00:02:04.100
这样就会滚动到方法被定义的地方

00:02:04.100 --> 00:02:07.650
这是有用的 因为你可以看到真实的指令

00:02:07.650 --> 00:02:09.490
包含在方法里面

00:02:09.490 --> 00:02:10.300
对于其他的方法

00:02:10.300 --> 00:02:14.480
它可能会打开一个声明 在 Android 框架代码里

00:02:14.480 --> 00:02:18.940
这是 Android 团队编写的 TextView.java 文件

00:02:18.940 --> 00:02:22.200
这看起来像魔术 

00:02:22.200 --> 00:02:26.150
它显示你可以随时跟踪它回到它被定义的代码行

00:02:26.150 --> 00:02:29.970
无论是你还是 Android 团队里的某人

00:02:29.970 --> 00:02:33.150
为了让你了解定义和调用之间的差别

00:02:33.150 --> 00:02:35.930
我们修改 MainActivity

00:02:35.930 --> 00:02:38.960
改变定义方法的方式

00:02:38.960 --> 00:02:42.585
通过改变 display 方法的名为 displayQuantity 

00:02:42.585 --> 00:02:47.450
对于调用这个方法 我们需要对代码做哪些改变呢？

00:02:47.450 --> 00:02:51.710
如果这些改变在你的应用上出错了 确定解决这些错误

00:02:51.710 --> 00:02:53.770
这样应用才能在你的手机上再次运行

00:02:53.770 --> 00:02:55.100
当你完成后勾选这些复选框

