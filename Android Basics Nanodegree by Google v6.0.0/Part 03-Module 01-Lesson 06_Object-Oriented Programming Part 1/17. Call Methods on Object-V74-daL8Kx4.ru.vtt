WEBVTT
Kind: captions
Language: ru

00:00:00.860 --> 00:00:04.030
Вернемся к алгоритму <i>display</i> <i>message</i>
который мы рассматривали ранее.

00:00:05.030 --> 00:00:07.570
Мы пытались понять
что здесь происходит.

00:00:08.630 --> 00:00:12.450
Из того что мы пока узнали, похоже
что у нас есть объект <i>ТextView</i> и

00:00:12.450 --> 00:00:15.670
пременная с названием 
<i>orderSummaryTextView</i>.

00:00:15.670 --> 00:00:18.870
Дальше идет большая часть
незнакомого нам кода.

00:00:18.870 --> 00:00:22.820
Но в следующей строке мы используем
переменную <i>оrderSummaryTextView</i>

00:00:22.820 --> 00:00:25.030
и постараемся назначить
текст для этого сообщения.

00:00:26.250 --> 00:00:29.470
Давайте узнаем больше как вызывать
такие алгоритмы для объектов.

00:00:31.250 --> 00:00:34.920
Когда мы запускаем алгоритм
на объекте у него будет такой формат.

00:00:34.920 --> 00:00:39.560
Сначала напишите Object Variable Name
в этом случае - <i>TextView</i>

00:00:39.560 --> 00:00:41.160
а после добавляем а.

00:00:41.160 --> 00:00:45.350
Следующим идет название
алгоритма - в этом случае setText.

00:00:45.350 --> 00:00:49.390
В TextView Java class этот алгоритм
определен именно так.

00:00:49.390 --> 00:00:53.250
Описание алгоритма также
указывает на исходный параметр -

00:00:53.250 --> 00:00:58.060
строку, и мы поставим скобки и
назначим строку исходным параметром.

00:00:58.060 --> 00:00:59.700
А в конце всего поставим
точку с запятой.

00:01:00.920 --> 00:01:05.459
Когда вы напишите эту строку кода
она будет менять объект <i>titleTextView</i>

00:01:05.459 --> 00:01:08.100
так что она будет выводить
это на экран.

00:01:08.100 --> 00:01:10.490
Мы использвали тут имя
объектной переменной потому

00:01:10.490 --> 00:01:13.600
что в приложении может
быть несколько <i>TextViews</i>.

00:01:13.600 --> 00:01:16.379
Поэтому убедитесь что вы вызываете
алгоритм прописанный справа.

00:01:17.560 --> 00:01:20.980
При определении исходных аргументов
убедитесь что вы определяете

00:01:20.980 --> 00:01:24.620
правильные аргументы в верном порядке
- как в описании алгоритма.

00:01:25.660 --> 00:01:29.460
И если исходных нет то будет
просто набор пустых скобок.

00:01:29.460 --> 00:01:32.820
Мы передаем исходные в алгоритм так,
как выучили это

00:01:32.820 --> 00:01:34.110
в третьем уроке.

00:01:34.110 --> 00:01:36.140
И помните ставить вот эту

00:01:36.140 --> 00:01:38.450
разделительную точку.

00:01:38.450 --> 00:01:42.450
Вот еще один пример с тем
же самым объектом <i>titleTextView</i>,

00:01:42.450 --> 00:01:45.190
Мы вызовем ему алгоритм <i>setTextSize</i>.

00:01:45.190 --> 00:01:49.220
Это алгоритм берет целое число как
исходное для нового размера шрифта.

00:01:49.220 --> 00:01:51.830
В этом случае это будет просто 18.

00:01:52.980 --> 00:01:55.510
Когда Android-утройство исполнит
эту строку кода,

00:01:55.510 --> 00:02:00.460
то изменит это titleTextView так
чтобы у шрифта был размер 18.

00:02:00.460 --> 00:02:02.260
В этом примере

00:02:02.260 --> 00:02:06.540
мы вызываем алоритм <i>warningTextView</i>
для объекта <i>TextView</i> .

00:02:07.580 --> 00:02:11.140
Это алгоритм <i>setTextColor</i>, новый цвет
- исходное значение для него.

00:02:12.140 --> 00:02:16.010
Обратите внимание что цвет
определен как <i>Color.RED</i>.

00:02:16.010 --> 00:02:17.670
Если мы поищем в документации
классы цвета

00:02:17.670 --> 00:02:22.030
то внизу увидим что красный
здесь определен.

00:02:22.030 --> 00:02:25.290
Есть еще много других цветов которые
вы тоже можете использовать.

00:02:26.370 --> 00:02:30.850
И при вызове <i>setTextColor</i>, можно
вызвать <i>Color.BLUE</i> или <i>Color.BLACK</i>.

00:02:30.850 --> 00:02:33.835
And lastly, here is an example of
calling a method on an ImageView.

00:02:34.882 --> 00:02:39.230
У этого объекта <i>ImageView</i>
есть переменная <i>welcomeImageView</i>, и

00:02:39.230 --> 00:02:41.260
мы вызываем для них
алгоритм <i>setImageResource</i>.

00:02:42.380 --> 00:02:46.135
Этот алгоритм берет как исходное
картинку для определения в ImageView.

00:02:47.400 --> 00:02:51.580
Мы прописываем картинку как <i>resourceID</i>,
в формате <i>R.drawable</i>.

00:02:51.580 --> 00:02:53.000
А это имя файла,

00:02:54.100 --> 00:02:58.610
еще один пример использования
<i>resourceIDs</i> в Java коде.

00:02:58.610 --> 00:03:02.059
за полным списком алгоритмов которые
можно вызвать на объект <i>TextView</i>

00:03:02.059 --> 00:03:04.867
обратитесь к документации
Android для TextView.

00:03:04.867 --> 00:03:08.810
Вы моежет найти ее поиском по
TextView Android и кликнув сюда.

00:03:09.840 --> 00:03:12.110
Это уже знакомая нам страница,

00:03:12.110 --> 00:03:15.740
нам уже известны аттрибуты XML
перечисленные на ней.

00:03:16.830 --> 00:03:19.900
Если пролистать вниз дальше я увижу
список всех публичных алгоритмов

00:03:19.900 --> 00:03:20.790
для класса <i>text view</i>.

00:03:21.910 --> 00:03:22.870
Если надо найти что-то

00:03:22.870 --> 00:03:27.210
используйте Cmd+F, или
Ctrl+F if в Windows.

00:03:27.210 --> 00:03:29.900
Я собираюсь найти алгоритм
<i>setTextColor</i> который мы использовали.

00:03:31.200 --> 00:03:32.740
Вот алгоритм <i>setTextColor</i>

00:03:32.740 --> 00:03:35.310
и он использует номер цвета
как исходный параметр.

00:03:36.420 --> 00:03:40.540
Все эти алгоритмы прописаны как
публичные в классе TextView.

00:03:40.540 --> 00:03:43.170
Вот почему мы можем
обратиться к ним сейчас.

00:03:43.170 --> 00:03:44.910
Если бы они ыбли объявлены приватными,

00:03:44.910 --> 00:03:46.210
мы бы их здесь не нашли.

00:03:47.400 --> 00:03:49.070
При вызове этих алгоритмов

00:03:49.070 --> 00:03:52.370
проверяйте какие исходные
параметры нужны и что вы

00:03:52.370 --> 00:03:55.680
передаете их в верном порядке
и правильного типа данных.

00:03:56.910 --> 00:03:58.040
Иногда при просмотре кода вы

00:03:58.040 --> 00:04:02.130
можете не заметить точку
при вызове алгоритмов.

00:04:02.130 --> 00:04:06.150
Разница в том что вы можете
быть внутри класса или снаружи.

00:04:06.150 --> 00:04:08.730
Посмотрим на пример внутри
класса <i>TextView</i>.

00:04:08.730 --> 00:04:12.540
У нас определен алгоритм <i>setText</i>,
и какой то другой алгоритм.

00:04:12.540 --> 00:04:16.589
Допустим вы хотите вызвать <i>setText</i>
из этого другого алгоритма.

00:04:16.589 --> 00:04:21.040
Вы можете это сделать вызвав <i>setText</i>
и установив исходный параметр.

00:04:21.040 --> 00:04:24.070
Но где точка и где название
объектной переменной?

00:04:24.070 --> 00:04:28.800
Вот эта строка это своего рода
<i>this.setText</i>("Hello").

00:04:28.800 --> 00:04:31.360
Она обращается к текущему объекту

00:04:31.360 --> 00:04:34.800
и после вызывает <i>setText</i>
для этого объекта.

00:04:34.800 --> 00:04:38.880
С этим форматом мы знакомы лучше
при вызове алгоритмов для объектов.

00:04:38.880 --> 00:04:42.301
Однако <i>this.part</i> необязательна,

00:04:42.301 --> 00:04:47.380
и чтобы сделать код лаконичнее мы
можем прсто вызвать <i>setText("Hello)</i>.

00:04:47.380 --> 00:04:50.670
Обратите внимание на разницу
между вызовом <i>setTexts</i> в классе и

00:04:50.670 --> 00:04:53.800
вызовом <i>setTexts</i> вне класса.

00:04:53.800 --> 00:04:55.990
Когда вы об этом подумаете
это обретет смысл,

00:04:55.990 --> 00:04:59.380
поскольку четко ясно каким <i>TextView</i>
вы хотите установить текст,

00:04:59.380 --> 00:05:03.380
в случае когда есть несколько
<i>TextViews</i> внутри этого класса.

00:05:03.380 --> 00:05:06.280
Вот еще разница между
внутренним классом <i>TextView</i>

00:05:06.280 --> 00:05:08.970
и внешним классом <i>TextView</i>.

00:05:08.970 --> 00:05:12.330
С классом <i>TextView</i> вы можете получить
доступ к приватным переменным

00:05:12.330 --> 00:05:14.210
и приватным алгоритмам.

00:05:14.210 --> 00:05:16.060
Снаружи класса TextView нельзя

00:05:16.060 --> 00:05:21.150
использовать приватные алгоритмы
и нет доступа к приватным переменным.

00:05:21.150 --> 00:05:25.100
В классе <i>MainActivity</i> есть доступ
только к публичным алгоритмам

00:05:25.100 --> 00:05:27.300
и публичным переменным
в классе <i>TextView</i>.

