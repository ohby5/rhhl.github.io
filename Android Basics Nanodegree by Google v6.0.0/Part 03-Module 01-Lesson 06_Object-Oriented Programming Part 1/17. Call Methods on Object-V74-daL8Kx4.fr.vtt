WEBVTT
Kind: captions
Language: fr

00:00:00.860 --> 00:00:04.030
Revenons au message d'affichage
de méthode que nous cherchions.

00:00:05.030 --> 00:00:07.570
Nous avons essayé de comprendre ce qui
qui se passe exactement ici.

00:00:08.630 --> 00:00:12.450
Nous avons appris jusqu'à présent qu'il
il y a un objet TextView, et

00:00:12.450 --> 00:00:15.670
le nom de variable est appelé
orderSummaryTextView.

00:00:15.670 --> 00:00:18.870
Ensuite, il dit un tas de code
que nous ne reconnaissons pas vraiment.

00:00:18.870 --> 00:00:22.820
Sur la ligne suivante, on utilise cette
variable orderSummaryTextView et

00:00:22.820 --> 00:00:25.030
nous essayons de mettre le
texte sur ce message.

00:00:26.250 --> 00:00:29.470
Voyons comment appeler ces méthodes
avec ce genre d'objets.

00:00:31.250 --> 00:00:34.920
Quand nous appelons la méthode sur l'objet
il doit suivre ce format.

00:00:34.920 --> 00:00:39.560
il faut écrire l'objet Nom de la variable
dans ce cas c'est titleTextView

00:00:39.560 --> 00:00:41.160
Puis nous ajoutons un point.

00:00:41.160 --> 00:00:45.350
Puis il est suivi par le nom de la méthode
qui est setText, dans ce cas.

00:00:45.350 --> 00:00:49.390
Cette méthode est définie exactement de
cette façon dans la classe TextView Java.

00:00:49.390 --> 00:00:53.250
La déclaration de méthode spécifie
qu'il y a un paramètre d'entrée

00:00:53.250 --> 00:00:58.060
une chaîne, on a mis les parenthèses et
on passe dans une chaîne en entrée.

00:00:58.060 --> 00:00:59.700
Ensuite, nous finissons la déclaration
avec un point-virgule.

00:01:00.920 --> 00:01:05.459
Lorsque vous écrivez cette ligne de code,
ça modifie l'objet de titleTextView sorte

00:01:05.459 --> 00:01:08.100
ça s'affiche sur l'écran.

00:01:08.100 --> 00:01:10.490
C'est pourquoi nous utilisons l'objet
nom de la variable ici,

00:01:10.490 --> 00:01:13.600
car il pourrait y avoir de multiples
TextViews dans votre application.

00:01:13.600 --> 00:01:16.379
Alors appelez la méthode
sur l'instance de l'objet à droite.

00:01:17.560 --> 00:01:20.980
Lorsque vous spécifiez l'argument d'entrée
assurez-vous que vous spécifiez

00:01:20.980 --> 00:01:24.620
les bons arguments dans le bon ordre
selon la déclaration de méthode.

00:01:25.660 --> 00:01:29.460
Sii il n'y a pas d'entrées, vous devez
avoir un ensemble vide de parenthèses.

00:01:29.460 --> 00:01:32.820
Le chemin, à mettre en entrée pour une
méthode est le même qu'avant

00:01:32.820 --> 00:01:34.110
dans la leçon trois.

00:01:34.110 --> 00:01:36.140
Et rappelez-vous de séparer
l'objet et le nom de variable et

00:01:36.140 --> 00:01:38.450
le nom de méthode avec ce point.

00:01:38.450 --> 00:01:42.450
Voici un autre exemple,
sur ce même objet titleTextView,

00:01:42.450 --> 00:01:45.190
Nous allons appeler
une méthode de SetTextSize sur lui.

00:01:45.190 --> 00:01:49.220
Cette méthode prend un entier comme
entrée pour la nouvelle taille du texte.

00:01:49.220 --> 00:01:51.830
Il suffit de passer
à 18 en taille du texte.

00:01:52.980 --> 00:01:55.510
Lorsque le dispositif
Android exécute cette ligne de code,

00:01:55.510 --> 00:02:00.460
Il va changer cette titleTextView
pour une police de taille 18.

00:02:00.460 --> 00:02:02.260
Dans cet exemple,

00:02:02.260 --> 00:02:06.540
Nous appelons une méthode sur le TextView
objet qui est appelé warningTextView.

00:02:07.580 --> 00:02:11.140
La méthode est appelée SetTextColor,
et prend en entrée une nouvelle couleur.

00:02:12.140 --> 00:02:16.010
Notez que la couleur est
spécifiée comme Color.RED.

00:02:16.010 --> 00:02:17.670
Donc, si nous regardons la documentation

00:02:17.670 --> 00:02:22.030
alors, nous pouvons faire défiler en 
bas et voir que le rouge est défini ici.

00:02:22.030 --> 00:02:25.290
Il y a un tas d'autres couleurs
que vous pouvez utiliser ici aussi.

00:02:26.370 --> 00:02:30.850
Quand vous appelez un SetTextColor, 
vous pouvez : Color.BLUE ou Color.BLACK.

00:02:30.850 --> 00:02:33.835
Et enfin, voici un exemple de pour
appeler une méthode sur un ImageView.

00:02:34.882 --> 00:02:39.230
Cet objet d'ImageView a une variable
nom de welcomeImageView, et

00:02:39.230 --> 00:02:41.260
Nous appelons la méthode de
setImageResource sur elle.

00:02:42.380 --> 00:02:46.135
Elle prend en entrée la nouvelle image que
nous devrions mettre sur cette ImageView.

00:02:47.400 --> 00:02:51.580
On spécifie la nouvelle image comme ID
des ressources, au format de R.drawable.

00:02:51.580 --> 00:02:53.000
Et ceci est le nom du fichier,

00:02:54.100 --> 00:02:58.610
C'est une utilisation d'identifiants
de ressources à l'aide de code Java.

00:02:58.610 --> 00:03:02.059
Pour obtenir la liste des méthodes qui
vous pouvez appeler sur un objet TextView,

00:03:02.059 --> 00:03:04.867
ouvrez juste en haut la page 
de documentation TextView Android.

00:03:04.867 --> 00:03:08.810
Vous pouvez y accéder en cherchant
TextView Android et cliquant ici.

00:03:09.840 --> 00:03:12.110
Ceci est une page que
nous reconnaissons déjà, et

00:03:12.110 --> 00:03:15.740
On connait déjà sur les attributs XML
qui sont répertoriés sur cette page.

00:03:16.830 --> 00:03:19.900
ici je peux voir une liste
de toutes les méthodes publiques

00:03:19.900 --> 00:03:20.790
Dans la classe d'affichage de texte.

00:03:21.910 --> 00:03:22.870
Si vous voulez trouver quelque chose,

00:03:22.870 --> 00:03:27.210
Vous pouvez utiliser Cmd + F, ou
Ctrl + F si vous êtes sur Windows.

00:03:27.210 --> 00:03:29.900
Pour la méthode de SetTextColor
que nous utilisions auparavant.

00:03:31.200 --> 00:03:32.740
Voici la méthode SetTextColor et

00:03:32.740 --> 00:03:35.310
elle prend une couleur
entier comme un paramètre d'entrée.

00:03:36.420 --> 00:03:40.540
Ces méthodes ont été déclarées comme
publiques de la classe de TextView.

00:03:40.540 --> 00:03:43.170
Voilà pourquoi nous pouvons appeler
ces méthodes maintenant.

00:03:43.170 --> 00:03:44.910
Si elles avaient été déclarés
comme méthodes privées,

00:03:44.910 --> 00:03:46.210
Nous ne pourrions
pas les faire apparaître ici.

00:03:47.400 --> 00:03:49.070
Lorsque vous appelez ces méthodes,

00:03:49.070 --> 00:03:52.370
Assurez-vous de vérifier ce que entrée
paramètres est requis et

00:03:52.370 --> 00:03:55.680
que vous mettez les entrées dans l'ordre 
et que le type de données soit correct.

00:03:56.910 --> 00:03:58.040
Lorsque vous cherchez à code,

00:03:58.040 --> 00:04:02.130
Parfois, vous ne pourriez pas voir le
point lors de l'appel des méthodes.

00:04:02.130 --> 00:04:06.150
Il faut savoir si vous êtes à l'intérieur 
ou à l'extérieur d'une classe.

00:04:06.150 --> 00:04:08.730
Voyons un exemple au
sein de la classe TextView.

00:04:08.730 --> 00:04:12.540
Nous avons la méthode de setText défini,
ainsi que l'autre méthode.

00:04:12.540 --> 00:04:16.589
Vous voulez appeler le setText
procédé de cette autre méthode.

00:04:16.589 --> 00:04:21.040
On peut le faire en appelant setText et
puis passant dans le param d'entrée.

00:04:21.040 --> 00:04:24.070
Mais où est le point et
où est l'objet nom de la variable ?

00:04:24.070 --> 00:04:28.800
cette ligne en fait le tri pour
this.setText ("Bonjour").

00:04:28.800 --> 00:04:31.360
Ceci fait référence à
l'instance de l'objet actuel et

00:04:31.360 --> 00:04:34.800
puis setText est
appelé sur cet objet.

00:04:34.800 --> 00:04:38.880
C'est un format familiers 
pour appeler des méthodes sur des objets.

00:04:38.880 --> 00:04:42.301
Cependant c'est implicite et
il est facultatif,

00:04:42.301 --> 00:04:47.380
pour rendre notre code plus concis,
nous pouvons simplement appeler setText

00:04:47.380 --> 00:04:50.670
Alors remarquez la différence entre
setTexts appel au sein de la classe et

00:04:50.670 --> 00:04:53.800
appelant setTexts en 
dehors de cette classe

00:04:53.800 --> 00:04:55.990
Lorsque vous pensez à cela,
cela fait plus de sens,

00:04:55.990 --> 00:04:59.380
parce qu'il est très clair que
TextView vous souhaitez définir le texte,

00:04:59.380 --> 00:05:03.380
au cas où vous avez plusieurs
TextViews au sein de cette classe.

00:05:03.380 --> 00:05:06.280
Voici une autre différence entre
apporter intérieur de la classe TextView,

00:05:06.280 --> 00:05:08.970
Rapport étant à l'extérieur de la classe
TextView.

00:05:08.970 --> 00:05:12.330
Dans la catégorie des TextView,
on peut accéder à des variables privées et

00:05:12.330 --> 00:05:14.210
des méthodes privées.

00:05:14.210 --> 00:05:16.060
Si vous êtes en dehors 
de la classe TextView,

00:05:16.060 --> 00:05:21.150
On ne peut pas utiliser des méthodes 
privés et des variables privées.

00:05:21.150 --> 00:05:25.100
Dans la catégorie MainActivity, on ne peut
accéder qu'aux méthodes publiques et

00:05:25.100 --> 00:05:27.300
Variables publiques de la classe
TextView.

