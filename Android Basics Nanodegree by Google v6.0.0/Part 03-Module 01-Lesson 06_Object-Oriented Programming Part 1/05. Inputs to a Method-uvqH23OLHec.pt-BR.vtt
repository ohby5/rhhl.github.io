WEBVTT
Kind: captions
Language: pt-BR

00:00:00.480 --> 00:00:01.310
Espera.

00:00:01.310 --> 00:00:02.240
O que houve?

00:00:02.240 --> 00:00:04.525
Quando isso virou um programa
culinário de repente?

00:00:04.850 --> 00:00:07.270
Desde que começamos a falar sobre métodos.

00:00:07.270 --> 00:00:08.625
Pode explicar, Ana Maria Braga?

00:00:08.625 --> 00:00:11.650
Bem, você já fez um bolo alguma vez?

00:00:11.650 --> 00:00:13.570
Eu já comi!

00:00:13.580 --> 00:00:15.650
Certo. 
Então está qualificado para isso.

00:00:15.650 --> 00:00:16.530
Certo.

00:00:16.530 --> 00:00:20.140
Tudo o que você precisa fazer para assar 
um bolo é misturar farinha, açúcar...

00:00:20.140 --> 00:00:22.240
- Os ingredientes.
- Isso, os ingredientes.

00:00:22.240 --> 00:00:24.730
E então você segue as
instruções da receita.

00:00:24.730 --> 00:00:27.740
- Certo.
- E então vira um bolo.

00:00:28.240 --> 00:00:29.520
Como esse?

00:00:29.800 --> 00:00:30.750
Sim.

00:00:30.950 --> 00:00:31.870
Certo.

00:00:31.870 --> 00:00:33.820
Conectando a analogia
aos métodos mais uma vez.

00:00:34.145 --> 00:00:37.185
Então para um método você
coloca entradas.

00:00:37.185 --> 00:00:39.955
Como fizemos a quantidade
para o método de exibição?

00:00:39.955 --> 00:00:43.545
Isso, e então você executa
as instruções do método.

00:00:43.545 --> 00:00:46.230
Certo, quase igual a receita
para fazer um bolo?

00:00:46.230 --> 00:00:47.035
Isso!

00:00:47.035 --> 00:00:49.010
Então você tem retornados 
os valores de saída.

00:00:49.530 --> 00:00:51.873
Valores de saída, são deliciosos.

00:00:54.083 --> 00:00:55.410
Vamos procurar mais informações

00:00:55.410 --> 00:00:58.220
sobre parâmetros de entrada para métodos.

00:00:58.220 --> 00:01:02.510
Vou fazer uma pesquisa para
"parâmetros métodos Java".

00:01:02.510 --> 00:01:04.530
O primeiro link parece bom,
então vou clicar nele.

00:01:04.530 --> 00:01:08.240
Agora esse artigo fala sobre
como passar informação para um método.

00:01:08.240 --> 00:01:12.270
Aqui uma parte do código que calcula 
o pagamento mensal de um empréstimo.

00:01:12.270 --> 00:01:16.000
Ele tem quatro parâmetros de entrada:
valor do empréstimo, taxa de juros,

00:01:16.000 --> 00:01:20.440
valor futuro do empréstimo, assim como
os meses de duração do empréstimo.

00:01:20.440 --> 00:01:24.680
E então, dentro desse método, nós vemos
que podemos usar esses parâmetros

00:01:24.680 --> 00:01:28.100
como variáveis para
fazer nossas contas.

00:01:28.100 --> 00:01:30.120
Quando chamamos o método 
de pagamento computado,

00:01:30.120 --> 00:01:33.890
temos que ter certeza que colocamos
as entradas nessa ordem específica.

00:01:33.890 --> 00:01:37.130
O total do empréstimo tem que vir primeiro
e depois a taxa e assim por diante.

00:01:37.130 --> 00:01:38.480
Nos exercícios dessa sessão,

00:01:38.480 --> 00:01:41.520
você vai ter a chance de rever
esse artigo mais detalhadamente.

00:01:41.520 --> 00:01:43.810
Dentro da atividade principal
do aplicativo Just Java

00:01:43.810 --> 00:01:46.990
nós vamos modificar o método 
de exibição de quantidade

00:01:46.990 --> 00:01:49.580
e o parâmetro de entrada para
que você possa praticar.

00:01:49.800 --> 00:01:52.680
Observe que no método de decréscimo
do nosso aplicativo,

00:01:52.680 --> 00:01:54.880
que quando chamamos o método 
de exibição da quantidade

00:01:54.880 --> 00:01:58.670
estamos mudando a variável de quantidade
em uma entrada nesse método.

00:01:58.670 --> 00:02:01.110
Mas o parâmetro de entrada
é chamado <i>number</i>, então

00:02:01.110 --> 00:02:04.420
sempre que queremos nos referir a essa
entrada, só devemos escrever <i>number</i>.

00:02:04.420 --> 00:02:07.780
Agora tecnicamente, nós poderíamos
ter usado a quantidade global da variável

00:02:07.780 --> 00:02:11.150
neste método ao invés de passá-lo
como um parâmetro de entrada,

00:02:11.150 --> 00:02:14.430
mas com o propósito de ensinar você
sobre parâmetros de entrada,

00:02:14.430 --> 00:02:15.597
vamos deixar assim.

00:02:16.410 --> 00:02:19.480
Eu posso mudar essa chamada 
para o método de exibição de quantidade

00:02:19.480 --> 00:02:21.300
para que passe a entrada, o número 30.

00:02:22.280 --> 00:02:26.260
Isso é válido porque ainda corresponde
aos tipo de dados de entrada.

00:02:26.860 --> 00:02:29.430
Então no método de decréscimo
quando chamamos <i>displayQuantity</i>

00:02:29.430 --> 00:02:32.750
vai pular para cá e executar
essas instruções,

00:02:32.750 --> 00:02:35.320
e o número da variável terá o valor 30.

00:02:36.210 --> 00:02:40.140
Vou rodar no meu dispositivo para mostrar,
então quando eu rodar o botão "menos"

00:02:40.140 --> 00:02:43.090
no meu aplicativo, vai aparecer
uma quantidade de 30 aqui.

00:02:43.490 --> 00:02:44.790
Então deixe eu tentar.

00:02:45.240 --> 00:02:47.369
Pronto.
E realmente aconteceu isso.

00:02:47.970 --> 00:02:52.380
Também posso criar uma variável diferente,
e colocar como uma entrada para o método.

00:02:52.380 --> 00:02:55.390
Aqui eu criei uma variável local,
chamei uma quantidade

00:02:55.390 --> 00:02:56.700
e iniciei em 100.

00:02:57.000 --> 00:02:59.770
Passei essa variável
como entrada para este método,

00:02:59.770 --> 00:03:04.290
e agora o número da variável
aqui tem um valor de 100.

00:03:04.290 --> 00:03:06.350
Deixe-me mostrar no dispositivo.

00:03:06.350 --> 00:03:10.224
Agora quando eu pressiono o menos,
eu espero que a quantidade seja 100.

00:03:11.130 --> 00:03:12.120
E dá certo.

00:03:12.120 --> 00:03:14.630
Essas são só algumas coisas
que pode fazer para experimentar,

00:03:14.630 --> 00:03:17.004
passando diferentes entradas
para um método.

00:03:17.460 --> 00:03:19.510
Enquanto você trabalha
com parâmetros de entrada,

00:03:19.510 --> 00:03:22.680
outro termo que pode
surgir são argumentos.

00:03:22.680 --> 00:03:24.000
Quando você chama um método,

00:03:24.000 --> 00:03:27.570
as entradas sendo passadas para aquele
método são chamadas de argumentos.

00:03:27.570 --> 00:03:28.730
É uma palavra engraçada.

00:03:28.730 --> 00:03:31.500
Porque quando pensa em argumentos,
você pensa em pessoas gritando

00:03:31.500 --> 00:03:32.730
e se ofendendo.

00:03:32.730 --> 00:03:34.310
Mas isso não é assim.

00:03:34.310 --> 00:03:37.220
Argumentos são simplesmente entradas 
sendo passadas para um método.

00:03:37.220 --> 00:03:41.750
Parâmetros de entrada são as verdadeiras
entradas na sua declaração de método

00:03:41.750 --> 00:03:44.750
e aquelas são as variáveis que serão
usadas dentro do método.

00:03:44.750 --> 00:03:47.870
Então tem uma pequena diferença entre
parâmetro de entrada e argumentos.

00:03:48.060 --> 00:03:49.870
De qualquer forma, continue
e leia o artigo,

00:03:49.870 --> 00:03:53.040
e as notas do instrutor sobre
parâmetros de um método.

00:03:53.040 --> 00:03:55.850
Então experimente com 
o código em seu aplicativo.

00:03:55.850 --> 00:03:58.650
Primeiro, tente renomear 
o parâmetro de entrada "numero"

00:03:58.650 --> 00:04:01.380
dentro da declaração 
do método de exibição de quantidade.

00:04:01.380 --> 00:04:03.850
Simplesmente coloque
um nome diferente na variável.

00:04:03.850 --> 00:04:06.931
Então vá adiante, resolva qualquer erro,
e então rode o aplicativo de novo.

00:04:07.740 --> 00:04:10.660
Para o próximo teste, vá em frente
e mude o tipo de dado

00:04:10.660 --> 00:04:14.706
do parâmetro de entrada de número
de uma <i>int</i> para algo como uma <i>String</i>.

00:04:15.170 --> 00:04:18.014
Observe o que acontece e então
desfaça a mudança.

00:04:18.660 --> 00:04:20.906
Se quiser experimentar em outros,
fique a vontade.

00:04:21.149 --> 00:04:22.690
Por exemplo, se tem uma dúvida,

00:04:22.690 --> 00:04:25.560
sobre o que aconteceria se mudasse 
algo vá em frente e teste.

