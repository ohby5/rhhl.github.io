WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.769
从类中创建的对象并非永远存在

00:00:04.769 --> 00:00:07.080
通常来说 我们从类中创建一个对象

00:00:07.080 --> 00:00:09.254
用一些值来填充它的字段

00:00:09.255 --> 00:00:11.970
又或许创建另一个对象 

00:00:11.970 --> 00:00:14.685
再用不同的值填充其字段 

00:00:14.685 --> 00:00:17.640
但这两个对象 连同字段中储存的每一个值

00:00:17.640 --> 00:00:21.630
最终都会被销毁

00:00:21.629 --> 00:00:26.379
通常 对象作用域终止之时 该对象就会被销毁

00:00:26.379 --> 00:00:28.875
比如在这个例子中 我在这个方法里

00:00:28.875 --> 00:00:31.170
创建了变量 myItem

00:00:31.170 --> 00:00:34.429
作为 Item 类的一个对象

00:00:34.429 --> 00:00:35.774
一旦该方法终止

00:00:35.774 --> 00:00:38.560
这个 myItem 变量 

00:00:38.560 --> 00:00:41.929
包括其所有字段中的所有赋值 便不复存在

00:00:41.929 --> 00:00:45.359
这其实也说得通 因为对于一个你根本都不会再访问的对象

00:00:45.359 --> 00:00:50.215
其所含字段的值也不是那么重要

00:00:50.215 --> 00:00:52.605
不过 少数情况下

00:00:52.604 --> 00:00:54.659
即使该类中并没有任何对象

00:00:54.659 --> 00:00:59.009
你可能也希望储存某一字段的值

00:00:59.009 --> 00:01:04.676
这时 就需要在声明该字段时 添加关键词 static

00:01:04.677 --> 00:01:08.460
声明一个域为 static 就意味着这些值

00:01:08.459 --> 00:01:13.210
不再存储在这个对象本身 而是存储于类之中

00:01:13.210 --> 00:01:17.944
也就是说 这个类的所有对象将会共享这个具体的值

00:01:17.944 --> 00:01:22.349
也意味着 即使该类中的所有对象均被销毁

00:01:22.349 --> 00:01:25.924
这个值还是一直存储于这个类之中

00:01:25.924 --> 00:01:29.170
如果你要在同样的类中创建一个新的对象

00:01:29.170 --> 00:01:33.250
则存储在类中的值最终也将用于新创建的对象

00:01:33.250 --> 00:01:37.269
但请注意 这里的 static 并不代表这个值不会变

00:01:37.269 --> 00:01:39.189
实际上 如果这个值发生改变

00:01:39.189 --> 00:01:43.084
则该类中的每一个对象都会随之更新

00:01:43.084 --> 00:01:48.129
由于静态字段作用于类 而非对象

00:01:48.129 --> 00:01:51.429
Java 允许由类直接进入一个静态字段

00:01:51.430 --> 00:01:56.295
而无需创建该类的对象

00:01:56.295 --> 00:01:59.150
比如在这个例子中 我可以从 item 类直接进入 power 字段

00:01:59.150 --> 00:02:03.160
并且设置一个值

00:02:03.159 --> 00:02:05.664
我们再以编码为例

00:02:05.665 --> 00:02:09.230
在这个例子中 我创建可一个叫做“人”的类

00:02:09.229 --> 00:02:14.569
我想计算该类中创建的所有对象的个数

00:02:14.569 --> 00:02:18.354
所以我加入了这个 public int 字段 将其命名为 count

00:02:18.354 --> 00:02:20.000
在构造函数内

00:02:20.000 --> 00:02:21.694
就是默认的构造函数

00:02:21.694 --> 00:02:23.989
我用 1 做增量

00:02:23.990 --> 00:02:27.230
也就是说 我每创建一个新的人的对象

00:02:27.229 --> 00:02:30.914
count 变量就会加 1

00:02:30.914 --> 00:02:33.109
现在如果到主方法

00:02:33.110 --> 00:02:35.630
就可以看到 我已经建立了

00:02:35.629 --> 00:02:38.030
一共从 0 开始 一直到 100 的循环

00:02:38.030 --> 00:02:39.544
在这个循环内

00:02:39.544 --> 00:02:43.069
我要创建一个“人”类的新实例

00:02:43.069 --> 00:02:45.185
并且每当我创建一个对象

00:02:45.185 --> 00:02:48.895
都打印出在它里面安装的 count 值

00:02:48.895 --> 00:02:50.255
所以 当我运行这个代码时

00:02:50.254 --> 00:02:53.629
我希望我每创建一个新的“人”类对象时

00:02:53.629 --> 00:02:55.604
计数器都会加 1 

00:02:55.604 --> 00:02:58.219
当到达第 100 个人时

00:02:58.219 --> 00:03:00.155
count 值为 100

00:03:00.155 --> 00:03:03.550
所以 我想看到的数字应该介于 1 和 100 之间

00:03:03.550 --> 00:03:05.615
不过 如果我运行这个代码

00:03:05.615 --> 00:03:08.420
看起来我只是得到一些 1 

00:03:08.419 --> 00:03:12.199
也就是说 这个 count 变量并没有更新

00:03:12.199 --> 00:03:14.409
原因很简单

00:03:14.409 --> 00:03:16.145
如果我们回到“人”这个类中

00:03:16.145 --> 00:03:20.045
你会注意到 我并没有声明这个 count 变量为 static (静态) 

00:03:20.044 --> 00:03:24.199
也就是说 它属于对象 而不是类

00:03:24.199 --> 00:03:26.629
而且由于每次我创建一个新的对象

00:03:26.629 --> 00:03:31.085
其实都是在创建一个新的 count 变量 只是每个 count 变量都加 1

00:03:31.085 --> 00:03:35.840
所以每个对象有自己的 count 变量 它的值为 1

00:03:35.840 --> 00:03:40.784
不过 如果我为 count 变量加上 static 关键词

00:03:40.784 --> 00:03:44.384
那么这个变量现在就属于类 而不是对象

00:03:44.384 --> 00:03:46.519
而且每次我调用构造函数时

00:03:46.520 --> 00:03:49.784
它会为同样的 count 变量加 1 

00:03:49.784 --> 00:03:51.560
所以 如果我现在再运行一次

00:03:51.560 --> 00:03:56.164
我会得到 1 到 100 之间的所有数字 这正是我之前想要看到的

00:03:56.164 --> 00:03:59.659
计算从类中创建的实例的个数 

00:03:59.659 --> 00:04:03.500
是 static 关键词的常用情形之一

00:04:03.500 --> 00:04:06.210
你也来试试看吧

