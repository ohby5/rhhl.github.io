WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:04.200
Objetos criados de uma classe
não duram para sempre.

00:00:04.233 --> 00:00:07.200
Tipicamente, você cria
um objeto de uma classe,

00:00:07.233 --> 00:00:11.033
enche seus campos com valores
e talvez crie outro objeto,

00:00:11.067 --> 00:00:13.767
e encha seus campos
com valores diferentes,

00:00:13.800 --> 00:00:17.667
mas acaba que os dois objetos
serão destruídos,

00:00:17.700 --> 00:00:21.433
inclusive cada valor
armazenado em seus campos.

00:00:21.467 --> 00:00:26.233
Tipicamente, isso acontece
quando o escopo do objeto termina.

00:00:26.267 --> 00:00:28.933
Por exemplo, aqui,
dentro deste método,

00:00:28.967 --> 00:00:31.267
eu criei a variável myItem,

00:00:31.300 --> 00:00:34.267
que é um objeto
do tipo da classe Item.

00:00:34.300 --> 00:00:38.533
Quando este método termina,
a variável myItem não existe mais,

00:00:38.567 --> 00:00:41.900
inclusive os valores
de todos os campos dentro dela.

00:00:41.933 --> 00:00:46.200
Isso faz sentido, porque
não precisamos dos valores nos campos

00:00:46.233 --> 00:00:50.033
dentro de um objeto
que não se pode mais acessar.

00:00:50.067 --> 00:00:52.400
Entretanto,
em raras ocasiões,

00:00:52.433 --> 00:00:55.733
você pode querer armazenar
o valor de um certo campo

00:00:55.767 --> 00:00:58.933
mesmo não havendo objetos
para essa classe.

00:00:58.967 --> 00:01:02.333
Nesse caso,
acrescente a palavra static

00:01:02.367 --> 00:01:04.533
ao declarar este campo.

00:01:04.567 --> 00:01:07.700
Isto significará
que esses valores

00:01:07.733 --> 00:01:10.500
não estão mais armazenados
dentro do objeto,

00:01:10.533 --> 00:01:13.033
mas sim, dentro da classe.

00:01:13.067 --> 00:01:18.167
Ou seja, todos os objetos dessa classe
compartilharão esse mesmo valor.

00:01:18.200 --> 00:01:22.400
E mesmo que todos os objetos
da classe tenham sido destruídos,

00:01:22.433 --> 00:01:25.800
o valor ainda está
armazenado dentro da classe.

00:01:25.833 --> 00:01:29.300
Se você decidir criar
um novo objeto da mesma classe,

00:01:29.333 --> 00:01:33.300
ele acabará usando o mesmo valor
que foi armazenado na classe.

00:01:33.333 --> 00:01:37.300
Mas notem que static aqui
não significa que o valor não muda.

00:01:37.333 --> 00:01:39.167
Na verdade,
se o valor mudar,

00:01:39.200 --> 00:01:43.233
ele o atualizará em cada objeto
da classe de novo.

00:01:43.267 --> 00:01:47.867
Como campos estáticos pertencem
a classes, não a objetos,

00:01:47.900 --> 00:01:52.067
o Java permite acessá-los
diretamente da classe,

00:01:52.100 --> 00:01:55.367
em vez de ter que criar
um objeto dessa classe.

00:01:56.167 --> 00:01:57.567
Por exemplo, aqui,

00:01:57.600 --> 00:02:01.233
posso acessar o campo power
da classe Item diretamente

00:02:01.267 --> 00:02:03.100
e dar um valor a ele.

00:02:03.133 --> 00:02:05.633
Vejamos um exemplo
de código.

00:02:05.667 --> 00:02:09.400
Nele, eu criei uma classe
chamada Person.

00:02:09.433 --> 00:02:14.567
E quero contabilizar
cada objeto criado dessa classe.

00:02:14.600 --> 00:02:18.633
Acrescentei este campo public int
chamado count.

00:02:18.667 --> 00:02:21.667
E dentro do construtor,
que é o default,

00:02:21.700 --> 00:02:23.967
estou adicionando 1 no count.

00:02:24.000 --> 00:02:27.400
Ou seja, sempre que eu criar
um novo objeto Person,

00:02:27.433 --> 00:02:30.700
ele somará 1
à variável count.

00:02:30.733 --> 00:02:33.300
Se forem
ao método principal,

00:02:33.333 --> 00:02:38.200
verão que criei este laço
que começa no 0 e vai até 100

00:02:38.233 --> 00:02:43.300
e, dentro dele, estou criando
uma instância dessa classe Person.

00:02:43.333 --> 00:02:47.233
E sempre que criar um objeto,
eu imprimo o valor de count

00:02:47.267 --> 00:02:48.867
que está guardado nele.

00:02:48.900 --> 00:02:50.633
Quando eu rodar
este código,

00:02:50.667 --> 00:02:53.833
eu espero que sempre
que eu criar um objeto Person

00:02:53.867 --> 00:02:58.200
ele some 1 ao contador,
e quando chegar à 100ª pessoa

00:02:58.233 --> 00:03:00.400
o valor aqui será 100.

00:03:00.433 --> 00:03:03.467
Eu espero ver os números
entre 1 e 100.

00:03:03.500 --> 00:03:08.567
Mas se eu rodar este código,
pareço só conseguir muitos 1.

00:03:08.600 --> 00:03:12.233
Significa que a variável count
não está sendo atualizada.

00:03:12.267 --> 00:03:14.333
A explicação é simples.

00:03:14.367 --> 00:03:16.167
Se voltarmos
à classe Person,

00:03:16.200 --> 00:03:20.467
notarão que não declarei
a variável count como static.

00:03:20.500 --> 00:03:24.100
Significa que pertence
ao objeto, não à classe.

00:03:24.133 --> 00:03:26.367
Como estou criando
um novo objeto,

00:03:26.400 --> 00:03:29.300
estou criando uma nova variável
chamada count,

00:03:29.333 --> 00:03:31.100
e acrescentando 1 a ela.

00:03:31.133 --> 00:03:35.900
Assim, cada objeto teria sua
própria variável count com o valor 1.

00:03:35.933 --> 00:03:40.733
Mas se eu acrescentar static
à variável count,

00:03:40.767 --> 00:03:44.300
esta variável agora pertence
à classe, não ao objeto,

00:03:44.333 --> 00:03:46.633
e sempre que eu chamar
o construtor,

00:03:46.667 --> 00:03:49.900
ele acrescenta 1
à mesma variável count.

00:03:49.933 --> 00:03:51.700
Se eu rodar agora,

00:03:51.733 --> 00:03:56.267
devo obter todos os números
entre 1 e 100, como esperava.

00:03:56.300 --> 00:03:59.133
Contar as instâncias
criadas de uma classe

00:03:59.167 --> 00:04:03.600
é um dos casos de usos mais comuns
para usar a palavra static.

00:04:03.633 --> 00:04:06.400
Por que não tentam
por vocês?

