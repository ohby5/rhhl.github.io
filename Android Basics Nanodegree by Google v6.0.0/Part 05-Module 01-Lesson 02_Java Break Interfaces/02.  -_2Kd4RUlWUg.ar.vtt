WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:05.833
الواجهة هي مثل مقدّمة أو مخطط لفئة متخيّلة.

00:00:05.933 --> 00:00:10.867
وظيفتها الوحيدة هي أن ترثها فئة أخرى.

00:00:10.967 --> 00:00:13.067
هي تحدّد ما ينبغي القيام به فقط،

00:00:13.167 --> 00:00:15.167
لكنها لا تحدد كيفية القيام به.

00:00:15.267 --> 00:00:18.467
بعبارة أخرى،
تدرج الواجهة الأساليب التي يجب تضمينها

00:00:18.567 --> 00:00:22.333
في الفئة، لكن من دون كود تطبيقي بتاتاً.

00:00:22.433 --> 00:00:28.467
وتقع مسؤولية تطبيق هذه الأساليب
على الفئات التي تطبّق تلك الواجهة.

00:00:28.567 --> 00:00:30.667
بمجرد تطبيق تلك الواجهة في فئة ما،

00:00:30.767 --> 00:00:34.200
يصبح بالإمكان البدء
بإنشاء مثيل للكائنات كالمعتاد.

00:00:34.300 --> 00:00:39.467
يعود سبب تقديم لغة Java للواجهات
إلى مشكلة التوارث المتعدد.

00:00:39.567 --> 00:00:43.300
يمكن توسعة فئة واحد من خلال فئات متعددة.

00:00:43.400 --> 00:00:47.933
لكن لا يُسمح لفئة فرعية
بأن تكون امتداداً لأكثر من فئة رئيسية واحدة.

00:00:48.033 --> 00:00:51.267
أما الواجهات لا تواجه هذا الحصر،

00:00:51.367 --> 00:00:55.933
ما يعني أن بإمكان فئة واحد تطبيق عدة واجهات،

00:00:56.033 --> 00:01:01.133
ما يسمح بوجود تصميم أكثر مرونة لكن
من دون وجود مشكلة الالتباس للوراثة المتعددة.

00:01:01.233 --> 00:01:03.100
لنتناول مثالاً على ذلك.

00:01:03.200 --> 00:01:07.067
تخيّل أنك مسؤول عن تطبيق فئة تسمى Caravan.

00:01:07.167 --> 00:01:10.200
نعلم أن الكارافان هو نصف سيارة ونصف منزل.

00:01:10.300 --> 00:01:13.500
لكن إذا كان لديك فئة لسيارة وفئة لمنزل،

00:01:13.600 --> 00:01:17.533
نعلم أنه لا يُسمح لك
بمدّ كلتا الفئتين في آن واحد.

00:01:17.633 --> 00:01:20.733
حل جيد لهذه المشكلة هو استخدام الواجهات.

00:01:20.833 --> 00:01:24.467
من الواجهات المناسبة
واجهة اسمها Movable مثلاً،

00:01:24.567 --> 00:01:28.400
وهي تعرف الأساليب
التي يجب أن يتضمّنها أي فئة تتحرّك،

00:01:28.500 --> 00:01:30.400
مثل فئة vehicle على سبيل المثال.

00:01:30.500 --> 00:01:33.933
وهناك واجهة أخرى مناسبة وهي واجهة Habitable،

00:01:34.033 --> 00:01:39.200
وهي واجهة تعرّف كافة الأساليب
التي ستتضمنها أي فئة يمكن السكن فيها.

00:01:39.300 --> 00:01:41.167
بعد أن عرّفنا هاتين الواجهتين،

00:01:41.267 --> 00:01:45.733
يمكننا تطبيقهما معاً في الوقت ذاته
ضمن فئة Caravan.

00:01:45.833 --> 00:01:47.833
لنلقِ نظرة على كيفية كتابة ذلك في كود Java.

00:01:47.933 --> 00:01:51.667
إنشاء واجهة في لغة Java يشبه كثيراً إنشاء فئة.

00:01:51.767 --> 00:01:54.767
نستبدل فقط الكلمة الرئيسية class
بالكلمة الرئيسية interface.

00:01:54.867 --> 00:01:56.833
أما داخل الواجهة، كما ترون،

00:01:56.933 --> 00:02:01.633
قمنا بوضع أسطر تعريف الأسلوب
لكن من دون أي كود تطبيقي،

00:02:01.733 --> 00:02:05.300
لأن هذا يقع على عاتق الفئة
التي ستطبّق تلك الواجهة.

00:02:05.400 --> 00:02:07.400
والأمر نفسه مع واجهة habitable،

00:02:07.500 --> 00:02:11.133
وهي في هذه الحالة تتضمّن أسلوب canFit فقط.

00:02:11.233 --> 00:02:13.167
بعد أن أنشأنا كلتا الواجهتين،

00:02:13.267 --> 00:02:16.067
يمكننا البدء بتطبيق فئة Caravan،

00:02:16.167 --> 00:02:20.600
وهي تطبّق كلاً من الواجهتين Habitable وMovable.

00:02:20.700 --> 00:02:22.467
لاحظوا أنني استخدمت
الكلمة الرئيسية implements هنا

00:02:22.567 --> 00:02:26.933
مقارنة مع الكلمة الرئيسية extends
عند الوراثة من الفئات.

00:02:27.033 --> 00:02:30.467
إن الكلمة الرئيسية implements
هي التي تُستخدم عند الوراثة من الواجهات.

00:02:30.567 --> 00:02:32.300
بعد أن طبّقنا هاتين الواجهتين،

00:02:32.400 --> 00:02:37.867
يتوجب علينا تطبيق الكود
لكل أسلوب متضمَن في كلتا الواجهتين،

00:02:37.967 --> 00:02:40.667
مثل أسلوب move
الذي كان مُتضمناً في واجهة Movable،

00:02:40.767 --> 00:02:44.833
وأسلوب canFit
الذي كان مُتضمناً في واجهة Habitable.

00:02:44.933 --> 00:02:49.667
إذا كان هناك أي أسلوب في أي من هاتين
الواجهتين لم يتم تطبيقه في فئة Caravan،

00:02:49.767 --> 00:02:51.900
سينجم عن ذلك خطأ في التحويل البرمجي.

00:02:52.000 --> 00:02:55.400
لاحظوا أن وراثة الواجهات لم تجنبنا

00:02:55.500 --> 00:02:59.233
من إعادة كتابة أي كود
كما فعلنا سابقاً مع الفئات الموسّعة.

00:02:59.333 --> 00:03:02.067
وهذا لأن الواجهات ليست موجودة لمساعدتنا

00:03:02.167 --> 00:03:05.700
في تقليص حجم الكود
بقدر ما أنها تفرض تصميماً جيداً.

00:03:05.800 --> 00:03:12.433
يفرض إنشاء الواجهات على أي فئة ستستخدمها
أن تستخدم عدداً محدداً من الأساليب.

00:03:12.533 --> 00:03:13.700
هذا يعني أنه لاحقاً،

00:03:13.800 --> 00:03:15.767
إذا ألقيتم نظرة على أي فئة

00:03:15.867 --> 00:03:18.833
تطبّق واجهة معينة
من دون النظر إلى كود تلك الفئة،

00:03:18.933 --> 00:03:23.867
فيمكنك أن تجزموا بأنها ستتضمّن
كافة تلك الأساليب الموجودة في تلك الواجهة.

00:03:23.967 --> 00:03:25.700
لنلخّص كل ما سبق،

00:03:25.800 --> 00:03:28.800
نعلم أن الواجهات تحدد ما يجب على الفئة فعله،

00:03:28.900 --> 00:03:30.433
لكن ليس كيفية القيام به.

00:03:30.533 --> 00:03:34.300
رأينا أن إنشاء واجهة يشبه كثيراً إنشاء فئة،

00:03:34.400 --> 00:03:36.833
ونعلم أن الوظيفة الوحيدة للواجهة

00:03:36.933 --> 00:03:40.000
هي أن يتم تطبيقها من قبل فئة واحد أو أكثر.

00:03:40.100 --> 00:03:44.367
أي أنه لا يسمح لكم بإنشاء مثيل
أو كائن من الواجهة مباشرة.

00:03:44.467 --> 00:03:46.300
عليك أولاً تطبيقها من خلال فئة ما،

00:03:46.400 --> 00:03:48.367
ثم يمكنكم إنشاء كائنات من ذلك.

00:03:48.467 --> 00:03:51.133
وقد رأينا أن لا علاقة له بتقليص تكرار الكود.

00:03:51.233 --> 00:03:53.967
بل يتعلق أكثر بفرض تصميم جيد.

