WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.769
Objects that are created from a class don't really last forever.

00:00:04.769 --> 00:00:07.080
Typically, you'd create an object from a class,

00:00:07.080 --> 00:00:09.254
fill its fields with some values,

00:00:09.255 --> 00:00:11.970
and maybe create another object and fill its fields

00:00:11.970 --> 00:00:14.685
with some different values, but then eventually,

00:00:14.685 --> 00:00:17.640
both those objects will get destroyed,

00:00:17.640 --> 00:00:21.630
including every single value stored in those fields.

00:00:21.629 --> 00:00:26.379
Typically, that would happen whenever the scope of that object ends.

00:00:26.379 --> 00:00:28.875
For example here, inside this method,

00:00:28.875 --> 00:00:31.170
I've created the variable myItem,

00:00:31.170 --> 00:00:34.429
which is an object of the type class Item.

00:00:34.429 --> 00:00:35.774
Once this method ends,

00:00:35.774 --> 00:00:38.560
this myItem variable doesn't exist anymore,

00:00:38.560 --> 00:00:41.929
including all the values of all the field inside it.

00:00:41.929 --> 00:00:45.359
This kind of makes sense because you don't really need the values of

00:00:45.359 --> 00:00:50.215
a field inside an object that you can't even access anymore.

00:00:50.215 --> 00:00:52.605
However, in some rare occasions,

00:00:52.604 --> 00:00:54.659
you might want to store the value of

00:00:54.659 --> 00:00:59.009
a certain field even if there are no objects for that class.

00:00:59.009 --> 00:01:04.676
In that case, you need to add the keyword static when declaring this field.

00:01:04.677 --> 00:01:08.460
Declaring a field as static means that these values are no longer

00:01:08.459 --> 00:01:13.210
stored within the object itself but within the class instead.

00:01:13.210 --> 00:01:17.944
Meaning that all objects of the class will share that same exact value.

00:01:17.944 --> 00:01:22.349
And then even if every single object of the class has been destroyed,

00:01:22.349 --> 00:01:25.924
the value is still stored within the class.

00:01:25.924 --> 00:01:29.170
If you decide to create a new object of that same class,

00:01:29.170 --> 00:01:33.250
then it will end up using the same value that was stored in the class.

00:01:33.250 --> 00:01:37.269
Notice however, that static here doesn't mean that the value doesn't change.

00:01:37.269 --> 00:01:39.189
In fact, if that value does change,

00:01:39.189 --> 00:01:43.084
it will update it in every single object of that class again.

00:01:43.084 --> 00:01:48.129
Now because static fields belong to classes instead of object,

00:01:48.129 --> 00:01:51.429
Java allows you to access a static field directly from

00:01:51.430 --> 00:01:56.295
the class instead of having to create an object of that class.

00:01:56.295 --> 00:01:59.150
For example here, I can access the power field

00:01:59.150 --> 00:02:03.160
from the class item directly and set it to a value.

00:02:03.159 --> 00:02:05.664
Let's have a look at a coding example.

00:02:05.665 --> 00:02:09.230
In this example, I've created a class called Person,

00:02:09.229 --> 00:02:14.569
and I'm trying to keep count of every single object that was created from the class.

00:02:14.569 --> 00:02:18.354
So, I've added this public int field called count,

00:02:18.354 --> 00:02:20.000
and inside the constructor,

00:02:20.000 --> 00:02:21.694
which is just the default constructor,

00:02:21.694 --> 00:02:23.989
I'm incrementing that count by one,

00:02:23.990 --> 00:02:27.230
which means that every time I create a new object of Person,

00:02:27.229 --> 00:02:30.914
it will add one to that count variable.

00:02:30.914 --> 00:02:33.109
Now if you go to the main method,

00:02:33.110 --> 00:02:35.630
you could see that I've created this loop that

00:02:35.629 --> 00:02:38.030
starts from zero and counts all the way to 100,

00:02:38.030 --> 00:02:39.544
and inside that loop,

00:02:39.544 --> 00:02:43.069
I'm creating a new instance of that class Person.

00:02:43.069 --> 00:02:45.185
And every time I create an object,

00:02:45.185 --> 00:02:48.895
I print out the count value installed inside it.

00:02:48.895 --> 00:02:50.255
So when I run this code,

00:02:50.254 --> 00:02:53.629
I would expect that every time I'm creating a new Person object,

00:02:53.629 --> 00:02:55.604
it's adding one to the counter,

00:02:55.604 --> 00:02:58.219
and by the time we reach to the hundredth Person,

00:02:58.219 --> 00:03:00.155
the count value would be 100.

00:03:00.155 --> 00:03:03.550
So I'm expecting to see the numbers between one and 100.

00:03:03.550 --> 00:03:05.615
However, if I do run this code,

00:03:05.615 --> 00:03:08.420
it seems like I'm just getting a bunch of ones,

00:03:08.419 --> 00:03:12.199
which means that this count variable is not being updated at all.

00:03:12.199 --> 00:03:14.409
The explanation for that is pretty simple.

00:03:14.409 --> 00:03:16.145
If we go back to the Person class,

00:03:16.145 --> 00:03:20.045
you'd notice that I haven't declared this count variable as static,

00:03:20.044 --> 00:03:24.199
which means that it belongs to the object not the class.

00:03:24.199 --> 00:03:26.629
And because I'm creating a new object every time,

00:03:26.629 --> 00:03:31.085
it means I'm creating a new variable called count and I'm only adding one to it.

00:03:31.085 --> 00:03:35.840
So every single object would have its own count variable that has the value one.

00:03:35.840 --> 00:03:40.784
However, if I do add the static keyword to our count variable here,

00:03:40.784 --> 00:03:44.384
this means that this variable now belongs to the class rather than the object.

00:03:44.384 --> 00:03:46.519
And every time I'm calling the constructor,

00:03:46.520 --> 00:03:49.784
it's adding one to the same variable count.

00:03:49.784 --> 00:03:51.560
So if I run this now,

00:03:51.560 --> 00:03:56.164
I should get all the numbers between one and 100 like I expected earlier.

00:03:56.164 --> 00:03:59.659
Counting the instances that were created from a class is one

00:03:59.659 --> 00:04:03.500
of the very common use cases for using the static keyword.

00:04:03.500 --> 00:04:06.210
So why don't you go ahead and try this yourself as well.

