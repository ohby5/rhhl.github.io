WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:04.667
الكائنات التي يتم إنشاؤها من فئة
لا تدوم إلى الأبد.

00:00:04.767 --> 00:00:06.967
عادة ما يتم إنشاء كائن من فئة،

00:00:07.067 --> 00:00:09.133
وملء خاناته ببعض القيم،

00:00:09.233 --> 00:00:13.567
ثم إنشاء كائن آخر وملء خاناته بقيم مختلفة،

00:00:13.667 --> 00:00:17.533
لكن سيتم تدمير كلا الكائنين في النهاية،

00:00:17.633 --> 00:00:21.500
ويشمل ذلك كل قيمة مخزّنة داخل تلك الخانات.

00:00:21.600 --> 00:00:26.267
عادة ما يحدث ذلك عندما ينتهي نطاق ذلك الكائن.

00:00:26.367 --> 00:00:28.733
على سبيل المثال، هنا في هذا الأسلوب،

00:00:28.833 --> 00:00:31.033
أنشأتُ المتغيّر myItem،

00:00:31.133 --> 00:00:34.300
وهو كائن من نوع الفئة Item.

00:00:34.400 --> 00:00:35.633
بمجرد انتهاء هذا الأسلوب،

00:00:35.733 --> 00:00:38.433
فإن متغيّر myItem هذا سينتهي من الوجود،

00:00:38.533 --> 00:00:41.800
بما في ذلك كافة القيم
الموجودة في جميع الخانات التي في داخله.

00:00:41.900 --> 00:00:45.200
هذا منطقي بعض الشيء
لأننا لا نحتاج القيم الموجودة

00:00:45.300 --> 00:00:50.067
في خانة داخل كائن
لا يمكننا الوصول إليه بعد الآن.

00:00:50.167 --> 00:00:52.467
لكن في بعض الحالات النادرة،

00:00:52.567 --> 00:00:58.833
قد ترغب في تخزين قيمة خانة محددة
حتى لو لم تكن هناك كائنات لتلك الفئة.

00:00:58.933 --> 00:01:04.567
في تلك الحالة، عليك إضافة
الكلمة الرئيسية static عند تعريف تلك الخانة.

00:01:04.667 --> 00:01:08.367
تعريف خانة ما على أنها static
يعني أن هذه القيم

00:01:08.467 --> 00:01:13.100
لم تعد مخزّنة داخل الكائن نفسه
وإنما داخل الفئة،

00:01:13.200 --> 00:01:17.833
بمعنى أن جميع الكائنات لتلك الفئة
ستشترك في تلك القيمة المحددة.

00:01:17.933 --> 00:01:22.233
بالتالي، حتى لو تم تدمير
كافة كائنات تلك الفئة،

00:01:22.333 --> 00:01:25.800
تبقى تلك القيمة مخزنة داخل الفئة.

00:01:25.900 --> 00:01:29.033
إذا قررتم إنشاء كائن جديد لتلك الفئة بنفسها،

00:01:29.133 --> 00:01:33.133
فسيستخدم القيمة نفسها
المخزنة داخل الفئة في النهاية.

00:01:33.233 --> 00:01:37.133
لكن لاحظوا أن static هنا
لا تعني أن القيمة لا تتغيّر.

00:01:37.233 --> 00:01:39.067
في الواقع، إذا تغيّرت تلك القيمة بالفعل،

00:01:39.167 --> 00:01:42.933
فسيتم تحديثها في كل كائن لتلك الفئة مجدداً.

00:01:43.033 --> 00:01:48.000
لأن الخانات من نوع static
تنتمي إلى الفئات بدلاً من الكائنات،

00:01:48.100 --> 00:01:51.300
فإن لغة Java تسمح لكم
بالوصول إلى حقل من نوع static

00:01:51.400 --> 00:01:56.133
من داخل الفئة مباشرة بدلاً من أن يكون
عليكم إنشاء كائن من تلك الفئة.

00:01:56.233 --> 00:01:59.000
هنا مثلاً، يمكنني الوصول إلى خانة power

00:01:59.100 --> 00:02:03.067
من خلال الفئة Item مباشرة وتحديد قيمة لها.

00:02:03.167 --> 00:02:05.567
لنتناول مثالاً برمجياً.

00:02:05.667 --> 00:02:09.133
في هذا المثال، أنشأتُ فئة تُدعى Person،

00:02:09.233 --> 00:02:14.467
وأحاول عدّ كل كائن تم إنشاؤه من تلك الفئة.

00:02:14.567 --> 00:02:18.233
لذا، أضفتُ حقلاً من نوع public int يُدعى count،

00:02:18.333 --> 00:02:19.900
وداخل المنشئ،

00:02:20.000 --> 00:02:21.600
وهو المنشئ الافتراضي لا أكثر،

00:02:21.700 --> 00:02:23.867
أقوم بزيادة قيمة العدد بواحد،

00:02:23.967 --> 00:02:27.100
ما يعني أنه كلما أنشأتُ كائناً جديداً من Person،

00:02:27.200 --> 00:02:30.800
سيزيد 1 إلى المتغيّر count.

00:02:30.900 --> 00:02:33.000
والآن إذا انتقلتم إلى الأسلوب الرئيسي،

00:02:33.100 --> 00:02:35.500
فيمكنكم أن تروا أنني أنشأتُ هذه الحلقة

00:02:35.600 --> 00:02:37.900
والتي تبدأ من صفر وتواصل العد وصولاً إلى 100.

00:02:38.000 --> 00:02:39.433
وفي داخل تلك الحلقة،

00:02:39.533 --> 00:02:42.933
أنشئ مثيلاً جديداً من فئة Person تلك.

00:02:43.033 --> 00:02:45.067
وكلما أنشئ كائناً،

00:02:45.167 --> 00:02:48.767
أطبع قيمة count المحفوظة داخله.

00:02:48.867 --> 00:02:50.133
فعندما أنفذ هذا الكود،

00:02:50.233 --> 00:02:53.500
أتوقع أنه كلما أنشئ كائناً من Person،

00:02:53.600 --> 00:02:55.467
فإن ذلك يزيد 1 إلى العداد.

00:02:55.567 --> 00:02:58.067
وعندما نصل إلى الكائن رقم 100 من Person،

00:02:58.167 --> 00:03:00.067
ستكون قيمة count عندئذ مساوية لـ100.

00:03:00.167 --> 00:03:03.467
لذا، أتوقع أن أرى الأعداد بين 1 و100.

00:03:03.567 --> 00:03:05.533
لكن إذا نفّذتُ هذا الكود بالفعل،

00:03:05.633 --> 00:03:08.333
فيبدو أنني أحصل على مجموعة من الآحاد فحسب،

00:03:08.433 --> 00:03:12.100
ما يعني أن متغيّر count هذا
لا يخضع للتحديث مطلقاً.

00:03:12.200 --> 00:03:14.300
وتفسير ذلك بسيط جداً.

00:03:14.400 --> 00:03:16.033
إذا عدنا إلى فئة Person،

00:03:16.133 --> 00:03:19.933
فستلاحظون أنني لم أعرّف متغيّر count
على أنه من نوع static،

00:03:20.033 --> 00:03:24.100
وهذا يعني أنه تابع للكائن وليس للفئة.

00:03:24.200 --> 00:03:26.533
ولأنني أقوم بإنشاء كائن جديد في كل مرة،

00:03:26.633 --> 00:03:30.967
فهذا معناه أنني أنشئ متغيّراً جديداً
اسمه count وأضيف إليه 1 فقط.

00:03:31.067 --> 00:03:35.733
فسيكون لكل كائن
متغيّر count خاص به يحمل القيمة 1.

00:03:35.833 --> 00:03:40.667
لكن إذا أضفتُ كلمة static إلى متغيّر count هنا،

00:03:40.767 --> 00:03:44.267
فهذا معناه أن هذا المتغيّر
ينتمي الآن إلى الفئة بدلاً من الكائن.

00:03:44.367 --> 00:03:46.400
وكلما أستدعي المنشئ،

00:03:46.500 --> 00:03:49.667
يضيف 1 إلى المتغيّر count نفسه.

00:03:49.767 --> 00:03:51.433
فإذا نفّذتُ هذا الآن،

00:03:51.533 --> 00:03:56.033
ينبغفي أن أحصل على كافة الأعداد بين 1 و100
كما توقعتُ منذ قليل.

00:03:56.133 --> 00:03:59.533
عدّ المثيلات التي تم إنشاؤها من فئة ما

00:03:59.633 --> 00:04:03.433
هو واحد من أكثر الاستخدامات شيوعاً
لكلمة static.

00:04:03.533 --> 00:04:06.233
فما رأيكم أن تجرّبوا هذا بأنفسكم أيضاً؟

